
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000235e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000054b4  080237e4  080237e4  000337e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028c98  08028c98  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  08028c98  08028c98  00038c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028ca0  08028ca0  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028ca0  08028ca0  00038ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028ca4  08028ca4  00038ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08028ca8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08028e4c  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08028eec  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00014038  200002e4  08028f8c  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2001431c  08028f8c  0004431c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003790d  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008349  00000000  00000000  00077c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002488  00000000  00000000  0007ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021b8  00000000  00000000  000823f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000430a0  00000000  00000000  000845a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004541a  00000000  00000000  000c7648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013ba68  00000000  00000000  0010ca62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002484ca  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a08c  00000000  00000000  0024851c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	080237cc 	.word	0x080237cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	080237cc 	.word	0x080237cc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	080237e4 	.word	0x080237e4
 8000a74:	080237f0 	.word	0x080237f0
 8000a78:	08023800 	.word	0x08023800
 8000a7c:	08023810 	.word	0x08023810
 8000a80:	08023824 	.word	0x08023824
 8000a84:	08023838 	.word	0x08023838
 8000a88:	0802384c 	.word	0x0802384c
 8000a8c:	08023858 	.word	0x08023858
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a f997 	bl	801add8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f021 fcaf 	bl	8022418 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bcbc 	.word	0x2000bcbc
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 f86b 	bl	8017bb8 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 f85b 	bl	8017bb8 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 f84a 	bl	8017bb8 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fa72 	bl	8022064 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e f977 	bl	800ee78 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 f923 	bl	8014de0 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 f8d2 	bl	8014d60 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fb28 	bl	8022234 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 fb9c 	bl	802236c <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 faf2 	bl	8022234 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 fb6d 	bl	802236c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fac0 	bl	8022234 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fb59 	bl	802236c <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 faa3 	bl	8022234 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fa95 	bl	8022234 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fb2e 	bl	802236c <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fa75 	bl	8022234 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fa67 	bl	8022234 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fb00 	bl	802236c <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fa42 	bl	8022234 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fa20 	bl	8022234 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fa07 	bl	8022234 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 f9f9 	bl	8022234 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 f9eb 	bl	8022234 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fa83 	bl	802236c <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fe01 	bl	800fa7c <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a07c 	.word	0x2000a07c
 8000e88:	08023860 	.word	0x08023860
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08023878 	.word	0x08023878
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	080238b8 	.word	0x080238b8
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	080238cc 	.word	0x080238cc
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	080238e8 	.word	0x080238e8
 8000eac:	08023904 	.word	0x08023904
 8000eb0:	2000195c 	.word	0x2000195c
 8000eb4:	08023914 	.word	0x08023914
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08023928 	.word	0x08023928
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08023938 	.word	0x08023938
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	08023954 	.word	0x08023954
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08023964 	.word	0x08023964
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 f86a 	bl	8021ff4 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f021 f87d 	bl	8022064 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00e fb6a 	bl	800f650 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00e fb1b 	bl	800f628 <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d014      	beq.n	800102e <Process_Hitachi_Packets_Eth+0xe2>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d907      	bls.n	800101c <Process_Hitachi_Packets_Eth+0xd0>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8ad 	bl	8001174 <Convert_Data_format>
 800101a:	e005      	b.n	8001028 <Process_Hitachi_Packets_Eth+0xdc>
		}
		else
		{
			printf("Minimum packet length not met Received Length:%u\n",Traverser);
 800101c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <Process_Hitachi_Packets_Eth+0xec>)
 8001024:	f021 f906 	bl	8022234 <iprintf>
		}
		Traverser = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 800102e:	bf00      	nop
 8001030:	3788      	adds	r7, #136	; 0x88
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080239a0 	.word	0x080239a0

0800103c <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0a2      	sub	sp, #136	; 0x88
 8001040:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	227c      	movs	r2, #124	; 0x7c
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f021 f805 	bl	8022064 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <Process_Hitachi_Packets_Com+0x12c>)
 8001068:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800106c:	2b00      	cmp	r3, #0
 800106e:	d074      	beq.n	800115a <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <Process_Hitachi_Packets_Com+0x130>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f00d feff 	bl	800ee78 <HAL_Elaps_Ticks>
 800107a:	4603      	mov	r3, r0
 800107c:	2b13      	cmp	r3, #19
 800107e:	d96e      	bls.n	800115e <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001080:	e04a      	b.n	8001118 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001082:	2003      	movs	r0, #3
 8001084:	f013 feac 	bl	8014de0 <Com_Get_Byte>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800108e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001092:	2b7e      	cmp	r3, #126	; 0x7e
 8001094:	d90a      	bls.n	80010ac <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001096:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	4619      	mov	r1, r3
 800109e:	4834      	ldr	r0, [pc, #208]	; (8001170 <Process_Hitachi_Packets_Com+0x134>)
 80010a0:	f021 f8c8 	bl	8022234 <iprintf>
			Traverser = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 80010aa:	e03d      	b.n	8001128 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 80010ac:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80010b0:	2bf4      	cmp	r3, #244	; 0xf4
 80010b2:	d002      	beq.n	80010ba <Process_Hitachi_Packets_Com+0x7e>
 80010b4:	2bf6      	cmp	r3, #246	; 0xf6
 80010b6:	d00c      	beq.n	80010d2 <Process_Hitachi_Packets_Com+0x96>
 80010b8:	e01b      	b.n	80010f2 <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c4:	3388      	adds	r3, #136	; 0x88
 80010c6:	443b      	add	r3, r7
 80010c8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010cc:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010d0:	e01e      	b.n	8001110 <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010dc:	3388      	adds	r3, #136	; 0x88
 80010de:	443b      	add	r3, r7
 80010e0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010e4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010f0:	e00e      	b.n	8001110 <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001104:	3388      	adds	r3, #136	; 0x88
 8001106:	443b      	add	r3, r7
 8001108:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800110c:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8001110:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001114:	2b00      	cmp	r3, #0
 8001116:	d106      	bne.n	8001126 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001118:	2003      	movs	r0, #3
 800111a:	f013 fe21 	bl	8014d60 <Com_DataReady>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1ae      	bne.n	8001082 <Process_Hitachi_Packets_Com+0x46>
 8001124:	e000      	b.n	8001128 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001126:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001128:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800112c:	2b00      	cmp	r3, #0
 800112e:	d017      	beq.n	8001160 <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 8001130:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d906      	bls.n	8001146 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001138:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f817 	bl	8001174 <Convert_Data_format>
		}
		Traverser = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f020 ff86 	bl	8022064 <memset>
 8001158:	e002      	b.n	8001160 <Process_Hitachi_Packets_Com+0x124>
		return;
 800115a:	bf00      	nop
 800115c:	e000      	b.n	8001160 <Process_Hitachi_Packets_Com+0x124>
		return;
 800115e:	bf00      	nop
	}
}
 8001160:	3788      	adds	r7, #136	; 0x88
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000304 	.word	0x20000304
 800116c:	2000a078 	.word	0x2000a078
 8001170:	080239d4 	.word	0x080239d4

08001174 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a4      	sub	sp, #144	; 0x90
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	227c      	movs	r2, #124	; 0x7c
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f020 ff69 	bl	8022064 <memset>
	uint16_t des_index=0,src_index=0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001198:	2300      	movs	r3, #0
 800119a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800119e:	2300      	movs	r3, #0
 80011a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011aa:	e034      	b.n	8001216 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 80011ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2bf0      	cmp	r3, #240	; 0xf0
 80011b8:	d118      	bne.n	80011ec <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	7819      	ldrb	r1, [r3, #0]
 80011c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011c8:	3301      	adds	r3, #1
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011d4:	430a      	orrs	r2, r1
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	3390      	adds	r3, #144	; 0x90
 80011da:	443b      	add	r3, r7
 80011dc:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011e4:	3301      	adds	r3, #1
 80011e6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011ea:	e00a      	b.n	8001202 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	441a      	add	r2, r3
 80011f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	3390      	adds	r3, #144	; 0x90
 80011fc:	443b      	add	r3, r7
 80011fe:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 8001202:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001206:	3301      	adds	r3, #1
 8001208:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800120c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001210:	3301      	adds	r3, #1
 8001212:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	b29b      	uxth	r3, r3
 800121a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800121e:	429a      	cmp	r2, r3
 8001220:	d3c4      	bcc.n	80011ac <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 8001222:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f805 	bl	800123c <EI_Data_Analyzer>
}
 8001232:	bf00      	nop
 8001234:	3790      	adds	r7, #144	; 0x90
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
 8001250:	2300      	movs	r3, #0
 8001252:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 800125c:	f014 f8e8 	bl	8015430 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001262:	4ba7      	ldr	r3, [pc, #668]	; (8001500 <EI_Data_Analyzer+0x2c4>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d111      	bne.n	800128e <EI_Data_Analyzer+0x52>
 800126a:	f014 f8e1 	bl	8015430 <HAL_GetTick>
 800126e:	4603      	mov	r3, r0
 8001270:	f242 720f 	movw	r2, #9999	; 0x270f
 8001274:	4293      	cmp	r3, r2
 8001276:	d90a      	bls.n	800128e <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001278:	48a2      	ldr	r0, [pc, #648]	; (8001504 <EI_Data_Analyzer+0x2c8>)
 800127a:	f021 f877 	bl	802236c <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800127e:	49a2      	ldr	r1, [pc, #648]	; (8001508 <EI_Data_Analyzer+0x2cc>)
 8001280:	48a2      	ldr	r0, [pc, #648]	; (800150c <EI_Data_Analyzer+0x2d0>)
 8001282:	f7fe ffdd 	bl	8000240 <strcmp>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 81a1 	bne.w	80015d0 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3303      	adds	r3, #3
 8001292:	461a      	mov	r2, r3
 8001294:	2110      	movs	r1, #16
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff f9bc 	bl	8000614 <ExtractBits>
 800129c:	4603      	mov	r3, r0
 800129e:	b29b      	uxth	r3, r3
 80012a0:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	e00b      	b.n	80012bc <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	4a9a      	ldr	r2, [pc, #616]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 80012a8:	3366      	adds	r3, #102	; 0x66
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d009      	beq.n	80012ca <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	3301      	adds	r3, #1
 80012ba:	77fb      	strb	r3, [r7, #31]
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 80012be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c2:	7ffa      	ldrb	r2, [r7, #31]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3ed      	bcc.n	80012a4 <EI_Data_Analyzer+0x68>
 80012c8:	e000      	b.n	80012cc <EI_Data_Analyzer+0x90>
		{
			break;
 80012ca:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012cc:	4b90      	ldr	r3, [pc, #576]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 80012ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d2:	7ffa      	ldrb	r2, [r7, #31]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d309      	bcc.n	80012ec <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012d8:	4b8e      	ldr	r3, [pc, #568]	; (8001514 <EI_Data_Analyzer+0x2d8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	f040 8179 	bne.w	80015d4 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012e2:	6939      	ldr	r1, [r7, #16]
 80012e4:	488c      	ldr	r0, [pc, #560]	; (8001518 <EI_Data_Analyzer+0x2dc>)
 80012e6:	f020 ffa5 	bl	8022234 <iprintf>
		}
		return;
 80012ea:	e173      	b.n	80015d4 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	461a      	mov	r2, r3
 80012f2:	2110      	movs	r1, #16
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff f98d 	bl	8000614 <ExtractBits>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	4a83      	ldr	r2, [pc, #524]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 8001304:	3370      	adds	r3, #112	; 0x70
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	429a      	cmp	r2, r3
 8001310:	d012      	beq.n	8001338 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 8001312:	4882      	ldr	r0, [pc, #520]	; (800151c <EI_Data_Analyzer+0x2e0>)
 8001314:	f021 f82a 	bl	802236c <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	4881      	ldr	r0, [pc, #516]	; (8001520 <EI_Data_Analyzer+0x2e4>)
 800131c:	f020 ff8a 	bl	8022234 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8001320:	7ffb      	ldrb	r3, [r7, #31]
 8001322:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 8001324:	3370      	adds	r3, #112	; 0x70
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	461a      	mov	r2, r3
 800132e:	6939      	ldr	r1, [r7, #16]
 8001330:	487c      	ldr	r0, [pc, #496]	; (8001524 <EI_Data_Analyzer+0x2e8>)
 8001332:	f020 ff7f 	bl	8022234 <iprintf>
		return;
 8001336:	e14e      	b.n	80015d6 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800133c:	4b7a      	ldr	r3, [pc, #488]	; (8001528 <EI_Data_Analyzer+0x2ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 800134a:	4b77      	ldr	r3, [pc, #476]	; (8001528 <EI_Data_Analyzer+0x2ec>)
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	7fba      	ldrb	r2, [r7, #30]
 8001350:	429a      	cmp	r2, r3
 8001352:	d111      	bne.n	8001378 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001354:	4875      	ldr	r0, [pc, #468]	; (800152c <EI_Data_Analyzer+0x2f0>)
 8001356:	f021 f809 	bl	802236c <puts>
			printf("Received:%lu\n",Destin_Address);
 800135a:	69b9      	ldr	r1, [r7, #24]
 800135c:	4874      	ldr	r0, [pc, #464]	; (8001530 <EI_Data_Analyzer+0x2f4>)
 800135e:	f020 ff69 	bl	8022234 <iprintf>
			Destin_Address = 333;
 8001362:	f240 134d 	movw	r3, #333	; 0x14d
 8001366:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	4870      	ldr	r0, [pc, #448]	; (8001534 <EI_Data_Analyzer+0x2f8>)
 8001374:	f020 ff5e 	bl	8022234 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001378:	4b65      	ldr	r3, [pc, #404]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 800137a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137e:	7fba      	ldrb	r2, [r7, #30]
 8001380:	429a      	cmp	r2, r3
 8001382:	d307      	bcc.n	8001394 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001384:	486c      	ldr	r0, [pc, #432]	; (8001538 <EI_Data_Analyzer+0x2fc>)
 8001386:	f020 fff1 	bl	802236c <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	486b      	ldr	r0, [pc, #428]	; (800153c <EI_Data_Analyzer+0x300>)
 800138e:	f020 ff51 	bl	8022234 <iprintf>
		return;
 8001392:	e120      	b.n	80015d6 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001394:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <EI_Data_Analyzer+0x2d8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d121      	bne.n	80013e0 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	4a68      	ldr	r2, [pc, #416]	; (8001540 <EI_Data_Analyzer+0x304>)
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d002      	beq.n	80013ac <EI_Data_Analyzer+0x170>
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d004      	beq.n	80013b4 <EI_Data_Analyzer+0x178>
 80013aa:	e007      	b.n	80013bc <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 80013ac:	4865      	ldr	r0, [pc, #404]	; (8001544 <EI_Data_Analyzer+0x308>)
 80013ae:	f020 ffdd 	bl	802236c <puts>
			break;
 80013b2:	e015      	b.n	80013e0 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013b4:	4864      	ldr	r0, [pc, #400]	; (8001548 <EI_Data_Analyzer+0x30c>)
 80013b6:	f020 ffd9 	bl	802236c <puts>
			break;
 80013ba:	e011      	b.n	80013e0 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	4a54      	ldr	r2, [pc, #336]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 80013c0:	4413      	add	r3, r2
 80013c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d103      	bne.n	80013d2 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013ca:	4860      	ldr	r0, [pc, #384]	; (800154c <EI_Data_Analyzer+0x310>)
 80013cc:	f020 ffce 	bl	802236c <puts>
 80013d0:	e006      	b.n	80013e0 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	4a5a      	ldr	r2, [pc, #360]	; (8001540 <EI_Data_Analyzer+0x304>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	4619      	mov	r1, r3
 80013da:	485d      	ldr	r0, [pc, #372]	; (8001550 <EI_Data_Analyzer+0x314>)
 80013dc:	f020 ff2a 	bl	8022234 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	4a5c      	ldr	r2, [pc, #368]	; (8001554 <EI_Data_Analyzer+0x318>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	7ffa      	ldrb	r2, [r7, #31]
 80013ea:	4955      	ldr	r1, [pc, #340]	; (8001540 <EI_Data_Analyzer+0x304>)
 80013ec:	5c8a      	ldrb	r2, [r1, r2]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d014      	beq.n	800141c <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4958      	ldr	r1, [pc, #352]	; (8001558 <EI_Data_Analyzer+0x31c>)
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	4957      	ldr	r1, [pc, #348]	; (800155c <EI_Data_Analyzer+0x320>)
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <EI_Data_Analyzer+0x304>)
 800140a:	5cd2      	ldrb	r2, [r2, r3]
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	4611      	mov	r1, r2
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <EI_Data_Analyzer+0x318>)
 8001412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001416:	4852      	ldr	r0, [pc, #328]	; (8001560 <EI_Data_Analyzer+0x324>)
 8001418:	f020 ffa8 	bl	802236c <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 800141c:	7ffa      	ldrb	r2, [r7, #31]
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	4947      	ldr	r1, [pc, #284]	; (8001540 <EI_Data_Analyzer+0x304>)
 8001422:	5c89      	ldrb	r1, [r1, r2]
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <EI_Data_Analyzer+0x328>)
 8001426:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001428:	7ffb      	ldrb	r3, [r7, #31]
 800142a:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <EI_Data_Analyzer+0x32c>)
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	4618      	mov	r0, r3
 8001432:	f00d fd21 	bl	800ee78 <HAL_Elaps_Ticks>
 8001436:	4602      	mov	r2, r0
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	4935      	ldr	r1, [pc, #212]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 800143c:	338a      	adds	r3, #138	; 0x8a
 800143e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001442:	429a      	cmp	r2, r3
 8001444:	d318      	bcc.n	8001478 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	4947      	ldr	r1, [pc, #284]	; (8001568 <EI_Data_Analyzer+0x32c>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4941      	ldr	r1, [pc, #260]	; (8001558 <EI_Data_Analyzer+0x31c>)
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	493f      	ldr	r1, [pc, #252]	; (800155c <EI_Data_Analyzer+0x320>)
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <EI_Data_Analyzer+0x2d4>)
 8001468:	3366      	adds	r3, #102	; 0x66
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4619      	mov	r1, r3
 8001472:	483e      	ldr	r0, [pc, #248]	; (800156c <EI_Data_Analyzer+0x330>)
 8001474:	f020 fede 	bl	8022234 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001478:	7ffb      	ldrb	r3, [r7, #31]
 800147a:	493b      	ldr	r1, [pc, #236]	; (8001568 <EI_Data_Analyzer+0x32c>)
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001482:	2281      	movs	r2, #129	; 0x81
 8001484:	2100      	movs	r1, #0
 8001486:	483a      	ldr	r0, [pc, #232]	; (8001570 <EI_Data_Analyzer+0x334>)
 8001488:	f020 fdec 	bl	8022064 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	461a      	mov	r2, r3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4837      	ldr	r0, [pc, #220]	; (8001570 <EI_Data_Analyzer+0x334>)
 8001494:	f020 fdbe 	bl	8022014 <memcpy>
	Rx_Print_st.Size = Size;
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <EI_Data_Analyzer+0x334>)
 800149e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3307      	adds	r3, #7
 80014a6:	461a      	mov	r2, r3
 80014a8:	2108      	movs	r1, #8
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff f8b2 	bl	8000614 <ExtractBits>
 80014b0:	4603      	mov	r3, r0
 80014b2:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014b4:	7ffa      	ldrb	r2, [r7, #31]
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <EI_Data_Analyzer+0x338>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	440b      	add	r3, r1
 80014c2:	3303      	adds	r3, #3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	492b      	ldr	r1, [pc, #172]	; (8001578 <EI_Data_Analyzer+0x33c>)
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 fc17 	bl	8007d08 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	3b01      	subs	r3, #1
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d870      	bhi.n	80015c4 <EI_Data_Analyzer+0x388>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <EI_Data_Analyzer+0x2ac>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	0800157d 	.word	0x0800157d
 80014ec:	0800158d 	.word	0x0800158d
 80014f0:	0800159d 	.word	0x0800159d
 80014f4:	080015a5 	.word	0x080015a5
 80014f8:	080015c5 	.word	0x080015c5
 80014fc:	080015b5 	.word	0x080015b5
 8001500:	20000108 	.word	0x20000108
 8001504:	08023a00 	.word	0x08023a00
 8001508:	08023a40 	.word	0x08023a40
 800150c:	20000305 	.word	0x20000305
 8001510:	20000304 	.word	0x20000304
 8001514:	20000645 	.word	0x20000645
 8001518:	08023a4c 	.word	0x08023a4c
 800151c:	08023a88 	.word	0x08023a88
 8001520:	08023aa4 	.word	0x08023aa4
 8001524:	08023ac8 	.word	0x08023ac8
 8001528:	2000195c 	.word	0x2000195c
 800152c:	08023b00 	.word	0x08023b00
 8001530:	08023b24 	.word	0x08023b24
 8001534:	08023b34 	.word	0x08023b34
 8001538:	08023b44 	.word	0x08023b44
 800153c:	08023b78 	.word	0x08023b78
 8001540:	20001080 	.word	0x20001080
 8001544:	08023b98 	.word	0x08023b98
 8001548:	08023ba8 	.word	0x08023ba8
 800154c:	08023bb8 	.word	0x08023bb8
 8001550:	08023bd0 	.word	0x08023bd0
 8001554:	20000f7c 	.word	0x20000f7c
 8001558:	20000fa4 	.word	0x20000fa4
 800155c:	20000fcc 	.word	0x20000fcc
 8001560:	08023bf4 	.word	0x08023bf4
 8001564:	20001024 	.word	0x20001024
 8001568:	20001030 	.word	0x20001030
 800156c:	08023c0c 	.word	0x08023c0c
 8001570:	20001bf8 	.word	0x20001bf8
 8001574:	20001674 	.word	0x20001674
 8001578:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	b2d9      	uxtb	r1, r3
 8001580:	7fbb      	ldrb	r3, [r7, #30]
 8001582:	7ffa      	ldrb	r2, [r7, #31]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f82d 	bl	80015e4 <Init_Msg_extr>
		break;
 800158a:	e024      	b.n	80015d6 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	b2d9      	uxtb	r1, r3
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	7ffa      	ldrb	r2, [r7, #31]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 fbc3 	bl	8002d20 <Vital_Msg_extr>
		break;
 800159a:	e01c      	b.n	80015d6 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 800159c:	480f      	ldr	r0, [pc, #60]	; (80015dc <EI_Data_Analyzer+0x3a0>)
 800159e:	f020 fee5 	bl	802236c <puts>
		break;
 80015a2:	e018      	b.n	80015d6 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	7fbb      	ldrb	r3, [r7, #30]
 80015aa:	7ffa      	ldrb	r2, [r7, #31]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f003 fe61 	bl	8005274 <Status_Msg_Extr>
		break;
 80015b2:	e010      	b.n	80015d6 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	b2d9      	uxtb	r1, r3
 80015b8:	7fbb      	ldrb	r3, [r7, #30]
 80015ba:	7ffa      	ldrb	r2, [r7, #31]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f005 f861 	bl	8006684 <Service_Msg_Extr>
		break;
 80015c2:	e008      	b.n	80015d6 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <EI_Data_Analyzer+0x3a4>)
 80015ca:	f020 fe33 	bl	8022234 <iprintf>
		break;
 80015ce:	e002      	b.n	80015d6 <EI_Data_Analyzer+0x39a>
			return;
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <EI_Data_Analyzer+0x39a>
		return;
 80015d4:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08023c28 	.word	0x08023c28
 80015e0:	08023c4c 	.word	0x08023c4c

080015e4 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	70fb      	strb	r3, [r7, #3]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70bb      	strb	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 800160e:	f013 ff0f 	bl	8015430 <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001614:	2300      	movs	r3, #0
 8001616:	83fb      	strh	r3, [r7, #30]
 8001618:	2300      	movs	r3, #0
 800161a:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b05      	subs	r3, #5
 8001622:	b29b      	uxth	r3, r3
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f011 fb2a 	bl	8012c80 <CalculateDirectReverseCrc>
 800162c:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	3b05      	subs	r3, #5
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	441a      	add	r2, r3
 8001636:	8bbb      	ldrh	r3, [r7, #28]
 8001638:	2120      	movs	r1, #32
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ffea 	bl	8000614 <ExtractBits>
 8001640:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	429a      	cmp	r2, r3
 8001648:	d013      	beq.n	8001672 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800164a:	78bb      	ldrb	r3, [r7, #2]
 800164c:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <Init_Msg_extr+0x110>)
 800164e:	3366      	adds	r3, #102	; 0x66
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4619      	mov	r1, r3
 8001658:	4827      	ldr	r0, [pc, #156]	; (80016f8 <Init_Msg_extr+0x114>)
 800165a:	f020 fdeb 	bl	8022234 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800165e:	6939      	ldr	r1, [r7, #16]
 8001660:	4826      	ldr	r0, [pc, #152]	; (80016fc <Init_Msg_extr+0x118>)
 8001662:	f020 fde7 	bl	8022234 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001666:	6979      	ldr	r1, [r7, #20]
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <Init_Msg_extr+0x11c>)
 800166a:	f020 fde3 	bl	8022234 <iprintf>
		return;
 800166e:	f000 be32 	b.w	80022d6 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	4a23      	ldr	r2, [pc, #140]	; (8001704 <Init_Msg_extr+0x120>)
 8001676:	2101      	movs	r1, #1
 8001678:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 800167a:	78bb      	ldrb	r3, [r7, #2]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <Init_Msg_extr+0x124>)
 800167e:	2101      	movs	r1, #1
 8001680:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f103 021d 	add.w	r2, r3, #29
 8001688:	8bbb      	ldrh	r3, [r7, #28]
 800168a:	2110      	movs	r1, #16
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ffc1 	bl	8000614 <ExtractBits>
 8001692:	4603      	mov	r3, r0
 8001694:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001696:	78bb      	ldrb	r3, [r7, #2]
 8001698:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <Init_Msg_extr+0x110>)
 800169a:	33f4      	adds	r3, #244	; 0xf4
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	8b7a      	ldrh	r2, [r7, #26]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d03d      	beq.n	8001724 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <Init_Msg_extr+0x128>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80016b0:	78bb      	ldrb	r3, [r7, #2]
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <Init_Msg_extr+0x110>)
 80016b4:	3366      	adds	r3, #102	; 0x66
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4619      	mov	r1, r3
 80016be:	4814      	ldr	r0, [pc, #80]	; (8001710 <Init_Msg_extr+0x12c>)
 80016c0:	f020 fdb8 	bl	8022234 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016c4:	8b7b      	ldrh	r3, [r7, #26]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <Init_Msg_extr+0x130>)
 80016ca:	f020 fdb3 	bl	8022234 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <Init_Msg_extr+0x110>)
 80016d2:	33f4      	adds	r3, #244	; 0xf4
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	4619      	mov	r1, r3
 80016dc:	480e      	ldr	r0, [pc, #56]	; (8001718 <Init_Msg_extr+0x134>)
 80016de:	f020 fda9 	bl	8022234 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016e2:	490e      	ldr	r1, [pc, #56]	; (800171c <Init_Msg_extr+0x138>)
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <Init_Msg_extr+0x13c>)
 80016e6:	f7fe fdab 	bl	8000240 <strcmp>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01d      	beq.n	800172c <Init_Msg_extr+0x148>
		{
			return;
 80016f0:	f000 bdf1 	b.w	80022d6 <Init_Msg_extr+0xcf2>
 80016f4:	20000304 	.word	0x20000304
 80016f8:	08023c68 	.word	0x08023c68
 80016fc:	08023c84 	.word	0x08023c84
 8001700:	08023c94 	.word	0x08023c94
 8001704:	20000ff4 	.word	0x20000ff4
 8001708:	2000100c 	.word	0x2000100c
 800170c:	20001000 	.word	0x20001000
 8001710:	08023ca4 	.word	0x08023ca4
 8001714:	08023cdc 	.word	0x08023cdc
 8001718:	08023d00 	.word	0x08023d00
 800171c:	08023a40 	.word	0x08023a40
 8001720:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001724:	78bb      	ldrb	r3, [r7, #2]
 8001726:	4aab      	ldr	r2, [pc, #684]	; (80019d4 <Init_Msg_extr+0x3f0>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001732:	8bbb      	ldrh	r3, [r7, #28]
 8001734:	2108      	movs	r1, #8
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff6c 	bl	8000614 <ExtractBits>
 800173c:	4603      	mov	r3, r0
 800173e:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	4aa5      	ldr	r2, [pc, #660]	; (80019d8 <Init_Msg_extr+0x3f4>)
 8001744:	4413      	add	r3, r2
 8001746:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800174a:	7e7a      	ldrb	r2, [r7, #25]
 800174c:	429a      	cmp	r2, r3
 800174e:	d01f      	beq.n	8001790 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4aa1      	ldr	r2, [pc, #644]	; (80019d8 <Init_Msg_extr+0x3f4>)
 8001754:	3366      	adds	r3, #102	; 0x66
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4619      	mov	r1, r3
 800175e:	489f      	ldr	r0, [pc, #636]	; (80019dc <Init_Msg_extr+0x3f8>)
 8001760:	f020 fd68 	bl	8022234 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	4a9c      	ldr	r2, [pc, #624]	; (80019d8 <Init_Msg_extr+0x3f4>)
 8001768:	4413      	add	r3, r2
 800176a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800176e:	4619      	mov	r1, r3
 8001770:	489b      	ldr	r0, [pc, #620]	; (80019e0 <Init_Msg_extr+0x3fc>)
 8001772:	f020 fd5f 	bl	8022234 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001776:	7e7b      	ldrb	r3, [r7, #25]
 8001778:	4619      	mov	r1, r3
 800177a:	489a      	ldr	r0, [pc, #616]	; (80019e4 <Init_Msg_extr+0x400>)
 800177c:	f020 fd5a 	bl	8022234 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001780:	4999      	ldr	r1, [pc, #612]	; (80019e8 <Init_Msg_extr+0x404>)
 8001782:	489a      	ldr	r0, [pc, #616]	; (80019ec <Init_Msg_extr+0x408>)
 8001784:	f7fe fd5c 	bl	8000240 <strcmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 85a2 	bne.w	80022d4 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	4997      	ldr	r1, [pc, #604]	; (80019f0 <Init_Msg_extr+0x40c>)
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	4a95      	ldr	r2, [pc, #596]	; (80019f4 <Init_Msg_extr+0x410>)
 800179e:	2101      	movs	r1, #1
 80017a0:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 80017a2:	78bb      	ldrb	r3, [r7, #2]
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <Init_Msg_extr+0x414>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	4993      	ldr	r1, [pc, #588]	; (80019fc <Init_Msg_extr+0x418>)
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da00      	bge.n	80017c0 <Init_Msg_extr+0x1dc>
 80017be:	3307      	adds	r3, #7
 80017c0:	10db      	asrs	r3, r3, #3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	8bfb      	ldrh	r3, [r7, #30]
 80017c6:	4413      	add	r3, r2
 80017c8:	83fb      	strh	r3, [r7, #30]
 80017ca:	8bbb      	ldrh	r3, [r7, #28]
 80017cc:	3308      	adds	r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	425a      	negs	r2, r3
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	f002 0207 	and.w	r2, r2, #7
 80017dc:	bf58      	it	pl
 80017de:	4253      	negpl	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017e4:	8bfb      	ldrh	r3, [r7, #30]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	441a      	add	r2, r3
 80017ea:	8bbb      	ldrh	r3, [r7, #28]
 80017ec:	2110      	movs	r1, #16
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff10 	bl	8000614 <ExtractBits>
 80017f4:	4602      	mov	r2, r0
 80017f6:	78bb      	ldrb	r3, [r7, #2]
 80017f8:	b291      	uxth	r1, r2
 80017fa:	4a81      	ldr	r2, [pc, #516]	; (8001a00 <Init_Msg_extr+0x41c>)
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	4413      	add	r3, r2
 8001800:	3310      	adds	r3, #16
 8001802:	460a      	mov	r2, r1
 8001804:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001806:	78bb      	ldrb	r3, [r7, #2]
 8001808:	4a7d      	ldr	r2, [pc, #500]	; (8001a00 <Init_Msg_extr+0x41c>)
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4413      	add	r3, r2
 800180e:	3310      	adds	r3, #16
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	487b      	ldr	r0, [pc, #492]	; (8001a04 <Init_Msg_extr+0x420>)
 8001816:	f020 fd0d 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 800181a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	da00      	bge.n	8001826 <Init_Msg_extr+0x242>
 8001824:	3307      	adds	r3, #7
 8001826:	10db      	asrs	r3, r3, #3
 8001828:	b29a      	uxth	r2, r3
 800182a:	8bfb      	ldrh	r3, [r7, #30]
 800182c:	4413      	add	r3, r2
 800182e:	83fb      	strh	r3, [r7, #30]
 8001830:	8bbb      	ldrh	r3, [r7, #28]
 8001832:	3310      	adds	r3, #16
 8001834:	b29b      	uxth	r3, r3
 8001836:	b21b      	sxth	r3, r3
 8001838:	425a      	negs	r2, r3
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	f002 0207 	and.w	r2, r2, #7
 8001842:	bf58      	it	pl
 8001844:	4253      	negpl	r3, r2
 8001846:	b21b      	sxth	r3, r3
 8001848:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	441a      	add	r2, r3
 8001850:	8bbb      	ldrh	r3, [r7, #28]
 8001852:	2110      	movs	r1, #16
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fedd 	bl	8000614 <ExtractBits>
 800185a:	4602      	mov	r2, r0
 800185c:	78bb      	ldrb	r3, [r7, #2]
 800185e:	b291      	uxth	r1, r2
 8001860:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <Init_Msg_extr+0x41c>)
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	4413      	add	r3, r2
 8001866:	330e      	adds	r3, #14
 8001868:	460a      	mov	r2, r1
 800186a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	4a64      	ldr	r2, [pc, #400]	; (8001a00 <Init_Msg_extr+0x41c>)
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	4413      	add	r3, r2
 8001874:	330e      	adds	r3, #14
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4863      	ldr	r0, [pc, #396]	; (8001a08 <Init_Msg_extr+0x424>)
 800187c:	f020 fcda 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 8001880:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	da00      	bge.n	800188c <Init_Msg_extr+0x2a8>
 800188a:	3307      	adds	r3, #7
 800188c:	10db      	asrs	r3, r3, #3
 800188e:	b29a      	uxth	r2, r3
 8001890:	8bfb      	ldrh	r3, [r7, #30]
 8001892:	4413      	add	r3, r2
 8001894:	83fb      	strh	r3, [r7, #30]
 8001896:	8bbb      	ldrh	r3, [r7, #28]
 8001898:	3310      	adds	r3, #16
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21b      	sxth	r3, r3
 800189e:	425a      	negs	r2, r3
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	f002 0207 	and.w	r2, r2, #7
 80018a8:	bf58      	it	pl
 80018aa:	4253      	negpl	r3, r2
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018b0:	8bfb      	ldrh	r3, [r7, #30]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	441a      	add	r2, r3
 80018b6:	8bbb      	ldrh	r3, [r7, #28]
 80018b8:	2108      	movs	r1, #8
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe feaa 	bl	8000614 <ExtractBits>
 80018c0:	4602      	mov	r2, r0
 80018c2:	78bb      	ldrb	r3, [r7, #2]
 80018c4:	b2d1      	uxtb	r1, r2
 80018c6:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <Init_Msg_extr+0x41c>)
 80018c8:	015b      	lsls	r3, r3, #5
 80018ca:	4413      	add	r3, r2
 80018cc:	460a      	mov	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da00      	bge.n	80018dc <Init_Msg_extr+0x2f8>
 80018da:	3307      	adds	r3, #7
 80018dc:	10db      	asrs	r3, r3, #3
 80018de:	b29a      	uxth	r2, r3
 80018e0:	8bfb      	ldrh	r3, [r7, #30]
 80018e2:	4413      	add	r3, r2
 80018e4:	83fb      	strh	r3, [r7, #30]
 80018e6:	8bbb      	ldrh	r3, [r7, #28]
 80018e8:	3308      	adds	r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	425a      	negs	r2, r3
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	f002 0207 	and.w	r2, r2, #7
 80018f8:	bf58      	it	pl
 80018fa:	4253      	negpl	r3, r2
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001900:	8bfb      	ldrh	r3, [r7, #30]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	441a      	add	r2, r3
 8001906:	8bbb      	ldrh	r3, [r7, #28]
 8001908:	2108      	movs	r1, #8
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe82 	bl	8000614 <ExtractBits>
 8001910:	4602      	mov	r2, r0
 8001912:	78bb      	ldrb	r3, [r7, #2]
 8001914:	b2d1      	uxtb	r1, r2
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <Init_Msg_extr+0x41c>)
 8001918:	015b      	lsls	r3, r3, #5
 800191a:	4413      	add	r3, r2
 800191c:	3301      	adds	r3, #1
 800191e:	460a      	mov	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8001922:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <Init_Msg_extr+0x34a>
 800192c:	3307      	adds	r3, #7
 800192e:	10db      	asrs	r3, r3, #3
 8001930:	b29a      	uxth	r2, r3
 8001932:	8bfb      	ldrh	r3, [r7, #30]
 8001934:	4413      	add	r3, r2
 8001936:	83fb      	strh	r3, [r7, #30]
 8001938:	8bbb      	ldrh	r3, [r7, #28]
 800193a:	3308      	adds	r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	b21b      	sxth	r3, r3
 8001940:	425a      	negs	r2, r3
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	f002 0207 	and.w	r2, r2, #7
 800194a:	bf58      	it	pl
 800194c:	4253      	negpl	r3, r2
 800194e:	b21b      	sxth	r3, r3
 8001950:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001952:	8bfb      	ldrh	r3, [r7, #30]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	441a      	add	r2, r3
 8001958:	8bbb      	ldrh	r3, [r7, #28]
 800195a:	2108      	movs	r1, #8
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe59 	bl	8000614 <ExtractBits>
 8001962:	4602      	mov	r2, r0
 8001964:	78bb      	ldrb	r3, [r7, #2]
 8001966:	b2d1      	uxtb	r1, r2
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <Init_Msg_extr+0x41c>)
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	4413      	add	r3, r2
 800196e:	3302      	adds	r3, #2
 8001970:	460a      	mov	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001974:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	da00      	bge.n	8001980 <Init_Msg_extr+0x39c>
 800197e:	3307      	adds	r3, #7
 8001980:	10db      	asrs	r3, r3, #3
 8001982:	b29a      	uxth	r2, r3
 8001984:	8bfb      	ldrh	r3, [r7, #30]
 8001986:	4413      	add	r3, r2
 8001988:	83fb      	strh	r3, [r7, #30]
 800198a:	8bbb      	ldrh	r3, [r7, #28]
 800198c:	3308      	adds	r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	b21b      	sxth	r3, r3
 8001992:	425a      	negs	r2, r3
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	f002 0207 	and.w	r2, r2, #7
 800199c:	bf58      	it	pl
 800199e:	4253      	negpl	r3, r2
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	441a      	add	r2, r3
 80019aa:	8bbb      	ldrh	r3, [r7, #28]
 80019ac:	2110      	movs	r1, #16
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fe30 	bl	8000614 <ExtractBits>
 80019b4:	4602      	mov	r2, r0
 80019b6:	78bb      	ldrb	r3, [r7, #2]
 80019b8:	b291      	uxth	r1, r2
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <Init_Msg_extr+0x428>)
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	460a      	mov	r2, r1
 80019c4:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019ca:	3310      	adds	r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da1f      	bge.n	8001a10 <Init_Msg_extr+0x42c>
 80019d0:	3307      	adds	r3, #7
 80019d2:	e01d      	b.n	8001a10 <Init_Msg_extr+0x42c>
 80019d4:	20001000 	.word	0x20001000
 80019d8:	20000304 	.word	0x20000304
 80019dc:	08023d24 	.word	0x08023d24
 80019e0:	08023d4c 	.word	0x08023d4c
 80019e4:	08023d60 	.word	0x08023d60
 80019e8:	08023a40 	.word	0x08023a40
 80019ec:	20000305 	.word	0x20000305
 80019f0:	20000fa4 	.word	0x20000fa4
 80019f4:	2000100c 	.word	0x2000100c
 80019f8:	2000108c 	.word	0x2000108c
 80019fc:	20001098 	.word	0x20001098
 8001a00:	20001264 	.word	0x20001264
 8001a04:	08023d74 	.word	0x08023d74
 8001a08:	08023d7c 	.word	0x08023d7c
 8001a0c:	200011c4 	.word	0x200011c4
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	8bfb      	ldrh	r3, [r7, #30]
 8001a16:	4413      	add	r3, r2
 8001a18:	83fb      	strh	r3, [r7, #30]
 8001a1a:	8bbb      	ldrh	r3, [r7, #28]
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	425a      	negs	r2, r3
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	f002 0207 	and.w	r2, r2, #7
 8001a2c:	bf58      	it	pl
 8001a2e:	4253      	negpl	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	4a8e      	ldr	r2, [pc, #568]	; (8001c70 <Init_Msg_extr+0x68c>)
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 811d 	beq.w	8001c84 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a4a:	8bfb      	ldrh	r3, [r7, #30]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	441a      	add	r2, r3
 8001a50:	8bbb      	ldrh	r3, [r7, #28]
 8001a52:	2108      	movs	r1, #8
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fddd 	bl	8000614 <ExtractBits>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	78ba      	ldrb	r2, [r7, #2]
 8001a5e:	b2d8      	uxtb	r0, r3
 8001a60:	4984      	ldr	r1, [pc, #528]	; (8001c74 <Init_Msg_extr+0x690>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3305      	adds	r3, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a72:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da00      	bge.n	8001a7e <Init_Msg_extr+0x49a>
 8001a7c:	3307      	adds	r3, #7
 8001a7e:	10db      	asrs	r3, r3, #3
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	8bfb      	ldrh	r3, [r7, #30]
 8001a84:	4413      	add	r3, r2
 8001a86:	83fb      	strh	r3, [r7, #30]
 8001a88:	8bbb      	ldrh	r3, [r7, #28]
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	425a      	negs	r2, r3
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	f002 0207 	and.w	r2, r2, #7
 8001a9a:	bf58      	it	pl
 8001a9c:	4253      	negpl	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001aa2:	8bfb      	ldrh	r3, [r7, #30]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	8bbb      	ldrh	r3, [r7, #28]
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fdb1 	bl	8000614 <ExtractBits>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	78ba      	ldrb	r2, [r7, #2]
 8001ab6:	b2d8      	uxtb	r0, r3
 8001ab8:	496e      	ldr	r1, [pc, #440]	; (8001c74 <Init_Msg_extr+0x690>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001aca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da00      	bge.n	8001ad6 <Init_Msg_extr+0x4f2>
 8001ad4:	3307      	adds	r3, #7
 8001ad6:	10db      	asrs	r3, r3, #3
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	8bfb      	ldrh	r3, [r7, #30]
 8001adc:	4413      	add	r3, r2
 8001ade:	83fb      	strh	r3, [r7, #30]
 8001ae0:	8bbb      	ldrh	r3, [r7, #28]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	425a      	negs	r2, r3
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	f002 0207 	and.w	r2, r2, #7
 8001af2:	bf58      	it	pl
 8001af4:	4253      	negpl	r3, r2
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001afa:	8bfb      	ldrh	r3, [r7, #30]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	441a      	add	r2, r3
 8001b00:	8bbb      	ldrh	r3, [r7, #28]
 8001b02:	2108      	movs	r1, #8
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd85 	bl	8000614 <ExtractBits>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	b2d8      	uxtb	r0, r3
 8001b10:	4958      	ldr	r1, [pc, #352]	; (8001c74 <Init_Msg_extr+0x690>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	4602      	mov	r2, r0
 8001b20:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da00      	bge.n	8001b2e <Init_Msg_extr+0x54a>
 8001b2c:	3307      	adds	r3, #7
 8001b2e:	10db      	asrs	r3, r3, #3
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	8bfb      	ldrh	r3, [r7, #30]
 8001b34:	4413      	add	r3, r2
 8001b36:	83fb      	strh	r3, [r7, #30]
 8001b38:	8bbb      	ldrh	r3, [r7, #28]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	425a      	negs	r2, r3
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	f002 0207 	and.w	r2, r2, #7
 8001b4a:	bf58      	it	pl
 8001b4c:	4253      	negpl	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	441a      	add	r2, r3
 8001b58:	8bbb      	ldrh	r3, [r7, #28]
 8001b5a:	2108      	movs	r1, #8
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fd59 	bl	8000614 <ExtractBits>
 8001b62:	4603      	mov	r3, r0
 8001b64:	78ba      	ldrb	r2, [r7, #2]
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	4942      	ldr	r1, [pc, #264]	; (8001c74 <Init_Msg_extr+0x690>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	4602      	mov	r2, r0
 8001b76:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da00      	bge.n	8001b84 <Init_Msg_extr+0x5a0>
 8001b82:	3307      	adds	r3, #7
 8001b84:	10db      	asrs	r3, r3, #3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	83fb      	strh	r3, [r7, #30]
 8001b8e:	8bbb      	ldrh	r3, [r7, #28]
 8001b90:	3308      	adds	r3, #8
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	425a      	negs	r2, r3
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	f002 0207 	and.w	r2, r2, #7
 8001ba0:	bf58      	it	pl
 8001ba2:	4253      	negpl	r3, r2
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ba8:	8bfb      	ldrh	r3, [r7, #30]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	441a      	add	r2, r3
 8001bae:	8bbb      	ldrh	r3, [r7, #28]
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fd2e 	bl	8000614 <ExtractBits>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	78ba      	ldrb	r2, [r7, #2]
 8001bbc:	b2d8      	uxtb	r0, r3
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <Init_Msg_extr+0x690>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4602      	mov	r2, r0
 8001bce:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bd0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da00      	bge.n	8001bdc <Init_Msg_extr+0x5f8>
 8001bda:	3307      	adds	r3, #7
 8001bdc:	10db      	asrs	r3, r3, #3
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	8bfb      	ldrh	r3, [r7, #30]
 8001be2:	4413      	add	r3, r2
 8001be4:	83fb      	strh	r3, [r7, #30]
 8001be6:	8bbb      	ldrh	r3, [r7, #28]
 8001be8:	3308      	adds	r3, #8
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	425a      	negs	r2, r3
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	f002 0207 	and.w	r2, r2, #7
 8001bf8:	bf58      	it	pl
 8001bfa:	4253      	negpl	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c00:	8bfb      	ldrh	r3, [r7, #30]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	441a      	add	r2, r3
 8001c06:	8bbb      	ldrh	r3, [r7, #28]
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd02 	bl	8000614 <ExtractBits>
 8001c10:	4603      	mov	r3, r0
 8001c12:	78ba      	ldrb	r2, [r7, #2]
 8001c14:	b2d8      	uxtb	r0, r3
 8001c16:	4917      	ldr	r1, [pc, #92]	; (8001c74 <Init_Msg_extr+0x690>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	3302      	adds	r3, #2
 8001c24:	4602      	mov	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da00      	bge.n	8001c34 <Init_Msg_extr+0x650>
 8001c32:	3307      	adds	r3, #7
 8001c34:	10db      	asrs	r3, r3, #3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	8bfb      	ldrh	r3, [r7, #30]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	83fb      	strh	r3, [r7, #30]
 8001c3e:	8bbb      	ldrh	r3, [r7, #28]
 8001c40:	3308      	adds	r3, #8
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	425a      	negs	r2, r3
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	f002 0207 	and.w	r2, r2, #7
 8001c50:	bf58      	it	pl
 8001c52:	4253      	negpl	r3, r2
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 f862 	bl	8008d24 <IS_MLK_EIPC_TIME_MATCHING>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <Init_Msg_extr+0x698>
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <Init_Msg_extr+0x694>)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	54d1      	strb	r1, [r2, r3]
 8001c6e:	e009      	b.n	8001c84 <Init_Msg_extr+0x6a0>
 8001c70:	200011c4 	.word	0x200011c4
 8001c74:	20001188 	.word	0x20001188
 8001c78:	200010d8 	.word	0x200010d8
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	4aa4      	ldr	r2, [pc, #656]	; (8001f10 <Init_Msg_extr+0x92c>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c84:	8bfb      	ldrh	r3, [r7, #30]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	441a      	add	r2, r3
 8001c8a:	8bbb      	ldrh	r3, [r7, #28]
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fcc0 	bl	8000614 <ExtractBits>
 8001c94:	4602      	mov	r2, r0
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	b2d1      	uxtb	r1, r2
 8001c9a:	4a9e      	ldr	r2, [pc, #632]	; (8001f14 <Init_Msg_extr+0x930>)
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001ca6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da00      	bge.n	8001cb2 <Init_Msg_extr+0x6ce>
 8001cb0:	3307      	adds	r3, #7
 8001cb2:	10db      	asrs	r3, r3, #3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	8bfb      	ldrh	r3, [r7, #30]
 8001cb8:	4413      	add	r3, r2
 8001cba:	83fb      	strh	r3, [r7, #30]
 8001cbc:	8bbb      	ldrh	r3, [r7, #28]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	425a      	negs	r2, r3
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	f002 0207 	and.w	r2, r2, #7
 8001cce:	bf58      	it	pl
 8001cd0:	4253      	negpl	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cd6:	8bfb      	ldrh	r3, [r7, #30]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	441a      	add	r2, r3
 8001cdc:	8bbb      	ldrh	r3, [r7, #28]
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc97 	bl	8000614 <ExtractBits>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	78bb      	ldrb	r3, [r7, #2]
 8001cea:	b291      	uxth	r1, r2
 8001cec:	4a89      	ldr	r2, [pc, #548]	; (8001f14 <Init_Msg_extr+0x930>)
 8001cee:	015b      	lsls	r3, r3, #5
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3312      	adds	r3, #18
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <Init_Msg_extr+0x720>
 8001d02:	3307      	adds	r3, #7
 8001d04:	10db      	asrs	r3, r3, #3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	8bbb      	ldrh	r3, [r7, #28]
 8001d10:	3310      	adds	r3, #16
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	425a      	negs	r2, r3
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	f002 0207 	and.w	r2, r2, #7
 8001d20:	bf58      	it	pl
 8001d22:	4253      	negpl	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <Init_Msg_extr+0x930>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	1d18      	adds	r0, r3, #4
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	2206      	movs	r2, #6
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f020 f96a 	bl	8022014 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da00      	bge.n	8001d4c <Init_Msg_extr+0x768>
 8001d4a:	3307      	adds	r3, #7
 8001d4c:	10db      	asrs	r3, r3, #3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	8bfb      	ldrh	r3, [r7, #30]
 8001d52:	4413      	add	r3, r2
 8001d54:	83fb      	strh	r3, [r7, #30]
 8001d56:	8bbb      	ldrh	r3, [r7, #28]
 8001d58:	3310      	adds	r3, #16
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	425a      	negs	r2, r3
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	f002 0207 	and.w	r2, r2, #7
 8001d68:	bf58      	it	pl
 8001d6a:	4253      	negpl	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da00      	bge.n	8001d7c <Init_Msg_extr+0x798>
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	10db      	asrs	r3, r3, #3
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	8bfb      	ldrh	r3, [r7, #30]
 8001d82:	4413      	add	r3, r2
 8001d84:	83fb      	strh	r3, [r7, #30]
 8001d86:	8bbb      	ldrh	r3, [r7, #28]
 8001d88:	3310      	adds	r3, #16
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	425a      	negs	r2, r3
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	f002 0207 	and.w	r2, r2, #7
 8001d98:	bf58      	it	pl
 8001d9a:	4253      	negpl	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001da0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da00      	bge.n	8001dac <Init_Msg_extr+0x7c8>
 8001daa:	3307      	adds	r3, #7
 8001dac:	10db      	asrs	r3, r3, #3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	8bfb      	ldrh	r3, [r7, #30]
 8001db2:	4413      	add	r3, r2
 8001db4:	83fb      	strh	r3, [r7, #30]
 8001db6:	8bbb      	ldrh	r3, [r7, #28]
 8001db8:	3310      	adds	r3, #16
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	425a      	negs	r2, r3
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	f002 0207 	and.w	r2, r2, #7
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dd0:	8bfb      	ldrh	r3, [r7, #30]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	441a      	add	r2, r3
 8001dd6:	8bbb      	ldrh	r3, [r7, #28]
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fc1a 	bl	8000614 <ExtractBits>
 8001de0:	4602      	mov	r2, r0
 8001de2:	78bb      	ldrb	r3, [r7, #2]
 8001de4:	b291      	uxth	r1, r2
 8001de6:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <Init_Msg_extr+0x930>)
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4413      	add	r3, r2
 8001dec:	3314      	adds	r3, #20
 8001dee:	460a      	mov	r2, r1
 8001df0:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001df2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da00      	bge.n	8001dfe <Init_Msg_extr+0x81a>
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	10db      	asrs	r3, r3, #3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	8bfb      	ldrh	r3, [r7, #30]
 8001e04:	4413      	add	r3, r2
 8001e06:	83fb      	strh	r3, [r7, #30]
 8001e08:	8bbb      	ldrh	r3, [r7, #28]
 8001e0a:	3310      	adds	r3, #16
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	425a      	negs	r2, r3
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	f002 0207 	and.w	r2, r2, #7
 8001e1a:	bf58      	it	pl
 8001e1c:	4253      	negpl	r3, r2
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e22:	8bfb      	ldrh	r3, [r7, #30]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	441a      	add	r2, r3
 8001e28:	8bbb      	ldrh	r3, [r7, #28]
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fbf1 	bl	8000614 <ExtractBits>
 8001e32:	4602      	mov	r2, r0
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	b291      	uxth	r1, r2
 8001e38:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <Init_Msg_extr+0x930>)
 8001e3a:	015b      	lsls	r3, r3, #5
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3316      	adds	r3, #22
 8001e40:	460a      	mov	r2, r1
 8001e42:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da00      	bge.n	8001e50 <Init_Msg_extr+0x86c>
 8001e4e:	3307      	adds	r3, #7
 8001e50:	10db      	asrs	r3, r3, #3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	8bfb      	ldrh	r3, [r7, #30]
 8001e56:	4413      	add	r3, r2
 8001e58:	83fb      	strh	r3, [r7, #30]
 8001e5a:	8bbb      	ldrh	r3, [r7, #28]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	425a      	negs	r2, r3
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	f002 0207 	and.w	r2, r2, #7
 8001e6c:	bf58      	it	pl
 8001e6e:	4253      	negpl	r3, r2
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e74:	8bfb      	ldrh	r3, [r7, #30]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	441a      	add	r2, r3
 8001e7a:	8bbb      	ldrh	r3, [r7, #28]
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fbc8 	bl	8000614 <ExtractBits>
 8001e84:	4602      	mov	r2, r0
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	b291      	uxth	r1, r2
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <Init_Msg_extr+0x930>)
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	4413      	add	r3, r2
 8001e90:	3318      	adds	r3, #24
 8001e92:	460a      	mov	r2, r1
 8001e94:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da00      	bge.n	8001ea2 <Init_Msg_extr+0x8be>
 8001ea0:	3307      	adds	r3, #7
 8001ea2:	10db      	asrs	r3, r3, #3
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	8bfb      	ldrh	r3, [r7, #30]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	83fb      	strh	r3, [r7, #30]
 8001eac:	8bbb      	ldrh	r3, [r7, #28]
 8001eae:	3310      	adds	r3, #16
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	425a      	negs	r2, r3
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	f002 0207 	and.w	r2, r2, #7
 8001ebe:	bf58      	it	pl
 8001ec0:	4253      	negpl	r3, r2
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001ec6:	8bfb      	ldrh	r3, [r7, #30]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	441a      	add	r2, r3
 8001ecc:	78bc      	ldrb	r4, [r7, #2]
 8001ece:	8bbb      	ldrh	r3, [r7, #28]
 8001ed0:	2118      	movs	r1, #24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb9e 	bl	8000614 <ExtractBits>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	490f      	ldr	r1, [pc, #60]	; (8001f18 <Init_Msg_extr+0x934>)
 8001edc:	0123      	lsls	r3, r4, #4
 8001ede:	440b      	add	r3, r1
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ee4:	78bb      	ldrb	r3, [r7, #2]
 8001ee6:	78ba      	ldrb	r2, [r7, #2]
 8001ee8:	490b      	ldr	r1, [pc, #44]	; (8001f18 <Init_Msg_extr+0x934>)
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	440b      	add	r3, r1
 8001eee:	3308      	adds	r3, #8
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	480a      	ldr	r0, [pc, #40]	; (8001f1c <Init_Msg_extr+0x938>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4403      	add	r3, r0
 8001efe:	3308      	adds	r3, #8
 8001f00:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	3318      	adds	r3, #24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da09      	bge.n	8001f20 <Init_Msg_extr+0x93c>
 8001f0c:	3307      	adds	r3, #7
 8001f0e:	e007      	b.n	8001f20 <Init_Msg_extr+0x93c>
 8001f10:	200010d8 	.word	0x200010d8
 8001f14:	20001264 	.word	0x20001264
 8001f18:	200011c4 	.word	0x200011c4
 8001f1c:	20001674 	.word	0x20001674
 8001f20:	10db      	asrs	r3, r3, #3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	4413      	add	r3, r2
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	8bbb      	ldrh	r3, [r7, #28]
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	425a      	negs	r2, r3
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	f002 0207 	and.w	r2, r2, #7
 8001f3c:	bf58      	it	pl
 8001f3e:	4253      	negpl	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	441a      	add	r2, r3
 8001f4a:	8bbb      	ldrh	r3, [r7, #28]
 8001f4c:	2108      	movs	r1, #8
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb60 	bl	8000614 <ExtractBits>
 8001f54:	4602      	mov	r2, r0
 8001f56:	78bb      	ldrb	r3, [r7, #2]
 8001f58:	b2d1      	uxtb	r1, r2
 8001f5a:	4ab1      	ldr	r2, [pc, #708]	; (8002220 <Init_Msg_extr+0xc3c>)
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	460a      	mov	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f64:	78ba      	ldrb	r2, [r7, #2]
 8001f66:	78bb      	ldrb	r3, [r7, #2]
 8001f68:	49ad      	ldr	r1, [pc, #692]	; (8002220 <Init_Msg_extr+0xc3c>)
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	440a      	add	r2, r1
 8001f6e:	7811      	ldrb	r1, [r2, #0]
 8001f70:	4aab      	ldr	r2, [pc, #684]	; (8002220 <Init_Msg_extr+0xc3c>)
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	3302      	adds	r3, #2
 8001f78:	460a      	mov	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da00      	bge.n	8001f88 <Init_Msg_extr+0x9a4>
 8001f86:	3307      	adds	r3, #7
 8001f88:	10db      	asrs	r3, r3, #3
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	8bfb      	ldrh	r3, [r7, #30]
 8001f8e:	4413      	add	r3, r2
 8001f90:	83fb      	strh	r3, [r7, #30]
 8001f92:	8bbb      	ldrh	r3, [r7, #28]
 8001f94:	3308      	adds	r3, #8
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	425a      	negs	r2, r3
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	f002 0207 	and.w	r2, r2, #7
 8001fa4:	bf58      	it	pl
 8001fa6:	4253      	negpl	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fac:	8bfb      	ldrh	r3, [r7, #30]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	441a      	add	r2, r3
 8001fb2:	8bbb      	ldrh	r3, [r7, #28]
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fb2c 	bl	8000614 <ExtractBits>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	78bb      	ldrb	r3, [r7, #2]
 8001fc0:	b2d1      	uxtb	r1, r2
 8001fc2:	4a98      	ldr	r2, [pc, #608]	; (8002224 <Init_Msg_extr+0xc40>)
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	4413      	add	r3, r2
 8001fc8:	330a      	adds	r3, #10
 8001fca:	460a      	mov	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da00      	bge.n	8001fda <Init_Msg_extr+0x9f6>
 8001fd8:	3307      	adds	r3, #7
 8001fda:	10db      	asrs	r3, r3, #3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	8bfb      	ldrh	r3, [r7, #30]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	83fb      	strh	r3, [r7, #30]
 8001fe4:	8bbb      	ldrh	r3, [r7, #28]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	425a      	negs	r2, r3
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	f002 0207 	and.w	r2, r2, #7
 8001ff6:	bf58      	it	pl
 8001ff8:	4253      	negpl	r3, r2
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ffe:	8bfb      	ldrh	r3, [r7, #30]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	441a      	add	r2, r3
 8002004:	8bbb      	ldrh	r3, [r7, #28]
 8002006:	2108      	movs	r1, #8
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fb03 	bl	8000614 <ExtractBits>
 800200e:	4602      	mov	r2, r0
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	b2d1      	uxtb	r1, r2
 8002014:	4a82      	ldr	r2, [pc, #520]	; (8002220 <Init_Msg_extr+0xc3c>)
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3303      	adds	r3, #3
 800201c:	460a      	mov	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 8002020:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	da00      	bge.n	800202c <Init_Msg_extr+0xa48>
 800202a:	3307      	adds	r3, #7
 800202c:	10db      	asrs	r3, r3, #3
 800202e:	b29a      	uxth	r2, r3
 8002030:	8bfb      	ldrh	r3, [r7, #30]
 8002032:	4413      	add	r3, r2
 8002034:	83fb      	strh	r3, [r7, #30]
 8002036:	8bbb      	ldrh	r3, [r7, #28]
 8002038:	3308      	adds	r3, #8
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21b      	sxth	r3, r3
 800203e:	425a      	negs	r2, r3
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	f002 0207 	and.w	r2, r2, #7
 8002048:	bf58      	it	pl
 800204a:	4253      	negpl	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	4a73      	ldr	r2, [pc, #460]	; (8002220 <Init_Msg_extr+0xc3c>)
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	3303      	adds	r3, #3
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4972      	ldr	r1, [pc, #456]	; (8002228 <Init_Msg_extr+0xc44>)
 8002060:	440b      	add	r3, r1
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	429a      	cmp	r2, r3
 8002068:	d015      	beq.n	8002096 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800206a:	4870      	ldr	r0, [pc, #448]	; (800222c <Init_Msg_extr+0xc48>)
 800206c:	f020 f97e 	bl	802236c <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002070:	78bb      	ldrb	r3, [r7, #2]
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <Init_Msg_extr+0xc44>)
 8002074:	4413      	add	r3, r2
 8002076:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800207a:	4619      	mov	r1, r3
 800207c:	486c      	ldr	r0, [pc, #432]	; (8002230 <Init_Msg_extr+0xc4c>)
 800207e:	f020 f8d9 	bl	8022234 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002082:	78bb      	ldrb	r3, [r7, #2]
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <Init_Msg_extr+0xc3c>)
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	3303      	adds	r3, #3
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	4868      	ldr	r0, [pc, #416]	; (8002234 <Init_Msg_extr+0xc50>)
 8002092:	f020 f8cf 	bl	8022234 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002096:	8bfb      	ldrh	r3, [r7, #30]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	441a      	add	r2, r3
 800209c:	8bbb      	ldrh	r3, [r7, #28]
 800209e:	2108      	movs	r1, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fab7 	bl	8000614 <ExtractBits>
 80020a6:	4602      	mov	r2, r0
 80020a8:	78bb      	ldrb	r3, [r7, #2]
 80020aa:	b2d1      	uxtb	r1, r2
 80020ac:	4a5d      	ldr	r2, [pc, #372]	; (8002224 <Init_Msg_extr+0xc40>)
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	4413      	add	r3, r2
 80020b2:	330b      	adds	r3, #11
 80020b4:	460a      	mov	r2, r1
 80020b6:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da00      	bge.n	80020c4 <Init_Msg_extr+0xae0>
 80020c2:	3307      	adds	r3, #7
 80020c4:	10db      	asrs	r3, r3, #3
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	8bfb      	ldrh	r3, [r7, #30]
 80020ca:	4413      	add	r3, r2
 80020cc:	83fb      	strh	r3, [r7, #30]
 80020ce:	8bbb      	ldrh	r3, [r7, #28]
 80020d0:	3308      	adds	r3, #8
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	425a      	negs	r2, r3
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	f002 0207 	and.w	r2, r2, #7
 80020e0:	bf58      	it	pl
 80020e2:	4253      	negpl	r3, r2
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020e8:	8bfb      	ldrh	r3, [r7, #30]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	441a      	add	r2, r3
 80020ee:	8bbb      	ldrh	r3, [r7, #28]
 80020f0:	2108      	movs	r1, #8
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa8e 	bl	8000614 <ExtractBits>
 80020f8:	4602      	mov	r2, r0
 80020fa:	78bb      	ldrb	r3, [r7, #2]
 80020fc:	b2d1      	uxtb	r1, r2
 80020fe:	4a49      	ldr	r2, [pc, #292]	; (8002224 <Init_Msg_extr+0xc40>)
 8002100:	015b      	lsls	r3, r3, #5
 8002102:	4413      	add	r3, r2
 8002104:	330c      	adds	r3, #12
 8002106:	460a      	mov	r2, r1
 8002108:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 800210a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	da00      	bge.n	8002116 <Init_Msg_extr+0xb32>
 8002114:	3307      	adds	r3, #7
 8002116:	10db      	asrs	r3, r3, #3
 8002118:	b29a      	uxth	r2, r3
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	4413      	add	r3, r2
 800211e:	83fb      	strh	r3, [r7, #30]
 8002120:	8bbb      	ldrh	r3, [r7, #28]
 8002122:	3308      	adds	r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b21b      	sxth	r3, r3
 8002128:	425a      	negs	r2, r3
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	f002 0207 	and.w	r2, r2, #7
 8002132:	bf58      	it	pl
 8002134:	4253      	negpl	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800213a:	78bb      	ldrb	r3, [r7, #2]
 800213c:	4a39      	ldr	r2, [pc, #228]	; (8002224 <Init_Msg_extr+0xc40>)
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	4413      	add	r3, r2
 8002142:	330c      	adds	r3, #12
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00c      	beq.n	8002164 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800214a:	78bb      	ldrb	r3, [r7, #2]
 800214c:	4a35      	ldr	r2, [pc, #212]	; (8002224 <Init_Msg_extr+0xc40>)
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	4413      	add	r3, r2
 8002152:	330c      	adds	r3, #12
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4837      	ldr	r0, [pc, #220]	; (8002238 <Init_Msg_extr+0xc54>)
 800215a:	f020 f86b 	bl	8022234 <iprintf>
		printf("This Value has to be \"1\"\n");
 800215e:	4837      	ldr	r0, [pc, #220]	; (800223c <Init_Msg_extr+0xc58>)
 8002160:	f020 f904 	bl	802236c <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002164:	8bfb      	ldrh	r3, [r7, #30]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	441a      	add	r2, r3
 800216a:	8bbb      	ldrh	r3, [r7, #28]
 800216c:	2108      	movs	r1, #8
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fa50 	bl	8000614 <ExtractBits>
 8002174:	4602      	mov	r2, r0
 8002176:	78bb      	ldrb	r3, [r7, #2]
 8002178:	b2d1      	uxtb	r1, r2
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <Init_Msg_extr+0xc40>)
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	4413      	add	r3, r2
 8002180:	330d      	adds	r3, #13
 8002182:	460a      	mov	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002186:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	da00      	bge.n	8002192 <Init_Msg_extr+0xbae>
 8002190:	3307      	adds	r3, #7
 8002192:	10db      	asrs	r3, r3, #3
 8002194:	b29a      	uxth	r2, r3
 8002196:	8bfb      	ldrh	r3, [r7, #30]
 8002198:	4413      	add	r3, r2
 800219a:	83fb      	strh	r3, [r7, #30]
 800219c:	8bbb      	ldrh	r3, [r7, #28]
 800219e:	3308      	adds	r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	425a      	negs	r2, r3
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	f002 0207 	and.w	r2, r2, #7
 80021ae:	bf58      	it	pl
 80021b0:	4253      	negpl	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021b6:	8bfb      	ldrh	r3, [r7, #30]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	441a      	add	r2, r3
 80021bc:	78bc      	ldrb	r4, [r7, #2]
 80021be:	8bbb      	ldrh	r3, [r7, #28]
 80021c0:	2120      	movs	r1, #32
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fa26 	bl	8000614 <ExtractBits>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4916      	ldr	r1, [pc, #88]	; (8002224 <Init_Msg_extr+0xc40>)
 80021cc:	0163      	lsls	r3, r4, #5
 80021ce:	440b      	add	r3, r1
 80021d0:	331c      	adds	r3, #28
 80021d2:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da00      	bge.n	80021e0 <Init_Msg_extr+0xbfc>
 80021de:	3307      	adds	r3, #7
 80021e0:	10db      	asrs	r3, r3, #3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	8bfb      	ldrh	r3, [r7, #30]
 80021e6:	4413      	add	r3, r2
 80021e8:	83fb      	strh	r3, [r7, #30]
 80021ea:	8bbb      	ldrh	r3, [r7, #28]
 80021ec:	3320      	adds	r3, #32
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	425a      	negs	r2, r3
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	f002 0207 	and.w	r2, r2, #7
 80021fc:	bf58      	it	pl
 80021fe:	4253      	negpl	r3, r2
 8002200:	b21b      	sxth	r3, r3
 8002202:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 8002204:	787a      	ldrb	r2, [r7, #1]
 8002206:	78bb      	ldrb	r3, [r7, #2]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f86c 	bl	80022e8 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8002210:	78ba      	ldrb	r2, [r7, #2]
 8002212:	490b      	ldr	r1, [pc, #44]	; (8002240 <Init_Msg_extr+0xc5c>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	e012      	b.n	8002244 <Init_Msg_extr+0xc60>
 800221e:	bf00      	nop
 8002220:	200011c4 	.word	0x200011c4
 8002224:	20001264 	.word	0x20001264
 8002228:	20000304 	.word	0x20000304
 800222c:	08023d84 	.word	0x08023d84
 8002230:	08023d4c 	.word	0x08023d4c
 8002234:	08023d60 	.word	0x08023d60
 8002238:	08023da0 	.word	0x08023da0
 800223c:	08023dcc 	.word	0x08023dcc
 8002240:	20001674 	.word	0x20001674
 8002244:	440b      	add	r3, r1
 8002246:	3314      	adds	r3, #20
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	4923      	ldr	r1, [pc, #140]	; (80022dc <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3305      	adds	r3, #5
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002260:	78ba      	ldrb	r2, [r7, #2]
 8002262:	491e      	ldr	r1, [pc, #120]	; (80022dc <Init_Msg_extr+0xcf8>)
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	78ba      	ldrb	r2, [r7, #2]
 8002270:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002272:	78ba      	ldrb	r2, [r7, #2]
 8002274:	4919      	ldr	r1, [pc, #100]	; (80022dc <Init_Msg_extr+0xcf8>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3301      	adds	r3, #1
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002286:	2218      	movs	r2, #24
 8002288:	2100      	movs	r1, #0
 800228a:	4815      	ldr	r0, [pc, #84]	; (80022e0 <Init_Msg_extr+0xcfc>)
 800228c:	f01f feea 	bl	8022064 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002290:	78ba      	ldrb	r2, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <Init_Msg_extr+0xcf8>)
 800229c:	4413      	add	r3, r2
 800229e:	2218      	movs	r2, #24
 80022a0:	4619      	mov	r1, r3
 80022a2:	480f      	ldr	r0, [pc, #60]	; (80022e0 <Init_Msg_extr+0xcfc>)
 80022a4:	f01f feb6 	bl	8022014 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 80022a8:	f240 2001 	movw	r0, #513	; 0x201
 80022ac:	f00d fbe6 	bl	800fa7c <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80022b0:	78ba      	ldrb	r2, [r7, #2]
 80022b2:	490a      	ldr	r1, [pc, #40]	; (80022dc <Init_Msg_extr+0xcf8>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3301      	adds	r3, #1
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022c4:	78bc      	ldrb	r4, [r7, #2]
 80022c6:	f013 f8b3 	bl	8015430 <HAL_GetTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <Init_Msg_extr+0xd00>)
 80022ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022d2:	e000      	b.n	80022d6 <Init_Msg_extr+0xcf2>
			return;
 80022d4:	bf00      	nop
}
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	20001674 	.word	0x20001674
 80022e0:	20001854 	.word	0x20001854
 80022e4:	20000e44 	.word	0x20000e44

080022e8 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b097      	sub	sp, #92	; 0x5c
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	460a      	mov	r2, r1
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2238      	movs	r2, #56	; 0x38
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f01f fead 	bl	8022064 <memset>
	uint32_t Calc_CRC = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 800230e:	2300      	movs	r3, #0
 8002310:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002314:	2300      	movs	r3, #0
 8002316:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 800231a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800231e:	f107 020c 	add.w	r2, r7, #12
 8002322:	441a      	add	r2, r3
 8002324:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002328:	23f4      	movs	r3, #244	; 0xf4
 800232a:	2108      	movs	r1, #8
 800232c:	f7fe f9fe 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002330:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002334:	3308      	adds	r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	da00      	bge.n	800233c <Send_Init_Msg+0x54>
 800233a:	3307      	adds	r3, #7
 800233c:	10db      	asrs	r3, r3, #3
 800233e:	b29a      	uxth	r2, r3
 8002340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002344:	4413      	add	r3, r2
 8002346:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800234a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800234e:	3308      	adds	r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b21b      	sxth	r3, r3
 8002354:	425a      	negs	r2, r3
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	f002 0207 	and.w	r2, r2, #7
 800235e:	bf58      	it	pl
 8002360:	4253      	negpl	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002368:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236c:	f107 020c 	add.w	r2, r7, #12
 8002370:	441a      	add	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4977      	ldr	r1, [pc, #476]	; (8002554 <Send_Init_Msg+0x26c>)
 8002376:	3366      	adds	r3, #102	; 0x66
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002382:	2110      	movs	r1, #16
 8002384:	f7fe f9d2 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800238c:	3310      	adds	r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	da00      	bge.n	8002394 <Send_Init_Msg+0xac>
 8002392:	3307      	adds	r3, #7
 8002394:	10db      	asrs	r3, r3, #3
 8002396:	b29a      	uxth	r2, r3
 8002398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800239c:	4413      	add	r3, r2
 800239e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023a6:	3310      	adds	r3, #16
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	425a      	negs	r2, r3
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	f002 0207 	and.w	r2, r2, #7
 80023b6:	bf58      	it	pl
 80023b8:	4253      	negpl	r3, r2
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c4:	f107 020c 	add.w	r2, r7, #12
 80023c8:	441a      	add	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4961      	ldr	r1, [pc, #388]	; (8002554 <Send_Init_Msg+0x26c>)
 80023ce:	3370      	adds	r3, #112	; 0x70
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023da:	2110      	movs	r1, #16
 80023dc:	f7fe f9a6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023e4:	3310      	adds	r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da00      	bge.n	80023ec <Send_Init_Msg+0x104>
 80023ea:	3307      	adds	r3, #7
 80023ec:	10db      	asrs	r3, r3, #3
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023f4:	4413      	add	r3, r2
 80023f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023fe:	3310      	adds	r3, #16
 8002400:	b29b      	uxth	r3, r3
 8002402:	b21b      	sxth	r3, r3
 8002404:	425a      	negs	r2, r3
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	f002 0207 	and.w	r2, r2, #7
 800240e:	bf58      	it	pl
 8002410:	4253      	negpl	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002418:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <Send_Init_Msg+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d031      	beq.n	800248a <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <Send_Init_Msg+0x270>)
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d137      	bne.n	80024a0 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002436:	4849      	ldr	r0, [pc, #292]	; (800255c <Send_Init_Msg+0x274>)
 8002438:	f017 fbb8 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800243c:	4602      	mov	r2, r0
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <Send_Init_Msg+0x278>)
 8002440:	fba3 1302 	umull	r1, r3, r3, r2
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	21c8      	movs	r1, #200	; 0xc8
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002456:	4843      	ldr	r0, [pc, #268]	; (8002564 <Send_Init_Msg+0x27c>)
 8002458:	f01f ff88 	bl	802236c <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 800245c:	2100      	movs	r1, #0
 800245e:	4842      	ldr	r0, [pc, #264]	; (8002568 <Send_Init_Msg+0x280>)
 8002460:	f01f fee8 	bl	8022234 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002464:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002468:	4619      	mov	r1, r3
 800246a:	4840      	ldr	r0, [pc, #256]	; (800256c <Send_Init_Msg+0x284>)
 800246c:	f01f fee2 	bl	8022234 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002474:	f107 020c 	add.w	r2, r7, #12
 8002478:	441a      	add	r2, r3
 800247a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800247e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002482:	2108      	movs	r1, #8
 8002484:	f7fe f952 	bl	800072c <InsertBits>
 8002488:	e00a      	b.n	80024a0 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 800248a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800248e:	f107 020c 	add.w	r2, r7, #12
 8002492:	441a      	add	r2, r3
 8002494:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002498:	2300      	movs	r3, #0
 800249a:	2108      	movs	r1, #8
 800249c:	f7fe f946 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80024a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80024a4:	3308      	adds	r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da00      	bge.n	80024ac <Send_Init_Msg+0x1c4>
 80024aa:	3307      	adds	r3, #7
 80024ac:	10db      	asrs	r3, r3, #3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b4:	4413      	add	r3, r2
 80024b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024be:	3308      	adds	r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	425a      	negs	r2, r3
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	f002 0207 	and.w	r2, r2, #7
 80024ce:	bf58      	it	pl
 80024d0:	4253      	negpl	r3, r2
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <Send_Init_Msg+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d04c      	beq.n	8002580 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <Send_Init_Msg+0x270>)
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d165      	bne.n	80025bc <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024f6:	4819      	ldr	r0, [pc, #100]	; (800255c <Send_Init_Msg+0x274>)
 80024f8:	f017 fb58 	bl	8019bac <HAL_RNG_GetRandomNumber>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <Send_Init_Msg+0x278>)
 8002500:	fba3 1302 	umull	r1, r3, r3, r2
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	21c8      	movs	r1, #200	; 0xc8
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002512:	4817      	ldr	r0, [pc, #92]	; (8002570 <Send_Init_Msg+0x288>)
 8002514:	f01f ff2a 	bl	802236c <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4a16      	ldr	r2, [pc, #88]	; (8002574 <Send_Init_Msg+0x28c>)
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	3302      	adds	r3, #2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	4814      	ldr	r0, [pc, #80]	; (8002578 <Send_Init_Msg+0x290>)
 8002528:	f01f fe84 	bl	8022234 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 800252c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002530:	4619      	mov	r1, r3
 8002532:	4812      	ldr	r0, [pc, #72]	; (800257c <Send_Init_Msg+0x294>)
 8002534:	f01f fe7e 	bl	8022234 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800253c:	f107 020c 	add.w	r2, r7, #12
 8002540:	441a      	add	r2, r3
 8002542:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002546:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800254a:	2108      	movs	r1, #8
 800254c:	f7fe f8ee 	bl	800072c <InsertBits>
 8002550:	e034      	b.n	80025bc <Send_Init_Msg+0x2d4>
 8002552:	bf00      	nop
 8002554:	20000304 	.word	0x20000304
 8002558:	2000195c 	.word	0x2000195c
 800255c:	20009cf4 	.word	0x20009cf4
 8002560:	51eb851f 	.word	0x51eb851f
 8002564:	08023de8 	.word	0x08023de8
 8002568:	08023e0c 	.word	0x08023e0c
 800256c:	08023e2c 	.word	0x08023e2c
 8002570:	08023e4c 	.word	0x08023e4c
 8002574:	200011c4 	.word	0x200011c4
 8002578:	08023e70 	.word	0x08023e70
 800257c:	08023e90 	.word	0x08023e90

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002580:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002584:	f107 020c 	add.w	r2, r7, #12
 8002588:	18d1      	adds	r1, r2, r3
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	48c4      	ldr	r0, [pc, #784]	; (80028a0 <Send_Init_Msg+0x5b8>)
 800258e:	011a      	lsls	r2, r3, #4
 8002590:	4402      	add	r2, r0
 8002592:	3202      	adds	r2, #2
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	3201      	adds	r2, #1
 8002598:	b2d4      	uxtb	r4, r2
 800259a:	48c1      	ldr	r0, [pc, #772]	; (80028a0 <Send_Init_Msg+0x5b8>)
 800259c:	011a      	lsls	r2, r3, #4
 800259e:	4402      	add	r2, r0
 80025a0:	3202      	adds	r2, #2
 80025a2:	4620      	mov	r0, r4
 80025a4:	7010      	strb	r0, [r2, #0]
 80025a6:	4abe      	ldr	r2, [pc, #760]	; (80028a0 <Send_Init_Msg+0x5b8>)
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	3302      	adds	r3, #2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025b4:	460a      	mov	r2, r1
 80025b6:	2108      	movs	r1, #8
 80025b8:	f7fe f8b8 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025bc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025c0:	3308      	adds	r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da00      	bge.n	80025c8 <Send_Init_Msg+0x2e0>
 80025c6:	3307      	adds	r3, #7
 80025c8:	10db      	asrs	r3, r3, #3
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d0:	4413      	add	r3, r2
 80025d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025da:	3308      	adds	r3, #8
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b21b      	sxth	r3, r3
 80025e0:	425a      	negs	r2, r3
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	f002 0207 	and.w	r2, r2, #7
 80025ea:	bf58      	it	pl
 80025ec:	4253      	negpl	r3, r2
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	441a      	add	r2, r3
 80025fe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002602:	2301      	movs	r3, #1
 8002604:	2108      	movs	r1, #8
 8002606:	f7fe f891 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800260a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800260e:	3308      	adds	r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	da00      	bge.n	8002616 <Send_Init_Msg+0x32e>
 8002614:	3307      	adds	r3, #7
 8002616:	10db      	asrs	r3, r3, #3
 8002618:	b29a      	uxth	r2, r3
 800261a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261e:	4413      	add	r3, r2
 8002620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002624:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002628:	3308      	adds	r3, #8
 800262a:	b29b      	uxth	r3, r3
 800262c:	b21b      	sxth	r3, r3
 800262e:	425a      	negs	r2, r3
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	f002 0207 	and.w	r2, r2, #7
 8002638:	bf58      	it	pl
 800263a:	4253      	negpl	r3, r2
 800263c:	b21b      	sxth	r3, r3
 800263e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <Send_Init_Msg+0x5b8>)
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	3306      	adds	r3, #6
 800264c:	2205      	movs	r2, #5
 800264e:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	441a      	add	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4990      	ldr	r1, [pc, #576]	; (80028a0 <Send_Init_Msg+0x5b8>)
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	440b      	add	r3, r1
 8002662:	3306      	adds	r3, #6
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800266a:	2110      	movs	r1, #16
 800266c:	f7fe f85e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002670:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002674:	3310      	adds	r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <Send_Init_Msg+0x394>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	b29a      	uxth	r2, r3
 8002680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002684:	4413      	add	r3, r2
 8002686:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800268a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800268e:	3310      	adds	r3, #16
 8002690:	b29b      	uxth	r3, r3
 8002692:	b21b      	sxth	r3, r3
 8002694:	425a      	negs	r2, r3
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	f002 0207 	and.w	r2, r2, #7
 800269e:	bf58      	it	pl
 80026a0:	4253      	negpl	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 80026a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ac:	f107 020c 	add.w	r2, r7, #12
 80026b0:	441a      	add	r2, r3
 80026b2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026b6:	2317      	movs	r3, #23
 80026b8:	2108      	movs	r1, #8
 80026ba:	f7fe f837 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026c2:	3308      	adds	r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da00      	bge.n	80026ca <Send_Init_Msg+0x3e2>
 80026c8:	3307      	adds	r3, #7
 80026ca:	10db      	asrs	r3, r3, #3
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d2:	4413      	add	r3, r2
 80026d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026dc:	3308      	adds	r3, #8
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	425a      	negs	r2, r3
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	f002 0207 	and.w	r2, r2, #7
 80026ec:	bf58      	it	pl
 80026ee:	4253      	negpl	r3, r2
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	441a      	add	r2, r3
 8002700:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002704:	2301      	movs	r3, #1
 8002706:	2110      	movs	r1, #16
 8002708:	f7fe f810 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800270c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002710:	3310      	adds	r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	da00      	bge.n	8002718 <Send_Init_Msg+0x430>
 8002716:	3307      	adds	r3, #7
 8002718:	10db      	asrs	r3, r3, #3
 800271a:	b29a      	uxth	r2, r3
 800271c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002720:	4413      	add	r3, r2
 8002722:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002726:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800272a:	3310      	adds	r3, #16
 800272c:	b29b      	uxth	r3, r3
 800272e:	b21b      	sxth	r3, r3
 8002730:	425a      	negs	r2, r3
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	f002 0207 	and.w	r2, r2, #7
 800273a:	bf58      	it	pl
 800273c:	4253      	negpl	r3, r2
 800273e:	b21b      	sxth	r3, r3
 8002740:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002744:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002748:	f107 020c 	add.w	r2, r7, #12
 800274c:	441a      	add	r2, r3
 800274e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <Send_Init_Msg+0x5bc>)
 8002754:	2120      	movs	r1, #32
 8002756:	f7fd ffe9 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800275a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800275e:	3320      	adds	r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	da00      	bge.n	8002766 <Send_Init_Msg+0x47e>
 8002764:	3307      	adds	r3, #7
 8002766:	10db      	asrs	r3, r3, #3
 8002768:	b29a      	uxth	r2, r3
 800276a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800276e:	4413      	add	r3, r2
 8002770:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002774:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002778:	3320      	adds	r3, #32
 800277a:	b29b      	uxth	r3, r3
 800277c:	b21b      	sxth	r3, r3
 800277e:	425a      	negs	r2, r3
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	f002 0207 	and.w	r2, r2, #7
 8002788:	bf58      	it	pl
 800278a:	4253      	negpl	r3, r2
 800278c:	b21b      	sxth	r3, r3
 800278e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002796:	f107 020c 	add.w	r2, r7, #12
 800279a:	441a      	add	r2, r3
 800279c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027a0:	2300      	movs	r3, #0
 80027a2:	2110      	movs	r1, #16
 80027a4:	f7fd ffc2 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027ac:	3310      	adds	r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da00      	bge.n	80027b4 <Send_Init_Msg+0x4cc>
 80027b2:	3307      	adds	r3, #7
 80027b4:	10db      	asrs	r3, r3, #3
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027bc:	4413      	add	r3, r2
 80027be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027c6:	3310      	adds	r3, #16
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	425a      	negs	r2, r3
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	f002 0207 	and.w	r2, r2, #7
 80027d6:	bf58      	it	pl
 80027d8:	4253      	negpl	r3, r2
 80027da:	b21b      	sxth	r3, r3
 80027dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e4:	f107 020c 	add.w	r2, r7, #12
 80027e8:	441a      	add	r2, r3
 80027ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027ee:	2300      	movs	r3, #0
 80027f0:	2110      	movs	r1, #16
 80027f2:	f7fd ff9b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027fa:	3310      	adds	r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da00      	bge.n	8002802 <Send_Init_Msg+0x51a>
 8002800:	3307      	adds	r3, #7
 8002802:	10db      	asrs	r3, r3, #3
 8002804:	b29a      	uxth	r2, r3
 8002806:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800280a:	4413      	add	r3, r2
 800280c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002810:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002814:	3310      	adds	r3, #16
 8002816:	b29b      	uxth	r3, r3
 8002818:	b21b      	sxth	r3, r3
 800281a:	425a      	negs	r2, r3
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	f002 0207 	and.w	r2, r2, #7
 8002824:	bf58      	it	pl
 8002826:	4253      	negpl	r3, r2
 8002828:	b21b      	sxth	r3, r3
 800282a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800282e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	441a      	add	r2, r3
 8002838:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800283c:	2300      	movs	r3, #0
 800283e:	2110      	movs	r1, #16
 8002840:	f7fd ff74 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002844:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002848:	3310      	adds	r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	da00      	bge.n	8002850 <Send_Init_Msg+0x568>
 800284e:	3307      	adds	r3, #7
 8002850:	10db      	asrs	r3, r3, #3
 8002852:	b29a      	uxth	r2, r3
 8002854:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002858:	4413      	add	r3, r2
 800285a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800285e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002862:	3310      	adds	r3, #16
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21b      	sxth	r3, r3
 8002868:	425a      	negs	r2, r3
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	f002 0207 	and.w	r2, r2, #7
 8002872:	bf58      	it	pl
 8002874:	4253      	negpl	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 800287c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002880:	f107 020c 	add.w	r2, r7, #12
 8002884:	441a      	add	r2, r3
 8002886:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800288a:	2300      	movs	r3, #0
 800288c:	2110      	movs	r1, #16
 800288e:	f7fd ff4d 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002892:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002896:	3310      	adds	r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	da05      	bge.n	80028a8 <Send_Init_Msg+0x5c0>
 800289c:	3307      	adds	r3, #7
 800289e:	e003      	b.n	80028a8 <Send_Init_Msg+0x5c0>
 80028a0:	200011c4 	.word	0x200011c4
 80028a4:	33e232af 	.word	0x33e232af
 80028a8:	10db      	asrs	r3, r3, #3
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028b0:	4413      	add	r3, r2
 80028b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028ba:	3310      	adds	r3, #16
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b21b      	sxth	r3, r3
 80028c0:	425a      	negs	r2, r3
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	f002 0207 	and.w	r2, r2, #7
 80028ca:	bf58      	it	pl
 80028cc:	4253      	negpl	r3, r2
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4ab2      	ldr	r2, [pc, #712]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	3308      	adds	r3, #8
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4ab0      	ldr	r2, [pc, #704]	; (8002ba4 <Send_Init_Msg+0x8bc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d90d      	bls.n	8002902 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4aad      	ldr	r2, [pc, #692]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	3308      	adds	r3, #8
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	3a01      	subs	r2, #1
 80028f6:	49aa      	ldr	r1, [pc, #680]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	440b      	add	r3, r1
 80028fc:	330c      	adds	r3, #12
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e00c      	b.n	800291c <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4aa6      	ldr	r2, [pc, #664]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	3308      	adds	r3, #8
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	3201      	adds	r2, #1
 8002912:	49a3      	ldr	r1, [pc, #652]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	440b      	add	r3, r1
 8002918:	330c      	adds	r3, #12
 800291a:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800291c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002920:	f107 020c 	add.w	r2, r7, #12
 8002924:	441a      	add	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	499d      	ldr	r1, [pc, #628]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	440b      	add	r3, r1
 800292e:	330c      	adds	r3, #12
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002936:	2118      	movs	r1, #24
 8002938:	f7fd fef8 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	79fa      	ldrb	r2, [r7, #7]
 8002940:	4997      	ldr	r1, [pc, #604]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	440b      	add	r3, r1
 8002946:	330c      	adds	r3, #12
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	4897      	ldr	r0, [pc, #604]	; (8002ba8 <Send_Init_Msg+0x8c0>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4403      	add	r3, r0
 8002956:	330c      	adds	r3, #12
 8002958:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 800295a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800295e:	3318      	adds	r3, #24
 8002960:	2b00      	cmp	r3, #0
 8002962:	da00      	bge.n	8002966 <Send_Init_Msg+0x67e>
 8002964:	3307      	adds	r3, #7
 8002966:	10db      	asrs	r3, r3, #3
 8002968:	b29a      	uxth	r2, r3
 800296a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800296e:	4413      	add	r3, r2
 8002970:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002974:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002978:	3318      	adds	r3, #24
 800297a:	b29b      	uxth	r3, r3
 800297c:	b21b      	sxth	r3, r3
 800297e:	425a      	negs	r2, r3
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	f002 0207 	and.w	r2, r2, #7
 8002988:	bf58      	it	pl
 800298a:	4253      	negpl	r3, r2
 800298c:	b21b      	sxth	r3, r3
 800298e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4a85      	ldr	r2, [pc, #532]	; (8002bac <Send_Init_Msg+0x8c4>)
 8002996:	5cd2      	ldrb	r2, [r2, r3]
 8002998:	3201      	adds	r2, #1
 800299a:	b2d1      	uxtb	r1, r2
 800299c:	4a83      	ldr	r2, [pc, #524]	; (8002bac <Send_Init_Msg+0x8c4>)
 800299e:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a82      	ldr	r2, [pc, #520]	; (8002bac <Send_Init_Msg+0x8c4>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	2bb3      	cmp	r3, #179	; 0xb3
 80029a8:	d804      	bhi.n	80029b4 <Send_Init_Msg+0x6cc>
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4a7f      	ldr	r2, [pc, #508]	; (8002bac <Send_Init_Msg+0x8c4>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <Send_Init_Msg+0x8c4>)
 80029b8:	210a      	movs	r1, #10
 80029ba:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029c0:	f107 020c 	add.w	r2, r7, #12
 80029c4:	441a      	add	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	4978      	ldr	r1, [pc, #480]	; (8002bac <Send_Init_Msg+0x8c4>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029d0:	2108      	movs	r1, #8
 80029d2:	f7fd feab 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029d6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029da:	3308      	adds	r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da00      	bge.n	80029e2 <Send_Init_Msg+0x6fa>
 80029e0:	3307      	adds	r3, #7
 80029e2:	10db      	asrs	r3, r3, #3
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ea:	4413      	add	r3, r2
 80029ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029f4:	3308      	adds	r3, #8
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21b      	sxth	r3, r3
 80029fa:	425a      	negs	r2, r3
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	f002 0207 	and.w	r2, r2, #7
 8002a04:	bf58      	it	pl
 8002a06:	4253      	negpl	r3, r2
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8002a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	441a      	add	r2, r3
 8002a18:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	2108      	movs	r1, #8
 8002a20:	f7fd fe84 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da00      	bge.n	8002a30 <Send_Init_Msg+0x748>
 8002a2e:	3307      	adds	r3, #7
 8002a30:	10db      	asrs	r3, r3, #3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a42:	3308      	adds	r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	425a      	negs	r2, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	f002 0207 	and.w	r2, r2, #7
 8002a52:	bf58      	it	pl
 8002a54:	4253      	negpl	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	441a      	add	r2, r3
 8002a66:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	f7fd fe5d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a72:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a76:	3308      	adds	r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da00      	bge.n	8002a7e <Send_Init_Msg+0x796>
 8002a7c:	3307      	adds	r3, #7
 8002a7e:	10db      	asrs	r3, r3, #3
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a86:	4413      	add	r3, r2
 8002a88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a90:	3308      	adds	r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	425a      	negs	r2, r3
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	f002 0207 	and.w	r2, r2, #7
 8002aa0:	bf58      	it	pl
 8002aa2:	4253      	negpl	r3, r2
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aae:	f107 020c 	add.w	r2, r7, #12
 8002ab2:	441a      	add	r2, r3
 8002ab4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2108      	movs	r1, #8
 8002abc:	f7fd fe36 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002ac0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da00      	bge.n	8002acc <Send_Init_Msg+0x7e4>
 8002aca:	3307      	adds	r3, #7
 8002acc:	10db      	asrs	r3, r3, #3
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ada:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ade:	3308      	adds	r3, #8
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	425a      	negs	r2, r3
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	f002 0207 	and.w	r2, r2, #7
 8002aee:	bf58      	it	pl
 8002af0:	4253      	negpl	r3, r2
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <Send_Init_Msg+0x8c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d060      	beq.n	8002bc8 <Send_Init_Msg+0x8e0>
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <Send_Init_Msg+0x8c8>)
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d15b      	bne.n	8002bc8 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002b10:	230c      	movs	r3, #12
 8002b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b16:	4827      	ldr	r0, [pc, #156]	; (8002bb4 <Send_Init_Msg+0x8cc>)
 8002b18:	f017 f848 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <Send_Init_Msg+0x8d0>)
 8002b20:	fba3 2301 	umull	r2, r3, r3, r1
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	4613      	mov	r3, r2
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	1aca      	subs	r2, r1, r3
 8002b32:	b2d3      	uxtb	r3, r2
 8002b34:	3301      	adds	r3, #1
 8002b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b3a:	4820      	ldr	r0, [pc, #128]	; (8002bbc <Send_Init_Msg+0x8d4>)
 8002b3c:	f01f fc16 	bl	802236c <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <Send_Init_Msg+0x8d8>)
 8002b50:	f01f fb70 	bl	8022234 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d108      	bne.n	8002b7a <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <Send_Init_Msg+0x8b8>)
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	3303      	adds	r3, #3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	3b02      	subs	r3, #2
 8002b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4810      	ldr	r0, [pc, #64]	; (8002bc4 <Send_Init_Msg+0x8dc>)
 8002b82:	f01f fb57 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b8a:	f107 020c 	add.w	r2, r7, #12
 8002b8e:	441a      	add	r2, r3
 8002b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b94:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b98:	2108      	movs	r1, #8
 8002b9a:	f7fd fdc7 	bl	800072c <InsertBits>
	{
 8002b9e:	e022      	b.n	8002be6 <Send_Init_Msg+0x8fe>
 8002ba0:	200011c4 	.word	0x200011c4
 8002ba4:	00ffffef 	.word	0x00ffffef
 8002ba8:	20001674 	.word	0x20001674
 8002bac:	2000010c 	.word	0x2000010c
 8002bb0:	2000195c 	.word	0x2000195c
 8002bb4:	20009cf4 	.word	0x20009cf4
 8002bb8:	10624dd3 	.word	0x10624dd3
 8002bbc:	08023eb0 	.word	0x08023eb0
 8002bc0:	08023ee0 	.word	0x08023ee0
 8002bc4:	08023efc 	.word	0x08023efc
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bcc:	f107 020c 	add.w	r2, r7, #12
 8002bd0:	441a      	add	r2, r3
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	494e      	ldr	r1, [pc, #312]	; (8002d10 <Send_Init_Msg+0xa28>)
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bdc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002be0:	2108      	movs	r1, #8
 8002be2:	f7fd fda3 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002be6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bea:	3308      	adds	r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da00      	bge.n	8002bf2 <Send_Init_Msg+0x90a>
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	10db      	asrs	r3, r3, #3
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c04:	3308      	adds	r3, #8
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b21b      	sxth	r3, r3
 8002c0a:	425a      	negs	r2, r3
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	f002 0207 	and.w	r2, r2, #7
 8002c14:	bf58      	it	pl
 8002c16:	4253      	negpl	r3, r2
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c22:	f107 020c 	add.w	r2, r7, #12
 8002c26:	441a      	add	r2, r3
 8002c28:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2108      	movs	r1, #8
 8002c30:	f7fd fd7c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c34:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c38:	3308      	adds	r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da00      	bge.n	8002c40 <Send_Init_Msg+0x958>
 8002c3e:	3307      	adds	r3, #7
 8002c40:	10db      	asrs	r3, r3, #3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c48:	4413      	add	r3, r2
 8002c4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c52:	3308      	adds	r3, #8
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	425a      	negs	r2, r3
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	f002 0207 	and.w	r2, r2, #7
 8002c62:	bf58      	it	pl
 8002c64:	4253      	negpl	r3, r2
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f010 f802 	bl	8012c80 <CalculateDirectReverseCrc>
 8002c7c:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c82:	f107 020c 	add.w	r2, r7, #12
 8002c86:	441a      	add	r2, r3
 8002c88:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	2120      	movs	r1, #32
 8002c90:	f7fd fd4c 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c98:	3320      	adds	r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da00      	bge.n	8002ca0 <Send_Init_Msg+0x9b8>
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	10db      	asrs	r3, r3, #3
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca8:	4413      	add	r3, r2
 8002caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	425a      	negs	r2, r3
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	f002 0207 	and.w	r2, r2, #7
 8002cc2:	bf58      	it	pl
 8002cc4:	4253      	negpl	r3, r2
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <Send_Init_Msg+0xa2c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0a5b      	lsrs	r3, r3, #9
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <Send_Init_Msg+0xa0a>
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <Send_Init_Msg+0xa2c>)
 8002cdc:	791b      	ldrb	r3, [r3, #4]
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <Send_Init_Msg+0xa30>)
 8002ce6:	f01f fb41 	bl	802236c <puts>
		printf("Not Sending Reply");
 8002cea:	480c      	ldr	r0, [pc, #48]	; (8002d1c <Send_Init_Msg+0xa34>)
 8002cec:	f01f faa2 	bl	8022234 <iprintf>
 8002cf0:	e009      	b.n	8002d06 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf6:	b2d9      	uxtb	r1, r3
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fc68 	bl	80075d4 <Process_Sending_Reply>
	}
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	375c      	adds	r7, #92	; 0x5c
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000304 	.word	0x20000304
 8002d14:	2000195c 	.word	0x2000195c
 8002d18:	08023f18 	.word	0x08023f18
 8002d1c:	08023f30 	.word	0x08023f30

08002d20 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b099      	sub	sp, #100	; 0x64
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	70fb      	strb	r3, [r7, #3]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70bb      	strb	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d48:	f012 fb72 	bl	8015430 <HAL_GetTick>
 8002d4c:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	2238      	movs	r2, #56	; 0x38
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f01f f979 	bl	8022064 <memset>
	BITSTUFFINIT(0, 0);
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d7e:	49a1      	ldr	r1, [pc, #644]	; (8003004 <Vital_Msg_extr+0x2e4>)
 8002d80:	48a1      	ldr	r0, [pc, #644]	; (8003008 <Vital_Msg_extr+0x2e8>)
 8002d82:	f7fd fa5d 	bl	8000240 <strcmp>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8138 	beq.w	8002ffe <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d8e:	4b9f      	ldr	r3, [pc, #636]	; (800300c <Vital_Msg_extr+0x2ec>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02d      	beq.n	8002df6 <Vital_Msg_extr+0xd6>
 8002d9a:	4b9c      	ldr	r3, [pc, #624]	; (800300c <Vital_Msg_extr+0x2ec>)
 8002d9c:	791b      	ldrb	r3, [r3, #4]
 8002d9e:	78ba      	ldrb	r2, [r7, #2]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d128      	bne.n	8002df6 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002da4:	2316      	movs	r3, #22
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002da8:	4899      	ldr	r0, [pc, #612]	; (8003010 <Vital_Msg_extr+0x2f0>)
 8002daa:	f016 feff 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b98      	ldr	r3, [pc, #608]	; (8003014 <Vital_Msg_extr+0x2f4>)
 8002db2:	fba3 1302 	umull	r1, r3, r3, r2
 8002db6:	0dd9      	lsrs	r1, r3, #23
 8002db8:	460b      	mov	r3, r1
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	1a5b      	subs	r3, r3, r1
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002dc4:	4894      	ldr	r0, [pc, #592]	; (8003018 <Vital_Msg_extr+0x2f8>)
 8002dc6:	f01f fad1 	bl	802236c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002dca:	78bb      	ldrb	r3, [r7, #2]
 8002dcc:	4a93      	ldr	r2, [pc, #588]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4891      	ldr	r0, [pc, #580]	; (8003020 <Vital_Msg_extr+0x300>)
 8002dda:	f01f fa2b 	bl	8022234 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002de0:	4890      	ldr	r0, [pc, #576]	; (8003024 <Vital_Msg_extr+0x304>)
 8002de2:	f01f fa27 	bl	8022234 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dec:	2118      	movs	r1, #24
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fd fc9c 	bl	800072c <InsertBits>
	{
 8002df4:	e00b      	b.n	8002e0e <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002df6:	78bb      	ldrb	r3, [r7, #2]
 8002df8:	4a88      	ldr	r2, [pc, #544]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3308      	adds	r3, #8
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f107 0208 	add.w	r2, r7, #8
 8002e06:	2118      	movs	r1, #24
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fc8f 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e14:	e010      	b.n	8002e38 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e16:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e22:	3303      	adds	r3, #3
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	443b      	add	r3, r7
 8002e2a:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e32:	3301      	adds	r3, #1
 8002e34:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e38:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	3b05      	subs	r3, #5
 8002e40:	429a      	cmp	r2, r3
 8002e42:	dbe8      	blt.n	8002e16 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e44:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3303      	adds	r3, #3
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00f ff13 	bl	8012c80 <CalculateDirectReverseCrc>
 8002e5a:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	3b05      	subs	r3, #5
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	441a      	add	r2, r3
 8002e64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e68:	2120      	movs	r1, #32
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fbd2 	bl	8000614 <ExtractBits>
 8002e70:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	429a      	cmp	r2, r3
 8002e78:	f000 80ec 	beq.w	8003054 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <Vital_Msg_extr+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3305      	adds	r3, #5
 8002e94:	461a      	mov	r2, r3
 8002e96:	2108      	movs	r1, #8
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fbbb 	bl	8000614 <ExtractBits>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	f040 8098 	bne.w	8002fd6 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002ea6:	4860      	ldr	r0, [pc, #384]	; (8003028 <Vital_Msg_extr+0x308>)
 8002ea8:	f01f fa60 	bl	802236c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	223c      	movs	r2, #60	; 0x3c
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f01f f8d5 	bl	8022064 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002eba:	78bb      	ldrb	r3, [r7, #2]
 8002ebc:	4a57      	ldr	r2, [pc, #348]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f107 0208 	add.w	r2, r7, #8
 8002ecc:	2118      	movs	r1, #24
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fc2c 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eda:	e010      	b.n	8002efe <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002edc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee8:	3303      	adds	r3, #3
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	443b      	add	r3, r7
 8002ef0:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ef4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002efe:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	3b05      	subs	r3, #5
 8002f06:	429a      	cmp	r2, r3
 8002f08:	dbe8      	blt.n	8002edc <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002f0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3303      	adds	r3, #3
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00f feb0 	bl	8012c80 <CalculateDirectReverseCrc>
 8002f20:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	3b05      	subs	r3, #5
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	441a      	add	r2, r3
 8002f2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f2e:	2120      	movs	r1, #32
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb6f 	bl	8000614 <ExtractBits>
 8002f36:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d136      	bne.n	8002fae <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f40:	483a      	ldr	r0, [pc, #232]	; (800302c <Vital_Msg_extr+0x30c>)
 8002f42:	f01f fa13 	bl	802236c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f48:	4839      	ldr	r0, [pc, #228]	; (8003030 <Vital_Msg_extr+0x310>)
 8002f4a:	f01f f973 	bl	8022234 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	4a32      	ldr	r2, [pc, #200]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	4413      	add	r3, r2
 8002f56:	3308      	adds	r3, #8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4835      	ldr	r0, [pc, #212]	; (8003034 <Vital_Msg_extr+0x314>)
 8002f5e:	f01f f969 	bl	8022234 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f62:	78bb      	ldrb	r3, [r7, #2]
 8002f64:	492d      	ldr	r1, [pc, #180]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002f66:	011a      	lsls	r2, r3, #4
 8002f68:	440a      	add	r2, r1
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	3201      	adds	r2, #1
 8002f70:	492a      	ldr	r1, [pc, #168]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	440b      	add	r3, r1
 8002f76:	3308      	adds	r3, #8
 8002f78:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	4413      	add	r3, r2
 8002f82:	3308      	adds	r3, #8
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	482b      	ldr	r0, [pc, #172]	; (8003038 <Vital_Msg_extr+0x318>)
 8002f8a:	f01f f953 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f8e:	78bb      	ldrb	r3, [r7, #2]
 8002f90:	78ba      	ldrb	r2, [r7, #2]
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <Vital_Msg_extr+0x2fc>)
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	440b      	add	r3, r1
 8002f98:	3308      	adds	r3, #8
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	4827      	ldr	r0, [pc, #156]	; (800303c <Vital_Msg_extr+0x31c>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4403      	add	r3, r0
 8002fa8:	3308      	adds	r3, #8
 8002faa:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002fac:	e053      	b.n	8003056 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <Vital_Msg_extr+0x320>)
 8002fb2:	3366      	adds	r3, #102	; 0x66
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4821      	ldr	r0, [pc, #132]	; (8003044 <Vital_Msg_extr+0x324>)
 8002fbe:	f01f f939 	bl	8022234 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fc4:	4820      	ldr	r0, [pc, #128]	; (8003048 <Vital_Msg_extr+0x328>)
 8002fc6:	f01f f935 	bl	8022234 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fcc:	481f      	ldr	r0, [pc, #124]	; (800304c <Vital_Msg_extr+0x32c>)
 8002fce:	f01f f931 	bl	8022234 <iprintf>
				return;
 8002fd2:	f000 beac 	b.w	8003d2e <Vital_Msg_extr+0x100e>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fd6:	78bb      	ldrb	r3, [r7, #2]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <Vital_Msg_extr+0x320>)
 8002fda:	3366      	adds	r3, #102	; 0x66
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	481a      	ldr	r0, [pc, #104]	; (8003050 <Vital_Msg_extr+0x330>)
 8002fe6:	f01f f925 	bl	8022234 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fec:	4816      	ldr	r0, [pc, #88]	; (8003048 <Vital_Msg_extr+0x328>)
 8002fee:	f01f f921 	bl	8022234 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002ff2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ff4:	4815      	ldr	r0, [pc, #84]	; (800304c <Vital_Msg_extr+0x32c>)
 8002ff6:	f01f f91d 	bl	8022234 <iprintf>
			return;
 8002ffa:	f000 be98 	b.w	8003d2e <Vital_Msg_extr+0x100e>
		goto ROLLOVER_VITAL;
 8002ffe:	bf00      	nop
 8003000:	e029      	b.n	8003056 <Vital_Msg_extr+0x336>
 8003002:	bf00      	nop
 8003004:	08023a40 	.word	0x08023a40
 8003008:	20000305 	.word	0x20000305
 800300c:	2000195c 	.word	0x2000195c
 8003010:	20009cf4 	.word	0x20009cf4
 8003014:	80008001 	.word	0x80008001
 8003018:	08023f44 	.word	0x08023f44
 800301c:	200011c4 	.word	0x200011c4
 8003020:	08023f64 	.word	0x08023f64
 8003024:	08023f8c 	.word	0x08023f8c
 8003028:	08023fb4 	.word	0x08023fb4
 800302c:	08023fd0 	.word	0x08023fd0
 8003030:	08023fe8 	.word	0x08023fe8
 8003034:	08024008 	.word	0x08024008
 8003038:	08024028 	.word	0x08024028
 800303c:	20001674 	.word	0x20001674
 8003040:	20000304 	.word	0x20000304
 8003044:	08024054 	.word	0x08024054
 8003048:	08023c84 	.word	0x08023c84
 800304c:	08023c94 	.word	0x08023c94
 8003050:	08024074 	.word	0x08024074
		}
	}

	ROLLOVER_VITAL:
 8003054:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	49c3      	ldr	r1, [pc, #780]	; (8003368 <Vital_Msg_extr+0x648>)
 800305a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003060:	78bb      	ldrb	r3, [r7, #2]
 8003062:	49c2      	ldr	r1, [pc, #776]	; (800336c <Vital_Msg_extr+0x64c>)
 8003064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	4ac0      	ldr	r2, [pc, #768]	; (8003370 <Vital_Msg_extr+0x650>)
 800306e:	2101      	movs	r1, #1
 8003070:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003072:	78ba      	ldrb	r2, [r7, #2]
 8003074:	4613      	mov	r3, r2
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	4413      	add	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4abd      	ldr	r2, [pc, #756]	; (8003374 <Vital_Msg_extr+0x654>)
 800307e:	4413      	add	r3, r2
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f01e ffed 	bl	8022064 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 800308a:	78ba      	ldrb	r2, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4ab7      	ldr	r2, [pc, #732]	; (8003374 <Vital_Msg_extr+0x654>)
 8003096:	4413      	add	r3, r2
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4618      	mov	r0, r3
 800309e:	f01e ffb9 	bl	8022014 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80030a2:	78ba      	ldrb	r2, [r7, #2]
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	b298      	uxth	r0, r3
 80030a8:	49b2      	ldr	r1, [pc, #712]	; (8003374 <Vital_Msg_extr+0x654>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	3340      	adds	r3, #64	; 0x40
 80030b6:	4602      	mov	r2, r0
 80030b8:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030ba:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030be:	3308      	adds	r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da00      	bge.n	80030c6 <Vital_Msg_extr+0x3a6>
 80030c4:	3307      	adds	r3, #7
 80030c6:	10db      	asrs	r3, r3, #3
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ce:	4413      	add	r3, r2
 80030d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030d8:	3308      	adds	r3, #8
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b21b      	sxth	r3, r3
 80030de:	425a      	negs	r2, r3
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	f002 0207 	and.w	r2, r2, #7
 80030e8:	bf58      	it	pl
 80030ea:	4253      	negpl	r3, r2
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	441a      	add	r2, r3
 80030fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030fe:	2110      	movs	r1, #16
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fa87 	bl	8000614 <ExtractBits>
 8003106:	4603      	mov	r3, r0
 8003108:	78ba      	ldrb	r2, [r7, #2]
 800310a:	b298      	uxth	r0, r3
 800310c:	499a      	ldr	r1, [pc, #616]	; (8003378 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	4602      	mov	r2, r0
 800311c:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800311e:	78ba      	ldrb	r2, [r7, #2]
 8003120:	4995      	ldr	r1, [pc, #596]	; (8003378 <Vital_Msg_extr+0x658>)
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	440b      	add	r3, r1
 800312c:	3328      	adds	r3, #40	; 0x28
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	4892      	ldr	r0, [pc, #584]	; (800337c <Vital_Msg_extr+0x65c>)
 8003134:	f01f f87e 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 8003138:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800313c:	3310      	adds	r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	da00      	bge.n	8003144 <Vital_Msg_extr+0x424>
 8003142:	3307      	adds	r3, #7
 8003144:	10db      	asrs	r3, r3, #3
 8003146:	b29a      	uxth	r2, r3
 8003148:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800314c:	4413      	add	r3, r2
 800314e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003152:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003156:	3310      	adds	r3, #16
 8003158:	b29b      	uxth	r3, r3
 800315a:	b21b      	sxth	r3, r3
 800315c:	425a      	negs	r2, r3
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	f002 0207 	and.w	r2, r2, #7
 8003166:	bf58      	it	pl
 8003168:	4253      	negpl	r3, r2
 800316a:	b21b      	sxth	r3, r3
 800316c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003170:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	441a      	add	r2, r3
 8003178:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800317c:	2110      	movs	r1, #16
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fa48 	bl	8000614 <ExtractBits>
 8003184:	4603      	mov	r3, r0
 8003186:	78ba      	ldrb	r2, [r7, #2]
 8003188:	b298      	uxth	r0, r3
 800318a:	497b      	ldr	r1, [pc, #492]	; (8003378 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	4602      	mov	r2, r0
 800319a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 800319c:	78ba      	ldrb	r2, [r7, #2]
 800319e:	4976      	ldr	r1, [pc, #472]	; (8003378 <Vital_Msg_extr+0x658>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	440b      	add	r3, r1
 80031aa:	3326      	adds	r3, #38	; 0x26
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4873      	ldr	r0, [pc, #460]	; (8003380 <Vital_Msg_extr+0x660>)
 80031b2:	f01f f83f 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 80031b6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031ba:	3310      	adds	r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da00      	bge.n	80031c2 <Vital_Msg_extr+0x4a2>
 80031c0:	3307      	adds	r3, #7
 80031c2:	10db      	asrs	r3, r3, #3
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031ca:	4413      	add	r3, r2
 80031cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031d4:	3310      	adds	r3, #16
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b21b      	sxth	r3, r3
 80031da:	425a      	negs	r2, r3
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	f002 0207 	and.w	r2, r2, #7
 80031e4:	bf58      	it	pl
 80031e6:	4253      	negpl	r3, r2
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	441a      	add	r2, r3
 80031f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031fa:	2108      	movs	r1, #8
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fa09 	bl	8000614 <ExtractBits>
 8003202:	4602      	mov	r2, r0
 8003204:	78bb      	ldrb	r3, [r7, #2]
 8003206:	b2d1      	uxtb	r1, r2
 8003208:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <Vital_Msg_extr+0x664>)
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	3302      	adds	r3, #2
 8003210:	460a      	mov	r2, r1
 8003212:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003214:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003218:	3308      	adds	r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	da00      	bge.n	8003220 <Vital_Msg_extr+0x500>
 800321e:	3307      	adds	r3, #7
 8003220:	10db      	asrs	r3, r3, #3
 8003222:	b29a      	uxth	r2, r3
 8003224:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003228:	4413      	add	r3, r2
 800322a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800322e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003232:	3308      	adds	r3, #8
 8003234:	b29b      	uxth	r3, r3
 8003236:	b21b      	sxth	r3, r3
 8003238:	425a      	negs	r2, r3
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	f002 0207 	and.w	r2, r2, #7
 8003242:	bf58      	it	pl
 8003244:	4253      	negpl	r3, r2
 8003246:	b21b      	sxth	r3, r3
 8003248:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800324c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	441a      	add	r2, r3
 8003254:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003258:	2108      	movs	r1, #8
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f9da 	bl	8000614 <ExtractBits>
 8003260:	4602      	mov	r2, r0
 8003262:	78bb      	ldrb	r3, [r7, #2]
 8003264:	b2d1      	uxtb	r1, r2
 8003266:	4a47      	ldr	r2, [pc, #284]	; (8003384 <Vital_Msg_extr+0x664>)
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	4413      	add	r3, r2
 800326c:	3301      	adds	r3, #1
 800326e:	460a      	mov	r2, r1
 8003270:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003272:	78bb      	ldrb	r3, [r7, #2]
 8003274:	4a43      	ldr	r2, [pc, #268]	; (8003384 <Vital_Msg_extr+0x664>)
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4413      	add	r3, r2
 800327a:	3301      	adds	r3, #1
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d138      	bne.n	80032f4 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <Vital_Msg_extr+0x668>)
 8003286:	3366      	adds	r3, #102	; 0x66
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4619      	mov	r1, r3
 8003290:	483e      	ldr	r0, [pc, #248]	; (800338c <Vital_Msg_extr+0x66c>)
 8003292:	f01e ffcf 	bl	8022234 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <Vital_Msg_extr+0x664>)
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	330c      	adds	r3, #12
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	483a      	ldr	r0, [pc, #232]	; (8003390 <Vital_Msg_extr+0x670>)
 80032a6:	f01e ffc5 	bl	8022234 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032aa:	78bb      	ldrb	r3, [r7, #2]
 80032ac:	4935      	ldr	r1, [pc, #212]	; (8003384 <Vital_Msg_extr+0x664>)
 80032ae:	011a      	lsls	r2, r3, #4
 80032b0:	440a      	add	r2, r1
 80032b2:	320c      	adds	r2, #12
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	3201      	adds	r2, #1
 80032b8:	4932      	ldr	r1, [pc, #200]	; (8003384 <Vital_Msg_extr+0x664>)
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	440b      	add	r3, r1
 80032be:	330c      	adds	r3, #12
 80032c0:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <Vital_Msg_extr+0x664>)
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	330c      	adds	r3, #12
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4830      	ldr	r0, [pc, #192]	; (8003394 <Vital_Msg_extr+0x674>)
 80032d2:	f01e ffaf 	bl	8022234 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032d6:	78bb      	ldrb	r3, [r7, #2]
 80032d8:	78ba      	ldrb	r2, [r7, #2]
 80032da:	492a      	ldr	r1, [pc, #168]	; (8003384 <Vital_Msg_extr+0x664>)
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	440b      	add	r3, r1
 80032e0:	330c      	adds	r3, #12
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	482c      	ldr	r0, [pc, #176]	; (8003398 <Vital_Msg_extr+0x678>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4403      	add	r3, r0
 80032f0:	330c      	adds	r3, #12
 80032f2:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032f8:	3308      	adds	r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da00      	bge.n	8003300 <Vital_Msg_extr+0x5e0>
 80032fe:	3307      	adds	r3, #7
 8003300:	10db      	asrs	r3, r3, #3
 8003302:	b29a      	uxth	r2, r3
 8003304:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003308:	4413      	add	r3, r2
 800330a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800330e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003312:	3308      	adds	r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	b21b      	sxth	r3, r3
 8003318:	425a      	negs	r2, r3
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	f002 0207 	and.w	r2, r2, #7
 8003322:	bf58      	it	pl
 8003324:	4253      	negpl	r3, r2
 8003326:	b21b      	sxth	r3, r3
 8003328:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800332c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	441a      	add	r2, r3
 8003334:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003338:	2108      	movs	r1, #8
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f96a 	bl	8000614 <ExtractBits>
 8003340:	4603      	mov	r3, r0
 8003342:	78ba      	ldrb	r2, [r7, #2]
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	490c      	ldr	r1, [pc, #48]	; (8003378 <Vital_Msg_extr+0x658>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	440b      	add	r3, r1
 8003352:	3302      	adds	r3, #2
 8003354:	4602      	mov	r2, r0
 8003356:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003358:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800335c:	3308      	adds	r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	da1c      	bge.n	800339c <Vital_Msg_extr+0x67c>
 8003362:	3307      	adds	r3, #7
 8003364:	e01a      	b.n	800339c <Vital_Msg_extr+0x67c>
 8003366:	bf00      	nop
 8003368:	20000fa4 	.word	0x20000fa4
 800336c:	20000fcc 	.word	0x20000fcc
 8003370:	20001018 	.word	0x20001018
 8003374:	20001964 	.word	0x20001964
 8003378:	200013a4 	.word	0x200013a4
 800337c:	08023d74 	.word	0x08023d74
 8003380:	08023d7c 	.word	0x08023d7c
 8003384:	200011c4 	.word	0x200011c4
 8003388:	20000304 	.word	0x20000304
 800338c:	08024088 	.word	0x08024088
 8003390:	080240cc 	.word	0x080240cc
 8003394:	080240dc 	.word	0x080240dc
 8003398:	20001674 	.word	0x20001674
 800339c:	10db      	asrs	r3, r3, #3
 800339e:	b29a      	uxth	r2, r3
 80033a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033a4:	4413      	add	r3, r2
 80033a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80033aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033ae:	3308      	adds	r3, #8
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	425a      	negs	r2, r3
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	f002 0207 	and.w	r2, r2, #7
 80033be:	bf58      	it	pl
 80033c0:	4253      	negpl	r3, r2
 80033c2:	b21b      	sxth	r3, r3
 80033c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	441a      	add	r2, r3
 80033d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033d4:	2110      	movs	r1, #16
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f91c 	bl	8000614 <ExtractBits>
 80033dc:	4602      	mov	r2, r0
 80033de:	78bb      	ldrb	r3, [r7, #2]
 80033e0:	b291      	uxth	r1, r2
 80033e2:	4abd      	ldr	r2, [pc, #756]	; (80036d8 <Vital_Msg_extr+0x9b8>)
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	460a      	mov	r2, r1
 80033ec:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033ee:	49bb      	ldr	r1, [pc, #748]	; (80036dc <Vital_Msg_extr+0x9bc>)
 80033f0:	48bb      	ldr	r0, [pc, #748]	; (80036e0 <Vital_Msg_extr+0x9c0>)
 80033f2:	f7fc ff25 	bl	8000240 <strcmp>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033fc:	78bb      	ldrb	r3, [r7, #2]
 80033fe:	4ab6      	ldr	r2, [pc, #728]	; (80036d8 <Vital_Msg_extr+0x9b8>)
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	78bb      	ldrb	r3, [r7, #2]
 800340a:	f042 0208 	orr.w	r2, r2, #8
 800340e:	b291      	uxth	r1, r2
 8003410:	4ab1      	ldr	r2, [pc, #708]	; (80036d8 <Vital_Msg_extr+0x9b8>)
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	460a      	mov	r2, r1
 800341a:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 800341c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003420:	3310      	adds	r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	da00      	bge.n	8003428 <Vital_Msg_extr+0x708>
 8003426:	3307      	adds	r3, #7
 8003428:	10db      	asrs	r3, r3, #3
 800342a:	b29a      	uxth	r2, r3
 800342c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003430:	4413      	add	r3, r2
 8003432:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003436:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800343a:	3310      	adds	r3, #16
 800343c:	b29b      	uxth	r3, r3
 800343e:	b21b      	sxth	r3, r3
 8003440:	425a      	negs	r2, r3
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	f002 0207 	and.w	r2, r2, #7
 800344a:	bf58      	it	pl
 800344c:	4253      	negpl	r3, r2
 800344e:	b21b      	sxth	r3, r3
 8003450:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003454:	78bb      	ldrb	r3, [r7, #2]
 8003456:	4aa0      	ldr	r2, [pc, #640]	; (80036d8 <Vital_Msg_extr+0x9b8>)
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8145 	beq.w	80036f4 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800346a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	441a      	add	r2, r3
 8003472:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003476:	2108      	movs	r1, #8
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f8cb 	bl	8000614 <ExtractBits>
 800347e:	4603      	mov	r3, r0
 8003480:	78ba      	ldrb	r2, [r7, #2]
 8003482:	b2d8      	uxtb	r0, r3
 8003484:	4997      	ldr	r1, [pc, #604]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	440b      	add	r3, r1
 8003490:	3305      	adds	r3, #5
 8003492:	4602      	mov	r2, r0
 8003494:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003496:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800349a:	3308      	adds	r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	da00      	bge.n	80034a2 <Vital_Msg_extr+0x782>
 80034a0:	3307      	adds	r3, #7
 80034a2:	10db      	asrs	r3, r3, #3
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034aa:	4413      	add	r3, r2
 80034ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034b4:	3308      	adds	r3, #8
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	425a      	negs	r2, r3
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	f002 0207 	and.w	r2, r2, #7
 80034c4:	bf58      	it	pl
 80034c6:	4253      	negpl	r3, r2
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	441a      	add	r2, r3
 80034d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034da:	2108      	movs	r1, #8
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f899 	bl	8000614 <ExtractBits>
 80034e2:	4603      	mov	r3, r0
 80034e4:	78ba      	ldrb	r2, [r7, #2]
 80034e6:	b2d8      	uxtb	r0, r3
 80034e8:	497e      	ldr	r1, [pc, #504]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	440b      	add	r3, r1
 80034f4:	3304      	adds	r3, #4
 80034f6:	4602      	mov	r2, r0
 80034f8:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034fa:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034fe:	3308      	adds	r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	da00      	bge.n	8003506 <Vital_Msg_extr+0x7e6>
 8003504:	3307      	adds	r3, #7
 8003506:	10db      	asrs	r3, r3, #3
 8003508:	b29a      	uxth	r2, r3
 800350a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800350e:	4413      	add	r3, r2
 8003510:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003514:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003518:	3308      	adds	r3, #8
 800351a:	b29b      	uxth	r3, r3
 800351c:	b21b      	sxth	r3, r3
 800351e:	425a      	negs	r2, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	f002 0207 	and.w	r2, r2, #7
 8003528:	bf58      	it	pl
 800352a:	4253      	negpl	r3, r2
 800352c:	b21b      	sxth	r3, r3
 800352e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003532:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	441a      	add	r2, r3
 800353a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800353e:	2108      	movs	r1, #8
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f867 	bl	8000614 <ExtractBits>
 8003546:	4603      	mov	r3, r0
 8003548:	78ba      	ldrb	r2, [r7, #2]
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	4965      	ldr	r1, [pc, #404]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	3303      	adds	r3, #3
 800355a:	4602      	mov	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800355e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003562:	3308      	adds	r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	da00      	bge.n	800356a <Vital_Msg_extr+0x84a>
 8003568:	3307      	adds	r3, #7
 800356a:	10db      	asrs	r3, r3, #3
 800356c:	b29a      	uxth	r2, r3
 800356e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003572:	4413      	add	r3, r2
 8003574:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003578:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800357c:	3308      	adds	r3, #8
 800357e:	b29b      	uxth	r3, r3
 8003580:	b21b      	sxth	r3, r3
 8003582:	425a      	negs	r2, r3
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	f002 0207 	and.w	r2, r2, #7
 800358c:	bf58      	it	pl
 800358e:	4253      	negpl	r3, r2
 8003590:	b21b      	sxth	r3, r3
 8003592:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003596:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	441a      	add	r2, r3
 800359e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035a2:	2108      	movs	r1, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd f835 	bl	8000614 <ExtractBits>
 80035aa:	4603      	mov	r3, r0
 80035ac:	78ba      	ldrb	r2, [r7, #2]
 80035ae:	b2d8      	uxtb	r0, r3
 80035b0:	494c      	ldr	r1, [pc, #304]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	440b      	add	r3, r1
 80035bc:	4602      	mov	r2, r0
 80035be:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035c0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035c4:	3308      	adds	r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da00      	bge.n	80035cc <Vital_Msg_extr+0x8ac>
 80035ca:	3307      	adds	r3, #7
 80035cc:	10db      	asrs	r3, r3, #3
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035d4:	4413      	add	r3, r2
 80035d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035de:	3308      	adds	r3, #8
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	425a      	negs	r2, r3
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	f002 0207 	and.w	r2, r2, #7
 80035ee:	bf58      	it	pl
 80035f0:	4253      	negpl	r3, r2
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	441a      	add	r2, r3
 8003600:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003604:	2108      	movs	r1, #8
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd f804 	bl	8000614 <ExtractBits>
 800360c:	4603      	mov	r3, r0
 800360e:	78ba      	ldrb	r2, [r7, #2]
 8003610:	b2d8      	uxtb	r0, r3
 8003612:	4934      	ldr	r1, [pc, #208]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	3301      	adds	r3, #1
 8003620:	4602      	mov	r2, r0
 8003622:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003624:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003628:	3308      	adds	r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	da00      	bge.n	8003630 <Vital_Msg_extr+0x910>
 800362e:	3307      	adds	r3, #7
 8003630:	10db      	asrs	r3, r3, #3
 8003632:	b29a      	uxth	r2, r3
 8003634:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003638:	4413      	add	r3, r2
 800363a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800363e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003642:	3308      	adds	r3, #8
 8003644:	b29b      	uxth	r3, r3
 8003646:	b21b      	sxth	r3, r3
 8003648:	425a      	negs	r2, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	f002 0207 	and.w	r2, r2, #7
 8003652:	bf58      	it	pl
 8003654:	4253      	negpl	r3, r2
 8003656:	b21b      	sxth	r3, r3
 8003658:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800365c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	441a      	add	r2, r3
 8003664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003668:	2108      	movs	r1, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ffd2 	bl	8000614 <ExtractBits>
 8003670:	4603      	mov	r3, r0
 8003672:	78ba      	ldrb	r2, [r7, #2]
 8003674:	b2d8      	uxtb	r0, r3
 8003676:	491b      	ldr	r1, [pc, #108]	; (80036e4 <Vital_Msg_extr+0x9c4>)
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	440b      	add	r3, r1
 8003682:	3302      	adds	r3, #2
 8003684:	4602      	mov	r2, r0
 8003686:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003688:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800368c:	3308      	adds	r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	da00      	bge.n	8003694 <Vital_Msg_extr+0x974>
 8003692:	3307      	adds	r3, #7
 8003694:	10db      	asrs	r3, r3, #3
 8003696:	b29a      	uxth	r2, r3
 8003698:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800369c:	4413      	add	r3, r2
 800369e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80036a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036a6:	3308      	adds	r3, #8
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	425a      	negs	r2, r3
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	f002 0207 	and.w	r2, r2, #7
 80036b6:	bf58      	it	pl
 80036b8:	4253      	negpl	r3, r2
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036c0:	78bb      	ldrb	r3, [r7, #2]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fb2e 	bl	8008d24 <IS_MLK_EIPC_TIME_MATCHING>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <Vital_Msg_extr+0x9cc>
 80036ce:	78bb      	ldrb	r3, [r7, #2]
 80036d0:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <Vital_Msg_extr+0x9c8>)
 80036d2:	2100      	movs	r1, #0
 80036d4:	54d1      	strb	r1, [r2, r3]
 80036d6:	e00d      	b.n	80036f4 <Vital_Msg_extr+0x9d4>
 80036d8:	200011c4 	.word	0x200011c4
 80036dc:	08023a40 	.word	0x08023a40
 80036e0:	20000305 	.word	0x20000305
 80036e4:	20001188 	.word	0x20001188
 80036e8:	200010d8 	.word	0x200010d8
 80036ec:	78bb      	ldrb	r3, [r7, #2]
 80036ee:	4a86      	ldr	r2, [pc, #536]	; (8003908 <Vital_Msg_extr+0xbe8>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036f4:	78bb      	ldrb	r3, [r7, #2]
 80036f6:	4a85      	ldr	r2, [pc, #532]	; (800390c <Vital_Msg_extr+0xbec>)
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800370e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	441a      	add	r2, r3
 8003716:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800371a:	2108      	movs	r1, #8
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff79 	bl	8000614 <ExtractBits>
 8003722:	4603      	mov	r3, r0
 8003724:	78ba      	ldrb	r2, [r7, #2]
 8003726:	b2d8      	uxtb	r0, r3
 8003728:	4979      	ldr	r1, [pc, #484]	; (8003910 <Vital_Msg_extr+0xbf0>)
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	440b      	add	r3, r1
 8003734:	3303      	adds	r3, #3
 8003736:	4602      	mov	r2, r0
 8003738:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 800373a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800373e:	3308      	adds	r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	da00      	bge.n	8003746 <Vital_Msg_extr+0xa26>
 8003744:	3307      	adds	r3, #7
 8003746:	10db      	asrs	r3, r3, #3
 8003748:	b29a      	uxth	r2, r3
 800374a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800374e:	4413      	add	r3, r2
 8003750:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003754:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003758:	3308      	adds	r3, #8
 800375a:	b29b      	uxth	r3, r3
 800375c:	b21b      	sxth	r3, r3
 800375e:	425a      	negs	r2, r3
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	f002 0207 	and.w	r2, r2, #7
 8003768:	bf58      	it	pl
 800376a:	4253      	negpl	r3, r2
 800376c:	b21b      	sxth	r3, r3
 800376e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003772:	78ba      	ldrb	r2, [r7, #2]
 8003774:	4966      	ldr	r1, [pc, #408]	; (8003910 <Vital_Msg_extr+0xbf0>)
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	440b      	add	r3, r1
 8003780:	3303      	adds	r3, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	4863      	ldr	r0, [pc, #396]	; (8003914 <Vital_Msg_extr+0xbf4>)
 8003788:	f01e fd54 	bl	8022234 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800378c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	441a      	add	r2, r3
 8003794:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003798:	2108      	movs	r1, #8
 800379a:	4618      	mov	r0, r3
 800379c:	f7fc ff3a 	bl	8000614 <ExtractBits>
 80037a0:	4603      	mov	r3, r0
 80037a2:	78ba      	ldrb	r2, [r7, #2]
 80037a4:	b2d8      	uxtb	r0, r3
 80037a6:	495a      	ldr	r1, [pc, #360]	; (8003910 <Vital_Msg_extr+0xbf0>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	3304      	adds	r3, #4
 80037b4:	4602      	mov	r2, r0
 80037b6:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037b8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037bc:	3308      	adds	r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da00      	bge.n	80037c4 <Vital_Msg_extr+0xaa4>
 80037c2:	3307      	adds	r3, #7
 80037c4:	10db      	asrs	r3, r3, #3
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037cc:	4413      	add	r3, r2
 80037ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037d6:	3308      	adds	r3, #8
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b21b      	sxth	r3, r3
 80037dc:	425a      	negs	r2, r3
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	f002 0207 	and.w	r2, r2, #7
 80037e6:	bf58      	it	pl
 80037e8:	4253      	negpl	r3, r2
 80037ea:	b21b      	sxth	r3, r3
 80037ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037f0:	78ba      	ldrb	r2, [r7, #2]
 80037f2:	4947      	ldr	r1, [pc, #284]	; (8003910 <Vital_Msg_extr+0xbf0>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	440b      	add	r3, r1
 80037fe:	3303      	adds	r3, #3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 800380a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003812:	78ba      	ldrb	r2, [r7, #2]
 8003814:	493e      	ldr	r1, [pc, #248]	; (8003910 <Vital_Msg_extr+0xbf0>)
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	440b      	add	r3, r1
 8003820:	3303      	adds	r3, #3
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800382e:	e00b      	b.n	8003848 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003830:	78ba      	ldrb	r2, [r7, #2]
 8003832:	4937      	ldr	r1, [pc, #220]	; (8003910 <Vital_Msg_extr+0xbf0>)
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	440b      	add	r3, r1
 800383e:	3303      	adds	r3, #3
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003848:	2300      	movs	r3, #0
 800384a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800384e:	e04c      	b.n	80038ea <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003850:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	441a      	add	r2, r3
 8003858:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800385c:	2108      	movs	r1, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fed8 	bl	8000614 <ExtractBits>
 8003864:	4603      	mov	r3, r0
 8003866:	78ba      	ldrb	r2, [r7, #2]
 8003868:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800386c:	b2dc      	uxtb	r4, r3
 800386e:	4828      	ldr	r0, [pc, #160]	; (8003910 <Vital_Msg_extr+0xbf0>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4403      	add	r3, r0
 800387a:	440b      	add	r3, r1
 800387c:	3305      	adds	r3, #5
 800387e:	4622      	mov	r2, r4
 8003880:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003882:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003886:	78ba      	ldrb	r2, [r7, #2]
 8003888:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800388c:	4c20      	ldr	r4, [pc, #128]	; (8003910 <Vital_Msg_extr+0xbf0>)
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4423      	add	r3, r4
 8003898:	440b      	add	r3, r1
 800389a:	3305      	adds	r3, #5
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4601      	mov	r1, r0
 80038a2:	481d      	ldr	r0, [pc, #116]	; (8003918 <Vital_Msg_extr+0xbf8>)
 80038a4:	f01e fcc6 	bl	8022234 <iprintf>
		BITSTUFFINC(8);
 80038a8:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80038ac:	3308      	adds	r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	da00      	bge.n	80038b4 <Vital_Msg_extr+0xb94>
 80038b2:	3307      	adds	r3, #7
 80038b4:	10db      	asrs	r3, r3, #3
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038bc:	4413      	add	r3, r2
 80038be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038c6:	3308      	adds	r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	425a      	negs	r2, r3
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	f002 0207 	and.w	r2, r2, #7
 80038d6:	bf58      	it	pl
 80038d8:	4253      	negpl	r3, r2
 80038da:	b21b      	sxth	r3, r3
 80038dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038e4:	3301      	adds	r3, #1
 80038e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3ab      	bcc.n	8003850 <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038f8:	200a      	movs	r0, #10
 80038fa:	f01e fcb3 	bl	8022264 <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038fe:	2300      	movs	r3, #0
 8003900:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003904:	e044      	b.n	8003990 <Vital_Msg_extr+0xc70>
 8003906:	bf00      	nop
 8003908:	200010d8 	.word	0x200010d8
 800390c:	200011c4 	.word	0x200011c4
 8003910:	200013a4 	.word	0x200013a4
 8003914:	080240ec 	.word	0x080240ec
 8003918:	080240f4 	.word	0x080240f4
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800391c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	441a      	add	r2, r3
 8003924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003928:	2108      	movs	r1, #8
 800392a:	4618      	mov	r0, r3
 800392c:	f7fc fe72 	bl	8000614 <ExtractBits>
 8003930:	4603      	mov	r3, r0
 8003932:	78ba      	ldrb	r2, [r7, #2]
 8003934:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003938:	b2dc      	uxtb	r4, r3
 800393a:	48c4      	ldr	r0, [pc, #784]	; (8003c4c <Vital_Msg_extr+0xf2c>)
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	4403      	add	r3, r0
 8003946:	440b      	add	r3, r1
 8003948:	3315      	adds	r3, #21
 800394a:	4622      	mov	r2, r4
 800394c:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800394e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003952:	3308      	adds	r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	da00      	bge.n	800395a <Vital_Msg_extr+0xc3a>
 8003958:	3307      	adds	r3, #7
 800395a:	10db      	asrs	r3, r3, #3
 800395c:	b29a      	uxth	r2, r3
 800395e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003962:	4413      	add	r3, r2
 8003964:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800396c:	3308      	adds	r3, #8
 800396e:	b29b      	uxth	r3, r3
 8003970:	b21b      	sxth	r3, r3
 8003972:	425a      	negs	r2, r3
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	f002 0207 	and.w	r2, r2, #7
 800397c:	bf58      	it	pl
 800397e:	4253      	negpl	r3, r2
 8003980:	b21b      	sxth	r3, r3
 8003982:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003986:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800398a:	3301      	adds	r3, #1
 800398c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003990:	78ba      	ldrb	r2, [r7, #2]
 8003992:	49ae      	ldr	r1, [pc, #696]	; (8003c4c <Vital_Msg_extr+0xf2c>)
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	440b      	add	r3, r1
 800399e:	3304      	adds	r3, #4
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3b7      	bcc.n	800391c <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 80039ac:	787a      	ldrb	r2, [r7, #1]
 80039ae:	78bb      	ldrb	r3, [r7, #2]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fa6e 	bl	8006e94 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039b8:	78bb      	ldrb	r3, [r7, #2]
 80039ba:	4aa5      	ldr	r2, [pc, #660]	; (8003c50 <Vital_Msg_extr+0xf30>)
 80039bc:	2101      	movs	r1, #1
 80039be:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039c0:	78bb      	ldrb	r3, [r7, #2]
 80039c2:	4aa3      	ldr	r2, [pc, #652]	; (8003c50 <Vital_Msg_extr+0xf30>)
 80039c4:	3302      	adds	r3, #2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039cc:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ce:	78ba      	ldrb	r2, [r7, #2]
 80039d0:	49a0      	ldr	r1, [pc, #640]	; (8003c54 <Vital_Msg_extr+0xf34>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	3304      	adds	r3, #4
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d116      	bne.n	8003a12 <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039e4:	2246      	movs	r2, #70	; 0x46
 80039e6:	2100      	movs	r1, #0
 80039e8:	489b      	ldr	r0, [pc, #620]	; (8003c58 <Vital_Msg_extr+0xf38>)
 80039ea:	f01e fb3b 	bl	8022064 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039ee:	78bb      	ldrb	r3, [r7, #2]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <Vital_Msg_extr+0xf38>)
 80039f4:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	4b97      	ldr	r3, [pc, #604]	; (8003c58 <Vital_Msg_extr+0xf38>)
 80039fc:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4895      	ldr	r0, [pc, #596]	; (8003c5c <Vital_Msg_extr+0xf3c>)
 8003a06:	f01e fb05 	bl	8022014 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8003a0a:	f240 2003 	movw	r0, #515	; 0x203
 8003a0e:	f00c f835 	bl	800fa7c <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8003a12:	78ba      	ldrb	r2, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a90      	ldr	r2, [pc, #576]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003a1e:	4413      	add	r3, r2
 8003a20:	3301      	adds	r3, #1
 8003a22:	2210      	movs	r2, #16
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f01e fb1c 	bl	8022064 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a2c:	78ba      	ldrb	r2, [r7, #2]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a8a      	ldr	r2, [pc, #552]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003a38:	4413      	add	r3, r2
 8003a3a:	1c58      	adds	r0, r3, #1
 8003a3c:	78ba      	ldrb	r2, [r7, #2]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4a81      	ldr	r2, [pc, #516]	; (8003c4c <Vital_Msg_extr+0xf2c>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	3305      	adds	r3, #5
 8003a4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a50:	4619      	mov	r1, r3
 8003a52:	f01e fadf 	bl	8022014 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a56:	78ba      	ldrb	r2, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4a7f      	ldr	r2, [pc, #508]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003a62:	4413      	add	r3, r2
 8003a64:	3301      	adds	r3, #1
 8003a66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a6a:	b212      	sxth	r2, r2
 8003a6c:	78bc      	ldrb	r4, [r7, #2]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	2000      	movs	r0, #0
 8003a72:	f00f f84b 	bl	8012b0c <GetCRC16>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4423      	add	r3, r4
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	3312      	adds	r3, #18
 8003a88:	460a      	mov	r2, r1
 8003a8a:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a8c:	78ba      	ldrb	r2, [r7, #2]
 8003a8e:	4974      	ldr	r1, [pc, #464]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3311      	adds	r3, #17
 8003a9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003aa0:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003aa2:	78ba      	ldrb	r2, [r7, #2]
 8003aa4:	496e      	ldr	r1, [pc, #440]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	78ba      	ldrb	r2, [r7, #2]
 8003ab2:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003ab4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d172      	bne.n	8003ba2 <Vital_Msg_extr+0xe82>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003abc:	78ba      	ldrb	r2, [r7, #2]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4a67      	ldr	r2, [pc, #412]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	3301      	adds	r3, #1
 8003acc:	2210      	movs	r2, #16
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f01e fac7 	bl	8022064 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ad6:	78ba      	ldrb	r2, [r7, #2]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a60      	ldr	r2, [pc, #384]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003ae2:	1898      	adds	r0, r3, r2
 8003ae4:	78ba      	ldrb	r2, [r7, #2]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a5c      	ldr	r2, [pc, #368]	; (8003c60 <Vital_Msg_extr+0xf40>)
 8003af0:	4413      	add	r3, r2
 8003af2:	2214      	movs	r2, #20
 8003af4:	4619      	mov	r1, r3
 8003af6:	f01e fa8d 	bl	8022014 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003afa:	78bb      	ldrb	r3, [r7, #2]
 8003afc:	495a      	ldr	r1, [pc, #360]	; (8003c68 <Vital_Msg_extr+0xf48>)
 8003afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003b04:	78bb      	ldrb	r3, [r7, #2]
 8003b06:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <Vital_Msg_extr+0xf4c>)
 8003b08:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003b0c:	78ba      	ldrb	r2, [r7, #2]
 8003b0e:	4855      	ldr	r0, [pc, #340]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	3312      	adds	r3, #18
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d03f      	beq.n	8003ba2 <Vital_Msg_extr+0xe82>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b22:	78ba      	ldrb	r2, [r7, #2]
 8003b24:	78b9      	ldrb	r1, [r7, #2]
 8003b26:	484f      	ldr	r0, [pc, #316]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4403      	add	r3, r0
 8003b32:	3312      	adds	r3, #18
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <Vital_Msg_extr+0xf4c>)
 8003b38:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b3c:	2214      	movs	r2, #20
 8003b3e:	2100      	movs	r1, #0
 8003b40:	484b      	ldr	r0, [pc, #300]	; (8003c70 <Vital_Msg_extr+0xf50>)
 8003b42:	f01e fa8f 	bl	8022064 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b46:	78ba      	ldrb	r2, [r7, #2]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a44      	ldr	r2, [pc, #272]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003b52:	4413      	add	r3, r2
 8003b54:	2214      	movs	r2, #20
 8003b56:	4619      	mov	r1, r3
 8003b58:	4845      	ldr	r0, [pc, #276]	; (8003c70 <Vital_Msg_extr+0xf50>)
 8003b5a:	f01e fa5b 	bl	8022014 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003b5e:	f240 2007 	movw	r0, #519	; 0x207
 8003b62:	f00b ff8b 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b66:	78bb      	ldrb	r3, [r7, #2]
 8003b68:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <Vital_Msg_extr+0xf54>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d117      	bne.n	8003ba2 <Vital_Msg_extr+0xe82>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b72:	78bb      	ldrb	r3, [r7, #2]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4a40      	ldr	r2, [pc, #256]	; (8003c78 <Vital_Msg_extr+0xf58>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	1c98      	adds	r0, r3, #2
 8003b7c:	78ba      	ldrb	r2, [r7, #2]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f01e fa40 	bl	8022014 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8003b94:	f240 1019 	movw	r0, #281	; 0x119
 8003b98:	f00b ff70 	bl	800fa7c <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003b9c:	4a37      	ldr	r2, [pc, #220]	; (8003c7c <Vital_Msg_extr+0xf5c>)
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba0:	6013      	str	r3, [r2, #0]

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003ba2:	78b9      	ldrb	r1, [r7, #2]
 8003ba4:	78ba      	ldrb	r2, [r7, #2]
 8003ba6:	482f      	ldr	r0, [pc, #188]	; (8003c64 <Vital_Msg_extr+0xf44>)
 8003ba8:	460b      	mov	r3, r1
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4403      	add	r3, r0
 8003bb2:	3312      	adds	r3, #18
 8003bb4:	8818      	ldrh	r0, [r3, #0]
 8003bb6:	4927      	ldr	r1, [pc, #156]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3306      	adds	r3, #6
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	4922      	ldr	r1, [pc, #136]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bda:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	491d      	ldr	r1, [pc, #116]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	3305      	adds	r3, #5
 8003bec:	2202      	movs	r2, #2
 8003bee:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bf0:	78ba      	ldrb	r2, [r7, #2]
 8003bf2:	4918      	ldr	r1, [pc, #96]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	78ba      	ldrb	r2, [r7, #2]
 8003c00:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003c02:	78ba      	ldrb	r2, [r7, #2]
 8003c04:	4913      	ldr	r1, [pc, #76]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3301      	adds	r3, #1
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003c16:	78ba      	ldrb	r2, [r7, #2]
 8003c18:	490e      	ldr	r1, [pc, #56]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	3302      	adds	r3, #2
 8003c26:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c2a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4813      	ldr	r0, [pc, #76]	; (8003c80 <Vital_Msg_extr+0xf60>)
 8003c32:	f01e fa17 	bl	8022064 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c36:	78ba      	ldrb	r2, [r7, #2]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <Vital_Msg_extr+0xf34>)
 8003c42:	4413      	add	r3, r2
 8003c44:	2218      	movs	r2, #24
 8003c46:	4619      	mov	r1, r3
 8003c48:	e01c      	b.n	8003c84 <Vital_Msg_extr+0xf64>
 8003c4a:	bf00      	nop
 8003c4c:	200013a4 	.word	0x200013a4
 8003c50:	20001c7c 	.word	0x20001c7c
 8003c54:	20001674 	.word	0x20001674
 8003c58:	20001884 	.word	0x20001884
 8003c5c:	2000188a 	.word	0x2000188a
 8003c60:	20001da0 	.word	0x20001da0
 8003c64:	20001e68 	.word	0x20001e68
 8003c68:	20000ed8 	.word	0x20000ed8
 8003c6c:	20000f00 	.word	0x20000f00
 8003c70:	20001ff8 	.word	0x20001ff8
 8003c74:	20000ec4 	.word	0x20000ec4
 8003c78:	200010e4 	.word	0x200010e4
 8003c7c:	20000e70 	.word	0x20000e70
 8003c80:	20001854 	.word	0x20001854
 8003c84:	482b      	ldr	r0, [pc, #172]	; (8003d34 <Vital_Msg_extr+0x1014>)
 8003c86:	f01e f9c5 	bl	8022014 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003c8a:	f240 2001 	movw	r0, #513	; 0x201
 8003c8e:	f00b fef5 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c92:	78ba      	ldrb	r2, [r7, #2]
 8003c94:	4928      	ldr	r1, [pc, #160]	; (8003d38 <Vital_Msg_extr+0x1018>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003ca6:	78bb      	ldrb	r3, [r7, #2]
 8003ca8:	4924      	ldr	r1, [pc, #144]	; (8003d3c <Vital_Msg_extr+0x101c>)
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003cb0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d11d      	bne.n	8003cf4 <Vital_Msg_extr+0xfd4>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003cb8:	78bb      	ldrb	r3, [r7, #2]
 8003cba:	4921      	ldr	r1, [pc, #132]	; (8003d40 <Vital_Msg_extr+0x1020>)
 8003cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003cc2:	78ba      	ldrb	r2, [r7, #2]
 8003cc4:	491f      	ldr	r1, [pc, #124]	; (8003d44 <Vital_Msg_extr+0x1024>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd4:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cd6:	78ba      	ldrb	r2, [r7, #2]
 8003cd8:	491a      	ldr	r1, [pc, #104]	; (8003d44 <Vital_Msg_extr+0x1024>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cea:	78bb      	ldrb	r3, [r7, #2]
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <Vital_Msg_extr+0x1028>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	54d1      	strb	r1, [r2, r3]
 8003cf2:	e017      	b.n	8003d24 <Vital_Msg_extr+0x1004>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003cf4:	78bb      	ldrb	r3, [r7, #2]
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <Vital_Msg_extr+0x1028>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	4911      	ldr	r1, [pc, #68]	; (8003d44 <Vital_Msg_extr+0x1024>)
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003d10:	78ba      	ldrb	r2, [r7, #2]
 8003d12:	490c      	ldr	r1, [pc, #48]	; (8003d44 <Vital_Msg_extr+0x1024>)
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3301      	adds	r3, #1
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <Vital_Msg_extr+0x102c>)
 8003d2a:	f013 ff76 	bl	8017c1a <HAL_GPIO_TogglePin>

}
 8003d2e:	3764      	adds	r7, #100	; 0x64
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	20001854 	.word	0x20001854
 8003d38:	20001674 	.word	0x20001674
 8003d3c:	20000e44 	.word	0x20000e44
 8003d40:	20000f14 	.word	0x20000f14
 8003d44:	20001cb0 	.word	0x20001cb0
 8003d48:	20000f64 	.word	0x20000f64
 8003d4c:	40021c00 	.word	0x40021c00

08003d50 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b0a5      	sub	sp, #148	; 0x94
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	460a      	mov	r2, r1
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d60:	2300      	movs	r3, #0
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d68:	2238      	movs	r2, #56	; 0x38
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f01e f979 	bl	8022064 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	2238      	movs	r2, #56	; 0x38
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f01e f970 	bl	8022064 <memset>
	uint8_t uc_index = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9a:	223c      	movs	r2, #60	; 0x3c
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f01e f960 	bl	8022064 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003da4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003da8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dac:	441a      	add	r2, r3
 8003dae:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003db2:	23f4      	movs	r3, #244	; 0xf4
 8003db4:	2108      	movs	r1, #8
 8003db6:	f7fc fcb9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003dba:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da00      	bge.n	8003dc6 <Send_Vital_Data_Message+0x76>
 8003dc4:	3307      	adds	r3, #7
 8003dc6:	10db      	asrs	r3, r3, #3
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dce:	4413      	add	r3, r2
 8003dd0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003dd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dd8:	3308      	adds	r3, #8
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	425a      	negs	r2, r3
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	f002 0207 	and.w	r2, r2, #7
 8003de8:	bf58      	it	pl
 8003dea:	4253      	negpl	r3, r2
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003df2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003df6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dfa:	441a      	add	r2, r3
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	49c6      	ldr	r1, [pc, #792]	; (8004118 <Send_Vital_Data_Message+0x3c8>)
 8003e00:	3366      	adds	r3, #102	; 0x66
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	f7fc fc8d 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e12:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e16:	3310      	adds	r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da00      	bge.n	8003e1e <Send_Vital_Data_Message+0xce>
 8003e1c:	3307      	adds	r3, #7
 8003e1e:	10db      	asrs	r3, r3, #3
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e26:	4413      	add	r3, r2
 8003e28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e30:	3310      	adds	r3, #16
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	425a      	negs	r2, r3
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	f002 0207 	and.w	r2, r2, #7
 8003e40:	bf58      	it	pl
 8003e42:	4253      	negpl	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e52:	441a      	add	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	49b0      	ldr	r1, [pc, #704]	; (8004118 <Send_Vital_Data_Message+0x3c8>)
 8003e58:	3370      	adds	r3, #112	; 0x70
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e64:	2110      	movs	r1, #16
 8003e66:	f7fc fc61 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e6a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e6e:	3310      	adds	r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da00      	bge.n	8003e76 <Send_Vital_Data_Message+0x126>
 8003e74:	3307      	adds	r3, #7
 8003e76:	10db      	asrs	r3, r3, #3
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e7e:	4413      	add	r3, r2
 8003e80:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e88:	3310      	adds	r3, #16
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	425a      	negs	r2, r3
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	f002 0207 	and.w	r2, r2, #7
 8003e98:	bf58      	it	pl
 8003e9a:	4253      	negpl	r3, r2
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003ea2:	4b9e      	ldr	r3, [pc, #632]	; (800411c <Send_Vital_Data_Message+0x3cc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d035      	beq.n	8003f1c <Send_Vital_Data_Message+0x1cc>
 8003eb0:	4b9a      	ldr	r3, [pc, #616]	; (800411c <Send_Vital_Data_Message+0x3cc>)
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	79fa      	ldrb	r2, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d130      	bne.n	8003f1c <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003ec0:	4897      	ldr	r0, [pc, #604]	; (8004120 <Send_Vital_Data_Message+0x3d0>)
 8003ec2:	f015 fe73 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b96      	ldr	r3, [pc, #600]	; (8004124 <Send_Vital_Data_Message+0x3d4>)
 8003eca:	fba3 1302 	umull	r1, r3, r3, r2
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	21c8      	movs	r1, #200	; 0xc8
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003edc:	4892      	ldr	r0, [pc, #584]	; (8004128 <Send_Vital_Data_Message+0x3d8>)
 8003ede:	f01e fa45 	bl	802236c <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	4a91      	ldr	r2, [pc, #580]	; (800412c <Send_Vital_Data_Message+0x3dc>)
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	4413      	add	r3, r2
 8003eea:	3301      	adds	r3, #1
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	488f      	ldr	r0, [pc, #572]	; (8004130 <Send_Vital_Data_Message+0x3e0>)
 8003ef2:	f01e f99f 	bl	8022234 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003ef6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003efa:	4619      	mov	r1, r3
 8003efc:	488d      	ldr	r0, [pc, #564]	; (8004134 <Send_Vital_Data_Message+0x3e4>)
 8003efe:	f01e f999 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003f02:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f0a:	441a      	add	r2, r3
 8003f0c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003f10:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f14:	2108      	movs	r1, #8
 8003f16:	f7fc fc09 	bl	800072c <InsertBits>
	{
 8003f1a:	e00f      	b.n	8003f3c <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003f1c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f24:	441a      	add	r2, r3
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4980      	ldr	r1, [pc, #512]	; (800412c <Send_Vital_Data_Message+0x3dc>)
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3301      	adds	r3, #1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f36:	2108      	movs	r1, #8
 8003f38:	f7fc fbf8 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f3c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f40:	3308      	adds	r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da00      	bge.n	8003f48 <Send_Vital_Data_Message+0x1f8>
 8003f46:	3307      	adds	r3, #7
 8003f48:	10db      	asrs	r3, r3, #3
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f50:	4413      	add	r3, r2
 8003f52:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	425a      	negs	r2, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	f002 0207 	and.w	r2, r2, #7
 8003f6a:	bf58      	it	pl
 8003f6c:	4253      	negpl	r3, r2
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f74:	4b69      	ldr	r3, [pc, #420]	; (800411c <Send_Vital_Data_Message+0x3cc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d035      	beq.n	8003fee <Send_Vital_Data_Message+0x29e>
 8003f82:	4b66      	ldr	r3, [pc, #408]	; (800411c <Send_Vital_Data_Message+0x3cc>)
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	79fa      	ldrb	r2, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d130      	bne.n	8003fee <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f92:	4863      	ldr	r0, [pc, #396]	; (8004120 <Send_Vital_Data_Message+0x3d0>)
 8003f94:	f015 fe0a 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b62      	ldr	r3, [pc, #392]	; (8004124 <Send_Vital_Data_Message+0x3d4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	21c8      	movs	r1, #200	; 0xc8
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003fae:	4862      	ldr	r0, [pc, #392]	; (8004138 <Send_Vital_Data_Message+0x3e8>)
 8003fb0:	f01e f9dc 	bl	802236c <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	4a5d      	ldr	r2, [pc, #372]	; (800412c <Send_Vital_Data_Message+0x3dc>)
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	4413      	add	r3, r2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	485e      	ldr	r0, [pc, #376]	; (800413c <Send_Vital_Data_Message+0x3ec>)
 8003fc4:	f01e f936 	bl	8022234 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003fc8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fcc:	4619      	mov	r1, r3
 8003fce:	485c      	ldr	r0, [pc, #368]	; (8004140 <Send_Vital_Data_Message+0x3f0>)
 8003fd0:	f01e f930 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fdc:	441a      	add	r2, r3
 8003fde:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fe2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	f7fc fba0 	bl	800072c <InsertBits>
	{
 8003fec:	e00f      	b.n	800400e <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ff2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ff6:	441a      	add	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	494c      	ldr	r1, [pc, #304]	; (800412c <Send_Vital_Data_Message+0x3dc>)
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	440b      	add	r3, r1
 8004000:	3302      	adds	r3, #2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004008:	2108      	movs	r1, #8
 800400a:	f7fc fb8f 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 800400e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004012:	3308      	adds	r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	da00      	bge.n	800401a <Send_Vital_Data_Message+0x2ca>
 8004018:	3307      	adds	r3, #7
 800401a:	10db      	asrs	r3, r3, #3
 800401c:	b29a      	uxth	r2, r3
 800401e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004022:	4413      	add	r3, r2
 8004024:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004028:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800402c:	3308      	adds	r3, #8
 800402e:	b29b      	uxth	r3, r3
 8004030:	b21b      	sxth	r3, r3
 8004032:	425a      	negs	r2, r3
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	f002 0207 	and.w	r2, r2, #7
 800403c:	bf58      	it	pl
 800403e:	4253      	negpl	r3, r2
 8004040:	b21b      	sxth	r3, r3
 8004042:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 8004046:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800404a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800404e:	441a      	add	r2, r3
 8004050:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004054:	2302      	movs	r3, #2
 8004056:	2108      	movs	r1, #8
 8004058:	f7fc fb68 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800405c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004060:	3308      	adds	r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	da00      	bge.n	8004068 <Send_Vital_Data_Message+0x318>
 8004066:	3307      	adds	r3, #7
 8004068:	10db      	asrs	r3, r3, #3
 800406a:	b29a      	uxth	r2, r3
 800406c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004070:	4413      	add	r3, r2
 8004072:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004076:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800407a:	3308      	adds	r3, #8
 800407c:	b29b      	uxth	r3, r3
 800407e:	b21b      	sxth	r3, r3
 8004080:	425a      	negs	r2, r3
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	f002 0207 	and.w	r2, r2, #7
 800408a:	bf58      	it	pl
 800408c:	4253      	negpl	r3, r2
 800408e:	b21b      	sxth	r3, r3
 8004090:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a2b      	ldr	r2, [pc, #172]	; (8004144 <Send_Vital_Data_Message+0x3f4>)
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d15a      	bne.n	8004154 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800409e:	f007 fa73 	bl	800b588 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80040a2:	79fa      	ldrb	r2, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <Send_Vital_Data_Message+0x3f8>)
 80040ae:	4413      	add	r3, r2
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <Send_Vital_Data_Message+0x3fc>)
 80040b2:	6811      	ldr	r1, [r2, #0]
 80040b4:	6019      	str	r1, [r3, #0]
 80040b6:	8892      	ldrh	r2, [r2, #4]
 80040b8:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80040ba:	4825      	ldr	r0, [pc, #148]	; (8004150 <Send_Vital_Data_Message+0x400>)
 80040bc:	f01e f956 	bl	802236c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	4a20      	ldr	r2, [pc, #128]	; (8004144 <Send_Vital_Data_Message+0x3f4>)
 80040c4:	2100      	movs	r1, #0
 80040c6:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 80040c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040d0:	441a      	add	r2, r3
 80040d2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040d6:	2368      	movs	r3, #104	; 0x68
 80040d8:	2110      	movs	r1, #16
 80040da:	f7fc fb27 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040de:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040e2:	3310      	adds	r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da00      	bge.n	80040ea <Send_Vital_Data_Message+0x39a>
 80040e8:	3307      	adds	r3, #7
 80040ea:	10db      	asrs	r3, r3, #3
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040f2:	4413      	add	r3, r2
 80040f4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040fc:	3310      	adds	r3, #16
 80040fe:	b29b      	uxth	r3, r3
 8004100:	b21b      	sxth	r3, r3
 8004102:	425a      	negs	r2, r3
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	f002 0207 	and.w	r2, r2, #7
 800410c:	bf58      	it	pl
 800410e:	4253      	negpl	r3, r2
 8004110:	b21b      	sxth	r3, r3
 8004112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004116:	e044      	b.n	80041a2 <Send_Vital_Data_Message+0x452>
 8004118:	20000304 	.word	0x20000304
 800411c:	2000195c 	.word	0x2000195c
 8004120:	20009cf4 	.word	0x20009cf4
 8004124:	51eb851f 	.word	0x51eb851f
 8004128:	08024104 	.word	0x08024104
 800412c:	200011c4 	.word	0x200011c4
 8004130:	08024128 	.word	0x08024128
 8004134:	08024148 	.word	0x08024148
 8004138:	08023e4c 	.word	0x08023e4c
 800413c:	08023e70 	.word	0x08023e70
 8004140:	08023e90 	.word	0x08023e90
 8004144:	200010d8 	.word	0x200010d8
 8004148:	20001188 	.word	0x20001188
 800414c:	20002878 	.word	0x20002878
 8004150:	08024168 	.word	0x08024168
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004154:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800415c:	441a      	add	r2, r3
 800415e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004162:	2328      	movs	r3, #40	; 0x28
 8004164:	2110      	movs	r1, #16
 8004166:	f7fc fae1 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800416a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800416e:	3310      	adds	r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	da00      	bge.n	8004176 <Send_Vital_Data_Message+0x426>
 8004174:	3307      	adds	r3, #7
 8004176:	10db      	asrs	r3, r3, #3
 8004178:	b29a      	uxth	r2, r3
 800417a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800417e:	4413      	add	r3, r2
 8004180:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004184:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004188:	3310      	adds	r3, #16
 800418a:	b29b      	uxth	r3, r3
 800418c:	b21b      	sxth	r3, r3
 800418e:	425a      	negs	r2, r3
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	f002 0207 	and.w	r2, r2, #7
 8004198:	bf58      	it	pl
 800419a:	4253      	negpl	r3, r2
 800419c:	b21b      	sxth	r3, r3
 800419e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80041a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041aa:	18d1      	adds	r1, r2, r3
 80041ac:	79fa      	ldrb	r2, [r7, #7]
 80041ae:	48cd      	ldr	r0, [pc, #820]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4403      	add	r3, r0
 80041ba:	3305      	adds	r3, #5
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041c2:	460a      	mov	r2, r1
 80041c4:	2108      	movs	r1, #8
 80041c6:	f7fc fab1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041ce:	3308      	adds	r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da00      	bge.n	80041d6 <Send_Vital_Data_Message+0x486>
 80041d4:	3307      	adds	r3, #7
 80041d6:	10db      	asrs	r3, r3, #3
 80041d8:	b29a      	uxth	r2, r3
 80041da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041de:	4413      	add	r3, r2
 80041e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041e8:	3308      	adds	r3, #8
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b21b      	sxth	r3, r3
 80041ee:	425a      	negs	r2, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	f002 0207 	and.w	r2, r2, #7
 80041f8:	bf58      	it	pl
 80041fa:	4253      	negpl	r3, r2
 80041fc:	b21b      	sxth	r3, r3
 80041fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004202:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004206:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800420a:	18d1      	adds	r1, r2, r3
 800420c:	79fa      	ldrb	r2, [r7, #7]
 800420e:	48b5      	ldr	r0, [pc, #724]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4403      	add	r3, r0
 800421a:	3304      	adds	r3, #4
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004222:	460a      	mov	r2, r1
 8004224:	2108      	movs	r1, #8
 8004226:	f7fc fa81 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800422a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800422e:	3308      	adds	r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	da00      	bge.n	8004236 <Send_Vital_Data_Message+0x4e6>
 8004234:	3307      	adds	r3, #7
 8004236:	10db      	asrs	r3, r3, #3
 8004238:	b29a      	uxth	r2, r3
 800423a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800423e:	4413      	add	r3, r2
 8004240:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004244:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004248:	3308      	adds	r3, #8
 800424a:	b29b      	uxth	r3, r3
 800424c:	b21b      	sxth	r3, r3
 800424e:	425a      	negs	r2, r3
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	f002 0207 	and.w	r2, r2, #7
 8004258:	bf58      	it	pl
 800425a:	4253      	negpl	r3, r2
 800425c:	b21b      	sxth	r3, r3
 800425e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004262:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004266:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800426a:	18d1      	adds	r1, r2, r3
 800426c:	79fa      	ldrb	r2, [r7, #7]
 800426e:	489d      	ldr	r0, [pc, #628]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4403      	add	r3, r0
 800427a:	3303      	adds	r3, #3
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004282:	460a      	mov	r2, r1
 8004284:	2108      	movs	r1, #8
 8004286:	f7fc fa51 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800428a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800428e:	3308      	adds	r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	da00      	bge.n	8004296 <Send_Vital_Data_Message+0x546>
 8004294:	3307      	adds	r3, #7
 8004296:	10db      	asrs	r3, r3, #3
 8004298:	b29a      	uxth	r2, r3
 800429a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800429e:	4413      	add	r3, r2
 80042a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042a8:	3308      	adds	r3, #8
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	425a      	negs	r2, r3
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	f002 0207 	and.w	r2, r2, #7
 80042b8:	bf58      	it	pl
 80042ba:	4253      	negpl	r3, r2
 80042bc:	b21b      	sxth	r3, r3
 80042be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80042c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042ca:	18d1      	adds	r1, r2, r3
 80042cc:	79fa      	ldrb	r2, [r7, #7]
 80042ce:	4885      	ldr	r0, [pc, #532]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4403      	add	r3, r0
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042e0:	460a      	mov	r2, r1
 80042e2:	2108      	movs	r1, #8
 80042e4:	f7fc fa22 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042e8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042ec:	3308      	adds	r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da00      	bge.n	80042f4 <Send_Vital_Data_Message+0x5a4>
 80042f2:	3307      	adds	r3, #7
 80042f4:	10db      	asrs	r3, r3, #3
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042fc:	4413      	add	r3, r2
 80042fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004302:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004306:	3308      	adds	r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b21b      	sxth	r3, r3
 800430c:	425a      	negs	r2, r3
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	f002 0207 	and.w	r2, r2, #7
 8004316:	bf58      	it	pl
 8004318:	4253      	negpl	r3, r2
 800431a:	b21b      	sxth	r3, r3
 800431c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004320:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004324:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004328:	18d1      	adds	r1, r2, r3
 800432a:	79fa      	ldrb	r2, [r7, #7]
 800432c:	486d      	ldr	r0, [pc, #436]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4403      	add	r3, r0
 8004338:	3301      	adds	r3, #1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004340:	460a      	mov	r2, r1
 8004342:	2108      	movs	r1, #8
 8004344:	f7fc f9f2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004348:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800434c:	3308      	adds	r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	da00      	bge.n	8004354 <Send_Vital_Data_Message+0x604>
 8004352:	3307      	adds	r3, #7
 8004354:	10db      	asrs	r3, r3, #3
 8004356:	b29a      	uxth	r2, r3
 8004358:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800435c:	4413      	add	r3, r2
 800435e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004362:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004366:	3308      	adds	r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b21b      	sxth	r3, r3
 800436c:	425a      	negs	r2, r3
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	f002 0207 	and.w	r2, r2, #7
 8004376:	bf58      	it	pl
 8004378:	4253      	negpl	r3, r2
 800437a:	b21b      	sxth	r3, r3
 800437c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004380:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004384:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004388:	18d1      	adds	r1, r2, r3
 800438a:	79fa      	ldrb	r2, [r7, #7]
 800438c:	4855      	ldr	r0, [pc, #340]	; (80044e4 <Send_Vital_Data_Message+0x794>)
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4403      	add	r3, r0
 8004398:	3302      	adds	r3, #2
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043a0:	460a      	mov	r2, r1
 80043a2:	2108      	movs	r1, #8
 80043a4:	f7fc f9c2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043a8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043ac:	3308      	adds	r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da00      	bge.n	80043b4 <Send_Vital_Data_Message+0x664>
 80043b2:	3307      	adds	r3, #7
 80043b4:	10db      	asrs	r3, r3, #3
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043bc:	4413      	add	r3, r2
 80043be:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043c6:	3308      	adds	r3, #8
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	425a      	negs	r2, r3
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	f002 0207 	and.w	r2, r2, #7
 80043d6:	bf58      	it	pl
 80043d8:	4253      	negpl	r3, r2
 80043da:	b21b      	sxth	r3, r3
 80043dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043e8:	441a      	add	r2, r3
 80043ea:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043ee:	2301      	movs	r3, #1
 80043f0:	2108      	movs	r1, #8
 80043f2:	f7fc f99b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043f6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043fa:	3308      	adds	r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da00      	bge.n	8004402 <Send_Vital_Data_Message+0x6b2>
 8004400:	3307      	adds	r3, #7
 8004402:	10db      	asrs	r3, r3, #3
 8004404:	b29a      	uxth	r2, r3
 8004406:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800440a:	4413      	add	r3, r2
 800440c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004410:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004414:	3308      	adds	r3, #8
 8004416:	b29b      	uxth	r3, r3
 8004418:	b21b      	sxth	r3, r3
 800441a:	425a      	negs	r2, r3
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	f002 0207 	and.w	r2, r2, #7
 8004424:	bf58      	it	pl
 8004426:	4253      	negpl	r3, r2
 8004428:	b21b      	sxth	r3, r3
 800442a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 800442e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004432:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004436:	441a      	add	r2, r3
 8004438:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800443c:	2300      	movs	r3, #0
 800443e:	2108      	movs	r1, #8
 8004440:	f7fc f974 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004444:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004448:	3308      	adds	r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	da00      	bge.n	8004450 <Send_Vital_Data_Message+0x700>
 800444e:	3307      	adds	r3, #7
 8004450:	10db      	asrs	r3, r3, #3
 8004452:	b29a      	uxth	r2, r3
 8004454:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004458:	4413      	add	r3, r2
 800445a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800445e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004462:	3308      	adds	r3, #8
 8004464:	b29b      	uxth	r3, r3
 8004466:	b21b      	sxth	r3, r3
 8004468:	425a      	negs	r2, r3
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	f002 0207 	and.w	r2, r2, #7
 8004472:	bf58      	it	pl
 8004474:	4253      	negpl	r3, r2
 8004476:	b21b      	sxth	r3, r3
 8004478:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 800447c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004480:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004484:	441a      	add	r2, r3
 8004486:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800448a:	2301      	movs	r3, #1
 800448c:	2108      	movs	r1, #8
 800448e:	f7fc f94d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004492:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004496:	3308      	adds	r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	da00      	bge.n	800449e <Send_Vital_Data_Message+0x74e>
 800449c:	3307      	adds	r3, #7
 800449e:	10db      	asrs	r3, r3, #3
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044a6:	4413      	add	r3, r2
 80044a8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80044ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044b0:	3308      	adds	r3, #8
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	425a      	negs	r2, r3
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	f002 0207 	and.w	r2, r2, #7
 80044c0:	bf58      	it	pl
 80044c2:	4253      	negpl	r3, r2
 80044c4:	b21b      	sxth	r3, r3
 80044c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <Send_Vital_Data_Message+0x798>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02c      	beq.n	8004532 <Send_Vital_Data_Message+0x7e2>
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <Send_Vital_Data_Message+0x798>)
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	79fa      	ldrb	r2, [r7, #7]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d127      	bne.n	8004532 <Send_Vital_Data_Message+0x7e2>
 80044e2:	e003      	b.n	80044ec <Send_Vital_Data_Message+0x79c>
 80044e4:	20001188 	.word	0x20001188
 80044e8:	2000195c 	.word	0x2000195c
	{
		uint32_t Rand_Number = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044f2:	484e      	ldr	r0, [pc, #312]	; (800462c <Send_Vital_Data_Message+0x8dc>)
 80044f4:	f015 fb5a 	bl	8019bac <HAL_RNG_GetRandomNumber>
 80044f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044fc:	484c      	ldr	r0, [pc, #304]	; (8004630 <Send_Vital_Data_Message+0x8e0>)
 80044fe:	f01d ff35 	bl	802236c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a4b      	ldr	r2, [pc, #300]	; (8004634 <Send_Vital_Data_Message+0x8e4>)
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4413      	add	r3, r2
 800450a:	330c      	adds	r3, #12
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4849      	ldr	r0, [pc, #292]	; (8004638 <Send_Vital_Data_Message+0x8e8>)
 8004512:	f01d fe8f 	bl	8022234 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004516:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800451a:	4848      	ldr	r0, [pc, #288]	; (800463c <Send_Vital_Data_Message+0x8ec>)
 800451c:	f01d fe8a 	bl	8022234 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004520:	f107 020c 	add.w	r2, r7, #12
 8004524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004528:	2118      	movs	r1, #24
 800452a:	2000      	movs	r0, #0
 800452c:	f7fc f8fe 	bl	800072c <InsertBits>
	{
 8004530:	e00b      	b.n	800454a <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	4a3f      	ldr	r2, [pc, #252]	; (8004634 <Send_Vital_Data_Message+0x8e4>)
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	330c      	adds	r3, #12
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f107 020c 	add.w	r2, r7, #12
 8004542:	2118      	movs	r1, #24
 8004544:	2000      	movs	r0, #0
 8004546:	f7fc f8f1 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800454a:	2300      	movs	r3, #0
 800454c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004550:	e011      	b.n	8004576 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004552:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004556:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800455a:	3303      	adds	r3, #3
 800455c:	3290      	adds	r2, #144	; 0x90
 800455e:	443a      	add	r2, r7
 8004560:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004564:	3390      	adds	r3, #144	; 0x90
 8004566:	443b      	add	r3, r7
 8004568:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800456c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004570:	3301      	adds	r3, #1
 8004572:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004576:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800457a:	b29b      	uxth	r3, r3
 800457c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004580:	429a      	cmp	r2, r3
 8004582:	d8e6      	bhi.n	8004552 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004584:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004588:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800458c:	18d4      	adds	r4, r2, r3
 800458e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004592:	b29b      	uxth	r3, r3
 8004594:	3303      	adds	r3, #3
 8004596:	b29a      	uxth	r2, r3
 8004598:	f107 030c 	add.w	r3, r7, #12
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f00e fb6e 	bl	8012c80 <CalculateDirectReverseCrc>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80045aa:	4622      	mov	r2, r4
 80045ac:	2120      	movs	r1, #32
 80045ae:	f7fc f8bd 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80045b2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045b6:	3320      	adds	r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da00      	bge.n	80045be <Send_Vital_Data_Message+0x86e>
 80045bc:	3307      	adds	r3, #7
 80045be:	10db      	asrs	r3, r3, #3
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045c6:	4413      	add	r3, r2
 80045c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045d0:	3320      	adds	r3, #32
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	b21b      	sxth	r3, r3
 80045d6:	425a      	negs	r2, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	f002 0207 	and.w	r2, r2, #7
 80045e0:	bf58      	it	pl
 80045e2:	4253      	negpl	r3, r2
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <Send_Vital_Data_Message+0x8f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	0a5b      	lsrs	r3, r3, #9
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <Send_Vital_Data_Message+0x8c0>
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <Send_Vital_Data_Message+0x8f0>)
 80045fa:	791b      	ldrb	r3, [r3, #4]
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d106      	bne.n	8004610 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004602:	4810      	ldr	r0, [pc, #64]	; (8004644 <Send_Vital_Data_Message+0x8f4>)
 8004604:	f01d feb2 	bl	802236c <puts>
		printf("Not Sending Reply");
 8004608:	480f      	ldr	r0, [pc, #60]	; (8004648 <Send_Vital_Data_Message+0x8f8>)
 800460a:	f01d fe13 	bl	8022234 <iprintf>
 800460e:	e009      	b.n	8004624 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004610:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004614:	b2d9      	uxtb	r1, r3
 8004616:	79fa      	ldrb	r2, [r7, #7]
 8004618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800461c:	4618      	mov	r0, r3
 800461e:	f002 ffd9 	bl	80075d4 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	3794      	adds	r7, #148	; 0x94
 8004628:	46bd      	mov	sp, r7
 800462a:	bd90      	pop	{r4, r7, pc}
 800462c:	20009cf4 	.word	0x20009cf4
 8004630:	08024180 	.word	0x08024180
 8004634:	200011c4 	.word	0x200011c4
 8004638:	080241a4 	.word	0x080241a4
 800463c:	080241c8 	.word	0x080241c8
 8004640:	2000195c 	.word	0x2000195c
 8004644:	08023f18 	.word	0x08023f18
 8004648:	08023f30 	.word	0x08023f30

0800464c <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0c0      	sub	sp, #256	; 0x100
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	461a      	mov	r2, r3
 800465a:	4603      	mov	r3, r0
 800465c:	70fb      	strb	r3, [r7, #3]
 800465e:	460b      	mov	r3, r1
 8004660:	70bb      	strb	r3, [r7, #2]
 8004662:	4613      	mov	r3, r2
 8004664:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004678:	f010 feda 	bl	8015430 <HAL_GetTick>
 800467c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004686:	2300      	movs	r3, #0
 8004688:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004692:	2300      	movs	r3, #0
 8004694:	667b      	str	r3, [r7, #100]	; 0x64
 8004696:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800469a:	227c      	movs	r2, #124	; 0x7c
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f01d fce0 	bl	8022064 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	b299      	uxth	r1, r3
 80046b4:	78ba      	ldrb	r2, [r7, #2]
 80046b6:	48c3      	ldr	r0, [pc, #780]	; (80049c4 <Vital_Msg_extr_from_CAN+0x378>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4403      	add	r3, r0
 80046c2:	3340      	adds	r3, #64	; 0x40
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	4299      	cmp	r1, r3
 80046c8:	d11a      	bne.n	8004700 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 80046ca:	78ba      	ldrb	r2, [r7, #2]
 80046cc:	4613      	mov	r3, r2
 80046ce:	015b      	lsls	r3, r3, #5
 80046d0:	4413      	add	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4abb      	ldr	r2, [pc, #748]	; (80049c4 <Vital_Msg_extr_from_CAN+0x378>)
 80046d6:	4413      	add	r3, r2
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f01d fc89 	bl	8021ff4 <memcmp>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046e8:	78bb      	ldrb	r3, [r7, #2]
 80046ea:	4ab7      	ldr	r2, [pc, #732]	; (80049c8 <Vital_Msg_extr_from_CAN+0x37c>)
 80046ec:	3366      	adds	r3, #102	; 0x66
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	48b5      	ldr	r0, [pc, #724]	; (80049cc <Vital_Msg_extr_from_CAN+0x380>)
 80046f8:	f01d fd9c 	bl	8022234 <iprintf>
			return;
 80046fc:	f000 bda0 	b.w	8005240 <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	3b05      	subs	r3, #5
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	441a      	add	r2, r3
 8004708:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800470c:	2120      	movs	r1, #32
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb ff80 	bl	8000614 <ExtractBits>
 8004714:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004718:	4bad      	ldr	r3, [pc, #692]	; (80049d0 <Vital_Msg_extr_from_CAN+0x384>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d034      	beq.n	800478e <Vital_Msg_extr_from_CAN+0x142>
 8004724:	4baa      	ldr	r3, [pc, #680]	; (80049d0 <Vital_Msg_extr_from_CAN+0x384>)
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	78ba      	ldrb	r2, [r7, #2]
 800472a:	429a      	cmp	r2, r3
 800472c:	d12f      	bne.n	800478e <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 800472e:	2316      	movs	r3, #22
 8004730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004734:	48a7      	ldr	r0, [pc, #668]	; (80049d4 <Vital_Msg_extr_from_CAN+0x388>)
 8004736:	f015 fa39 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800473a:	4602      	mov	r2, r0
 800473c:	4ba6      	ldr	r3, [pc, #664]	; (80049d8 <Vital_Msg_extr_from_CAN+0x38c>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	0dd9      	lsrs	r1, r3, #23
 8004744:	460b      	mov	r3, r1
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004752:	48a2      	ldr	r0, [pc, #648]	; (80049dc <Vital_Msg_extr_from_CAN+0x390>)
 8004754:	f01d fe0a 	bl	802236c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004758:	78ba      	ldrb	r2, [r7, #2]
 800475a:	49a1      	ldr	r1, [pc, #644]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	3308      	adds	r3, #8
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	489d      	ldr	r0, [pc, #628]	; (80049e4 <Vital_Msg_extr_from_CAN+0x398>)
 800476e:	f01d fd61 	bl	8022234 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004772:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004776:	489c      	ldr	r0, [pc, #624]	; (80049e8 <Vital_Msg_extr_from_CAN+0x39c>)
 8004778:	f01d fd5c 	bl	8022234 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 800477c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004784:	2118      	movs	r1, #24
 8004786:	2000      	movs	r0, #0
 8004788:	f7fb ffd0 	bl	800072c <InsertBits>
	{
 800478c:	e00e      	b.n	80047ac <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800478e:	78ba      	ldrb	r2, [r7, #2]
 8004790:	4993      	ldr	r1, [pc, #588]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	3308      	adds	r3, #8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80047a4:	2118      	movs	r1, #24
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7fb ffc0 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047b2:	e011      	b.n	80047d8 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80047b4:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	441a      	add	r2, r3
 80047bc:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047c0:	3303      	adds	r3, #3
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047c8:	443b      	add	r3, r7
 80047ca:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047ce:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047d2:	3301      	adds	r3, #1
 80047d4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047d8:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	3b05      	subs	r3, #5
 80047e0:	429a      	cmp	r2, r3
 80047e2:	dbe7      	blt.n	80047b4 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047e4:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3303      	adds	r3, #3
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f00e fa43 	bl	8012c80 <CalculateDirectReverseCrc>
 80047fa:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80047fe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004806:	429a      	cmp	r2, r3
 8004808:	f000 8104 	beq.w	8004a14 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3305      	adds	r3, #5
 8004810:	461a      	mov	r2, r3
 8004812:	2108      	movs	r1, #8
 8004814:	2000      	movs	r0, #0
 8004816:	f7fb fefd 	bl	8000614 <ExtractBits>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 80ba 	bne.w	8004996 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 8004822:	4872      	ldr	r0, [pc, #456]	; (80049ec <Vital_Msg_extr_from_CAN+0x3a0>)
 8004824:	f01d fda2 	bl	802236c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8004828:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f01d fc17 	bl	8022064 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004836:	78ba      	ldrb	r2, [r7, #2]
 8004838:	4969      	ldr	r1, [pc, #420]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	3308      	adds	r3, #8
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800484e:	2118      	movs	r1, #24
 8004850:	2000      	movs	r0, #0
 8004852:	f7fb ff6b 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004856:	2300      	movs	r3, #0
 8004858:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800485c:	e011      	b.n	8004882 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800485e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	441a      	add	r2, r3
 8004866:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800486a:	3303      	adds	r3, #3
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004872:	443b      	add	r3, r7
 8004874:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004878:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800487c:	3301      	adds	r3, #1
 800487e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004882:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	3b05      	subs	r3, #5
 800488a:	429a      	cmp	r2, r3
 800488c:	dbe7      	blt.n	800485e <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800488e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004892:	b29b      	uxth	r3, r3
 8004894:	3303      	adds	r3, #3
 8004896:	b29a      	uxth	r2, r3
 8004898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f00e f9ee 	bl	8012c80 <CalculateDirectReverseCrc>
 80048a4:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	3b05      	subs	r3, #5
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	441a      	add	r2, r3
 80048b0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048b4:	2120      	movs	r1, #32
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb feac 	bl	8000614 <ExtractBits>
 80048bc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 80048c0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d14e      	bne.n	800496a <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 80048cc:	4848      	ldr	r0, [pc, #288]	; (80049f0 <Vital_Msg_extr_from_CAN+0x3a4>)
 80048ce:	f01d fd4d 	bl	802236c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048d2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80048d6:	4847      	ldr	r0, [pc, #284]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048d8:	f01d fcac 	bl	8022234 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048dc:	78ba      	ldrb	r2, [r7, #2]
 80048de:	4940      	ldr	r1, [pc, #256]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	3308      	adds	r3, #8
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4841      	ldr	r0, [pc, #260]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3ac>)
 80048f2:	f01d fc9f 	bl	8022234 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048f6:	78ba      	ldrb	r2, [r7, #2]
 80048f8:	4939      	ldr	r1, [pc, #228]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3308      	adds	r3, #8
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	1c59      	adds	r1, r3, #1
 800490a:	4835      	ldr	r0, [pc, #212]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4403      	add	r3, r0
 8004916:	3308      	adds	r3, #8
 8004918:	6019      	str	r1, [r3, #0]
 800491a:	78b9      	ldrb	r1, [r7, #2]
 800491c:	4830      	ldr	r0, [pc, #192]	; (80049e0 <Vital_Msg_extr_from_CAN+0x394>)
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4403      	add	r3, r0
 8004928:	3308      	adds	r3, #8
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4833      	ldr	r0, [pc, #204]	; (80049fc <Vital_Msg_extr_from_CAN+0x3b0>)
 800492e:	010b      	lsls	r3, r1, #4
 8004930:	4403      	add	r3, r0
 8004932:	3308      	adds	r3, #8
 8004934:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004936:	78bb      	ldrb	r3, [r7, #2]
 8004938:	4a30      	ldr	r2, [pc, #192]	; (80049fc <Vital_Msg_extr_from_CAN+0x3b0>)
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4413      	add	r3, r2
 800493e:	3308      	adds	r3, #8
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	482e      	ldr	r0, [pc, #184]	; (8004a00 <Vital_Msg_extr_from_CAN+0x3b4>)
 8004946:	f01d fc75 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800494a:	78bb      	ldrb	r3, [r7, #2]
 800494c:	78ba      	ldrb	r2, [r7, #2]
 800494e:	492b      	ldr	r1, [pc, #172]	; (80049fc <Vital_Msg_extr_from_CAN+0x3b0>)
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	440b      	add	r3, r1
 8004954:	3308      	adds	r3, #8
 8004956:	6819      	ldr	r1, [r3, #0]
 8004958:	482a      	ldr	r0, [pc, #168]	; (8004a04 <Vital_Msg_extr_from_CAN+0x3b8>)
 800495a:	4613      	mov	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4413      	add	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4403      	add	r3, r0
 8004964:	3308      	adds	r3, #8
 8004966:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004968:	e055      	b.n	8004a16 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800496a:	78bb      	ldrb	r3, [r7, #2]
 800496c:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <Vital_Msg_extr_from_CAN+0x37c>)
 800496e:	3366      	adds	r3, #102	; 0x66
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4619      	mov	r1, r3
 8004978:	4823      	ldr	r0, [pc, #140]	; (8004a08 <Vital_Msg_extr_from_CAN+0x3bc>)
 800497a:	f01d fc5b 	bl	8022234 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800497e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004982:	4822      	ldr	r0, [pc, #136]	; (8004a0c <Vital_Msg_extr_from_CAN+0x3c0>)
 8004984:	f01d fc56 	bl	8022234 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004988:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800498c:	4820      	ldr	r0, [pc, #128]	; (8004a10 <Vital_Msg_extr_from_CAN+0x3c4>)
 800498e:	f01d fc51 	bl	8022234 <iprintf>
				return;
 8004992:	f000 bc55 	b.w	8005240 <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004996:	78bb      	ldrb	r3, [r7, #2]
 8004998:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <Vital_Msg_extr_from_CAN+0x37c>)
 800499a:	3366      	adds	r3, #102	; 0x66
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4818      	ldr	r0, [pc, #96]	; (8004a08 <Vital_Msg_extr_from_CAN+0x3bc>)
 80049a6:	f01d fc45 	bl	8022234 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 80049aa:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80049ae:	4817      	ldr	r0, [pc, #92]	; (8004a0c <Vital_Msg_extr_from_CAN+0x3c0>)
 80049b0:	f01d fc40 	bl	8022234 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 80049b4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80049b8:	4815      	ldr	r0, [pc, #84]	; (8004a10 <Vital_Msg_extr_from_CAN+0x3c4>)
 80049ba:	f01d fc3b 	bl	8022234 <iprintf>
			return;
 80049be:	f000 bc3f 	b.w	8005240 <Vital_Msg_extr_from_CAN+0xbf4>
 80049c2:	bf00      	nop
 80049c4:	20001964 	.word	0x20001964
 80049c8:	20000304 	.word	0x20000304
 80049cc:	080241ec 	.word	0x080241ec
 80049d0:	2000195c 	.word	0x2000195c
 80049d4:	20009cf4 	.word	0x20009cf4
 80049d8:	80008001 	.word	0x80008001
 80049dc:	08023f44 	.word	0x08023f44
 80049e0:	20001764 	.word	0x20001764
 80049e4:	08023f64 	.word	0x08023f64
 80049e8:	08023f8c 	.word	0x08023f8c
 80049ec:	08023fb4 	.word	0x08023fb4
 80049f0:	08024230 	.word	0x08024230
 80049f4:	08023fe8 	.word	0x08023fe8
 80049f8:	08024254 	.word	0x08024254
 80049fc:	200011c4 	.word	0x200011c4
 8004a00:	08024028 	.word	0x08024028
 8004a04:	20001674 	.word	0x20001674
 8004a08:	08024270 	.word	0x08024270
 8004a0c:	08023c84 	.word	0x08023c84
 8004a10:	08023c94 	.word	0x08023c94
		}
	}
	ROLLOVER_VITAL_CAN:
 8004a14:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004a16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da00      	bge.n	8004a22 <Vital_Msg_extr_from_CAN+0x3d6>
 8004a20:	3307      	adds	r3, #7
 8004a22:	10db      	asrs	r3, r3, #3
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a34:	3308      	adds	r3, #8
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	b21b      	sxth	r3, r3
 8004a3a:	425a      	negs	r2, r3
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	f002 0207 	and.w	r2, r2, #7
 8004a44:	bf58      	it	pl
 8004a46:	4253      	negpl	r3, r2
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	441a      	add	r2, r3
 8004a56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fdd9 	bl	8000614 <ExtractBits>
 8004a62:	4603      	mov	r3, r0
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a6a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a6e:	4619      	mov	r1, r3
 8004a70:	48c6      	ldr	r0, [pc, #792]	; (8004d8c <Vital_Msg_extr_from_CAN+0x740>)
 8004a72:	f01d fbdf 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 8004a76:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a7a:	3310      	adds	r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da00      	bge.n	8004a82 <Vital_Msg_extr_from_CAN+0x436>
 8004a80:	3307      	adds	r3, #7
 8004a82:	10db      	asrs	r3, r3, #3
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a90:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a94:	3310      	adds	r3, #16
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	425a      	negs	r2, r3
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	f002 0207 	and.w	r2, r2, #7
 8004aa4:	bf58      	it	pl
 8004aa6:	4253      	negpl	r3, r2
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004aae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aba:	2110      	movs	r1, #16
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fb fda9 	bl	8000614 <ExtractBits>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004aca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ace:	4619      	mov	r1, r3
 8004ad0:	48af      	ldr	r0, [pc, #700]	; (8004d90 <Vital_Msg_extr_from_CAN+0x744>)
 8004ad2:	f01d fbaf 	bl	8022234 <iprintf>
	BITSTUFFINC(16);
 8004ad6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ada:	3310      	adds	r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	da00      	bge.n	8004ae2 <Vital_Msg_extr_from_CAN+0x496>
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	10db      	asrs	r3, r3, #3
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004aea:	4413      	add	r3, r2
 8004aec:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004af0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004af4:	3310      	adds	r3, #16
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	425a      	negs	r2, r3
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	f002 0207 	and.w	r2, r2, #7
 8004b04:	bf58      	it	pl
 8004b06:	4253      	negpl	r3, r2
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b0e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	441a      	add	r2, r3
 8004b16:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b1a:	2108      	movs	r1, #8
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fd79 	bl	8000614 <ExtractBits>
 8004b22:	4603      	mov	r3, r0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004b2a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b2e:	3308      	adds	r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da00      	bge.n	8004b36 <Vital_Msg_extr_from_CAN+0x4ea>
 8004b34:	3307      	adds	r3, #7
 8004b36:	10db      	asrs	r3, r3, #3
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b3e:	4413      	add	r3, r2
 8004b40:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b44:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b48:	3308      	adds	r3, #8
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	425a      	negs	r2, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	f002 0207 	and.w	r2, r2, #7
 8004b58:	bf58      	it	pl
 8004b5a:	4253      	negpl	r3, r2
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b62:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	441a      	add	r2, r3
 8004b6a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b6e:	2108      	movs	r1, #8
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fd4f 	bl	8000614 <ExtractBits>
 8004b76:	4603      	mov	r3, r0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b7e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b82:	3308      	adds	r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da00      	bge.n	8004b8a <Vital_Msg_extr_from_CAN+0x53e>
 8004b88:	3307      	adds	r3, #7
 8004b8a:	10db      	asrs	r3, r3, #3
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b92:	4413      	add	r3, r2
 8004b94:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b98:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	b21b      	sxth	r3, r3
 8004ba2:	425a      	negs	r2, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	f002 0207 	and.w	r2, r2, #7
 8004bac:	bf58      	it	pl
 8004bae:	4253      	negpl	r3, r2
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004bb6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bc2:	2108      	movs	r1, #8
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fd25 	bl	8000614 <ExtractBits>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004bd2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	da00      	bge.n	8004bde <Vital_Msg_extr_from_CAN+0x592>
 8004bdc:	3307      	adds	r3, #7
 8004bde:	10db      	asrs	r3, r3, #3
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004be6:	4413      	add	r3, r2
 8004be8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	b21b      	sxth	r3, r3
 8004bf6:	425a      	negs	r2, r3
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	f002 0207 	and.w	r2, r2, #7
 8004c00:	bf58      	it	pl
 8004c02:	4253      	negpl	r3, r2
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004c0a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	441a      	add	r2, r3
 8004c12:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c16:	2110      	movs	r1, #16
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb fcfb 	bl	8000614 <ExtractBits>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004c24:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c28:	3310      	adds	r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da00      	bge.n	8004c30 <Vital_Msg_extr_from_CAN+0x5e4>
 8004c2e:	3307      	adds	r3, #7
 8004c30:	10db      	asrs	r3, r3, #3
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c38:	4413      	add	r3, r2
 8004c3a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c42:	3310      	adds	r3, #16
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	425a      	negs	r2, r3
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	f002 0207 	and.w	r2, r2, #7
 8004c52:	bf58      	it	pl
 8004c54:	4253      	negpl	r3, r2
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80fe 	beq.w	8004e64 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c68:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	441a      	add	r2, r3
 8004c70:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c74:	2108      	movs	r1, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fccc 	bl	8000614 <ExtractBits>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c84:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c88:	3308      	adds	r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da00      	bge.n	8004c90 <Vital_Msg_extr_from_CAN+0x644>
 8004c8e:	3307      	adds	r3, #7
 8004c90:	10db      	asrs	r3, r3, #3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c98:	4413      	add	r3, r2
 8004c9a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c9e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	425a      	negs	r2, r3
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	f002 0207 	and.w	r2, r2, #7
 8004cb2:	bf58      	it	pl
 8004cb4:	4253      	negpl	r3, r2
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cbc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cc8:	2108      	movs	r1, #8
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fca2 	bl	8000614 <ExtractBits>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004cd8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cdc:	3308      	adds	r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	da00      	bge.n	8004ce4 <Vital_Msg_extr_from_CAN+0x698>
 8004ce2:	3307      	adds	r3, #7
 8004ce4:	10db      	asrs	r3, r3, #3
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cec:	4413      	add	r3, r2
 8004cee:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cf2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	425a      	negs	r2, r3
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	f002 0207 	and.w	r2, r2, #7
 8004d06:	bf58      	it	pl
 8004d08:	4253      	negpl	r3, r2
 8004d0a:	b21b      	sxth	r3, r3
 8004d0c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d10:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	441a      	add	r2, r3
 8004d18:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fc78 	bl	8000614 <ExtractBits>
 8004d24:	4603      	mov	r3, r0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004d2a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da00      	bge.n	8004d36 <Vital_Msg_extr_from_CAN+0x6ea>
 8004d34:	3307      	adds	r3, #7
 8004d36:	10db      	asrs	r3, r3, #3
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d3e:	4413      	add	r3, r2
 8004d40:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d44:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d48:	3308      	adds	r3, #8
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	425a      	negs	r2, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	f002 0207 	and.w	r2, r2, #7
 8004d58:	bf58      	it	pl
 8004d5a:	4253      	negpl	r3, r2
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d62:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	441a      	add	r2, r3
 8004d6a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d6e:	2108      	movs	r1, #8
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fc4f 	bl	8000614 <ExtractBits>
 8004d76:	4603      	mov	r3, r0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d7c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d80:	3308      	adds	r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da06      	bge.n	8004d94 <Vital_Msg_extr_from_CAN+0x748>
 8004d86:	3307      	adds	r3, #7
 8004d88:	e004      	b.n	8004d94 <Vital_Msg_extr_from_CAN+0x748>
 8004d8a:	bf00      	nop
 8004d8c:	08023d74 	.word	0x08023d74
 8004d90:	08023d7c 	.word	0x08023d7c
 8004d94:	10db      	asrs	r3, r3, #3
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004da2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004da6:	3308      	adds	r3, #8
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b21b      	sxth	r3, r3
 8004dac:	425a      	negs	r2, r3
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	f002 0207 	and.w	r2, r2, #7
 8004db6:	bf58      	it	pl
 8004db8:	4253      	negpl	r3, r2
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dc0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dcc:	2108      	movs	r1, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fc20 	bl	8000614 <ExtractBits>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004dda:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dde:	3308      	adds	r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <Vital_Msg_extr_from_CAN+0x79a>
 8004de4:	3307      	adds	r3, #7
 8004de6:	10db      	asrs	r3, r3, #3
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dee:	4413      	add	r3, r2
 8004df0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004df4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004df8:	3308      	adds	r3, #8
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	425a      	negs	r2, r3
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	f002 0207 	and.w	r2, r2, #7
 8004e08:	bf58      	it	pl
 8004e0a:	4253      	negpl	r3, r2
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e12:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	441a      	add	r2, r3
 8004e1a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e1e:	2108      	movs	r1, #8
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fbf7 	bl	8000614 <ExtractBits>
 8004e26:	4603      	mov	r3, r0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e2c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e30:	3308      	adds	r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	da00      	bge.n	8004e38 <Vital_Msg_extr_from_CAN+0x7ec>
 8004e36:	3307      	adds	r3, #7
 8004e38:	10db      	asrs	r3, r3, #3
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e40:	4413      	add	r3, r2
 8004e42:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e46:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b21b      	sxth	r3, r3
 8004e50:	425a      	negs	r2, r3
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	f002 0207 	and.w	r2, r2, #7
 8004e5a:	bf58      	it	pl
 8004e5c:	4253      	negpl	r3, r2
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e74:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e80:	2108      	movs	r1, #8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fbc6 	bl	8000614 <ExtractBits>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004e90:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e94:	3308      	adds	r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da00      	bge.n	8004e9c <Vital_Msg_extr_from_CAN+0x850>
 8004e9a:	3307      	adds	r3, #7
 8004e9c:	10db      	asrs	r3, r3, #3
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004eaa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004eae:	3308      	adds	r3, #8
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	425a      	negs	r2, r3
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	f002 0207 	and.w	r2, r2, #7
 8004ebe:	bf58      	it	pl
 8004ec0:	4253      	negpl	r3, r2
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ecc:	4619      	mov	r1, r3
 8004ece:	484b      	ldr	r0, [pc, #300]	; (8004ffc <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ed0:	f01d f9b0 	bl	8022234 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ed4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	441a      	add	r2, r3
 8004edc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ee0:	2108      	movs	r1, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb96 	bl	8000614 <ExtractBits>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004ef0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da00      	bge.n	8004efc <Vital_Msg_extr_from_CAN+0x8b0>
 8004efa:	3307      	adds	r3, #7
 8004efc:	10db      	asrs	r3, r3, #3
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f04:	4413      	add	r3, r2
 8004f06:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f0a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f0e:	3308      	adds	r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	425a      	negs	r2, r3
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	f002 0207 	and.w	r2, r2, #7
 8004f1e:	bf58      	it	pl
 8004f20:	4253      	negpl	r3, r2
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004f34:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	3301      	adds	r3, #1
 8004f46:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f4a:	e004      	b.n	8004f56 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004f5c:	e040      	b.n	8004fe0 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f5e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	441a      	add	r2, r3
 8004f66:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f6a:	2108      	movs	r1, #8
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb fb51 	bl	8000614 <ExtractBits>
 8004f72:	4602      	mov	r2, r0
 8004f74:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f7e:	443b      	add	r3, r7
 8004f80:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f84:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004f88:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f90:	443b      	add	r3, r7
 8004f92:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8004f96:	461a      	mov	r2, r3
 8004f98:	4819      	ldr	r0, [pc, #100]	; (8005000 <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f9a:	f01d f94b 	bl	8022234 <iprintf>
		BITSTUFFINC(8);
 8004f9e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da00      	bge.n	8004faa <Vital_Msg_extr_from_CAN+0x95e>
 8004fa8:	3307      	adds	r3, #7
 8004faa:	10db      	asrs	r3, r3, #3
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fb8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	b21b      	sxth	r3, r3
 8004fc2:	425a      	negs	r2, r3
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	f002 0207 	and.w	r2, r2, #7
 8004fcc:	bf58      	it	pl
 8004fce:	4253      	negpl	r3, r2
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004fd6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fe0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d3b7      	bcc.n	8004f5e <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8004fee:	200a      	movs	r0, #10
 8004ff0:	f01d f938 	bl	8022264 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004ffa:	e037      	b.n	800506c <Vital_Msg_extr_from_CAN+0xa20>
 8004ffc:	0802428c 	.word	0x0802428c
 8005000:	08024294 	.word	0x08024294
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005004:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	441a      	add	r2, r3
 800500c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005010:	2108      	movs	r1, #8
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb fafe 	bl	8000614 <ExtractBits>
 8005018:	4602      	mov	r2, r0
 800501a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005024:	443b      	add	r3, r7
 8005026:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800502a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800502e:	3308      	adds	r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	da00      	bge.n	8005036 <Vital_Msg_extr_from_CAN+0x9ea>
 8005034:	3307      	adds	r3, #7
 8005036:	10db      	asrs	r3, r3, #3
 8005038:	b29a      	uxth	r2, r3
 800503a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800503e:	4413      	add	r3, r2
 8005040:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005044:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005048:	3308      	adds	r3, #8
 800504a:	b29b      	uxth	r3, r3
 800504c:	b21b      	sxth	r3, r3
 800504e:	425a      	negs	r2, r3
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	f002 0207 	and.w	r2, r2, #7
 8005058:	bf58      	it	pl
 800505a:	4253      	negpl	r3, r2
 800505c:	b21b      	sxth	r3, r3
 800505e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005062:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005066:	3301      	adds	r3, #1
 8005068:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800506c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005070:	b29b      	uxth	r3, r3
 8005072:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005076:	429a      	cmp	r2, r3
 8005078:	d3c4      	bcc.n	8005004 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	3301      	adds	r3, #1
 8005080:	2210      	movs	r2, #16
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f01c ffed 	bl	8022064 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800508a:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800508e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005092:	1d59      	adds	r1, r3, #5
 8005094:	f107 0308 	add.w	r3, r7, #8
 8005098:	3301      	adds	r3, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f01c ffba 	bl	8022014 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 80050a0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	3301      	adds	r3, #1
 80050ac:	4619      	mov	r1, r3
 80050ae:	2000      	movs	r0, #0
 80050b0:	f00d fd2c 	bl	8012b0c <GetCRC16>
 80050b4:	4603      	mov	r3, r0
 80050b6:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 80050b8:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050bc:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 80050be:	78bb      	ldrb	r3, [r7, #2]
 80050c0:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 80050c2:	78bb      	ldrb	r3, [r7, #2]
 80050c4:	4a60      	ldr	r2, [pc, #384]	; (8005248 <Vital_Msg_extr_from_CAN+0xbfc>)
 80050c6:	4413      	add	r3, r2
 80050c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d17f      	bne.n	80051d0 <Vital_Msg_extr_from_CAN+0xb84>
 80050d0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d17b      	bne.n	80051d0 <Vital_Msg_extr_from_CAN+0xb84>
 80050d8:	8b79      	ldrh	r1, [r7, #26]
 80050da:	78ba      	ldrb	r2, [r7, #2]
 80050dc:	485b      	ldr	r0, [pc, #364]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4403      	add	r3, r0
 80050e8:	3312      	adds	r3, #18
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	4299      	cmp	r1, r3
 80050ee:	d06f      	beq.n	80051d0 <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050f0:	78ba      	ldrb	r2, [r7, #2]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4a54      	ldr	r2, [pc, #336]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 80050fc:	4413      	add	r3, r2
 80050fe:	3301      	adds	r3, #1
 8005100:	2210      	movs	r2, #16
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f01c ffad 	bl	8022064 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 800510a:	78ba      	ldrb	r2, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a4d      	ldr	r2, [pc, #308]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 8005116:	4413      	add	r3, r2
 8005118:	f107 0108 	add.w	r1, r7, #8
 800511c:	2214      	movs	r2, #20
 800511e:	4618      	mov	r0, r3
 8005120:	f01c ff78 	bl	8022014 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8005124:	78bb      	ldrb	r3, [r7, #2]
 8005126:	494a      	ldr	r1, [pc, #296]	; (8005250 <Vital_Msg_extr_from_CAN+0xc04>)
 8005128:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005130:	78bb      	ldrb	r3, [r7, #2]
 8005132:	4a48      	ldr	r2, [pc, #288]	; (8005254 <Vital_Msg_extr_from_CAN+0xc08>)
 8005134:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005138:	78ba      	ldrb	r2, [r7, #2]
 800513a:	4844      	ldr	r0, [pc, #272]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4403      	add	r3, r0
 8005146:	3312      	adds	r3, #18
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	4299      	cmp	r1, r3
 800514c:	d040      	beq.n	80051d0 <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800514e:	78ba      	ldrb	r2, [r7, #2]
 8005150:	78b9      	ldrb	r1, [r7, #2]
 8005152:	483e      	ldr	r0, [pc, #248]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4403      	add	r3, r0
 800515e:	3312      	adds	r3, #18
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <Vital_Msg_extr_from_CAN+0xc08>)
 8005164:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005168:	2214      	movs	r2, #20
 800516a:	2100      	movs	r1, #0
 800516c:	483a      	ldr	r0, [pc, #232]	; (8005258 <Vital_Msg_extr_from_CAN+0xc0c>)
 800516e:	f01c ff79 	bl	8022064 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005172:	78ba      	ldrb	r2, [r7, #2]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4a33      	ldr	r2, [pc, #204]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 800517e:	4413      	add	r3, r2
 8005180:	2214      	movs	r2, #20
 8005182:	4619      	mov	r1, r3
 8005184:	4834      	ldr	r0, [pc, #208]	; (8005258 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005186:	f01c ff45 	bl	8022014 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800518a:	f240 2007 	movw	r0, #519	; 0x207
 800518e:	f00a fc75 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8005192:	78bb      	ldrb	r3, [r7, #2]
 8005194:	4a31      	ldr	r2, [pc, #196]	; (800525c <Vital_Msg_extr_from_CAN+0xc10>)
 8005196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d118      	bne.n	80051d0 <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800519e:	78bb      	ldrb	r3, [r7, #2]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	4a2f      	ldr	r2, [pc, #188]	; (8005260 <Vital_Msg_extr_from_CAN+0xc14>)
 80051a4:	4413      	add	r3, r2
 80051a6:	1c98      	adds	r0, r3, #2
 80051a8:	78ba      	ldrb	r2, [r7, #2]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <Vital_Msg_extr_from_CAN+0xc00>)
 80051b4:	4413      	add	r3, r2
 80051b6:	3301      	adds	r3, #1
 80051b8:	2210      	movs	r2, #16
 80051ba:	4619      	mov	r1, r3
 80051bc:	f01c ff2a 	bl	8022014 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 80051c0:	f240 1019 	movw	r0, #281	; 0x119
 80051c4:	f00a fc5a 	bl	800fa7c <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 80051c8:	4a26      	ldr	r2, [pc, #152]	; (8005264 <Vital_Msg_extr_from_CAN+0xc18>)
 80051ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ce:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80051d0:	78ba      	ldrb	r2, [r7, #2]
 80051d2:	4925      	ldr	r1, [pc, #148]	; (8005268 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	440b      	add	r3, r1
 80051de:	78ba      	ldrb	r2, [r7, #2]
 80051e0:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051e2:	78ba      	ldrb	r2, [r7, #2]
 80051e4:	4920      	ldr	r1, [pc, #128]	; (8005268 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3301      	adds	r3, #1
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051f6:	2218      	movs	r2, #24
 80051f8:	2100      	movs	r1, #0
 80051fa:	481c      	ldr	r0, [pc, #112]	; (800526c <Vital_Msg_extr_from_CAN+0xc20>)
 80051fc:	f01c ff32 	bl	8022064 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005200:	78ba      	ldrb	r2, [r7, #2]
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <Vital_Msg_extr_from_CAN+0xc1c>)
 800520c:	4413      	add	r3, r2
 800520e:	2218      	movs	r2, #24
 8005210:	4619      	mov	r1, r3
 8005212:	4816      	ldr	r0, [pc, #88]	; (800526c <Vital_Msg_extr_from_CAN+0xc20>)
 8005214:	f01c fefe 	bl	8022014 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005218:	f240 2001 	movw	r0, #513	; 0x201
 800521c:	f00a fc2e 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005220:	78ba      	ldrb	r2, [r7, #2]
 8005222:	4911      	ldr	r1, [pc, #68]	; (8005268 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005224:	4613      	mov	r3, r2
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4413      	add	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	440b      	add	r3, r1
 800522e:	3301      	adds	r3, #1
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005234:	78bb      	ldrb	r3, [r7, #2]
 8005236:	490e      	ldr	r1, [pc, #56]	; (8005270 <Vital_Msg_extr_from_CAN+0xc24>)
 8005238:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800523c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005240:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000304 	.word	0x20000304
 800524c:	20001e68 	.word	0x20001e68
 8005250:	20000ed8 	.word	0x20000ed8
 8005254:	20000f00 	.word	0x20000f00
 8005258:	20001ff8 	.word	0x20001ff8
 800525c:	20000ec4 	.word	0x20000ec4
 8005260:	200010e4 	.word	0x200010e4
 8005264:	20000e70 	.word	0x20000e70
 8005268:	20001674 	.word	0x20001674
 800526c:	20001854 	.word	0x20001854
 8005270:	20000e44 	.word	0x20000e44

08005274 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b095      	sub	sp, #84	; 0x54
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	70fb      	strb	r3, [r7, #3]
 8005286:	460b      	mov	r3, r1
 8005288:	70bb      	strb	r3, [r7, #2]
 800528a:	4613      	mov	r3, r2
 800528c:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f01c fee2 	bl	8022064 <memset>
	uint8_t uc_index = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 80052b4:	f010 f8bc 	bl	8015430 <HAL_GetTick>
 80052b8:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 80052c0:	2300      	movs	r3, #0
 80052c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80052c4:	2300      	movs	r3, #0
 80052c6:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80052c8:	499a      	ldr	r1, [pc, #616]	; (8005534 <Status_Msg_Extr+0x2c0>)
 80052ca:	489b      	ldr	r0, [pc, #620]	; (8005538 <Status_Msg_Extr+0x2c4>)
 80052cc:	f7fa ffb8 	bl	8000240 <strcmp>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 812c 	beq.w	8005530 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80052d8:	4b98      	ldr	r3, [pc, #608]	; (800553c <Status_Msg_Extr+0x2c8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02c      	beq.n	800533e <Status_Msg_Extr+0xca>
 80052e4:	4b95      	ldr	r3, [pc, #596]	; (800553c <Status_Msg_Extr+0x2c8>)
 80052e6:	791b      	ldrb	r3, [r3, #4]
 80052e8:	78ba      	ldrb	r2, [r7, #2]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d127      	bne.n	800533e <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052f2:	4893      	ldr	r0, [pc, #588]	; (8005540 <Status_Msg_Extr+0x2cc>)
 80052f4:	f014 fc5a 	bl	8019bac <HAL_RNG_GetRandomNumber>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b92      	ldr	r3, [pc, #584]	; (8005544 <Status_Msg_Extr+0x2d0>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	0bd9      	lsrs	r1, r3, #15
 8005302:	460b      	mov	r3, r1
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 800530c:	488e      	ldr	r0, [pc, #568]	; (8005548 <Status_Msg_Extr+0x2d4>)
 800530e:	f01d f82d 	bl	802236c <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005312:	78bb      	ldrb	r3, [r7, #2]
 8005314:	4a8d      	ldr	r2, [pc, #564]	; (800554c <Status_Msg_Extr+0x2d8>)
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	4413      	add	r3, r2
 800531a:	3308      	adds	r3, #8
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	488b      	ldr	r0, [pc, #556]	; (8005550 <Status_Msg_Extr+0x2dc>)
 8005322:	f01c ff87 	bl	8022234 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005328:	488a      	ldr	r0, [pc, #552]	; (8005554 <Status_Msg_Extr+0x2e0>)
 800532a:	f01c ff83 	bl	8022234 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 800532e:	f107 0208 	add.w	r2, r7, #8
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2118      	movs	r1, #24
 8005336:	2000      	movs	r0, #0
 8005338:	f7fb f9f8 	bl	800072c <InsertBits>
	{
 800533c:	e00b      	b.n	8005356 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800533e:	78bb      	ldrb	r3, [r7, #2]
 8005340:	4a82      	ldr	r2, [pc, #520]	; (800554c <Status_Msg_Extr+0x2d8>)
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	3308      	adds	r3, #8
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f107 0208 	add.w	r2, r7, #8
 800534e:	2118      	movs	r1, #24
 8005350:	2000      	movs	r0, #0
 8005352:	f7fb f9eb 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005356:	2300      	movs	r3, #0
 8005358:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800535c:	e010      	b.n	8005380 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800535e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	441a      	add	r2, r3
 8005366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800536a:	3303      	adds	r3, #3
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	3350      	adds	r3, #80	; 0x50
 8005370:	443b      	add	r3, r7
 8005372:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005376:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800537a:	3301      	adds	r3, #1
 800537c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005380:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	3b05      	subs	r3, #5
 8005388:	429a      	cmp	r2, r3
 800538a:	dbe8      	blt.n	800535e <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800538c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005390:	b29b      	uxth	r3, r3
 8005392:	3303      	adds	r3, #3
 8005394:	b29a      	uxth	r2, r3
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f00d fc6f 	bl	8012c80 <CalculateDirectReverseCrc>
 80053a2:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	3b05      	subs	r3, #5
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	441a      	add	r2, r3
 80053ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053ae:	2120      	movs	r1, #32
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fb f92f 	bl	8000614 <ExtractBits>
 80053b6:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 80053b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053bc:	429a      	cmp	r2, r3
 80053be:	f000 80df 	beq.w	8005580 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3305      	adds	r3, #5
 80053c6:	461a      	mov	r2, r3
 80053c8:	2108      	movs	r1, #8
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fb f922 	bl	8000614 <ExtractBits>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 80053d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <Status_Msg_Extr+0x174>
 80053de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	f040 8090 	bne.w	8005508 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053e8:	78bb      	ldrb	r3, [r7, #2]
 80053ea:	4a5b      	ldr	r2, [pc, #364]	; (8005558 <Status_Msg_Extr+0x2e4>)
 80053ec:	3366      	adds	r3, #102	; 0x66
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	4859      	ldr	r0, [pc, #356]	; (800555c <Status_Msg_Extr+0x2e8>)
 80053f8:	f01c ff1c 	bl	8022234 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053fc:	f107 0308 	add.w	r3, r7, #8
 8005400:	2228      	movs	r2, #40	; 0x28
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f01c fe2d 	bl	8022064 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 800540a:	78bb      	ldrb	r3, [r7, #2]
 800540c:	4a4f      	ldr	r2, [pc, #316]	; (800554c <Status_Msg_Extr+0x2d8>)
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	4413      	add	r3, r2
 8005412:	3308      	adds	r3, #8
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	f107 0208 	add.w	r2, r7, #8
 800541c:	2118      	movs	r1, #24
 800541e:	2000      	movs	r0, #0
 8005420:	f7fb f984 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005424:	2300      	movs	r3, #0
 8005426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800542a:	e010      	b.n	800544e <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 800542c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	441a      	add	r2, r3
 8005434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005438:	3303      	adds	r3, #3
 800543a:	7812      	ldrb	r2, [r2, #0]
 800543c:	3350      	adds	r3, #80	; 0x50
 800543e:	443b      	add	r3, r7
 8005440:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005444:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005448:	3301      	adds	r3, #1
 800544a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800544e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	3b05      	subs	r3, #5
 8005456:	429a      	cmp	r2, r3
 8005458:	dbe8      	blt.n	800542c <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800545a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800545e:	b29b      	uxth	r3, r3
 8005460:	3303      	adds	r3, #3
 8005462:	b29a      	uxth	r2, r3
 8005464:	f107 0308 	add.w	r3, r7, #8
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f00d fc08 	bl	8012c80 <CalculateDirectReverseCrc>
 8005470:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005476:	429a      	cmp	r2, r3
 8005478:	d132      	bne.n	80054e0 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 800547a:	4839      	ldr	r0, [pc, #228]	; (8005560 <Status_Msg_Extr+0x2ec>)
 800547c:	f01c ff76 	bl	802236c <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005480:	78bb      	ldrb	r3, [r7, #2]
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <Status_Msg_Extr+0x2d8>)
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	3308      	adds	r3, #8
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	4835      	ldr	r0, [pc, #212]	; (8005564 <Status_Msg_Extr+0x2f0>)
 8005490:	f01c fed0 	bl	8022234 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005494:	78bb      	ldrb	r3, [r7, #2]
 8005496:	492d      	ldr	r1, [pc, #180]	; (800554c <Status_Msg_Extr+0x2d8>)
 8005498:	011a      	lsls	r2, r3, #4
 800549a:	440a      	add	r2, r1
 800549c:	3208      	adds	r2, #8
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	3201      	adds	r2, #1
 80054a2:	492a      	ldr	r1, [pc, #168]	; (800554c <Status_Msg_Extr+0x2d8>)
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	440b      	add	r3, r1
 80054a8:	3308      	adds	r3, #8
 80054aa:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <Status_Msg_Extr+0x2d8>)
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	3308      	adds	r3, #8
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	482b      	ldr	r0, [pc, #172]	; (8005568 <Status_Msg_Extr+0x2f4>)
 80054bc:	f01c feba 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80054c0:	78bb      	ldrb	r3, [r7, #2]
 80054c2:	78ba      	ldrb	r2, [r7, #2]
 80054c4:	4921      	ldr	r1, [pc, #132]	; (800554c <Status_Msg_Extr+0x2d8>)
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	440b      	add	r3, r1
 80054ca:	3308      	adds	r3, #8
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	4827      	ldr	r0, [pc, #156]	; (800556c <Status_Msg_Extr+0x2f8>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4403      	add	r3, r0
 80054da:	3308      	adds	r3, #8
 80054dc:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 80054de:	e050      	b.n	8005582 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054e0:	78bb      	ldrb	r3, [r7, #2]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <Status_Msg_Extr+0x2e4>)
 80054e4:	3366      	adds	r3, #102	; 0x66
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4619      	mov	r1, r3
 80054ee:	4820      	ldr	r0, [pc, #128]	; (8005570 <Status_Msg_Extr+0x2fc>)
 80054f0:	f01c fea0 	bl	8022234 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054f6:	481f      	ldr	r0, [pc, #124]	; (8005574 <Status_Msg_Extr+0x300>)
 80054f8:	f01c fe9c 	bl	8022234 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054fe:	481e      	ldr	r0, [pc, #120]	; (8005578 <Status_Msg_Extr+0x304>)
 8005500:	f01c fe98 	bl	8022234 <iprintf>
				return;
 8005504:	f000 bc33 	b.w	8005d6e <Status_Msg_Extr+0xafa>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005508:	78bb      	ldrb	r3, [r7, #2]
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <Status_Msg_Extr+0x2e4>)
 800550c:	3366      	adds	r3, #102	; 0x66
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	4819      	ldr	r0, [pc, #100]	; (800557c <Status_Msg_Extr+0x308>)
 8005518:	f01c fe8c 	bl	8022234 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 800551c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800551e:	4815      	ldr	r0, [pc, #84]	; (8005574 <Status_Msg_Extr+0x300>)
 8005520:	f01c fe88 	bl	8022234 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005526:	4814      	ldr	r0, [pc, #80]	; (8005578 <Status_Msg_Extr+0x304>)
 8005528:	f01c fe84 	bl	8022234 <iprintf>
			return;
 800552c:	f000 bc1f 	b.w	8005d6e <Status_Msg_Extr+0xafa>
		goto ROLLOVER_STATUS;
 8005530:	bf00      	nop
 8005532:	e026      	b.n	8005582 <Status_Msg_Extr+0x30e>
 8005534:	08023a40 	.word	0x08023a40
 8005538:	20000305 	.word	0x20000305
 800553c:	2000195c 	.word	0x2000195c
 8005540:	20009cf4 	.word	0x20009cf4
 8005544:	80008001 	.word	0x80008001
 8005548:	080242a4 	.word	0x080242a4
 800554c:	200011c4 	.word	0x200011c4
 8005550:	080242c4 	.word	0x080242c4
 8005554:	08023f8c 	.word	0x08023f8c
 8005558:	20000304 	.word	0x20000304
 800555c:	080242e8 	.word	0x080242e8
 8005560:	08023fd0 	.word	0x08023fd0
 8005564:	0802430c 	.word	0x0802430c
 8005568:	08024324 	.word	0x08024324
 800556c:	20001674 	.word	0x20001674
 8005570:	0802433c 	.word	0x0802433c
 8005574:	08023c84 	.word	0x08023c84
 8005578:	08023c94 	.word	0x08023c94
 800557c:	0802435c 	.word	0x0802435c
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005580:	bf00      	nop

	BITSTUFFINC(8);
 8005582:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005586:	3308      	adds	r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	da00      	bge.n	800558e <Status_Msg_Extr+0x31a>
 800558c:	3307      	adds	r3, #7
 800558e:	10db      	asrs	r3, r3, #3
 8005590:	b29a      	uxth	r2, r3
 8005592:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005594:	4413      	add	r3, r2
 8005596:	873b      	strh	r3, [r7, #56]	; 0x38
 8005598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800559a:	3308      	adds	r3, #8
 800559c:	b29b      	uxth	r3, r3
 800559e:	b21b      	sxth	r3, r3
 80055a0:	425a      	negs	r2, r3
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	f002 0207 	and.w	r2, r2, #7
 80055aa:	bf58      	it	pl
 80055ac:	4253      	negpl	r3, r2
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	441a      	add	r2, r3
 80055b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ba:	2110      	movs	r1, #16
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fb f829 	bl	8000614 <ExtractBits>
 80055c2:	4603      	mov	r3, r0
 80055c4:	78ba      	ldrb	r2, [r7, #2]
 80055c6:	b298      	uxth	r0, r3
 80055c8:	49ab      	ldr	r1, [pc, #684]	; (8005878 <Status_Msg_Extr+0x604>)
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	3306      	adds	r3, #6
 80055d6:	4602      	mov	r2, r0
 80055d8:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80055da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055de:	3310      	adds	r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da00      	bge.n	80055e6 <Status_Msg_Extr+0x372>
 80055e4:	3307      	adds	r3, #7
 80055e6:	10db      	asrs	r3, r3, #3
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ec:	4413      	add	r3, r2
 80055ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80055f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055f2:	3310      	adds	r3, #16
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	425a      	negs	r2, r3
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	f002 0207 	and.w	r2, r2, #7
 8005602:	bf58      	it	pl
 8005604:	4253      	negpl	r3, r2
 8005606:	b21b      	sxth	r3, r3
 8005608:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800560a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	441a      	add	r2, r3
 8005610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005612:	2110      	movs	r1, #16
 8005614:	4618      	mov	r0, r3
 8005616:	f7fa fffd 	bl	8000614 <ExtractBits>
 800561a:	4603      	mov	r3, r0
 800561c:	78ba      	ldrb	r2, [r7, #2]
 800561e:	b298      	uxth	r0, r3
 8005620:	4995      	ldr	r1, [pc, #596]	; (8005878 <Status_Msg_Extr+0x604>)
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3304      	adds	r3, #4
 800562e:	4602      	mov	r2, r0
 8005630:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005632:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005636:	3310      	adds	r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	da00      	bge.n	800563e <Status_Msg_Extr+0x3ca>
 800563c:	3307      	adds	r3, #7
 800563e:	10db      	asrs	r3, r3, #3
 8005640:	b29a      	uxth	r2, r3
 8005642:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005644:	4413      	add	r3, r2
 8005646:	873b      	strh	r3, [r7, #56]	; 0x38
 8005648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800564a:	3310      	adds	r3, #16
 800564c:	b29b      	uxth	r3, r3
 800564e:	b21b      	sxth	r3, r3
 8005650:	425a      	negs	r2, r3
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	f002 0207 	and.w	r2, r2, #7
 800565a:	bf58      	it	pl
 800565c:	4253      	negpl	r3, r2
 800565e:	b21b      	sxth	r3, r3
 8005660:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	441a      	add	r2, r3
 8005668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566a:	2108      	movs	r1, #8
 800566c:	4618      	mov	r0, r3
 800566e:	f7fa ffd1 	bl	8000614 <ExtractBits>
 8005672:	4602      	mov	r2, r0
 8005674:	78bb      	ldrb	r3, [r7, #2]
 8005676:	b2d1      	uxtb	r1, r2
 8005678:	4a80      	ldr	r2, [pc, #512]	; (800587c <Status_Msg_Extr+0x608>)
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	4413      	add	r3, r2
 800567e:	3302      	adds	r3, #2
 8005680:	460a      	mov	r2, r1
 8005682:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005684:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005688:	3308      	adds	r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	da00      	bge.n	8005690 <Status_Msg_Extr+0x41c>
 800568e:	3307      	adds	r3, #7
 8005690:	10db      	asrs	r3, r3, #3
 8005692:	b29a      	uxth	r2, r3
 8005694:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005696:	4413      	add	r3, r2
 8005698:	873b      	strh	r3, [r7, #56]	; 0x38
 800569a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800569c:	3308      	adds	r3, #8
 800569e:	b29b      	uxth	r3, r3
 80056a0:	b21b      	sxth	r3, r3
 80056a2:	425a      	negs	r2, r3
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	f002 0207 	and.w	r2, r2, #7
 80056ac:	bf58      	it	pl
 80056ae:	4253      	negpl	r3, r2
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	441a      	add	r2, r3
 80056ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056bc:	2108      	movs	r1, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fa ffa8 	bl	8000614 <ExtractBits>
 80056c4:	4602      	mov	r2, r0
 80056c6:	78bb      	ldrb	r3, [r7, #2]
 80056c8:	b2d1      	uxtb	r1, r2
 80056ca:	4a6c      	ldr	r2, [pc, #432]	; (800587c <Status_Msg_Extr+0x608>)
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	4413      	add	r3, r2
 80056d0:	3301      	adds	r3, #1
 80056d2:	460a      	mov	r2, r1
 80056d4:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 80056d6:	78bb      	ldrb	r3, [r7, #2]
 80056d8:	4a68      	ldr	r2, [pc, #416]	; (800587c <Status_Msg_Extr+0x608>)
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	3301      	adds	r3, #1
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d138      	bne.n	8005758 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	4a65      	ldr	r2, [pc, #404]	; (8005880 <Status_Msg_Extr+0x60c>)
 80056ea:	3366      	adds	r3, #102	; 0x66
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4619      	mov	r1, r3
 80056f4:	4863      	ldr	r0, [pc, #396]	; (8005884 <Status_Msg_Extr+0x610>)
 80056f6:	f01c fd9d 	bl	8022234 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056fa:	78bb      	ldrb	r3, [r7, #2]
 80056fc:	4a5f      	ldr	r2, [pc, #380]	; (800587c <Status_Msg_Extr+0x608>)
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	4413      	add	r3, r2
 8005702:	330c      	adds	r3, #12
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	485f      	ldr	r0, [pc, #380]	; (8005888 <Status_Msg_Extr+0x614>)
 800570a:	f01c fd93 	bl	8022234 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800570e:	78bb      	ldrb	r3, [r7, #2]
 8005710:	495a      	ldr	r1, [pc, #360]	; (800587c <Status_Msg_Extr+0x608>)
 8005712:	011a      	lsls	r2, r3, #4
 8005714:	440a      	add	r2, r1
 8005716:	320c      	adds	r2, #12
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	3201      	adds	r2, #1
 800571c:	4957      	ldr	r1, [pc, #348]	; (800587c <Status_Msg_Extr+0x608>)
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	440b      	add	r3, r1
 8005722:	330c      	adds	r3, #12
 8005724:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005726:	78bb      	ldrb	r3, [r7, #2]
 8005728:	4a54      	ldr	r2, [pc, #336]	; (800587c <Status_Msg_Extr+0x608>)
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	330c      	adds	r3, #12
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4855      	ldr	r0, [pc, #340]	; (800588c <Status_Msg_Extr+0x618>)
 8005736:	f01c fd7d 	bl	8022234 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800573a:	78bb      	ldrb	r3, [r7, #2]
 800573c:	78ba      	ldrb	r2, [r7, #2]
 800573e:	494f      	ldr	r1, [pc, #316]	; (800587c <Status_Msg_Extr+0x608>)
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	440b      	add	r3, r1
 8005744:	330c      	adds	r3, #12
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	4851      	ldr	r0, [pc, #324]	; (8005890 <Status_Msg_Extr+0x61c>)
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4403      	add	r3, r0
 8005754:	330c      	adds	r3, #12
 8005756:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005758:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800575c:	3308      	adds	r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	da00      	bge.n	8005764 <Status_Msg_Extr+0x4f0>
 8005762:	3307      	adds	r3, #7
 8005764:	10db      	asrs	r3, r3, #3
 8005766:	b29a      	uxth	r2, r3
 8005768:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800576a:	4413      	add	r3, r2
 800576c:	873b      	strh	r3, [r7, #56]	; 0x38
 800576e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005770:	3308      	adds	r3, #8
 8005772:	b29b      	uxth	r3, r3
 8005774:	b21b      	sxth	r3, r3
 8005776:	425a      	negs	r2, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	f002 0207 	and.w	r2, r2, #7
 8005780:	bf58      	it	pl
 8005782:	4253      	negpl	r3, r2
 8005784:	b21b      	sxth	r3, r3
 8005786:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005788:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	441a      	add	r2, r3
 800578e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005790:	2108      	movs	r1, #8
 8005792:	4618      	mov	r0, r3
 8005794:	f7fa ff3e 	bl	8000614 <ExtractBits>
 8005798:	4603      	mov	r3, r0
 800579a:	78ba      	ldrb	r2, [r7, #2]
 800579c:	b2d8      	uxtb	r0, r3
 800579e:	4936      	ldr	r1, [pc, #216]	; (8005878 <Status_Msg_Extr+0x604>)
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3302      	adds	r3, #2
 80057ac:	4602      	mov	r2, r0
 80057ae:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80057b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057b4:	3308      	adds	r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da00      	bge.n	80057bc <Status_Msg_Extr+0x548>
 80057ba:	3307      	adds	r3, #7
 80057bc:	10db      	asrs	r3, r3, #3
 80057be:	b29a      	uxth	r2, r3
 80057c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057c2:	4413      	add	r3, r2
 80057c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80057c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057c8:	3308      	adds	r3, #8
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	425a      	negs	r2, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	f002 0207 	and.w	r2, r2, #7
 80057d8:	bf58      	it	pl
 80057da:	4253      	negpl	r3, r2
 80057dc:	b21b      	sxth	r3, r3
 80057de:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	441a      	add	r2, r3
 80057e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e8:	2110      	movs	r1, #16
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fa ff12 	bl	8000614 <ExtractBits>
 80057f0:	4602      	mov	r2, r0
 80057f2:	78bb      	ldrb	r3, [r7, #2]
 80057f4:	b291      	uxth	r1, r2
 80057f6:	4a21      	ldr	r2, [pc, #132]	; (800587c <Status_Msg_Extr+0x608>)
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	3304      	adds	r3, #4
 80057fe:	460a      	mov	r2, r1
 8005800:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005802:	4924      	ldr	r1, [pc, #144]	; (8005894 <Status_Msg_Extr+0x620>)
 8005804:	4824      	ldr	r0, [pc, #144]	; (8005898 <Status_Msg_Extr+0x624>)
 8005806:	f7fa fd1b 	bl	8000240 <strcmp>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10f      	bne.n	8005830 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8005810:	78bb      	ldrb	r3, [r7, #2]
 8005812:	4a1a      	ldr	r2, [pc, #104]	; (800587c <Status_Msg_Extr+0x608>)
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4413      	add	r3, r2
 8005818:	3304      	adds	r3, #4
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	78bb      	ldrb	r3, [r7, #2]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	b291      	uxth	r1, r2
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <Status_Msg_Extr+0x608>)
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	4413      	add	r3, r2
 800582a:	3304      	adds	r3, #4
 800582c:	460a      	mov	r2, r1
 800582e:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 8005830:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005834:	3310      	adds	r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	da00      	bge.n	800583c <Status_Msg_Extr+0x5c8>
 800583a:	3307      	adds	r3, #7
 800583c:	10db      	asrs	r3, r3, #3
 800583e:	b29a      	uxth	r2, r3
 8005840:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005842:	4413      	add	r3, r2
 8005844:	873b      	strh	r3, [r7, #56]	; 0x38
 8005846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005848:	3310      	adds	r3, #16
 800584a:	b29b      	uxth	r3, r3
 800584c:	b21b      	sxth	r3, r3
 800584e:	425a      	negs	r2, r3
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	f002 0207 	and.w	r2, r2, #7
 8005858:	bf58      	it	pl
 800585a:	4253      	negpl	r3, r2
 800585c:	b21b      	sxth	r3, r3
 800585e:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8005860:	78bb      	ldrb	r3, [r7, #2]
 8005862:	4a06      	ldr	r2, [pc, #24]	; (800587c <Status_Msg_Extr+0x608>)
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	4413      	add	r3, r2
 8005868:	3304      	adds	r3, #4
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 812f 	beq.w	8005ad4 <Status_Msg_Extr+0x860>
 8005876:	e011      	b.n	800589c <Status_Msg_Extr+0x628>
 8005878:	200015fc 	.word	0x200015fc
 800587c:	200011c4 	.word	0x200011c4
 8005880:	20000304 	.word	0x20000304
 8005884:	08024088 	.word	0x08024088
 8005888:	08024374 	.word	0x08024374
 800588c:	08024380 	.word	0x08024380
 8005890:	20001674 	.word	0x20001674
 8005894:	08023a40 	.word	0x08023a40
 8005898:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800589c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	441a      	add	r2, r3
 80058a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058a4:	2108      	movs	r1, #8
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fa feb4 	bl	8000614 <ExtractBits>
 80058ac:	4603      	mov	r3, r0
 80058ae:	78ba      	ldrb	r2, [r7, #2]
 80058b0:	b2d8      	uxtb	r0, r3
 80058b2:	4984      	ldr	r1, [pc, #528]	; (8005ac4 <Status_Msg_Extr+0x850>)
 80058b4:	4613      	mov	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	440b      	add	r3, r1
 80058be:	3305      	adds	r3, #5
 80058c0:	4602      	mov	r2, r0
 80058c2:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058c8:	3308      	adds	r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da00      	bge.n	80058d0 <Status_Msg_Extr+0x65c>
 80058ce:	3307      	adds	r3, #7
 80058d0:	10db      	asrs	r3, r3, #3
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058d6:	4413      	add	r3, r2
 80058d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80058da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058dc:	3308      	adds	r3, #8
 80058de:	b29b      	uxth	r3, r3
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	425a      	negs	r2, r3
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	f002 0207 	and.w	r2, r2, #7
 80058ec:	bf58      	it	pl
 80058ee:	4253      	negpl	r3, r2
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	441a      	add	r2, r3
 80058fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058fc:	2108      	movs	r1, #8
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fa fe88 	bl	8000614 <ExtractBits>
 8005904:	4603      	mov	r3, r0
 8005906:	78ba      	ldrb	r2, [r7, #2]
 8005908:	b2d8      	uxtb	r0, r3
 800590a:	496e      	ldr	r1, [pc, #440]	; (8005ac4 <Status_Msg_Extr+0x850>)
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	440b      	add	r3, r1
 8005916:	3304      	adds	r3, #4
 8005918:	4602      	mov	r2, r0
 800591a:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800591c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005920:	3308      	adds	r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	da00      	bge.n	8005928 <Status_Msg_Extr+0x6b4>
 8005926:	3307      	adds	r3, #7
 8005928:	10db      	asrs	r3, r3, #3
 800592a:	b29a      	uxth	r2, r3
 800592c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800592e:	4413      	add	r3, r2
 8005930:	873b      	strh	r3, [r7, #56]	; 0x38
 8005932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005934:	3308      	adds	r3, #8
 8005936:	b29b      	uxth	r3, r3
 8005938:	b21b      	sxth	r3, r3
 800593a:	425a      	negs	r2, r3
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	f002 0207 	and.w	r2, r2, #7
 8005944:	bf58      	it	pl
 8005946:	4253      	negpl	r3, r2
 8005948:	b21b      	sxth	r3, r3
 800594a:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800594c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	441a      	add	r2, r3
 8005952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005954:	2108      	movs	r1, #8
 8005956:	4618      	mov	r0, r3
 8005958:	f7fa fe5c 	bl	8000614 <ExtractBits>
 800595c:	4603      	mov	r3, r0
 800595e:	78ba      	ldrb	r2, [r7, #2]
 8005960:	b2d8      	uxtb	r0, r3
 8005962:	4958      	ldr	r1, [pc, #352]	; (8005ac4 <Status_Msg_Extr+0x850>)
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	440b      	add	r3, r1
 800596e:	3303      	adds	r3, #3
 8005970:	4602      	mov	r2, r0
 8005972:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005974:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005978:	3308      	adds	r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	da00      	bge.n	8005980 <Status_Msg_Extr+0x70c>
 800597e:	3307      	adds	r3, #7
 8005980:	10db      	asrs	r3, r3, #3
 8005982:	b29a      	uxth	r2, r3
 8005984:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005986:	4413      	add	r3, r2
 8005988:	873b      	strh	r3, [r7, #56]	; 0x38
 800598a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800598c:	3308      	adds	r3, #8
 800598e:	b29b      	uxth	r3, r3
 8005990:	b21b      	sxth	r3, r3
 8005992:	425a      	negs	r2, r3
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	f002 0207 	and.w	r2, r2, #7
 800599c:	bf58      	it	pl
 800599e:	4253      	negpl	r3, r2
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	441a      	add	r2, r3
 80059aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ac:	2108      	movs	r1, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fa fe30 	bl	8000614 <ExtractBits>
 80059b4:	4603      	mov	r3, r0
 80059b6:	78ba      	ldrb	r2, [r7, #2]
 80059b8:	b2d8      	uxtb	r0, r3
 80059ba:	4942      	ldr	r1, [pc, #264]	; (8005ac4 <Status_Msg_Extr+0x850>)
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	440b      	add	r3, r1
 80059c6:	4602      	mov	r2, r0
 80059c8:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059ca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059ce:	3308      	adds	r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da00      	bge.n	80059d6 <Status_Msg_Extr+0x762>
 80059d4:	3307      	adds	r3, #7
 80059d6:	10db      	asrs	r3, r3, #3
 80059d8:	b29a      	uxth	r2, r3
 80059da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059dc:	4413      	add	r3, r2
 80059de:	873b      	strh	r3, [r7, #56]	; 0x38
 80059e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059e2:	3308      	adds	r3, #8
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	425a      	negs	r2, r3
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	f002 0207 	and.w	r2, r2, #7
 80059f2:	bf58      	it	pl
 80059f4:	4253      	negpl	r3, r2
 80059f6:	b21b      	sxth	r3, r3
 80059f8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	441a      	add	r2, r3
 8005a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a02:	2108      	movs	r1, #8
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fa fe05 	bl	8000614 <ExtractBits>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	78ba      	ldrb	r2, [r7, #2]
 8005a0e:	b2d8      	uxtb	r0, r3
 8005a10:	492c      	ldr	r1, [pc, #176]	; (8005ac4 <Status_Msg_Extr+0x850>)
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	4602      	mov	r2, r0
 8005a20:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a22:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a26:	3308      	adds	r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da00      	bge.n	8005a2e <Status_Msg_Extr+0x7ba>
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	10db      	asrs	r3, r3, #3
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a34:	4413      	add	r3, r2
 8005a36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	425a      	negs	r2, r3
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	f002 0207 	and.w	r2, r2, #7
 8005a4a:	bf58      	it	pl
 8005a4c:	4253      	negpl	r3, r2
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	441a      	add	r2, r3
 8005a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fdd9 	bl	8000614 <ExtractBits>
 8005a62:	4603      	mov	r3, r0
 8005a64:	78ba      	ldrb	r2, [r7, #2]
 8005a66:	b2d8      	uxtb	r0, r3
 8005a68:	4916      	ldr	r1, [pc, #88]	; (8005ac4 <Status_Msg_Extr+0x850>)
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	440b      	add	r3, r1
 8005a74:	3302      	adds	r3, #2
 8005a76:	4602      	mov	r2, r0
 8005a78:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a7a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	da00      	bge.n	8005a86 <Status_Msg_Extr+0x812>
 8005a84:	3307      	adds	r3, #7
 8005a86:	10db      	asrs	r3, r3, #3
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a8c:	4413      	add	r3, r2
 8005a8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a92:	3308      	adds	r3, #8
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	b21b      	sxth	r3, r3
 8005a98:	425a      	negs	r2, r3
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	f002 0207 	and.w	r2, r2, #7
 8005aa2:	bf58      	it	pl
 8005aa4:	4253      	negpl	r3, r2
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005aaa:	78bb      	ldrb	r3, [r7, #2]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f003 f939 	bl	8008d24 <IS_MLK_EIPC_TIME_MATCHING>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <Status_Msg_Extr+0x858>
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	4a03      	ldr	r2, [pc, #12]	; (8005ac8 <Status_Msg_Extr+0x854>)
 8005abc:	2100      	movs	r1, #0
 8005abe:	54d1      	strb	r1, [r2, r3]
 8005ac0:	e008      	b.n	8005ad4 <Status_Msg_Extr+0x860>
 8005ac2:	bf00      	nop
 8005ac4:	20001188 	.word	0x20001188
 8005ac8:	200010d8 	.word	0x200010d8
 8005acc:	78bb      	ldrb	r3, [r7, #2]
 8005ace:	4aa9      	ldr	r2, [pc, #676]	; (8005d74 <Status_Msg_Extr+0xb00>)
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005ad4:	78bb      	ldrb	r3, [r7, #2]
 8005ad6:	4aa8      	ldr	r2, [pc, #672]	; (8005d78 <Status_Msg_Extr+0xb04>)
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	4413      	add	r3, r2
 8005adc:	3304      	adds	r3, #4
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005aee:	787a      	ldrb	r2, [r7, #1]
 8005af0:	78bb      	ldrb	r3, [r7, #2]
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f961 	bl	8005dbc <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005afa:	78bb      	ldrb	r3, [r7, #2]
 8005afc:	499f      	ldr	r1, [pc, #636]	; (8005d7c <Status_Msg_Extr+0xb08>)
 8005afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005b04:	78bb      	ldrb	r3, [r7, #2]
 8005b06:	499e      	ldr	r1, [pc, #632]	; (8005d80 <Status_Msg_Extr+0xb0c>)
 8005b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005b0e:	78ba      	ldrb	r2, [r7, #2]
 8005b10:	499c      	ldr	r1, [pc, #624]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	78bc      	ldrb	r4, [r7, #2]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f009 f9a8 	bl	800ee78 <HAL_Elaps_Ticks>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4996      	ldr	r1, [pc, #600]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4423      	add	r3, r4
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	440b      	add	r3, r1
 8005b36:	3310      	adds	r3, #16
 8005b38:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005b3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d16d      	bne.n	8005c1e <Status_Msg_Extr+0x9aa>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005b42:	78ba      	ldrb	r2, [r7, #2]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4a8e      	ldr	r2, [pc, #568]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	3301      	adds	r3, #1
 8005b52:	2210      	movs	r2, #16
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f01c fa84 	bl	8022064 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b5c:	78ba      	ldrb	r2, [r7, #2]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4a88      	ldr	r2, [pc, #544]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005b68:	1898      	adds	r0, r3, r2
 8005b6a:	78ba      	ldrb	r2, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a85      	ldr	r2, [pc, #532]	; (8005d8c <Status_Msg_Extr+0xb18>)
 8005b76:	4413      	add	r3, r2
 8005b78:	2214      	movs	r2, #20
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f01c fa4a 	bl	8022014 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b80:	78bb      	ldrb	r3, [r7, #2]
 8005b82:	4a83      	ldr	r2, [pc, #524]	; (8005d90 <Status_Msg_Extr+0xb1c>)
 8005b84:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b88:	78ba      	ldrb	r2, [r7, #2]
 8005b8a:	487f      	ldr	r0, [pc, #508]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4403      	add	r3, r0
 8005b96:	3312      	adds	r3, #18
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d03f      	beq.n	8005c1e <Status_Msg_Extr+0x9aa>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b9e:	78ba      	ldrb	r2, [r7, #2]
 8005ba0:	78b9      	ldrb	r1, [r7, #2]
 8005ba2:	4879      	ldr	r0, [pc, #484]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4403      	add	r3, r0
 8005bae:	3312      	adds	r3, #18
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	4b77      	ldr	r3, [pc, #476]	; (8005d90 <Status_Msg_Extr+0xb1c>)
 8005bb4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005bb8:	2214      	movs	r2, #20
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4875      	ldr	r0, [pc, #468]	; (8005d94 <Status_Msg_Extr+0xb20>)
 8005bbe:	f01c fa51 	bl	8022064 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005bc2:	78ba      	ldrb	r2, [r7, #2]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4a6e      	ldr	r2, [pc, #440]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	2214      	movs	r2, #20
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	486f      	ldr	r0, [pc, #444]	; (8005d94 <Status_Msg_Extr+0xb20>)
 8005bd6:	f01c fa1d 	bl	8022014 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005bda:	f240 2007 	movw	r0, #519	; 0x207
 8005bde:	f009 ff4d 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005be2:	78bb      	ldrb	r3, [r7, #2]
 8005be4:	4a6c      	ldr	r2, [pc, #432]	; (8005d98 <Status_Msg_Extr+0xb24>)
 8005be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d117      	bne.n	8005c1e <Status_Msg_Extr+0x9aa>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005bee:	78bb      	ldrb	r3, [r7, #2]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4a6a      	ldr	r2, [pc, #424]	; (8005d9c <Status_Msg_Extr+0xb28>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	1c98      	adds	r0, r3, #2
 8005bf8:	78ba      	ldrb	r2, [r7, #2]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4a61      	ldr	r2, [pc, #388]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005c04:	4413      	add	r3, r2
 8005c06:	3301      	adds	r3, #1
 8005c08:	2210      	movs	r2, #16
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f01c fa02 	bl	8022014 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005c10:	f240 1019 	movw	r0, #281	; 0x119
 8005c14:	f009 ff32 	bl	800fa7c <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005c18:	4a61      	ldr	r2, [pc, #388]	; (8005da0 <Status_Msg_Extr+0xb2c>)
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	6013      	str	r3, [r2, #0]
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c1e:	78b9      	ldrb	r1, [r7, #2]
 8005c20:	78ba      	ldrb	r2, [r7, #2]
 8005c22:	4859      	ldr	r0, [pc, #356]	; (8005d88 <Status_Msg_Extr+0xb14>)
 8005c24:	460b      	mov	r3, r1
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4403      	add	r3, r0
 8005c2e:	3312      	adds	r3, #18
 8005c30:	8818      	ldrh	r0, [r3, #0]
 8005c32:	4954      	ldr	r1, [pc, #336]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3306      	adds	r3, #6
 8005c40:	4602      	mov	r2, r0
 8005c42:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005c44:	78ba      	ldrb	r2, [r7, #2]
 8005c46:	494f      	ldr	r1, [pc, #316]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3314      	adds	r3, #20
 8005c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c56:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c58:	78ba      	ldrb	r2, [r7, #2]
 8005c5a:	494a      	ldr	r1, [pc, #296]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	3305      	adds	r3, #5
 8005c68:	2204      	movs	r2, #4
 8005c6a:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c6c:	78ba      	ldrb	r2, [r7, #2]
 8005c6e:	4945      	ldr	r1, [pc, #276]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	440b      	add	r3, r1
 8005c7a:	78ba      	ldrb	r2, [r7, #2]
 8005c7c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c7e:	78ba      	ldrb	r2, [r7, #2]
 8005c80:	4940      	ldr	r1, [pc, #256]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c92:	78ba      	ldrb	r2, [r7, #2]
 8005c94:	493b      	ldr	r1, [pc, #236]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005ca6:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005ca8:	2218      	movs	r2, #24
 8005caa:	2100      	movs	r1, #0
 8005cac:	483d      	ldr	r0, [pc, #244]	; (8005da4 <Status_Msg_Extr+0xb30>)
 8005cae:	f01c f9d9 	bl	8022064 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005cb2:	78ba      	ldrb	r2, [r7, #2]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4a31      	ldr	r2, [pc, #196]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	2218      	movs	r2, #24
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4837      	ldr	r0, [pc, #220]	; (8005da4 <Status_Msg_Extr+0xb30>)
 8005cc6:	f01c f9a5 	bl	8022014 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005cca:	f240 2001 	movw	r0, #513	; 0x201
 8005cce:	f009 fed5 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005cd2:	78ba      	ldrb	r2, [r7, #2]
 8005cd4:	492b      	ldr	r1, [pc, #172]	; (8005d84 <Status_Msg_Extr+0xb10>)
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005ce6:	78bb      	ldrb	r3, [r7, #2]
 8005ce8:	492f      	ldr	r1, [pc, #188]	; (8005da8 <Status_Msg_Extr+0xb34>)
 8005cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005cf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d11d      	bne.n	8005d34 <Status_Msg_Extr+0xac0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005cf8:	78bb      	ldrb	r3, [r7, #2]
 8005cfa:	492c      	ldr	r1, [pc, #176]	; (8005dac <Status_Msg_Extr+0xb38>)
 8005cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	492a      	ldr	r1, [pc, #168]	; (8005db0 <Status_Msg_Extr+0xb3c>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3304      	adds	r3, #4
 8005d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d14:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005d16:	78ba      	ldrb	r2, [r7, #2]
 8005d18:	4925      	ldr	r1, [pc, #148]	; (8005db0 <Status_Msg_Extr+0xb3c>)
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3301      	adds	r3, #1
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005d2a:	78bb      	ldrb	r3, [r7, #2]
 8005d2c:	4a21      	ldr	r2, [pc, #132]	; (8005db4 <Status_Msg_Extr+0xb40>)
 8005d2e:	2101      	movs	r1, #1
 8005d30:	54d1      	strb	r1, [r2, r3]
 8005d32:	e017      	b.n	8005d64 <Status_Msg_Extr+0xaf0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005d34:	78bb      	ldrb	r3, [r7, #2]
 8005d36:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <Status_Msg_Extr+0xb40>)
 8005d38:	2100      	movs	r1, #0
 8005d3a:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	491c      	ldr	r1, [pc, #112]	; (8005db0 <Status_Msg_Extr+0xb3c>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d4e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005d50:	78ba      	ldrb	r2, [r7, #2]
 8005d52:	4917      	ldr	r1, [pc, #92]	; (8005db0 <Status_Msg_Extr+0xb3c>)
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3301      	adds	r3, #1
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d68:	4813      	ldr	r0, [pc, #76]	; (8005db8 <Status_Msg_Extr+0xb44>)
 8005d6a:	f011 ff56 	bl	8017c1a <HAL_GPIO_TogglePin>

}
 8005d6e:	3754      	adds	r7, #84	; 0x54
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}
 8005d74:	200010d8 	.word	0x200010d8
 8005d78:	200011c4 	.word	0x200011c4
 8005d7c:	20000fa4 	.word	0x20000fa4
 8005d80:	20000fcc 	.word	0x20000fcc
 8005d84:	20001674 	.word	0x20001674
 8005d88:	20001e68 	.word	0x20001e68
 8005d8c:	20001da0 	.word	0x20001da0
 8005d90:	20000f00 	.word	0x20000f00
 8005d94:	20001ff8 	.word	0x20001ff8
 8005d98:	20000ec4 	.word	0x20000ec4
 8005d9c:	200010e4 	.word	0x200010e4
 8005da0:	20000e70 	.word	0x20000e70
 8005da4:	20001854 	.word	0x20001854
 8005da8:	20000e44 	.word	0x20000e44
 8005dac:	20000f14 	.word	0x20000f14
 8005db0:	20001cb0 	.word	0x20001cb0
 8005db4:	20000f64 	.word	0x20000f64
 8005db8:	40021c00 	.word	0x40021c00

08005dbc <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b0a5      	sub	sp, #148	; 0x94
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	460a      	mov	r2, r1
 8005dc6:	71fb      	strb	r3, [r7, #7]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005dcc:	2300      	movs	r3, #0
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dd4:	2238      	movs	r2, #56	; 0x38
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f01c f943 	bl	8022064 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	f107 0310 	add.w	r3, r7, #16
 8005de6:	2238      	movs	r2, #56	; 0x38
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f01c f93a 	bl	8022064 <memset>
	uint8_t uc_index = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005e02:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e0a:	441a      	add	r2, r3
 8005e0c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e10:	23f4      	movs	r3, #244	; 0xf4
 8005e12:	2108      	movs	r1, #8
 8005e14:	f7fa fc8a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005e18:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da00      	bge.n	8005e24 <Send_Status_Message+0x68>
 8005e22:	3307      	adds	r3, #7
 8005e24:	10db      	asrs	r3, r3, #3
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e36:	3308      	adds	r3, #8
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	425a      	negs	r2, r3
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	f002 0207 	and.w	r2, r2, #7
 8005e46:	bf58      	it	pl
 8005e48:	4253      	negpl	r3, r2
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005e50:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e58:	441a      	add	r2, r3
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	49bc      	ldr	r1, [pc, #752]	; (8006150 <Send_Status_Message+0x394>)
 8005e5e:	3366      	adds	r3, #102	; 0x66
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	f7fa fc5e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e70:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e74:	3310      	adds	r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da00      	bge.n	8005e7c <Send_Status_Message+0xc0>
 8005e7a:	3307      	adds	r3, #7
 8005e7c:	10db      	asrs	r3, r3, #3
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e84:	4413      	add	r3, r2
 8005e86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e8e:	3310      	adds	r3, #16
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	425a      	negs	r2, r3
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	f002 0207 	and.w	r2, r2, #7
 8005e9e:	bf58      	it	pl
 8005ea0:	4253      	negpl	r3, r2
 8005ea2:	b21b      	sxth	r3, r3
 8005ea4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005ea8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005eac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005eb0:	441a      	add	r2, r3
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	49a6      	ldr	r1, [pc, #664]	; (8006150 <Send_Status_Message+0x394>)
 8005eb6:	3370      	adds	r3, #112	; 0x70
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	f7fa fc32 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005ec8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005ecc:	3310      	adds	r3, #16
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da00      	bge.n	8005ed4 <Send_Status_Message+0x118>
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	10db      	asrs	r3, r3, #3
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005edc:	4413      	add	r3, r2
 8005ede:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ee2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	425a      	negs	r2, r3
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	f002 0207 	and.w	r2, r2, #7
 8005ef6:	bf58      	it	pl
 8005ef8:	4253      	negpl	r3, r2
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005f00:	4b94      	ldr	r3, [pc, #592]	; (8006154 <Send_Status_Message+0x398>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d035      	beq.n	8005f7a <Send_Status_Message+0x1be>
 8005f0e:	4b91      	ldr	r3, [pc, #580]	; (8006154 <Send_Status_Message+0x398>)
 8005f10:	791b      	ldrb	r3, [r3, #4]
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d130      	bne.n	8005f7a <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005f1e:	488e      	ldr	r0, [pc, #568]	; (8006158 <Send_Status_Message+0x39c>)
 8005f20:	f013 fe44 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b8d      	ldr	r3, [pc, #564]	; (800615c <Send_Status_Message+0x3a0>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	099b      	lsrs	r3, r3, #6
 8005f2e:	21c8      	movs	r1, #200	; 0xc8
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005f3a:	4889      	ldr	r0, [pc, #548]	; (8006160 <Send_Status_Message+0x3a4>)
 8005f3c:	f01c fa16 	bl	802236c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	4a88      	ldr	r2, [pc, #544]	; (8006164 <Send_Status_Message+0x3a8>)
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	4413      	add	r3, r2
 8005f48:	3301      	adds	r3, #1
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4886      	ldr	r0, [pc, #536]	; (8006168 <Send_Status_Message+0x3ac>)
 8005f50:	f01c f970 	bl	8022234 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f54:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4884      	ldr	r0, [pc, #528]	; (800616c <Send_Status_Message+0x3b0>)
 8005f5c:	f01c f96a 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f60:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f68:	441a      	add	r2, r3
 8005f6a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f6e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f72:	2108      	movs	r1, #8
 8005f74:	f7fa fbda 	bl	800072c <InsertBits>
	{
 8005f78:	e00f      	b.n	8005f9a <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f82:	441a      	add	r2, r3
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	4977      	ldr	r1, [pc, #476]	; (8006164 <Send_Status_Message+0x3a8>)
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f94:	2108      	movs	r1, #8
 8005f96:	f7fa fbc9 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f9a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da00      	bge.n	8005fa6 <Send_Status_Message+0x1ea>
 8005fa4:	3307      	adds	r3, #7
 8005fa6:	10db      	asrs	r3, r3, #3
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005fae:	4413      	add	r3, r2
 8005fb0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fb8:	3308      	adds	r3, #8
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	b21b      	sxth	r3, r3
 8005fbe:	425a      	negs	r2, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	f002 0207 	and.w	r2, r2, #7
 8005fc8:	bf58      	it	pl
 8005fca:	4253      	negpl	r3, r2
 8005fcc:	b21b      	sxth	r3, r3
 8005fce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005fd2:	4b60      	ldr	r3, [pc, #384]	; (8006154 <Send_Status_Message+0x398>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d038      	beq.n	8006052 <Send_Status_Message+0x296>
 8005fe0:	4b5c      	ldr	r3, [pc, #368]	; (8006154 <Send_Status_Message+0x398>)
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	79fa      	ldrb	r2, [r7, #7]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d133      	bne.n	8006052 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005ff0:	4859      	ldr	r0, [pc, #356]	; (8006158 <Send_Status_Message+0x39c>)
 8005ff2:	f013 fddb 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	4b58      	ldr	r3, [pc, #352]	; (800615c <Send_Status_Message+0x3a0>)
 8005ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	21c8      	movs	r1, #200	; 0xc8
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800600c:	4858      	ldr	r0, [pc, #352]	; (8006170 <Send_Status_Message+0x3b4>)
 800600e:	f01c f9ad 	bl	802236c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	4a53      	ldr	r2, [pc, #332]	; (8006164 <Send_Status_Message+0x3a8>)
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	4413      	add	r3, r2
 800601a:	3302      	adds	r3, #2
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	4854      	ldr	r0, [pc, #336]	; (8006174 <Send_Status_Message+0x3b8>)
 8006022:	f01c f907 	bl	8022234 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006026:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800602a:	4619      	mov	r1, r3
 800602c:	4852      	ldr	r0, [pc, #328]	; (8006178 <Send_Status_Message+0x3bc>)
 800602e:	f01c f901 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8006032:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006036:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800603a:	441a      	add	r2, r3
 800603c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006040:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006044:	2108      	movs	r1, #8
 8006046:	f7fa fb71 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 800604a:	4b4c      	ldr	r3, [pc, #304]	; (800617c <Send_Status_Message+0x3c0>)
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
	{
 8006050:	e020      	b.n	8006094 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 8006052:	4b4a      	ldr	r3, [pc, #296]	; (800617c <Send_Status_Message+0x3c0>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006058:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800605c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006060:	18d1      	adds	r1, r2, r3
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	483f      	ldr	r0, [pc, #252]	; (8006164 <Send_Status_Message+0x3a8>)
 8006066:	011a      	lsls	r2, r3, #4
 8006068:	4402      	add	r2, r0
 800606a:	3202      	adds	r2, #2
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	3201      	adds	r2, #1
 8006070:	b2d4      	uxtb	r4, r2
 8006072:	483c      	ldr	r0, [pc, #240]	; (8006164 <Send_Status_Message+0x3a8>)
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	4402      	add	r2, r0
 8006078:	3202      	adds	r2, #2
 800607a:	4620      	mov	r0, r4
 800607c:	7010      	strb	r0, [r2, #0]
 800607e:	4a39      	ldr	r2, [pc, #228]	; (8006164 <Send_Status_Message+0x3a8>)
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	4413      	add	r3, r2
 8006084:	3302      	adds	r3, #2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800608c:	460a      	mov	r2, r1
 800608e:	2108      	movs	r1, #8
 8006090:	f7fa fb4c 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006094:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006098:	3308      	adds	r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	da00      	bge.n	80060a0 <Send_Status_Message+0x2e4>
 800609e:	3307      	adds	r3, #7
 80060a0:	10db      	asrs	r3, r3, #3
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060a8:	4413      	add	r3, r2
 80060aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060b2:	3308      	adds	r3, #8
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	425a      	negs	r2, r3
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	f002 0207 	and.w	r2, r2, #7
 80060c2:	bf58      	it	pl
 80060c4:	4253      	negpl	r3, r2
 80060c6:	b21b      	sxth	r3, r3
 80060c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 80060cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060d4:	441a      	add	r2, r3
 80060d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060da:	2304      	movs	r3, #4
 80060dc:	2108      	movs	r1, #8
 80060de:	f7fa fb25 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060e6:	3308      	adds	r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da00      	bge.n	80060ee <Send_Status_Message+0x332>
 80060ec:	3307      	adds	r3, #7
 80060ee:	10db      	asrs	r3, r3, #3
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060f6:	4413      	add	r3, r2
 80060f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006100:	3308      	adds	r3, #8
 8006102:	b29b      	uxth	r3, r3
 8006104:	b21b      	sxth	r3, r3
 8006106:	425a      	negs	r2, r3
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	f002 0207 	and.w	r2, r2, #7
 8006110:	bf58      	it	pl
 8006112:	4253      	negpl	r3, r2
 8006114:	b21b      	sxth	r3, r3
 8006116:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <Send_Status_Message+0x3a8>)
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d052      	beq.n	80061d4 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	4a13      	ldr	r2, [pc, #76]	; (8006180 <Send_Status_Message+0x3c4>)
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d125      	bne.n	8006184 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006138:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800613c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006140:	441a      	add	r2, r3
 8006142:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006146:	2368      	movs	r3, #104	; 0x68
 8006148:	2110      	movs	r1, #16
 800614a:	f7fa faef 	bl	800072c <InsertBits>
 800614e:	e024      	b.n	800619a <Send_Status_Message+0x3de>
 8006150:	20000304 	.word	0x20000304
 8006154:	2000195c 	.word	0x2000195c
 8006158:	20009cf4 	.word	0x20009cf4
 800615c:	51eb851f 	.word	0x51eb851f
 8006160:	08023de8 	.word	0x08023de8
 8006164:	200011c4 	.word	0x200011c4
 8006168:	0802438c 	.word	0x0802438c
 800616c:	080243ac 	.word	0x080243ac
 8006170:	08023e4c 	.word	0x08023e4c
 8006174:	080243cc 	.word	0x080243cc
 8006178:	080243ec 	.word	0x080243ec
 800617c:	20000e39 	.word	0x20000e39
 8006180:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006184:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006188:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800618c:	441a      	add	r2, r3
 800618e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006192:	2328      	movs	r3, #40	; 0x28
 8006194:	2110      	movs	r1, #16
 8006196:	f7fa fac9 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 800619a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800619e:	3310      	adds	r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	da00      	bge.n	80061a6 <Send_Status_Message+0x3ea>
 80061a4:	3307      	adds	r3, #7
 80061a6:	10db      	asrs	r3, r3, #3
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ae:	4413      	add	r3, r2
 80061b0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061b8:	3310      	adds	r3, #16
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	b21b      	sxth	r3, r3
 80061be:	425a      	negs	r2, r3
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	f002 0207 	and.w	r2, r2, #7
 80061c8:	bf58      	it	pl
 80061ca:	4253      	negpl	r3, r2
 80061cc:	b21b      	sxth	r3, r3
 80061ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061d2:	e03a      	b.n	800624a <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <Send_Status_Message+0x43c>)
 80061d8:	5cd3      	ldrb	r3, [r2, r3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d10e      	bne.n	80061fc <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 80061de:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061e6:	441a      	add	r2, r3
 80061e8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061ec:	2364      	movs	r3, #100	; 0x64
 80061ee:	2110      	movs	r1, #16
 80061f0:	f7fa fa9c 	bl	800072c <InsertBits>
 80061f4:	e00d      	b.n	8006212 <Send_Status_Message+0x456>
 80061f6:	bf00      	nop
 80061f8:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006200:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006204:	441a      	add	r2, r3
 8006206:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800620a:	2324      	movs	r3, #36	; 0x24
 800620c:	2110      	movs	r1, #16
 800620e:	f7fa fa8d 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006212:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006216:	3310      	adds	r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	da00      	bge.n	800621e <Send_Status_Message+0x462>
 800621c:	3307      	adds	r3, #7
 800621e:	10db      	asrs	r3, r3, #3
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006226:	4413      	add	r3, r2
 8006228:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800622c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006230:	3310      	adds	r3, #16
 8006232:	b29b      	uxth	r3, r3
 8006234:	b21b      	sxth	r3, r3
 8006236:	425a      	negs	r2, r3
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	f002 0207 	and.w	r2, r2, #7
 8006240:	bf58      	it	pl
 8006242:	4253      	negpl	r3, r2
 8006244:	b21b      	sxth	r3, r3
 8006246:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	4ac6      	ldr	r2, [pc, #792]	; (8006568 <Send_Status_Message+0x7ac>)
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	b29b      	uxth	r3, r3
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8139 	beq.w	80064d6 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	4ac1      	ldr	r2, [pc, #772]	; (800656c <Send_Status_Message+0x7b0>)
 8006268:	5cd3      	ldrb	r3, [r2, r3]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d114      	bne.n	8006298 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800626e:	f005 f98b 	bl	800b588 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006272:	79fa      	ldrb	r2, [r7, #7]
 8006274:	4613      	mov	r3, r2
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	4413      	add	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4abc      	ldr	r2, [pc, #752]	; (8006570 <Send_Status_Message+0x7b4>)
 800627e:	4413      	add	r3, r2
 8006280:	4abc      	ldr	r2, [pc, #752]	; (8006574 <Send_Status_Message+0x7b8>)
 8006282:	6811      	ldr	r1, [r2, #0]
 8006284:	6019      	str	r1, [r3, #0]
 8006286:	8892      	ldrh	r2, [r2, #4]
 8006288:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 800628a:	48bb      	ldr	r0, [pc, #748]	; (8006578 <Send_Status_Message+0x7bc>)
 800628c:	f01c f86e 	bl	802236c <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	4ab6      	ldr	r2, [pc, #728]	; (800656c <Send_Status_Message+0x7b0>)
 8006294:	2100      	movs	r1, #0
 8006296:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006298:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800629c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062a0:	18d1      	adds	r1, r2, r3
 80062a2:	79fa      	ldrb	r2, [r7, #7]
 80062a4:	48b2      	ldr	r0, [pc, #712]	; (8006570 <Send_Status_Message+0x7b4>)
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4403      	add	r3, r0
 80062b0:	3305      	adds	r3, #5
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062b8:	460a      	mov	r2, r1
 80062ba:	2108      	movs	r1, #8
 80062bc:	f7fa fa36 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062c0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062c4:	3308      	adds	r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da00      	bge.n	80062cc <Send_Status_Message+0x510>
 80062ca:	3307      	adds	r3, #7
 80062cc:	10db      	asrs	r3, r3, #3
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062d4:	4413      	add	r3, r2
 80062d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062de:	3308      	adds	r3, #8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	425a      	negs	r2, r3
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	f002 0207 	and.w	r2, r2, #7
 80062ee:	bf58      	it	pl
 80062f0:	4253      	negpl	r3, r2
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006300:	18d1      	adds	r1, r2, r3
 8006302:	79fa      	ldrb	r2, [r7, #7]
 8006304:	489a      	ldr	r0, [pc, #616]	; (8006570 <Send_Status_Message+0x7b4>)
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4403      	add	r3, r0
 8006310:	3304      	adds	r3, #4
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006318:	460a      	mov	r2, r1
 800631a:	2108      	movs	r1, #8
 800631c:	f7fa fa06 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006320:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006324:	3308      	adds	r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	da00      	bge.n	800632c <Send_Status_Message+0x570>
 800632a:	3307      	adds	r3, #7
 800632c:	10db      	asrs	r3, r3, #3
 800632e:	b29a      	uxth	r2, r3
 8006330:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006334:	4413      	add	r3, r2
 8006336:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800633a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800633e:	3308      	adds	r3, #8
 8006340:	b29b      	uxth	r3, r3
 8006342:	b21b      	sxth	r3, r3
 8006344:	425a      	negs	r2, r3
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	f002 0207 	and.w	r2, r2, #7
 800634e:	bf58      	it	pl
 8006350:	4253      	negpl	r3, r2
 8006352:	b21b      	sxth	r3, r3
 8006354:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006358:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800635c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006360:	18d1      	adds	r1, r2, r3
 8006362:	79fa      	ldrb	r2, [r7, #7]
 8006364:	4882      	ldr	r0, [pc, #520]	; (8006570 <Send_Status_Message+0x7b4>)
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	4403      	add	r3, r0
 8006370:	3303      	adds	r3, #3
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006378:	460a      	mov	r2, r1
 800637a:	2108      	movs	r1, #8
 800637c:	f7fa f9d6 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006380:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006384:	3308      	adds	r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	da00      	bge.n	800638c <Send_Status_Message+0x5d0>
 800638a:	3307      	adds	r3, #7
 800638c:	10db      	asrs	r3, r3, #3
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006394:	4413      	add	r3, r2
 8006396:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800639a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800639e:	3308      	adds	r3, #8
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	425a      	negs	r2, r3
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	f002 0207 	and.w	r2, r2, #7
 80063ae:	bf58      	it	pl
 80063b0:	4253      	negpl	r3, r2
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80063b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063c0:	18d1      	adds	r1, r2, r3
 80063c2:	79fa      	ldrb	r2, [r7, #7]
 80063c4:	486a      	ldr	r0, [pc, #424]	; (8006570 <Send_Status_Message+0x7b4>)
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	4403      	add	r3, r0
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063d6:	460a      	mov	r2, r1
 80063d8:	2108      	movs	r1, #8
 80063da:	f7fa f9a7 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063de:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063e2:	3308      	adds	r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da00      	bge.n	80063ea <Send_Status_Message+0x62e>
 80063e8:	3307      	adds	r3, #7
 80063ea:	10db      	asrs	r3, r3, #3
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063f2:	4413      	add	r3, r2
 80063f4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063fc:	3308      	adds	r3, #8
 80063fe:	b29b      	uxth	r3, r3
 8006400:	b21b      	sxth	r3, r3
 8006402:	425a      	negs	r2, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	f002 0207 	and.w	r2, r2, #7
 800640c:	bf58      	it	pl
 800640e:	4253      	negpl	r3, r2
 8006410:	b21b      	sxth	r3, r3
 8006412:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006416:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800641a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	79fa      	ldrb	r2, [r7, #7]
 8006422:	4853      	ldr	r0, [pc, #332]	; (8006570 <Send_Status_Message+0x7b4>)
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	4403      	add	r3, r0
 800642e:	3301      	adds	r3, #1
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006436:	460a      	mov	r2, r1
 8006438:	2108      	movs	r1, #8
 800643a:	f7fa f977 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800643e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006442:	3308      	adds	r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	da00      	bge.n	800644a <Send_Status_Message+0x68e>
 8006448:	3307      	adds	r3, #7
 800644a:	10db      	asrs	r3, r3, #3
 800644c:	b29a      	uxth	r2, r3
 800644e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006452:	4413      	add	r3, r2
 8006454:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006458:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800645c:	3308      	adds	r3, #8
 800645e:	b29b      	uxth	r3, r3
 8006460:	b21b      	sxth	r3, r3
 8006462:	425a      	negs	r2, r3
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	f002 0207 	and.w	r2, r2, #7
 800646c:	bf58      	it	pl
 800646e:	4253      	negpl	r3, r2
 8006470:	b21b      	sxth	r3, r3
 8006472:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006476:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800647a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800647e:	18d1      	adds	r1, r2, r3
 8006480:	79fa      	ldrb	r2, [r7, #7]
 8006482:	483b      	ldr	r0, [pc, #236]	; (8006570 <Send_Status_Message+0x7b4>)
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4403      	add	r3, r0
 800648e:	3302      	adds	r3, #2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006496:	460a      	mov	r2, r1
 8006498:	2108      	movs	r1, #8
 800649a:	f7fa f947 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800649e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80064a2:	3308      	adds	r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da00      	bge.n	80064aa <Send_Status_Message+0x6ee>
 80064a8:	3307      	adds	r3, #7
 80064aa:	10db      	asrs	r3, r3, #3
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064b2:	4413      	add	r3, r2
 80064b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064bc:	3308      	adds	r3, #8
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b21b      	sxth	r3, r3
 80064c2:	425a      	negs	r2, r3
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	f002 0207 	and.w	r2, r2, #7
 80064cc:	bf58      	it	pl
 80064ce:	4253      	negpl	r3, r2
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <Send_Status_Message+0x7c0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d031      	beq.n	8006548 <Send_Status_Message+0x78c>
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <Send_Status_Message+0x7c0>)
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	79fa      	ldrb	r2, [r7, #7]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d12c      	bne.n	8006548 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064f4:	4822      	ldr	r0, [pc, #136]	; (8006580 <Send_Status_Message+0x7c4>)
 80064f6:	f013 fb59 	bl	8019bac <HAL_RNG_GetRandomNumber>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b21      	ldr	r3, [pc, #132]	; (8006584 <Send_Status_Message+0x7c8>)
 80064fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006502:	0dd9      	lsrs	r1, r3, #23
 8006504:	460b      	mov	r3, r1
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	1a5b      	subs	r3, r3, r1
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006512:	481d      	ldr	r0, [pc, #116]	; (8006588 <Send_Status_Message+0x7cc>)
 8006514:	f01b ff2a 	bl	802236c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	4a13      	ldr	r2, [pc, #76]	; (8006568 <Send_Status_Message+0x7ac>)
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	4413      	add	r3, r2
 8006520:	330c      	adds	r3, #12
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	4819      	ldr	r0, [pc, #100]	; (800658c <Send_Status_Message+0x7d0>)
 8006528:	f01b fe84 	bl	8022234 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 800652c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006530:	4817      	ldr	r0, [pc, #92]	; (8006590 <Send_Status_Message+0x7d4>)
 8006532:	f01b fe7f 	bl	8022234 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006536:	f107 020c 	add.w	r2, r7, #12
 800653a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800653e:	2118      	movs	r1, #24
 8006540:	2000      	movs	r0, #0
 8006542:	f7fa f8f3 	bl	800072c <InsertBits>
	{
 8006546:	e00b      	b.n	8006560 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	4a07      	ldr	r2, [pc, #28]	; (8006568 <Send_Status_Message+0x7ac>)
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	4413      	add	r3, r2
 8006550:	330c      	adds	r3, #12
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f107 020c 	add.w	r2, r7, #12
 8006558:	2118      	movs	r1, #24
 800655a:	2000      	movs	r0, #0
 800655c:	f7fa f8e6 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006560:	2300      	movs	r3, #0
 8006562:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006566:	e027      	b.n	80065b8 <Send_Status_Message+0x7fc>
 8006568:	200011c4 	.word	0x200011c4
 800656c:	200010d8 	.word	0x200010d8
 8006570:	20001188 	.word	0x20001188
 8006574:	20002878 	.word	0x20002878
 8006578:	08024168 	.word	0x08024168
 800657c:	2000195c 	.word	0x2000195c
 8006580:	20009cf4 	.word	0x20009cf4
 8006584:	80008001 	.word	0x80008001
 8006588:	08024180 	.word	0x08024180
 800658c:	080241a4 	.word	0x080241a4
 8006590:	080241c8 	.word	0x080241c8
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006594:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006598:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800659c:	3303      	adds	r3, #3
 800659e:	3290      	adds	r2, #144	; 0x90
 80065a0:	443a      	add	r2, r7
 80065a2:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80065a6:	3390      	adds	r3, #144	; 0x90
 80065a8:	443b      	add	r3, r7
 80065aa:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80065ae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065b2:	3301      	adds	r3, #1
 80065b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80065b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d8e6      	bhi.n	8006594 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 80065c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065ce:	18d4      	adds	r4, r2, r3
 80065d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3303      	adds	r3, #3
 80065d8:	b29a      	uxth	r2, r3
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f00c fb4d 	bl	8012c80 <CalculateDirectReverseCrc>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065ec:	4622      	mov	r2, r4
 80065ee:	2120      	movs	r1, #32
 80065f0:	f7fa f89c 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065f4:	4b1f      	ldr	r3, [pc, #124]	; (8006674 <Send_Status_Message+0x8b8>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065fa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065fe:	3320      	adds	r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	da00      	bge.n	8006606 <Send_Status_Message+0x84a>
 8006604:	3307      	adds	r3, #7
 8006606:	10db      	asrs	r3, r3, #3
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800660e:	4413      	add	r3, r2
 8006610:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006614:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006618:	3320      	adds	r3, #32
 800661a:	b29b      	uxth	r3, r3
 800661c:	b21b      	sxth	r3, r3
 800661e:	425a      	negs	r2, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	f002 0207 	and.w	r2, r2, #7
 8006628:	bf58      	it	pl
 800662a:	4253      	negpl	r3, r2
 800662c:	b21b      	sxth	r3, r3
 800662e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <Send_Status_Message+0x8bc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	0a5b      	lsrs	r3, r3, #9
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <Send_Status_Message+0x89c>
 8006640:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <Send_Status_Message+0x8bc>)
 8006642:	791b      	ldrb	r3, [r3, #4]
 8006644:	79fa      	ldrb	r2, [r7, #7]
 8006646:	429a      	cmp	r2, r3
 8006648:	d106      	bne.n	8006658 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 800664a:	480c      	ldr	r0, [pc, #48]	; (800667c <Send_Status_Message+0x8c0>)
 800664c:	f01b fe8e 	bl	802236c <puts>
		printf("Not Sending Reply");
 8006650:	480b      	ldr	r0, [pc, #44]	; (8006680 <Send_Status_Message+0x8c4>)
 8006652:	f01b fdef 	bl	8022234 <iprintf>
 8006656:	e009      	b.n	800666c <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006658:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800665c:	b2d9      	uxtb	r1, r3
 800665e:	79fa      	ldrb	r2, [r7, #7]
 8006660:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006664:	4618      	mov	r0, r3
 8006666:	f000 ffb5 	bl	80075d4 <Process_Sending_Reply>
	}
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	3794      	adds	r7, #148	; 0x94
 8006670:	46bd      	mov	sp, r7
 8006672:	bd90      	pop	{r4, r7, pc}
 8006674:	20000e39 	.word	0x20000e39
 8006678:	2000195c 	.word	0x2000195c
 800667c:	08023f18 	.word	0x08023f18
 8006680:	08023f30 	.word	0x08023f30

08006684 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	461a      	mov	r2, r3
 8006692:	4603      	mov	r3, r0
 8006694:	70fb      	strb	r3, [r7, #3]
 8006696:	460b      	mov	r3, r1
 8006698:	70bb      	strb	r3, [r7, #2]
 800669a:	4613      	mov	r3, r2
 800669c:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 80066a6:	2300      	movs	r3, #0
 80066a8:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 80066aa:	f00e fec1 	bl	8015430 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 80066b0:	2300      	movs	r3, #0
 80066b2:	81fb      	strh	r3, [r7, #14]
 80066b4:	2300      	movs	r3, #0
 80066b6:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b05      	subs	r3, #5
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f00c fadc 	bl	8012c80 <CalculateDirectReverseCrc>
 80066c8:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	3b05      	subs	r3, #5
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	441a      	add	r2, r3
 80066d2:	89bb      	ldrh	r3, [r7, #12]
 80066d4:	2120      	movs	r1, #32
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7f9 ff9c 	bl	8000614 <ExtractBits>
 80066dc:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d01a      	beq.n	800671c <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80066e6:	78bb      	ldrb	r3, [r7, #2]
 80066e8:	4a08      	ldr	r2, [pc, #32]	; (800670c <Service_Msg_Extr+0x88>)
 80066ea:	3366      	adds	r3, #102	; 0x66
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4619      	mov	r1, r3
 80066f4:	4806      	ldr	r0, [pc, #24]	; (8006710 <Service_Msg_Extr+0x8c>)
 80066f6:	f01b fd9d 	bl	8022234 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066fa:	6979      	ldr	r1, [r7, #20]
 80066fc:	4805      	ldr	r0, [pc, #20]	; (8006714 <Service_Msg_Extr+0x90>)
 80066fe:	f01b fd99 	bl	8022234 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8006702:	69b9      	ldr	r1, [r7, #24]
 8006704:	4804      	ldr	r0, [pc, #16]	; (8006718 <Service_Msg_Extr+0x94>)
 8006706:	f01b fd95 	bl	8022234 <iprintf>
		return;
 800670a:	e39f      	b.n	8006e4c <Service_Msg_Extr+0x7c8>
 800670c:	20000304 	.word	0x20000304
 8006710:	08024410 	.word	0x08024410
 8006714:	08023c84 	.word	0x08023c84
 8006718:	08023c94 	.word	0x08023c94
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 800671c:	78bb      	ldrb	r3, [r7, #2]
 800671e:	49ae      	ldr	r1, [pc, #696]	; (80069d8 <Service_Msg_Extr+0x354>)
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8006726:	78bb      	ldrb	r3, [r7, #2]
 8006728:	49ac      	ldr	r1, [pc, #688]	; (80069dc <Service_Msg_Extr+0x358>)
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 8006730:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006734:	3308      	adds	r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	da00      	bge.n	800673c <Service_Msg_Extr+0xb8>
 800673a:	3307      	adds	r3, #7
 800673c:	10db      	asrs	r3, r3, #3
 800673e:	b29a      	uxth	r2, r3
 8006740:	89fb      	ldrh	r3, [r7, #14]
 8006742:	4413      	add	r3, r2
 8006744:	81fb      	strh	r3, [r7, #14]
 8006746:	89bb      	ldrh	r3, [r7, #12]
 8006748:	3308      	adds	r3, #8
 800674a:	b29b      	uxth	r3, r3
 800674c:	b21b      	sxth	r3, r3
 800674e:	425a      	negs	r2, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	f002 0207 	and.w	r2, r2, #7
 8006758:	bf58      	it	pl
 800675a:	4253      	negpl	r3, r2
 800675c:	b21b      	sxth	r3, r3
 800675e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	441a      	add	r2, r3
 8006766:	89bb      	ldrh	r3, [r7, #12]
 8006768:	2110      	movs	r1, #16
 800676a:	4618      	mov	r0, r3
 800676c:	f7f9 ff52 	bl	8000614 <ExtractBits>
 8006770:	4603      	mov	r3, r0
 8006772:	78ba      	ldrb	r2, [r7, #2]
 8006774:	b298      	uxth	r0, r3
 8006776:	499a      	ldr	r1, [pc, #616]	; (80069e0 <Service_Msg_Extr+0x35c>)
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	3306      	adds	r3, #6
 8006784:	4602      	mov	r2, r0
 8006786:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006788:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800678c:	3310      	adds	r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	da00      	bge.n	8006794 <Service_Msg_Extr+0x110>
 8006792:	3307      	adds	r3, #7
 8006794:	10db      	asrs	r3, r3, #3
 8006796:	b29a      	uxth	r2, r3
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	4413      	add	r3, r2
 800679c:	81fb      	strh	r3, [r7, #14]
 800679e:	89bb      	ldrh	r3, [r7, #12]
 80067a0:	3310      	adds	r3, #16
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	b21b      	sxth	r3, r3
 80067a6:	425a      	negs	r2, r3
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	f002 0207 	and.w	r2, r2, #7
 80067b0:	bf58      	it	pl
 80067b2:	4253      	negpl	r3, r2
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	441a      	add	r2, r3
 80067be:	89bb      	ldrh	r3, [r7, #12]
 80067c0:	2110      	movs	r1, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7f9 ff26 	bl	8000614 <ExtractBits>
 80067c8:	4603      	mov	r3, r0
 80067ca:	78ba      	ldrb	r2, [r7, #2]
 80067cc:	b298      	uxth	r0, r3
 80067ce:	4984      	ldr	r1, [pc, #528]	; (80069e0 <Service_Msg_Extr+0x35c>)
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	3304      	adds	r3, #4
 80067dc:	4602      	mov	r2, r0
 80067de:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80067e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da00      	bge.n	80067ec <Service_Msg_Extr+0x168>
 80067ea:	3307      	adds	r3, #7
 80067ec:	10db      	asrs	r3, r3, #3
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	4413      	add	r3, r2
 80067f4:	81fb      	strh	r3, [r7, #14]
 80067f6:	89bb      	ldrh	r3, [r7, #12]
 80067f8:	3310      	adds	r3, #16
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	b21b      	sxth	r3, r3
 80067fe:	425a      	negs	r2, r3
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	f002 0207 	and.w	r2, r2, #7
 8006808:	bf58      	it	pl
 800680a:	4253      	negpl	r3, r2
 800680c:	b21b      	sxth	r3, r3
 800680e:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006810:	89fb      	ldrh	r3, [r7, #14]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	441a      	add	r2, r3
 8006816:	89bb      	ldrh	r3, [r7, #12]
 8006818:	2108      	movs	r1, #8
 800681a:	4618      	mov	r0, r3
 800681c:	f7f9 fefa 	bl	8000614 <ExtractBits>
 8006820:	4602      	mov	r2, r0
 8006822:	78bb      	ldrb	r3, [r7, #2]
 8006824:	b2d1      	uxtb	r1, r2
 8006826:	4a6f      	ldr	r2, [pc, #444]	; (80069e4 <Service_Msg_Extr+0x360>)
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	3302      	adds	r3, #2
 800682e:	460a      	mov	r2, r1
 8006830:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8006832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006836:	3308      	adds	r3, #8
 8006838:	2b00      	cmp	r3, #0
 800683a:	da00      	bge.n	800683e <Service_Msg_Extr+0x1ba>
 800683c:	3307      	adds	r3, #7
 800683e:	10db      	asrs	r3, r3, #3
 8006840:	b29a      	uxth	r2, r3
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	4413      	add	r3, r2
 8006846:	81fb      	strh	r3, [r7, #14]
 8006848:	89bb      	ldrh	r3, [r7, #12]
 800684a:	3308      	adds	r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	b21b      	sxth	r3, r3
 8006850:	425a      	negs	r2, r3
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	f002 0207 	and.w	r2, r2, #7
 800685a:	bf58      	it	pl
 800685c:	4253      	negpl	r3, r2
 800685e:	b21b      	sxth	r3, r3
 8006860:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	441a      	add	r2, r3
 8006868:	89bb      	ldrh	r3, [r7, #12]
 800686a:	2108      	movs	r1, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f7f9 fed1 	bl	8000614 <ExtractBits>
 8006872:	4602      	mov	r2, r0
 8006874:	78bb      	ldrb	r3, [r7, #2]
 8006876:	b2d1      	uxtb	r1, r2
 8006878:	4a5a      	ldr	r2, [pc, #360]	; (80069e4 <Service_Msg_Extr+0x360>)
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4413      	add	r3, r2
 800687e:	3301      	adds	r3, #1
 8006880:	460a      	mov	r2, r1
 8006882:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006884:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006888:	3308      	adds	r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	da00      	bge.n	8006890 <Service_Msg_Extr+0x20c>
 800688e:	3307      	adds	r3, #7
 8006890:	10db      	asrs	r3, r3, #3
 8006892:	b29a      	uxth	r2, r3
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	4413      	add	r3, r2
 8006898:	81fb      	strh	r3, [r7, #14]
 800689a:	89bb      	ldrh	r3, [r7, #12]
 800689c:	3308      	adds	r3, #8
 800689e:	b29b      	uxth	r3, r3
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	425a      	negs	r2, r3
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	f002 0207 	and.w	r2, r2, #7
 80068ac:	bf58      	it	pl
 80068ae:	4253      	negpl	r3, r2
 80068b0:	b21b      	sxth	r3, r3
 80068b2:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	441a      	add	r2, r3
 80068ba:	89bb      	ldrh	r3, [r7, #12]
 80068bc:	2108      	movs	r1, #8
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 fea8 	bl	8000614 <ExtractBits>
 80068c4:	4603      	mov	r3, r0
 80068c6:	78ba      	ldrb	r2, [r7, #2]
 80068c8:	b2d8      	uxtb	r0, r3
 80068ca:	4945      	ldr	r1, [pc, #276]	; (80069e0 <Service_Msg_Extr+0x35c>)
 80068cc:	4613      	mov	r3, r2
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	3302      	adds	r3, #2
 80068d8:	4602      	mov	r2, r0
 80068da:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80068dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068e0:	3308      	adds	r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da00      	bge.n	80068e8 <Service_Msg_Extr+0x264>
 80068e6:	3307      	adds	r3, #7
 80068e8:	10db      	asrs	r3, r3, #3
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	89fb      	ldrh	r3, [r7, #14]
 80068ee:	4413      	add	r3, r2
 80068f0:	81fb      	strh	r3, [r7, #14]
 80068f2:	89bb      	ldrh	r3, [r7, #12]
 80068f4:	3308      	adds	r3, #8
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	425a      	negs	r2, r3
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	f002 0207 	and.w	r2, r2, #7
 8006904:	bf58      	it	pl
 8006906:	4253      	negpl	r3, r2
 8006908:	b21b      	sxth	r3, r3
 800690a:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800690c:	89fb      	ldrh	r3, [r7, #14]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	441a      	add	r2, r3
 8006912:	89bb      	ldrh	r3, [r7, #12]
 8006914:	2110      	movs	r1, #16
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe7c 	bl	8000614 <ExtractBits>
 800691c:	4602      	mov	r2, r0
 800691e:	78bb      	ldrb	r3, [r7, #2]
 8006920:	b291      	uxth	r1, r2
 8006922:	4a30      	ldr	r2, [pc, #192]	; (80069e4 <Service_Msg_Extr+0x360>)
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	4413      	add	r3, r2
 8006928:	3304      	adds	r3, #4
 800692a:	460a      	mov	r2, r1
 800692c:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800692e:	492e      	ldr	r1, [pc, #184]	; (80069e8 <Service_Msg_Extr+0x364>)
 8006930:	482e      	ldr	r0, [pc, #184]	; (80069ec <Service_Msg_Extr+0x368>)
 8006932:	f7f9 fc85 	bl	8000240 <strcmp>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10f      	bne.n	800695c <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 800693c:	78bb      	ldrb	r3, [r7, #2]
 800693e:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <Service_Msg_Extr+0x360>)
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	78bb      	ldrb	r3, [r7, #2]
 800694a:	f042 0208 	orr.w	r2, r2, #8
 800694e:	b291      	uxth	r1, r2
 8006950:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <Service_Msg_Extr+0x360>)
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	460a      	mov	r2, r1
 800695a:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 800695c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006960:	3310      	adds	r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	da00      	bge.n	8006968 <Service_Msg_Extr+0x2e4>
 8006966:	3307      	adds	r3, #7
 8006968:	10db      	asrs	r3, r3, #3
 800696a:	b29a      	uxth	r2, r3
 800696c:	89fb      	ldrh	r3, [r7, #14]
 800696e:	4413      	add	r3, r2
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	89bb      	ldrh	r3, [r7, #12]
 8006974:	3310      	adds	r3, #16
 8006976:	b29b      	uxth	r3, r3
 8006978:	b21b      	sxth	r3, r3
 800697a:	425a      	negs	r2, r3
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	f002 0207 	and.w	r2, r2, #7
 8006984:	bf58      	it	pl
 8006986:	4253      	negpl	r3, r2
 8006988:	b21b      	sxth	r3, r3
 800698a:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 800698c:	78bb      	ldrb	r3, [r7, #2]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <Service_Msg_Extr+0x360>)
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	4413      	add	r3, r2
 8006994:	3304      	adds	r3, #4
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 812b 	beq.w	8006bf8 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80069a2:	89fb      	ldrh	r3, [r7, #14]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	441a      	add	r2, r3
 80069a8:	89bb      	ldrh	r3, [r7, #12]
 80069aa:	2108      	movs	r1, #8
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7f9 fe31 	bl	8000614 <ExtractBits>
 80069b2:	4603      	mov	r3, r0
 80069b4:	78ba      	ldrb	r2, [r7, #2]
 80069b6:	b2d8      	uxtb	r0, r3
 80069b8:	490d      	ldr	r1, [pc, #52]	; (80069f0 <Service_Msg_Extr+0x36c>)
 80069ba:	4613      	mov	r3, r2
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4413      	add	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	440b      	add	r3, r1
 80069c4:	3305      	adds	r3, #5
 80069c6:	4602      	mov	r2, r0
 80069c8:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80069ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069ce:	3308      	adds	r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da0f      	bge.n	80069f4 <Service_Msg_Extr+0x370>
 80069d4:	3307      	adds	r3, #7
 80069d6:	e00d      	b.n	80069f4 <Service_Msg_Extr+0x370>
 80069d8:	20000fa4 	.word	0x20000fa4
 80069dc:	20000fcc 	.word	0x20000fcc
 80069e0:	20001584 	.word	0x20001584
 80069e4:	200011c4 	.word	0x200011c4
 80069e8:	08023a40 	.word	0x08023a40
 80069ec:	20000305 	.word	0x20000305
 80069f0:	20001188 	.word	0x20001188
 80069f4:	10db      	asrs	r3, r3, #3
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	4413      	add	r3, r2
 80069fc:	81fb      	strh	r3, [r7, #14]
 80069fe:	89bb      	ldrh	r3, [r7, #12]
 8006a00:	3308      	adds	r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	425a      	negs	r2, r3
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	f002 0207 	and.w	r2, r2, #7
 8006a10:	bf58      	it	pl
 8006a12:	4253      	negpl	r3, r2
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	89bb      	ldrh	r3, [r7, #12]
 8006a20:	2108      	movs	r1, #8
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7f9 fdf6 	bl	8000614 <ExtractBits>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	78ba      	ldrb	r2, [r7, #2]
 8006a2c:	b2d8      	uxtb	r0, r3
 8006a2e:	496e      	ldr	r1, [pc, #440]	; (8006be8 <Service_Msg_Extr+0x564>)
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	440b      	add	r3, r1
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006a40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a44:	3308      	adds	r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da00      	bge.n	8006a4c <Service_Msg_Extr+0x3c8>
 8006a4a:	3307      	adds	r3, #7
 8006a4c:	10db      	asrs	r3, r3, #3
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	4413      	add	r3, r2
 8006a54:	81fb      	strh	r3, [r7, #14]
 8006a56:	89bb      	ldrh	r3, [r7, #12]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	b21b      	sxth	r3, r3
 8006a5e:	425a      	negs	r2, r3
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	f002 0207 	and.w	r2, r2, #7
 8006a68:	bf58      	it	pl
 8006a6a:	4253      	negpl	r3, r2
 8006a6c:	b21b      	sxth	r3, r3
 8006a6e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a70:	89fb      	ldrh	r3, [r7, #14]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	441a      	add	r2, r3
 8006a76:	89bb      	ldrh	r3, [r7, #12]
 8006a78:	2108      	movs	r1, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7f9 fdca 	bl	8000614 <ExtractBits>
 8006a80:	4603      	mov	r3, r0
 8006a82:	78ba      	ldrb	r2, [r7, #2]
 8006a84:	b2d8      	uxtb	r0, r3
 8006a86:	4958      	ldr	r1, [pc, #352]	; (8006be8 <Service_Msg_Extr+0x564>)
 8006a88:	4613      	mov	r3, r2
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4413      	add	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	440b      	add	r3, r1
 8006a92:	3303      	adds	r3, #3
 8006a94:	4602      	mov	r2, r0
 8006a96:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da00      	bge.n	8006aa4 <Service_Msg_Extr+0x420>
 8006aa2:	3307      	adds	r3, #7
 8006aa4:	10db      	asrs	r3, r3, #3
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
 8006aaa:	4413      	add	r3, r2
 8006aac:	81fb      	strh	r3, [r7, #14]
 8006aae:	89bb      	ldrh	r3, [r7, #12]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	425a      	negs	r2, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	f002 0207 	and.w	r2, r2, #7
 8006ac0:	bf58      	it	pl
 8006ac2:	4253      	negpl	r3, r2
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	441a      	add	r2, r3
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7f9 fd9e 	bl	8000614 <ExtractBits>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	78ba      	ldrb	r2, [r7, #2]
 8006adc:	b2d8      	uxtb	r0, r3
 8006ade:	4942      	ldr	r1, [pc, #264]	; (8006be8 <Service_Msg_Extr+0x564>)
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	4413      	add	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	440b      	add	r3, r1
 8006aea:	4602      	mov	r2, r0
 8006aec:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006aee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006af2:	3308      	adds	r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da00      	bge.n	8006afa <Service_Msg_Extr+0x476>
 8006af8:	3307      	adds	r3, #7
 8006afa:	10db      	asrs	r3, r3, #3
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	4413      	add	r3, r2
 8006b02:	81fb      	strh	r3, [r7, #14]
 8006b04:	89bb      	ldrh	r3, [r7, #12]
 8006b06:	3308      	adds	r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b21b      	sxth	r3, r3
 8006b0c:	425a      	negs	r2, r3
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	f002 0207 	and.w	r2, r2, #7
 8006b16:	bf58      	it	pl
 8006b18:	4253      	negpl	r3, r2
 8006b1a:	b21b      	sxth	r3, r3
 8006b1c:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b1e:	89fb      	ldrh	r3, [r7, #14]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	441a      	add	r2, r3
 8006b24:	89bb      	ldrh	r3, [r7, #12]
 8006b26:	2108      	movs	r1, #8
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7f9 fd73 	bl	8000614 <ExtractBits>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	78ba      	ldrb	r2, [r7, #2]
 8006b32:	b2d8      	uxtb	r0, r3
 8006b34:	492c      	ldr	r1, [pc, #176]	; (8006be8 <Service_Msg_Extr+0x564>)
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	440b      	add	r3, r1
 8006b40:	3301      	adds	r3, #1
 8006b42:	4602      	mov	r2, r0
 8006b44:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006b46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da00      	bge.n	8006b52 <Service_Msg_Extr+0x4ce>
 8006b50:	3307      	adds	r3, #7
 8006b52:	10db      	asrs	r3, r3, #3
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	4413      	add	r3, r2
 8006b5a:	81fb      	strh	r3, [r7, #14]
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	b21b      	sxth	r3, r3
 8006b64:	425a      	negs	r2, r3
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	f002 0207 	and.w	r2, r2, #7
 8006b6e:	bf58      	it	pl
 8006b70:	4253      	negpl	r3, r2
 8006b72:	b21b      	sxth	r3, r3
 8006b74:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b76:	89fb      	ldrh	r3, [r7, #14]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	89bb      	ldrh	r3, [r7, #12]
 8006b7e:	2108      	movs	r1, #8
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7f9 fd47 	bl	8000614 <ExtractBits>
 8006b86:	4603      	mov	r3, r0
 8006b88:	78ba      	ldrb	r2, [r7, #2]
 8006b8a:	b2d8      	uxtb	r0, r3
 8006b8c:	4916      	ldr	r1, [pc, #88]	; (8006be8 <Service_Msg_Extr+0x564>)
 8006b8e:	4613      	mov	r3, r2
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4413      	add	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	440b      	add	r3, r1
 8006b98:	3302      	adds	r3, #2
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da00      	bge.n	8006baa <Service_Msg_Extr+0x526>
 8006ba8:	3307      	adds	r3, #7
 8006baa:	10db      	asrs	r3, r3, #3
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	89fb      	ldrh	r3, [r7, #14]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	81fb      	strh	r3, [r7, #14]
 8006bb4:	89bb      	ldrh	r3, [r7, #12]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	b21b      	sxth	r3, r3
 8006bbc:	425a      	negs	r2, r3
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	f002 0207 	and.w	r2, r2, #7
 8006bc6:	bf58      	it	pl
 8006bc8:	4253      	negpl	r3, r2
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006bce:	78bb      	ldrb	r3, [r7, #2]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f002 f8a7 	bl	8008d24 <IS_MLK_EIPC_TIME_MATCHING>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <Service_Msg_Extr+0x56c>
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	4a03      	ldr	r2, [pc, #12]	; (8006bec <Service_Msg_Extr+0x568>)
 8006be0:	2100      	movs	r1, #0
 8006be2:	54d1      	strb	r1, [r2, r3]
 8006be4:	e008      	b.n	8006bf8 <Service_Msg_Extr+0x574>
 8006be6:	bf00      	nop
 8006be8:	20001188 	.word	0x20001188
 8006bec:	200010d8 	.word	0x200010d8
 8006bf0:	78bb      	ldrb	r3, [r7, #2]
 8006bf2:	4a98      	ldr	r2, [pc, #608]	; (8006e54 <Service_Msg_Extr+0x7d0>)
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006bf8:	78bb      	ldrb	r3, [r7, #2]
 8006bfa:	4a97      	ldr	r2, [pc, #604]	; (8006e58 <Service_Msg_Extr+0x7d4>)
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	4413      	add	r3, r2
 8006c00:	3304      	adds	r3, #4
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006c10:	787a      	ldrb	r2, [r7, #1]
 8006c12:	78bb      	ldrb	r3, [r7, #2]
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff f8d0 	bl	8005dbc <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006c1c:	7ffb      	ldrb	r3, [r7, #31]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	f040 8081 	bne.w	8006d26 <Service_Msg_Extr+0x6a2>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006c24:	78ba      	ldrb	r2, [r7, #2]
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4a8b      	ldr	r2, [pc, #556]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006c30:	4413      	add	r3, r2
 8006c32:	3301      	adds	r3, #1
 8006c34:	2210      	movs	r2, #16
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f01b fa13 	bl	8022064 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006c3e:	78ba      	ldrb	r2, [r7, #2]
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a84      	ldr	r2, [pc, #528]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006c4a:	1898      	adds	r0, r3, r2
 8006c4c:	78ba      	ldrb	r2, [r7, #2]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4a82      	ldr	r2, [pc, #520]	; (8006e60 <Service_Msg_Extr+0x7dc>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	2214      	movs	r2, #20
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f01b f9d9 	bl	8022014 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c62:	78bb      	ldrb	r3, [r7, #2]
 8006c64:	4a7f      	ldr	r2, [pc, #508]	; (8006e64 <Service_Msg_Extr+0x7e0>)
 8006c66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c6a:	78ba      	ldrb	r2, [r7, #2]
 8006c6c:	487b      	ldr	r0, [pc, #492]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4403      	add	r3, r0
 8006c78:	3312      	adds	r3, #18
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d052      	beq.n	8006d26 <Service_Msg_Extr+0x6a2>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c80:	78ba      	ldrb	r2, [r7, #2]
 8006c82:	78b9      	ldrb	r1, [r7, #2]
 8006c84:	4875      	ldr	r0, [pc, #468]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4403      	add	r3, r0
 8006c90:	3312      	adds	r3, #18
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	4b73      	ldr	r3, [pc, #460]	; (8006e64 <Service_Msg_Extr+0x7e0>)
 8006c96:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c9a:	2214      	movs	r2, #20
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4872      	ldr	r0, [pc, #456]	; (8006e68 <Service_Msg_Extr+0x7e4>)
 8006ca0:	f01b f9e0 	bl	8022064 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006ca4:	78ba      	ldrb	r2, [r7, #2]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4a6b      	ldr	r2, [pc, #428]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006cb0:	4413      	add	r3, r2
 8006cb2:	2214      	movs	r2, #20
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	486c      	ldr	r0, [pc, #432]	; (8006e68 <Service_Msg_Extr+0x7e4>)
 8006cb8:	f01b f9ac 	bl	8022014 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006cbc:	f240 2007 	movw	r0, #519	; 0x207
 8006cc0:	f008 fedc 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006cc4:	78b9      	ldrb	r1, [r7, #2]
 8006cc6:	78ba      	ldrb	r2, [r7, #2]
 8006cc8:	4864      	ldr	r0, [pc, #400]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006cca:	460b      	mov	r3, r1
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4403      	add	r3, r0
 8006cd4:	3312      	adds	r3, #18
 8006cd6:	8818      	ldrh	r0, [r3, #0]
 8006cd8:	4964      	ldr	r1, [pc, #400]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3306      	adds	r3, #6
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006cea:	78bb      	ldrb	r3, [r7, #2]
 8006cec:	4a60      	ldr	r2, [pc, #384]	; (8006e70 <Service_Msg_Extr+0x7ec>)
 8006cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d117      	bne.n	8006d26 <Service_Msg_Extr+0x6a2>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006cf6:	78bb      	ldrb	r3, [r7, #2]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	4a5e      	ldr	r2, [pc, #376]	; (8006e74 <Service_Msg_Extr+0x7f0>)
 8006cfc:	4413      	add	r3, r2
 8006cfe:	1c98      	adds	r0, r3, #2
 8006d00:	78ba      	ldrb	r2, [r7, #2]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <Service_Msg_Extr+0x7d8>)
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3301      	adds	r3, #1
 8006d10:	2210      	movs	r2, #16
 8006d12:	4619      	mov	r1, r3
 8006d14:	f01b f97e 	bl	8022014 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8006d18:	f240 1019 	movw	r0, #281	; 0x119
 8006d1c:	f008 feae 	bl	800fa7c <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006d20:	4a55      	ldr	r2, [pc, #340]	; (8006e78 <Service_Msg_Extr+0x7f4>)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006d26:	78ba      	ldrb	r2, [r7, #2]
 8006d28:	4950      	ldr	r1, [pc, #320]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	3314      	adds	r3, #20
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	494b      	ldr	r1, [pc, #300]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	3305      	adds	r3, #5
 8006d4a:	2206      	movs	r2, #6
 8006d4c:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006d4e:	78ba      	ldrb	r2, [r7, #2]
 8006d50:	4946      	ldr	r1, [pc, #280]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	440b      	add	r3, r1
 8006d5c:	78ba      	ldrb	r2, [r7, #2]
 8006d5e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006d60:	78ba      	ldrb	r2, [r7, #2]
 8006d62:	4942      	ldr	r1, [pc, #264]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3301      	adds	r3, #1
 8006d70:	2201      	movs	r2, #1
 8006d72:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d74:	78ba      	ldrb	r2, [r7, #2]
 8006d76:	493d      	ldr	r1, [pc, #244]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	440b      	add	r3, r1
 8006d82:	3302      	adds	r3, #2
 8006d84:	7ffa      	ldrb	r2, [r7, #31]
 8006d86:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d88:	2218      	movs	r2, #24
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	483b      	ldr	r0, [pc, #236]	; (8006e7c <Service_Msg_Extr+0x7f8>)
 8006d8e:	f01b f969 	bl	8022064 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d92:	78ba      	ldrb	r2, [r7, #2]
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4a33      	ldr	r2, [pc, #204]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	2218      	movs	r2, #24
 8006da2:	4619      	mov	r1, r3
 8006da4:	4835      	ldr	r0, [pc, #212]	; (8006e7c <Service_Msg_Extr+0x7f8>)
 8006da6:	f01b f935 	bl	8022014 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006daa:	f240 2001 	movw	r0, #513	; 0x201
 8006dae:	f008 fe65 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006db2:	78ba      	ldrb	r2, [r7, #2]
 8006db4:	492d      	ldr	r1, [pc, #180]	; (8006e6c <Service_Msg_Extr+0x7e8>)
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006dc6:	78bb      	ldrb	r3, [r7, #2]
 8006dc8:	492d      	ldr	r1, [pc, #180]	; (8006e80 <Service_Msg_Extr+0x7fc>)
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006dd0:	7ffb      	ldrb	r3, [r7, #31]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d11d      	bne.n	8006e12 <Service_Msg_Extr+0x78e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006dd6:	78bb      	ldrb	r3, [r7, #2]
 8006dd8:	492a      	ldr	r1, [pc, #168]	; (8006e84 <Service_Msg_Extr+0x800>)
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006de0:	78bb      	ldrb	r3, [r7, #2]
 8006de2:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <Service_Msg_Extr+0x804>)
 8006de4:	2101      	movs	r1, #1
 8006de6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006de8:	78ba      	ldrb	r2, [r7, #2]
 8006dea:	4928      	ldr	r1, [pc, #160]	; (8006e8c <Service_Msg_Extr+0x808>)
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3301      	adds	r3, #1
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006dfc:	78ba      	ldrb	r2, [r7, #2]
 8006dfe:	4923      	ldr	r1, [pc, #140]	; (8006e8c <Service_Msg_Extr+0x808>)
 8006e00:	4613      	mov	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e017      	b.n	8006e42 <Service_Msg_Extr+0x7be>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006e12:	78bb      	ldrb	r3, [r7, #2]
 8006e14:	4a1c      	ldr	r2, [pc, #112]	; (8006e88 <Service_Msg_Extr+0x804>)
 8006e16:	2100      	movs	r1, #0
 8006e18:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006e1a:	78ba      	ldrb	r2, [r7, #2]
 8006e1c:	491b      	ldr	r1, [pc, #108]	; (8006e8c <Service_Msg_Extr+0x808>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3308      	adds	r3, #8
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006e2e:	78ba      	ldrb	r2, [r7, #2]
 8006e30:	4916      	ldr	r1, [pc, #88]	; (8006e8c <Service_Msg_Extr+0x808>)
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e46:	4812      	ldr	r0, [pc, #72]	; (8006e90 <Service_Msg_Extr+0x80c>)
 8006e48:	f010 fee7 	bl	8017c1a <HAL_GPIO_TogglePin>

}
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200010d8 	.word	0x200010d8
 8006e58:	200011c4 	.word	0x200011c4
 8006e5c:	20001e68 	.word	0x20001e68
 8006e60:	20001da0 	.word	0x20001da0
 8006e64:	20000f00 	.word	0x20000f00
 8006e68:	20001ff8 	.word	0x20001ff8
 8006e6c:	20001674 	.word	0x20001674
 8006e70:	20000ec4 	.word	0x20000ec4
 8006e74:	200010e4 	.word	0x200010e4
 8006e78:	20000e70 	.word	0x20000e70
 8006e7c:	20001854 	.word	0x20001854
 8006e80:	20000e44 	.word	0x20000e44
 8006e84:	20000f14 	.word	0x20000f14
 8006e88:	20000f64 	.word	0x20000f64
 8006e8c:	20001cb0 	.word	0x20001cb0
 8006e90:	40021c00 	.word	0x40021c00

08006e94 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b095      	sub	sp, #84	; 0x54
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	460a      	mov	r2, r1
 8006e9e:	71fb      	strb	r3, [r7, #7]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	2238      	movs	r2, #56	; 0x38
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f01b f8d7 	bl	8022064 <memset>

	BITSTUFFINIT(0, 0);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ec6:	f107 020c 	add.w	r2, r7, #12
 8006eca:	441a      	add	r2, r3
 8006ecc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ed0:	23f4      	movs	r3, #244	; 0xf4
 8006ed2:	2108      	movs	r1, #8
 8006ed4:	f7f9 fc2a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006ed8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006edc:	3308      	adds	r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da00      	bge.n	8006ee4 <Send_Service_Signal_Message+0x50>
 8006ee2:	3307      	adds	r3, #7
 8006ee4:	10db      	asrs	r3, r3, #3
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eec:	4413      	add	r3, r2
 8006eee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ef2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	b21b      	sxth	r3, r3
 8006efc:	425a      	negs	r2, r3
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	f002 0207 	and.w	r2, r2, #7
 8006f06:	bf58      	it	pl
 8006f08:	4253      	negpl	r3, r2
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f14:	f107 020c 	add.w	r2, r7, #12
 8006f18:	441a      	add	r2, r3
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	497b      	ldr	r1, [pc, #492]	; (800710c <Send_Service_Signal_Message+0x278>)
 8006f1e:	3366      	adds	r3, #102	; 0x66
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f2a:	2110      	movs	r1, #16
 8006f2c:	f7f9 fbfe 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f30:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f34:	3310      	adds	r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da00      	bge.n	8006f3c <Send_Service_Signal_Message+0xa8>
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	10db      	asrs	r3, r3, #3
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f44:	4413      	add	r3, r2
 8006f46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f4e:	3310      	adds	r3, #16
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	b21b      	sxth	r3, r3
 8006f54:	425a      	negs	r2, r3
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	f002 0207 	and.w	r2, r2, #7
 8006f5e:	bf58      	it	pl
 8006f60:	4253      	negpl	r3, r2
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f6c:	f107 020c 	add.w	r2, r7, #12
 8006f70:	441a      	add	r2, r3
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	4965      	ldr	r1, [pc, #404]	; (800710c <Send_Service_Signal_Message+0x278>)
 8006f76:	3370      	adds	r3, #112	; 0x70
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f82:	2110      	movs	r1, #16
 8006f84:	f7f9 fbd2 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f88:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da00      	bge.n	8006f94 <Send_Service_Signal_Message+0x100>
 8006f92:	3307      	adds	r3, #7
 8006f94:	10db      	asrs	r3, r3, #3
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006fa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	425a      	negs	r2, r3
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	f002 0207 	and.w	r2, r2, #7
 8006fb6:	bf58      	it	pl
 8006fb8:	4253      	negpl	r3, r2
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fc0:	4b53      	ldr	r3, [pc, #332]	; (8007110 <Send_Service_Signal_Message+0x27c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	089b      	lsrs	r3, r3, #2
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d035      	beq.n	800703a <Send_Service_Signal_Message+0x1a6>
 8006fce:	4b50      	ldr	r3, [pc, #320]	; (8007110 <Send_Service_Signal_Message+0x27c>)
 8006fd0:	791b      	ldrb	r3, [r3, #4]
 8006fd2:	79fa      	ldrb	r2, [r7, #7]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d130      	bne.n	800703a <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006fde:	484d      	ldr	r0, [pc, #308]	; (8007114 <Send_Service_Signal_Message+0x280>)
 8006fe0:	f012 fde4 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b4c      	ldr	r3, [pc, #304]	; (8007118 <Send_Service_Signal_Message+0x284>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	099b      	lsrs	r3, r3, #6
 8006fee:	21c8      	movs	r1, #200	; 0xc8
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006ffa:	4848      	ldr	r0, [pc, #288]	; (800711c <Send_Service_Signal_Message+0x288>)
 8006ffc:	f01b f9b6 	bl	802236c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	4a47      	ldr	r2, [pc, #284]	; (8007120 <Send_Service_Signal_Message+0x28c>)
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	4413      	add	r3, r2
 8007008:	3301      	adds	r3, #1
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	4845      	ldr	r0, [pc, #276]	; (8007124 <Send_Service_Signal_Message+0x290>)
 8007010:	f01b f910 	bl	8022234 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007014:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007018:	4619      	mov	r1, r3
 800701a:	4843      	ldr	r0, [pc, #268]	; (8007128 <Send_Service_Signal_Message+0x294>)
 800701c:	f01b f90a 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007020:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007024:	f107 020c 	add.w	r2, r7, #12
 8007028:	441a      	add	r2, r3
 800702a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800702e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007032:	2108      	movs	r1, #8
 8007034:	f7f9 fb7a 	bl	800072c <InsertBits>
	{
 8007038:	e00f      	b.n	800705a <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800703a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800703e:	f107 020c 	add.w	r2, r7, #12
 8007042:	441a      	add	r2, r3
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	4936      	ldr	r1, [pc, #216]	; (8007120 <Send_Service_Signal_Message+0x28c>)
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	440b      	add	r3, r1
 800704c:	3301      	adds	r3, #1
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007054:	2108      	movs	r1, #8
 8007056:	f7f9 fb69 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 800705a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800705e:	3308      	adds	r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	da00      	bge.n	8007066 <Send_Service_Signal_Message+0x1d2>
 8007064:	3307      	adds	r3, #7
 8007066:	10db      	asrs	r3, r3, #3
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800706e:	4413      	add	r3, r2
 8007070:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007074:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007078:	3308      	adds	r3, #8
 800707a:	b29b      	uxth	r3, r3
 800707c:	b21b      	sxth	r3, r3
 800707e:	425a      	negs	r2, r3
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	f002 0207 	and.w	r2, r2, #7
 8007088:	bf58      	it	pl
 800708a:	4253      	negpl	r3, r2
 800708c:	b21b      	sxth	r3, r3
 800708e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007092:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <Send_Service_Signal_Message+0x27c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	08db      	lsrs	r3, r3, #3
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d04b      	beq.n	8007138 <Send_Service_Signal_Message+0x2a4>
 80070a0:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <Send_Service_Signal_Message+0x27c>)
 80070a2:	791b      	ldrb	r3, [r3, #4]
 80070a4:	79fa      	ldrb	r2, [r7, #7]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d146      	bne.n	8007138 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 80070b0:	4818      	ldr	r0, [pc, #96]	; (8007114 <Send_Service_Signal_Message+0x280>)
 80070b2:	f012 fd7b 	bl	8019bac <HAL_RNG_GetRandomNumber>
 80070b6:	4602      	mov	r2, r0
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <Send_Service_Signal_Message+0x284>)
 80070ba:	fba3 1302 	umull	r1, r3, r3, r2
 80070be:	099b      	lsrs	r3, r3, #6
 80070c0:	21c8      	movs	r1, #200	; 0xc8
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 80070cc:	4817      	ldr	r0, [pc, #92]	; (800712c <Send_Service_Signal_Message+0x298>)
 80070ce:	f01b f94d 	bl	802236c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4a12      	ldr	r2, [pc, #72]	; (8007120 <Send_Service_Signal_Message+0x28c>)
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	4413      	add	r3, r2
 80070da:	3302      	adds	r3, #2
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	4619      	mov	r1, r3
 80070e0:	4813      	ldr	r0, [pc, #76]	; (8007130 <Send_Service_Signal_Message+0x29c>)
 80070e2:	f01b f8a7 	bl	8022234 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80070e6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070ea:	4619      	mov	r1, r3
 80070ec:	4811      	ldr	r0, [pc, #68]	; (8007134 <Send_Service_Signal_Message+0x2a0>)
 80070ee:	f01b f8a1 	bl	8022234 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80070f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070f6:	f107 020c 	add.w	r2, r7, #12
 80070fa:	441a      	add	r2, r3
 80070fc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007100:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007104:	2108      	movs	r1, #8
 8007106:	f7f9 fb11 	bl	800072c <InsertBits>
	{
 800710a:	e033      	b.n	8007174 <Send_Service_Signal_Message+0x2e0>
 800710c:	20000304 	.word	0x20000304
 8007110:	2000195c 	.word	0x2000195c
 8007114:	20009cf4 	.word	0x20009cf4
 8007118:	51eb851f 	.word	0x51eb851f
 800711c:	08023de8 	.word	0x08023de8
 8007120:	200011c4 	.word	0x200011c4
 8007124:	0802438c 	.word	0x0802438c
 8007128:	080243ac 	.word	0x080243ac
 800712c:	08023e4c 	.word	0x08023e4c
 8007130:	080243cc 	.word	0x080243cc
 8007134:	080243ec 	.word	0x080243ec
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800713c:	f107 020c 	add.w	r2, r7, #12
 8007140:	18d1      	adds	r1, r2, r3
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	484e      	ldr	r0, [pc, #312]	; (8007280 <Send_Service_Signal_Message+0x3ec>)
 8007146:	011a      	lsls	r2, r3, #4
 8007148:	4402      	add	r2, r0
 800714a:	3202      	adds	r2, #2
 800714c:	7812      	ldrb	r2, [r2, #0]
 800714e:	3201      	adds	r2, #1
 8007150:	b2d4      	uxtb	r4, r2
 8007152:	484b      	ldr	r0, [pc, #300]	; (8007280 <Send_Service_Signal_Message+0x3ec>)
 8007154:	011a      	lsls	r2, r3, #4
 8007156:	4402      	add	r2, r0
 8007158:	3202      	adds	r2, #2
 800715a:	4620      	mov	r0, r4
 800715c:	7010      	strb	r0, [r2, #0]
 800715e:	4a48      	ldr	r2, [pc, #288]	; (8007280 <Send_Service_Signal_Message+0x3ec>)
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	4413      	add	r3, r2
 8007164:	3302      	adds	r3, #2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800716c:	460a      	mov	r2, r1
 800716e:	2108      	movs	r1, #8
 8007170:	f7f9 fadc 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007174:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007178:	3308      	adds	r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	da00      	bge.n	8007180 <Send_Service_Signal_Message+0x2ec>
 800717e:	3307      	adds	r3, #7
 8007180:	10db      	asrs	r3, r3, #3
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007188:	4413      	add	r3, r2
 800718a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800718e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007192:	3308      	adds	r3, #8
 8007194:	b29b      	uxth	r3, r3
 8007196:	b21b      	sxth	r3, r3
 8007198:	425a      	negs	r2, r3
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	f002 0207 	and.w	r2, r2, #7
 80071a2:	bf58      	it	pl
 80071a4:	4253      	negpl	r3, r2
 80071a6:	b21b      	sxth	r3, r3
 80071a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 80071ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071b0:	f107 020c 	add.w	r2, r7, #12
 80071b4:	441a      	add	r2, r3
 80071b6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071ba:	2306      	movs	r3, #6
 80071bc:	2108      	movs	r1, #8
 80071be:	f7f9 fab5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80071c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071c6:	3308      	adds	r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da00      	bge.n	80071ce <Send_Service_Signal_Message+0x33a>
 80071cc:	3307      	adds	r3, #7
 80071ce:	10db      	asrs	r3, r3, #3
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071d6:	4413      	add	r3, r2
 80071d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071e0:	3308      	adds	r3, #8
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	b21b      	sxth	r3, r3
 80071e6:	425a      	negs	r2, r3
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	f002 0207 	and.w	r2, r2, #7
 80071f0:	bf58      	it	pl
 80071f2:	4253      	negpl	r3, r2
 80071f4:	b21b      	sxth	r3, r3
 80071f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <Send_Service_Signal_Message+0x3f0>)
 80071fe:	5cd3      	ldrb	r3, [r2, r3]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d147      	bne.n	8007294 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007204:	f004 f9c0 	bl	800b588 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007208:	79fa      	ldrb	r2, [r7, #7]
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <Send_Service_Signal_Message+0x3f4>)
 8007214:	4413      	add	r3, r2
 8007216:	4a1d      	ldr	r2, [pc, #116]	; (800728c <Send_Service_Signal_Message+0x3f8>)
 8007218:	6811      	ldr	r1, [r2, #0]
 800721a:	6019      	str	r1, [r3, #0]
 800721c:	8892      	ldrh	r2, [r2, #4]
 800721e:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007220:	481b      	ldr	r0, [pc, #108]	; (8007290 <Send_Service_Signal_Message+0x3fc>)
 8007222:	f01b f8a3 	bl	802236c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <Send_Service_Signal_Message+0x3f0>)
 800722a:	2100      	movs	r1, #0
 800722c:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 800722e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007232:	f107 020c 	add.w	r2, r7, #12
 8007236:	441a      	add	r2, r3
 8007238:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800723c:	2369      	movs	r3, #105	; 0x69
 800723e:	2110      	movs	r1, #16
 8007240:	f7f9 fa74 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007244:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007248:	3310      	adds	r3, #16
 800724a:	2b00      	cmp	r3, #0
 800724c:	da00      	bge.n	8007250 <Send_Service_Signal_Message+0x3bc>
 800724e:	3307      	adds	r3, #7
 8007250:	10db      	asrs	r3, r3, #3
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007258:	4413      	add	r3, r2
 800725a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800725e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007262:	3310      	adds	r3, #16
 8007264:	b29b      	uxth	r3, r3
 8007266:	b21b      	sxth	r3, r3
 8007268:	425a      	negs	r2, r3
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	f002 0207 	and.w	r2, r2, #7
 8007272:	bf58      	it	pl
 8007274:	4253      	negpl	r3, r2
 8007276:	b21b      	sxth	r3, r3
 8007278:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800727c:	e031      	b.n	80072e2 <Send_Service_Signal_Message+0x44e>
 800727e:	bf00      	nop
 8007280:	200011c4 	.word	0x200011c4
 8007284:	200010d8 	.word	0x200010d8
 8007288:	20001188 	.word	0x20001188
 800728c:	20002878 	.word	0x20002878
 8007290:	08024168 	.word	0x08024168
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007294:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007298:	f107 020c 	add.w	r2, r7, #12
 800729c:	441a      	add	r2, r3
 800729e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072a2:	2329      	movs	r3, #41	; 0x29
 80072a4:	2110      	movs	r1, #16
 80072a6:	f7f9 fa41 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80072aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072ae:	3310      	adds	r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da00      	bge.n	80072b6 <Send_Service_Signal_Message+0x422>
 80072b4:	3307      	adds	r3, #7
 80072b6:	10db      	asrs	r3, r3, #3
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072be:	4413      	add	r3, r2
 80072c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c8:	3310      	adds	r3, #16
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	b21b      	sxth	r3, r3
 80072ce:	425a      	negs	r2, r3
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	f002 0207 	and.w	r2, r2, #7
 80072d8:	bf58      	it	pl
 80072da:	4253      	negpl	r3, r2
 80072dc:	b21b      	sxth	r3, r3
 80072de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80072e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072e6:	f107 020c 	add.w	r2, r7, #12
 80072ea:	18d1      	adds	r1, r2, r3
 80072ec:	79fa      	ldrb	r2, [r7, #7]
 80072ee:	48b5      	ldr	r0, [pc, #724]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 80072f0:	4613      	mov	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4403      	add	r3, r0
 80072fa:	3305      	adds	r3, #5
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007302:	460a      	mov	r2, r1
 8007304:	2108      	movs	r1, #8
 8007306:	f7f9 fa11 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800730a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800730e:	3308      	adds	r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	da00      	bge.n	8007316 <Send_Service_Signal_Message+0x482>
 8007314:	3307      	adds	r3, #7
 8007316:	10db      	asrs	r3, r3, #3
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800731e:	4413      	add	r3, r2
 8007320:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007324:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007328:	3308      	adds	r3, #8
 800732a:	b29b      	uxth	r3, r3
 800732c:	b21b      	sxth	r3, r3
 800732e:	425a      	negs	r2, r3
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	f002 0207 	and.w	r2, r2, #7
 8007338:	bf58      	it	pl
 800733a:	4253      	negpl	r3, r2
 800733c:	b21b      	sxth	r3, r3
 800733e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007346:	f107 020c 	add.w	r2, r7, #12
 800734a:	18d1      	adds	r1, r2, r3
 800734c:	79fa      	ldrb	r2, [r7, #7]
 800734e:	489d      	ldr	r0, [pc, #628]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4403      	add	r3, r0
 800735a:	3304      	adds	r3, #4
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007362:	460a      	mov	r2, r1
 8007364:	2108      	movs	r1, #8
 8007366:	f7f9 f9e1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800736a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800736e:	3308      	adds	r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	da00      	bge.n	8007376 <Send_Service_Signal_Message+0x4e2>
 8007374:	3307      	adds	r3, #7
 8007376:	10db      	asrs	r3, r3, #3
 8007378:	b29a      	uxth	r2, r3
 800737a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800737e:	4413      	add	r3, r2
 8007380:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007384:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007388:	3308      	adds	r3, #8
 800738a:	b29b      	uxth	r3, r3
 800738c:	b21b      	sxth	r3, r3
 800738e:	425a      	negs	r2, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	f002 0207 	and.w	r2, r2, #7
 8007398:	bf58      	it	pl
 800739a:	4253      	negpl	r3, r2
 800739c:	b21b      	sxth	r3, r3
 800739e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 80073a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073a6:	f107 020c 	add.w	r2, r7, #12
 80073aa:	18d1      	adds	r1, r2, r3
 80073ac:	79fa      	ldrb	r2, [r7, #7]
 80073ae:	4885      	ldr	r0, [pc, #532]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 80073b0:	4613      	mov	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4413      	add	r3, r2
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	4403      	add	r3, r0
 80073ba:	3303      	adds	r3, #3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073c2:	460a      	mov	r2, r1
 80073c4:	2108      	movs	r1, #8
 80073c6:	f7f9 f9b1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ce:	3308      	adds	r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da00      	bge.n	80073d6 <Send_Service_Signal_Message+0x542>
 80073d4:	3307      	adds	r3, #7
 80073d6:	10db      	asrs	r3, r3, #3
 80073d8:	b29a      	uxth	r2, r3
 80073da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073de:	4413      	add	r3, r2
 80073e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073e8:	3308      	adds	r3, #8
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	425a      	negs	r2, r3
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	f002 0207 	and.w	r2, r2, #7
 80073f8:	bf58      	it	pl
 80073fa:	4253      	negpl	r3, r2
 80073fc:	b21b      	sxth	r3, r3
 80073fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007402:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007406:	f107 020c 	add.w	r2, r7, #12
 800740a:	18d1      	adds	r1, r2, r3
 800740c:	79fa      	ldrb	r2, [r7, #7]
 800740e:	486d      	ldr	r0, [pc, #436]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	4403      	add	r3, r0
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007420:	460a      	mov	r2, r1
 8007422:	2108      	movs	r1, #8
 8007424:	f7f9 f982 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007428:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800742c:	3308      	adds	r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	da00      	bge.n	8007434 <Send_Service_Signal_Message+0x5a0>
 8007432:	3307      	adds	r3, #7
 8007434:	10db      	asrs	r3, r3, #3
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800743c:	4413      	add	r3, r2
 800743e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007442:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007446:	3308      	adds	r3, #8
 8007448:	b29b      	uxth	r3, r3
 800744a:	b21b      	sxth	r3, r3
 800744c:	425a      	negs	r2, r3
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	f002 0207 	and.w	r2, r2, #7
 8007456:	bf58      	it	pl
 8007458:	4253      	negpl	r3, r2
 800745a:	b21b      	sxth	r3, r3
 800745c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007464:	f107 020c 	add.w	r2, r7, #12
 8007468:	18d1      	adds	r1, r2, r3
 800746a:	79fa      	ldrb	r2, [r7, #7]
 800746c:	4855      	ldr	r0, [pc, #340]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	4403      	add	r3, r0
 8007478:	3301      	adds	r3, #1
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007480:	460a      	mov	r2, r1
 8007482:	2108      	movs	r1, #8
 8007484:	f7f9 f952 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007488:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800748c:	3308      	adds	r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	da00      	bge.n	8007494 <Send_Service_Signal_Message+0x600>
 8007492:	3307      	adds	r3, #7
 8007494:	10db      	asrs	r3, r3, #3
 8007496:	b29a      	uxth	r2, r3
 8007498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800749c:	4413      	add	r3, r2
 800749e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074a6:	3308      	adds	r3, #8
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	425a      	negs	r2, r3
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	f002 0207 	and.w	r2, r2, #7
 80074b6:	bf58      	it	pl
 80074b8:	4253      	negpl	r3, r2
 80074ba:	b21b      	sxth	r3, r3
 80074bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 80074c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074c4:	f107 020c 	add.w	r2, r7, #12
 80074c8:	18d1      	adds	r1, r2, r3
 80074ca:	79fa      	ldrb	r2, [r7, #7]
 80074cc:	483d      	ldr	r0, [pc, #244]	; (80075c4 <Send_Service_Signal_Message+0x730>)
 80074ce:	4613      	mov	r3, r2
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4403      	add	r3, r0
 80074d8:	3302      	adds	r3, #2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074e0:	460a      	mov	r2, r1
 80074e2:	2108      	movs	r1, #8
 80074e4:	f7f9 f922 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074e8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074ec:	3308      	adds	r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da00      	bge.n	80074f4 <Send_Service_Signal_Message+0x660>
 80074f2:	3307      	adds	r3, #7
 80074f4:	10db      	asrs	r3, r3, #3
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074fc:	4413      	add	r3, r2
 80074fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007502:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007506:	3308      	adds	r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	b21b      	sxth	r3, r3
 800750c:	425a      	negs	r2, r3
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	f002 0207 	and.w	r2, r2, #7
 8007516:	bf58      	it	pl
 8007518:	4253      	negpl	r3, r2
 800751a:	b21b      	sxth	r3, r3
 800751c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007524:	f107 020c 	add.w	r2, r7, #12
 8007528:	18d4      	adds	r4, r2, r3
 800752a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800752e:	f107 030c 	add.w	r3, r7, #12
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f00b fba3 	bl	8012c80 <CalculateDirectReverseCrc>
 800753a:	4603      	mov	r3, r0
 800753c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007540:	4622      	mov	r2, r4
 8007542:	2120      	movs	r1, #32
 8007544:	f7f9 f8f2 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007548:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800754c:	3320      	adds	r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	da00      	bge.n	8007554 <Send_Service_Signal_Message+0x6c0>
 8007552:	3307      	adds	r3, #7
 8007554:	10db      	asrs	r3, r3, #3
 8007556:	b29a      	uxth	r2, r3
 8007558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800755c:	4413      	add	r3, r2
 800755e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007562:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007566:	3320      	adds	r3, #32
 8007568:	b29b      	uxth	r3, r3
 800756a:	b21b      	sxth	r3, r3
 800756c:	425a      	negs	r2, r3
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	f002 0207 	and.w	r2, r2, #7
 8007576:	bf58      	it	pl
 8007578:	4253      	negpl	r3, r2
 800757a:	b21b      	sxth	r3, r3
 800757c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <Send_Service_Signal_Message+0x734>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	0a5b      	lsrs	r3, r3, #9
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <Send_Service_Signal_Message+0x712>
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <Send_Service_Signal_Message+0x734>)
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	79fa      	ldrb	r2, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d106      	bne.n	80075a6 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007598:	480c      	ldr	r0, [pc, #48]	; (80075cc <Send_Service_Signal_Message+0x738>)
 800759a:	f01a fee7 	bl	802236c <puts>
		printf("Not Sending Reply");
 800759e:	480c      	ldr	r0, [pc, #48]	; (80075d0 <Send_Service_Signal_Message+0x73c>)
 80075a0:	f01a fe48 	bl	8022234 <iprintf>
 80075a4:	e009      	b.n	80075ba <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80075a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075aa:	b2d9      	uxtb	r1, r3
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 f80e 	bl	80075d4 <Process_Sending_Reply>
	}
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	3754      	adds	r7, #84	; 0x54
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20001188 	.word	0x20001188
 80075c8:	2000195c 	.word	0x2000195c
 80075cc:	08023f18 	.word	0x08023f18
 80075d0:	08023f30 	.word	0x08023f30

080075d4 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b09c      	sub	sp, #112	; 0x70
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
 80075e0:	4613      	mov	r3, r2
 80075e2:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 80075e4:	2300      	movs	r3, #0
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	2260      	movs	r2, #96	; 0x60
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f01a fd37 	bl	8022064 <memset>
	uint8_t uc_index = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 8007602:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800760c:	4619      	mov	r1, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8007616:	443b      	add	r3, r7
 8007618:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 800761c:	2301      	movs	r3, #1
 800761e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007622:	e03c      	b.n	800769e <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 8007624:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2bef      	cmp	r3, #239	; 0xef
 8007630:	d922      	bls.n	8007678 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 8007632:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007640:	1c59      	adds	r1, r3, #1
 8007642:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007646:	f022 020f 	bic.w	r2, r2, #15
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	3370      	adds	r3, #112	; 0x70
 800764e:	443b      	add	r3, r7
 8007650:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8007654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007662:	1c59      	adds	r1, r3, #1
 8007664:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007668:	f002 020f 	and.w	r2, r2, #15
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	3370      	adds	r3, #112	; 0x70
 8007670:	443b      	add	r3, r7
 8007672:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007676:	e00d      	b.n	8007694 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007678:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	441a      	add	r2, r3
 8007680:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007684:	1c59      	adds	r1, r3, #1
 8007686:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800768a:	7812      	ldrb	r2, [r2, #0]
 800768c:	3370      	adds	r3, #112	; 0x70
 800768e:	443b      	add	r3, r7
 8007690:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007698:	3301      	adds	r3, #1
 800769a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800769e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d3bd      	bcc.n	8007624 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 80076a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80076b2:	3370      	adds	r3, #112	; 0x70
 80076b4:	443b      	add	r3, r7
 80076b6:	22f6      	movs	r2, #246	; 0xf6
 80076b8:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80076bc:	78bb      	ldrb	r3, [r7, #2]
 80076be:	4a38      	ldr	r2, [pc, #224]	; (80077a0 <Process_Sending_Reply+0x1cc>)
 80076c0:	5cd3      	ldrb	r3, [r2, r3]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10b      	bne.n	80076de <Process_Sending_Reply+0x10a>
 80076c6:	4b37      	ldr	r3, [pc, #220]	; (80077a4 <Process_Sending_Reply+0x1d0>)
 80076c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <Process_Sending_Reply+0x10a>
 80076d0:	4b35      	ldr	r3, [pc, #212]	; (80077a8 <Process_Sending_Reply+0x1d4>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d102      	bne.n	80076de <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076d8:	4834      	ldr	r0, [pc, #208]	; (80077ac <Process_Sending_Reply+0x1d8>)
 80076da:	f001 f877 	bl	80087cc <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80076de:	78bb      	ldrb	r3, [r7, #2]
 80076e0:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <Process_Sending_Reply+0x1dc>)
 80076e2:	4413      	add	r3, r2
 80076e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10e      	bne.n	800770a <Process_Sending_Reply+0x136>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80076ec:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076f0:	b299      	uxth	r1, r3
 80076f2:	78bb      	ldrb	r3, [r7, #2]
 80076f4:	4a2f      	ldr	r2, [pc, #188]	; (80077b4 <Process_Sending_Reply+0x1e0>)
 80076f6:	f107 0008 	add.w	r0, r7, #8
 80076fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076fe:	f007 ff57 	bl	800f5b0 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 8007702:	78bb      	ldrb	r3, [r7, #2]
 8007704:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <Process_Sending_Reply+0x1cc>)
 8007706:	2100      	movs	r1, #0
 8007708:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800770a:	78bb      	ldrb	r3, [r7, #2]
 800770c:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <Process_Sending_Reply+0x1dc>)
 800770e:	4413      	add	r3, r2
 8007710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007714:	2b02      	cmp	r3, #2
 8007716:	d119      	bne.n	800774c <Process_Sending_Reply+0x178>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007718:	2300      	movs	r3, #0
 800771a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800771e:	e00e      	b.n	800773e <Process_Sending_Reply+0x16a>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8007720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007724:	3370      	adds	r3, #112	; 0x70
 8007726:	443b      	add	r3, r7
 8007728:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800772c:	4619      	mov	r1, r3
 800772e:	2003      	movs	r0, #3
 8007730:	f00d fc26 	bl	8014f80 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 8007734:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007738:	3301      	adds	r3, #1
 800773a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800773e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007742:	b29b      	uxth	r3, r3
 8007744:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007748:	429a      	cmp	r2, r3
 800774a:	d3e9      	bcc.n	8007720 <Process_Sending_Reply+0x14c>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <Process_Sending_Reply+0x1d4>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d102      	bne.n	800775a <Process_Sending_Reply+0x186>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007754:	4815      	ldr	r0, [pc, #84]	; (80077ac <Process_Sending_Reply+0x1d8>)
 8007756:	f001 f839 	bl	80087cc <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <Process_Sending_Reply+0x1d0>)
 800775c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <Process_Sending_Reply+0x1a8>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <Process_Sending_Reply+0x1d0>)
 8007766:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800776a:	461a      	mov	r2, r3
 800776c:	2101      	movs	r1, #1
 800776e:	480d      	ldr	r0, [pc, #52]	; (80077a4 <Process_Sending_Reply+0x1d0>)
 8007770:	f000 fe86 	bl	8008480 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <Process_Sending_Reply+0x1d0>)
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	461a      	mov	r2, r3
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fe7c 	bl	8008480 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <Process_Sending_Reply+0x1d4>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d102      	bne.n	8007796 <Process_Sending_Reply+0x1c2>
	{
		Display("___________________________________________________________________________________________\n");
 8007790:	4809      	ldr	r0, [pc, #36]	; (80077b8 <Process_Sending_Reply+0x1e4>)
 8007792:	f001 f81b 	bl	80087cc <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007796:	bf00      	nop
 8007798:	3770      	adds	r7, #112	; 0x70
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200010cc 	.word	0x200010cc
 80077a4:	20001bf8 	.word	0x20001bf8
 80077a8:	20000645 	.word	0x20000645
 80077ac:	08024430 	.word	0x08024430
 80077b0:	20000304 	.word	0x20000304
 80077b4:	20001058 	.word	0x20001058
 80077b8:	08024490 	.word	0x08024490

080077bc <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80077c6:	f00d fe33 	bl	8015430 <HAL_GetTick>
 80077ca:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	4a86      	ldr	r2, [pc, #536]	; (80079e8 <Check_Primary_r_Secondary+0x22c>)
 80077d0:	4413      	add	r3, r2
 80077d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	f000 8102 	beq.w	80079e0 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80077dc:	79fa      	ldrb	r2, [r7, #7]
 80077de:	4983      	ldr	r1, [pc, #524]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	440b      	add	r3, r1
 80077ea:	3303      	adds	r3, #3
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d12b      	bne.n	800784a <Check_Primary_r_Secondary+0x8e>
 80077f2:	79fa      	ldrb	r2, [r7, #7]
 80077f4:	497e      	ldr	r1, [pc, #504]	; (80079f0 <Check_Primary_r_Secondary+0x234>)
 80077f6:	4613      	mov	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4413      	add	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	440b      	add	r3, r1
 8007800:	3303      	adds	r3, #3
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d120      	bne.n	800784a <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007808:	79fa      	ldrb	r2, [r7, #7]
 800780a:	4978      	ldr	r1, [pc, #480]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	440b      	add	r3, r1
 8007816:	3304      	adds	r3, #4
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80e1 	beq.w	80079e2 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	4a71      	ldr	r2, [pc, #452]	; (80079e8 <Check_Primary_r_Secondary+0x22c>)
 8007824:	3366      	adds	r3, #102	; 0x66
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4619      	mov	r1, r3
 800782e:	4871      	ldr	r0, [pc, #452]	; (80079f4 <Check_Primary_r_Secondary+0x238>)
 8007830:	f01a fd00 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	496d      	ldr	r1, [pc, #436]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	440b      	add	r3, r1
 8007842:	3304      	adds	r3, #4
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007848:	e0cb      	b.n	80079e2 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 800784a:	79fa      	ldrb	r2, [r7, #7]
 800784c:	4967      	ldr	r1, [pc, #412]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	440b      	add	r3, r1
 8007858:	3303      	adds	r3, #3
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d12b      	bne.n	80078b8 <Check_Primary_r_Secondary+0xfc>
 8007860:	79fa      	ldrb	r2, [r7, #7]
 8007862:	4963      	ldr	r1, [pc, #396]	; (80079f0 <Check_Primary_r_Secondary+0x234>)
 8007864:	4613      	mov	r3, r2
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	4413      	add	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	440b      	add	r3, r1
 800786e:	3303      	adds	r3, #3
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d120      	bne.n	80078b8 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007876:	79fa      	ldrb	r2, [r7, #7]
 8007878:	495c      	ldr	r1, [pc, #368]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 800787a:	4613      	mov	r3, r2
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4413      	add	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	440b      	add	r3, r1
 8007884:	3304      	adds	r3, #4
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80aa 	beq.w	80079e2 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4a55      	ldr	r2, [pc, #340]	; (80079e8 <Check_Primary_r_Secondary+0x22c>)
 8007892:	3366      	adds	r3, #102	; 0x66
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	4619      	mov	r1, r3
 800789c:	4856      	ldr	r0, [pc, #344]	; (80079f8 <Check_Primary_r_Secondary+0x23c>)
 800789e:	f01a fcc9 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80078a2:	79fa      	ldrb	r2, [r7, #7]
 80078a4:	4951      	ldr	r1, [pc, #324]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80078a6:	4613      	mov	r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	4413      	add	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	440b      	add	r3, r1
 80078b0:	3304      	adds	r3, #4
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80078b6:	e094      	b.n	80079e2 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80078b8:	79fa      	ldrb	r2, [r7, #7]
 80078ba:	494c      	ldr	r1, [pc, #304]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80078bc:	4613      	mov	r3, r2
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	4413      	add	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	440b      	add	r3, r1
 80078c6:	3303      	adds	r3, #3
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d13e      	bne.n	800794c <Check_Primary_r_Secondary+0x190>
 80078ce:	79fa      	ldrb	r2, [r7, #7]
 80078d0:	4947      	ldr	r1, [pc, #284]	; (80079f0 <Check_Primary_r_Secondary+0x234>)
 80078d2:	4613      	mov	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	440b      	add	r3, r1
 80078dc:	3303      	adds	r3, #3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d133      	bne.n	800794c <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078e4:	79fa      	ldrb	r2, [r7, #7]
 80078e6:	4941      	ldr	r1, [pc, #260]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	440b      	add	r3, r1
 80078f2:	3304      	adds	r3, #4
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d073      	beq.n	80079e2 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	4a3a      	ldr	r2, [pc, #232]	; (80079e8 <Check_Primary_r_Secondary+0x22c>)
 80078fe:	3366      	adds	r3, #102	; 0x66
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	483c      	ldr	r0, [pc, #240]	; (80079fc <Check_Primary_r_Secondary+0x240>)
 800790a:	f01a fc93 	bl	8022234 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	493b      	ldr	r1, [pc, #236]	; (8007a00 <Check_Primary_r_Secondary+0x244>)
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	493a      	ldr	r1, [pc, #232]	; (8007a04 <Check_Primary_r_Secondary+0x248>)
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007922:	79fa      	ldrb	r2, [r7, #7]
 8007924:	4931      	ldr	r1, [pc, #196]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	440b      	add	r3, r1
 8007930:	3310      	adds	r3, #16
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007936:	79fa      	ldrb	r2, [r7, #7]
 8007938:	492c      	ldr	r1, [pc, #176]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	3304      	adds	r3, #4
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 800794a:	e04a      	b.n	80079e2 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 800794c:	79fa      	ldrb	r2, [r7, #7]
 800794e:	4927      	ldr	r1, [pc, #156]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 8007950:	4613      	mov	r3, r2
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	4413      	add	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	440b      	add	r3, r1
 800795a:	3303      	adds	r3, #3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d13f      	bne.n	80079e2 <Check_Primary_r_Secondary+0x226>
 8007962:	79fa      	ldrb	r2, [r7, #7]
 8007964:	4922      	ldr	r1, [pc, #136]	; (80079f0 <Check_Primary_r_Secondary+0x234>)
 8007966:	4613      	mov	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4413      	add	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	440b      	add	r3, r1
 8007970:	3303      	adds	r3, #3
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d134      	bne.n	80079e2 <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007978:	79fa      	ldrb	r2, [r7, #7]
 800797a:	491c      	ldr	r1, [pc, #112]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 800797c:	4613      	mov	r3, r2
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	440b      	add	r3, r1
 8007986:	3304      	adds	r3, #4
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d029      	beq.n	80079e2 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <Check_Primary_r_Secondary+0x22c>)
 8007992:	3366      	adds	r3, #102	; 0x66
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	481a      	ldr	r0, [pc, #104]	; (8007a08 <Check_Primary_r_Secondary+0x24c>)
 800799e:	f01a fc49 	bl	8022234 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	4916      	ldr	r1, [pc, #88]	; (8007a00 <Check_Primary_r_Secondary+0x244>)
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	4915      	ldr	r1, [pc, #84]	; (8007a04 <Check_Primary_r_Secondary+0x248>)
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80079b6:	79fa      	ldrb	r2, [r7, #7]
 80079b8:	490c      	ldr	r1, [pc, #48]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80079ba:	4613      	mov	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4413      	add	r3, r2
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	440b      	add	r3, r1
 80079c4:	3310      	adds	r3, #16
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80079ca:	79fa      	ldrb	r2, [r7, #7]
 80079cc:	4907      	ldr	r1, [pc, #28]	; (80079ec <Check_Primary_r_Secondary+0x230>)
 80079ce:	4613      	mov	r3, r2
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4413      	add	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	440b      	add	r3, r1
 80079d8:	3304      	adds	r3, #4
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e000      	b.n	80079e2 <Check_Primary_r_Secondary+0x226>
		return;
 80079e0:	bf00      	nop
			//			}
#endif

		}
	}
}
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000304 	.word	0x20000304
 80079ec:	20001674 	.word	0x20001674
 80079f0:	20001764 	.word	0x20001764
 80079f4:	08024648 	.word	0x08024648
 80079f8:	08024684 	.word	0x08024684
 80079fc:	080246c0 	.word	0x080246c0
 8007a00:	20000fa4 	.word	0x20000fa4
 8007a04:	20000fcc 	.word	0x20000fcc
 8007a08:	080246f8 	.word	0x080246f8

08007a0c <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	4aac      	ldr	r2, [pc, #688]	; (8007ccc <Check_Vital_CRC+0x2c0>)
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	f000 814f 	beq.w	8007cc4 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007a26:	79fa      	ldrb	r2, [r7, #7]
 8007a28:	49a9      	ldr	r1, [pc, #676]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	440b      	add	r3, r1
 8007a34:	3308      	adds	r3, #8
 8007a36:	6819      	ldr	r1, [r3, #0]
 8007a38:	79fa      	ldrb	r2, [r7, #7]
 8007a3a:	48a6      	ldr	r0, [pc, #664]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4403      	add	r3, r0
 8007a46:	3308      	adds	r3, #8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	f000 8092 	beq.w	8007b74 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	49a0      	ldr	r1, [pc, #640]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3308      	adds	r3, #8
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8086 	beq.w	8007b74 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007a68:	79fa      	ldrb	r2, [r7, #7]
 8007a6a:	4999      	ldr	r1, [pc, #612]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	440b      	add	r3, r1
 8007a76:	3304      	adds	r3, #4
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d104      	bne.n	8007a88 <Check_Vital_CRC+0x7c>
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	4a95      	ldr	r2, [pc, #596]	; (8007cd8 <Check_Vital_CRC+0x2cc>)
 8007a82:	5cd3      	ldrb	r3, [r2, r3]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d175      	bne.n	8007b74 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a88:	79fa      	ldrb	r2, [r7, #7]
 8007a8a:	4991      	ldr	r1, [pc, #580]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	440b      	add	r3, r1
 8007a96:	3308      	adds	r3, #8
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	79fa      	ldrb	r2, [r7, #7]
 8007a9c:	488d      	ldr	r0, [pc, #564]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4403      	add	r3, r0
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	1acb      	subs	r3, r1, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	425b      	neglt	r3, r3
 8007ab4:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d104      	bne.n	8007ac6 <Check_Vital_CRC+0xba>
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	4a87      	ldr	r2, [pc, #540]	; (8007cdc <Check_Vital_CRC+0x2d0>)
 8007ac0:	5cd3      	ldrb	r3, [r2, r3]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d14c      	bne.n	8007b60 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	4a84      	ldr	r2, [pc, #528]	; (8007cdc <Check_Vital_CRC+0x2d0>)
 8007aca:	2100      	movs	r1, #0
 8007acc:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	4a7e      	ldr	r2, [pc, #504]	; (8007ccc <Check_Vital_CRC+0x2c0>)
 8007ad2:	3366      	adds	r3, #102	; 0x66
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4880      	ldr	r0, [pc, #512]	; (8007ce0 <Check_Vital_CRC+0x2d4>)
 8007ade:	f01a fba9 	bl	8022234 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007ae2:	79fa      	ldrb	r2, [r7, #7]
 8007ae4:	497a      	ldr	r1, [pc, #488]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	3308      	adds	r3, #8
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	487b      	ldr	r0, [pc, #492]	; (8007ce4 <Check_Vital_CRC+0x2d8>)
 8007af8:	f01a fb9c 	bl	8022234 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007afc:	79fa      	ldrb	r2, [r7, #7]
 8007afe:	4975      	ldr	r1, [pc, #468]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007b00:	4613      	mov	r3, r2
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	4413      	add	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	440b      	add	r3, r1
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4875      	ldr	r0, [pc, #468]	; (8007ce8 <Check_Vital_CRC+0x2dc>)
 8007b12:	f01a fb8f 	bl	8022234 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007b16:	4875      	ldr	r0, [pc, #468]	; (8007cec <Check_Vital_CRC+0x2e0>)
 8007b18:	f01a fc28 	bl	802236c <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	79f9      	ldrb	r1, [r7, #7]
 8007b20:	486c      	ldr	r0, [pc, #432]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007b22:	4613      	mov	r3, r2
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4413      	add	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4403      	add	r3, r0
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	486f      	ldr	r0, [pc, #444]	; (8007cf0 <Check_Vital_CRC+0x2e4>)
 8007b32:	010b      	lsls	r3, r1, #4
 8007b34:	4403      	add	r3, r0
 8007b36:	3308      	adds	r3, #8
 8007b38:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b3a:	79f9      	ldrb	r1, [r7, #7]
 8007b3c:	79fa      	ldrb	r2, [r7, #7]
 8007b3e:	4865      	ldr	r0, [pc, #404]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007b40:	460b      	mov	r3, r1
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	440b      	add	r3, r1
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4403      	add	r3, r0
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	4860      	ldr	r0, [pc, #384]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007b50:	4613      	mov	r3, r2
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4413      	add	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4403      	add	r3, r0
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	6019      	str	r1, [r3, #0]
 8007b5e:	e009      	b.n	8007b74 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d106      	bne.n	8007b74 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4a5c      	ldr	r2, [pc, #368]	; (8007cdc <Check_Vital_CRC+0x2d0>)
 8007b6a:	5cd2      	ldrb	r2, [r2, r3]
 8007b6c:	3201      	adds	r2, #1
 8007b6e:	b2d1      	uxtb	r1, r2
 8007b70:	4a5a      	ldr	r2, [pc, #360]	; (8007cdc <Check_Vital_CRC+0x2d0>)
 8007b72:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007b74:	79fa      	ldrb	r2, [r7, #7]
 8007b76:	4956      	ldr	r1, [pc, #344]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	4413      	add	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	440b      	add	r3, r1
 8007b82:	330c      	adds	r3, #12
 8007b84:	6819      	ldr	r1, [r3, #0]
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	4852      	ldr	r0, [pc, #328]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	4403      	add	r3, r0
 8007b94:	330c      	adds	r3, #12
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	f000 8094 	beq.w	8007cc6 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b9e:	79fa      	ldrb	r2, [r7, #7]
 8007ba0:	494c      	ldr	r1, [pc, #304]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	440b      	add	r3, r1
 8007bac:	330c      	adds	r3, #12
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8088 	beq.w	8007cc6 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007bb6:	79fa      	ldrb	r2, [r7, #7]
 8007bb8:	4945      	ldr	r1, [pc, #276]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007bba:	4613      	mov	r3, r2
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4413      	add	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d104      	bne.n	8007bd6 <Check_Vital_CRC+0x1ca>
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	4a42      	ldr	r2, [pc, #264]	; (8007cd8 <Check_Vital_CRC+0x2cc>)
 8007bd0:	5cd3      	ldrb	r3, [r2, r3]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d177      	bne.n	8007cc6 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bd6:	79fa      	ldrb	r2, [r7, #7]
 8007bd8:	493d      	ldr	r1, [pc, #244]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007bda:	4613      	mov	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	440b      	add	r3, r1
 8007be4:	330c      	adds	r3, #12
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	79fa      	ldrb	r2, [r7, #7]
 8007bea:	483a      	ldr	r0, [pc, #232]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4403      	add	r3, r0
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	1acb      	subs	r3, r1, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb8      	it	lt
 8007c00:	425b      	neglt	r3, r3
 8007c02:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d104      	bne.n	8007c14 <Check_Vital_CRC+0x208>
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4a39      	ldr	r2, [pc, #228]	; (8007cf4 <Check_Vital_CRC+0x2e8>)
 8007c0e:	5cd3      	ldrb	r3, [r2, r3]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d14c      	bne.n	8007cae <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	4a37      	ldr	r2, [pc, #220]	; (8007cf4 <Check_Vital_CRC+0x2e8>)
 8007c18:	2100      	movs	r1, #0
 8007c1a:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <Check_Vital_CRC+0x2c0>)
 8007c20:	3366      	adds	r3, #102	; 0x66
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4833      	ldr	r0, [pc, #204]	; (8007cf8 <Check_Vital_CRC+0x2ec>)
 8007c2c:	f01a fb02 	bl	8022234 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c30:	79fa      	ldrb	r2, [r7, #7]
 8007c32:	4927      	ldr	r1, [pc, #156]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	440b      	add	r3, r1
 8007c3e:	330c      	adds	r3, #12
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	482d      	ldr	r0, [pc, #180]	; (8007cfc <Check_Vital_CRC+0x2f0>)
 8007c46:	f01a faf5 	bl	8022234 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c4a:	79fa      	ldrb	r2, [r7, #7]
 8007c4c:	4921      	ldr	r1, [pc, #132]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	330c      	adds	r3, #12
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4828      	ldr	r0, [pc, #160]	; (8007d00 <Check_Vital_CRC+0x2f4>)
 8007c60:	f01a fae8 	bl	8022234 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007c64:	4827      	ldr	r0, [pc, #156]	; (8007d04 <Check_Vital_CRC+0x2f8>)
 8007c66:	f01a fb81 	bl	802236c <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c6a:	79fa      	ldrb	r2, [r7, #7]
 8007c6c:	79f9      	ldrb	r1, [r7, #7]
 8007c6e:	4819      	ldr	r0, [pc, #100]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4403      	add	r3, r0
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	481c      	ldr	r0, [pc, #112]	; (8007cf0 <Check_Vital_CRC+0x2e4>)
 8007c80:	010b      	lsls	r3, r1, #4
 8007c82:	4403      	add	r3, r0
 8007c84:	330c      	adds	r3, #12
 8007c86:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c88:	79f9      	ldrb	r1, [r7, #7]
 8007c8a:	79fa      	ldrb	r2, [r7, #7]
 8007c8c:	4811      	ldr	r0, [pc, #68]	; (8007cd4 <Check_Vital_CRC+0x2c8>)
 8007c8e:	460b      	mov	r3, r1
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	440b      	add	r3, r1
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	4403      	add	r3, r0
 8007c98:	330c      	adds	r3, #12
 8007c9a:	6819      	ldr	r1, [r3, #0]
 8007c9c:	480c      	ldr	r0, [pc, #48]	; (8007cd0 <Check_Vital_CRC+0x2c4>)
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	4413      	add	r3, r2
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	4403      	add	r3, r0
 8007ca8:	330c      	adds	r3, #12
 8007caa:	6019      	str	r1, [r3, #0]
 8007cac:	e00b      	b.n	8007cc6 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d108      	bne.n	8007cc6 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	4a0f      	ldr	r2, [pc, #60]	; (8007cf4 <Check_Vital_CRC+0x2e8>)
 8007cb8:	5cd2      	ldrb	r2, [r2, r3]
 8007cba:	3201      	adds	r2, #1
 8007cbc:	b2d1      	uxtb	r1, r2
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	; (8007cf4 <Check_Vital_CRC+0x2e8>)
 8007cc0:	54d1      	strb	r1, [r2, r3]
 8007cc2:	e000      	b.n	8007cc6 <Check_Vital_CRC+0x2ba>
		return;
 8007cc4:	bf00      	nop
				}
			}
		}
	}
}
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20000304 	.word	0x20000304
 8007cd0:	20001674 	.word	0x20001674
 8007cd4:	20001764 	.word	0x20001764
 8007cd8:	20000ff4 	.word	0x20000ff4
 8007cdc:	20002020 	.word	0x20002020
 8007ce0:	08024734 	.word	0x08024734
 8007ce4:	08024778 	.word	0x08024778
 8007ce8:	0802479c 	.word	0x0802479c
 8007cec:	080247c0 	.word	0x080247c0
 8007cf0:	200011c4 	.word	0x200011c4
 8007cf4:	2000202c 	.word	0x2000202c
 8007cf8:	080247e8 	.word	0x080247e8
 8007cfc:	0802482c 	.word	0x0802482c
 8007d00:	08024850 	.word	0x08024850
 8007d04:	08024874 	.word	0x08024874

08007d08 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <Check_Other_EiPC_Packet+0x38>)
 8007d16:	4413      	add	r3, r2
 8007d18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d007      	beq.n	8007d30 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fd4a 	bl	80077bc <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fe6e 	bl	8007a0c <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f98e 	bl	8009054 <CheckOtherLinkStatus>
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000304 	.word	0x20000304

08007d44 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007d4e:	4930      	ldr	r1, [pc, #192]	; (8007e10 <CheckLinkEstablishTimeout+0xcc>)
 8007d50:	4830      	ldr	r0, [pc, #192]	; (8007e14 <CheckLinkEstablishTimeout+0xd0>)
 8007d52:	f7f8 fa75 	bl	8000240 <strcmp>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d055      	beq.n	8007e08 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	71fb      	strb	r3, [r7, #7]
 8007d60:	e04b      	b.n	8007dfa <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	4a2c      	ldr	r2, [pc, #176]	; (8007e18 <CheckLinkEstablishTimeout+0xd4>)
 8007d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f007 f884 	bl	800ee78 <HAL_Elaps_Ticks>
 8007d70:	4602      	mov	r2, r0
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	4929      	ldr	r1, [pc, #164]	; (8007e1c <CheckLinkEstablishTimeout+0xd8>)
 8007d76:	339e      	adds	r3, #158	; 0x9e
 8007d78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d939      	bls.n	8007df4 <CheckLinkEstablishTimeout+0xb0>
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <CheckLinkEstablishTimeout+0xdc>)
 8007d84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	4923      	ldr	r1, [pc, #140]	; (8007e18 <CheckLinkEstablishTimeout+0xd4>)
 8007d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d02f      	beq.n	8007df4 <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d94:	79fa      	ldrb	r2, [r7, #7]
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	491f      	ldr	r1, [pc, #124]	; (8007e18 <CheckLinkEstablishTimeout+0xd4>)
 8007d9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d9e:	4920      	ldr	r1, [pc, #128]	; (8007e20 <CheckLinkEstablishTimeout+0xdc>)
 8007da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <CheckLinkEstablishTimeout+0xd8>)
 8007da8:	3366      	adds	r3, #102	; 0x66
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4619      	mov	r1, r3
 8007db2:	481c      	ldr	r0, [pc, #112]	; (8007e24 <CheckLinkEstablishTimeout+0xe0>)
 8007db4:	f01a fa3e 	bl	8022234 <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <CheckLinkEstablishTimeout+0xe4>)
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007dc0:	79fa      	ldrb	r2, [r7, #7]
 8007dc2:	491a      	ldr	r1, [pc, #104]	; (8007e2c <CheckLinkEstablishTimeout+0xe8>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	440b      	add	r3, r1
 8007dce:	3310      	adds	r3, #16
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	79fc      	ldrb	r4, [r7, #7]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f007 f84f 	bl	800ee78 <HAL_Elaps_Ticks>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4913      	ldr	r1, [pc, #76]	; (8007e2c <CheckLinkEstablishTimeout+0xe8>)
 8007dde:	4623      	mov	r3, r4
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	4423      	add	r3, r4
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	440b      	add	r3, r1
 8007de8:	3310      	adds	r3, #16
 8007dea:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 f930 	bl	8009054 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	3301      	adds	r3, #1
 8007df8:	71fb      	strb	r3, [r7, #7]
 8007dfa:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <CheckLinkEstablishTimeout+0xd8>)
 8007dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e00:	79fa      	ldrb	r2, [r7, #7]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d3ad      	bcc.n	8007d62 <CheckLinkEstablishTimeout+0x1e>
 8007e06:	e000      	b.n	8007e0a <CheckLinkEstablishTimeout+0xc6>
		return;
 8007e08:	bf00      	nop
		}
	}
}
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd90      	pop	{r4, r7, pc}
 8007e10:	08023a40 	.word	0x08023a40
 8007e14:	20000305 	.word	0x20000305
 8007e18:	20000f14 	.word	0x20000f14
 8007e1c:	20000304 	.word	0x20000304
 8007e20:	20002038 	.word	0x20002038
 8007e24:	0802489c 	.word	0x0802489c
 8007e28:	20000f64 	.word	0x20000f64
 8007e2c:	20001674 	.word	0x20001674

08007e30 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e36:	2300      	movs	r3, #0
 8007e38:	71fb      	strb	r3, [r7, #7]
 8007e3a:	e049      	b.n	8007ed0 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	4a29      	ldr	r2, [pc, #164]	; (8007ee4 <Send_Self_Sharing+0xb4>)
 8007e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f007 f817 	bl	800ee78 <HAL_Elaps_Ticks>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <Send_Self_Sharing+0xb8>)
 8007e4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d939      	bls.n	8007eca <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007e56:	79fa      	ldrb	r2, [r7, #7]
 8007e58:	4924      	ldr	r1, [pc, #144]	; (8007eec <Send_Self_Sharing+0xbc>)
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	440b      	add	r3, r1
 8007e64:	3301      	adds	r3, #1
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007e6a:	79f9      	ldrb	r1, [r7, #7]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	4820      	ldr	r0, [pc, #128]	; (8007ef0 <Send_Self_Sharing+0xc0>)
 8007e70:	460b      	mov	r3, r1
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	440b      	add	r3, r1
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4403      	add	r3, r0
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	7818      	ldrb	r0, [r3, #0]
 8007e7e:	491b      	ldr	r1, [pc, #108]	; (8007eec <Send_Self_Sharing+0xbc>)
 8007e80:	4613      	mov	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4413      	add	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	440b      	add	r3, r1
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007e90:	2218      	movs	r2, #24
 8007e92:	2100      	movs	r1, #0
 8007e94:	4817      	ldr	r0, [pc, #92]	; (8007ef4 <Send_Self_Sharing+0xc4>)
 8007e96:	f01a f8e5 	bl	8022064 <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e9a:	79fa      	ldrb	r2, [r7, #7]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	4a11      	ldr	r2, [pc, #68]	; (8007eec <Send_Self_Sharing+0xbc>)
 8007ea6:	4413      	add	r3, r2
 8007ea8:	2218      	movs	r2, #24
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4811      	ldr	r0, [pc, #68]	; (8007ef4 <Send_Self_Sharing+0xc4>)
 8007eae:	f01a f8b1 	bl	8022014 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8007eb2:	f240 2001 	movw	r0, #513	; 0x201
 8007eb6:	f007 fde1 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007eba:	79fc      	ldrb	r4, [r7, #7]
 8007ebc:	f00d fab8 	bl	8015430 <HAL_GetTick>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <Send_Self_Sharing+0xb4>)
 8007ec4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007ec8:	e008      	b.n	8007edc <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	71fb      	strb	r3, [r7, #7]
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <Send_Self_Sharing+0xb8>)
 8007ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ed6:	79fa      	ldrb	r2, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d3af      	bcc.n	8007e3c <Send_Self_Sharing+0xc>
		}
	}
}
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd90      	pop	{r4, r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000e44 	.word	0x20000e44
 8007ee8:	20000304 	.word	0x20000304
 8007eec:	20001674 	.word	0x20001674
 8007ef0:	20001cb0 	.word	0x20001cb0
 8007ef4:	20001854 	.word	0x20001854

08007ef8 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007efc:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <Detect_CAN_Xchange_Failure+0x98>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007f04:	f00b f96c 	bl	80131e0 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007f08:	4922      	ldr	r1, [pc, #136]	; (8007f94 <Detect_CAN_Xchange_Failure+0x9c>)
 8007f0a:	4823      	ldr	r0, [pc, #140]	; (8007f98 <Detect_CAN_Xchange_Failure+0xa0>)
 8007f0c:	f7f8 f998 	bl	8000240 <strcmp>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <Detect_CAN_Xchange_Failure+0x98>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
		return;
 8007f1c:	e036      	b.n	8007f8c <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <Detect_CAN_Xchange_Failure+0xa4>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f006 ffa8 	bl	800ee78 <HAL_Elaps_Ticks>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <Detect_CAN_Xchange_Failure+0xa8>)
 8007f2c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d32b      	bcc.n	8007f8c <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <Detect_CAN_Xchange_Failure+0xac>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <Detect_CAN_Xchange_Failure+0xa4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d025      	beq.n	8007f8c <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007f40:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <Detect_CAN_Xchange_Failure+0x98>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <Detect_CAN_Xchange_Failure+0xa4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <Detect_CAN_Xchange_Failure+0xac>)
 8007f4c:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <Detect_CAN_Xchange_Failure+0xa4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f006 ff90 	bl	800ee78 <HAL_Elaps_Ticks>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <Detect_CAN_Xchange_Failure+0xb0>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	099b      	lsrs	r3, r3, #6
 8007f62:	4619      	mov	r1, r3
 8007f64:	4811      	ldr	r0, [pc, #68]	; (8007fac <Detect_CAN_Xchange_Failure+0xb4>)
 8007f66:	f01a f965 	bl	8022234 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007f6a:	4811      	ldr	r0, [pc, #68]	; (8007fb0 <Detect_CAN_Xchange_Failure+0xb8>)
 8007f6c:	f01a f9fe 	bl	802236c <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007f70:	2218      	movs	r2, #24
 8007f72:	2100      	movs	r1, #0
 8007f74:	480f      	ldr	r0, [pc, #60]	; (8007fb4 <Detect_CAN_Xchange_Failure+0xbc>)
 8007f76:	f01a f875 	bl	8022064 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007f7a:	22a2      	movs	r2, #162	; 0xa2
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	480e      	ldr	r0, [pc, #56]	; (8007fb8 <Detect_CAN_Xchange_Failure+0xc0>)
 8007f80:	f01a f870 	bl	8022064 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f84:	f240 1019 	movw	r0, #281	; 0x119
 8007f88:	f007 fd78 	bl	800fa7c <TransmitCanPkt>
		}
	}
}
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000108 	.word	0x20000108
 8007f94:	08023a40 	.word	0x08023a40
 8007f98:	20000305 	.word	0x20000305
 8007f9c:	20000e40 	.word	0x20000e40
 8007fa0:	20000304 	.word	0x20000304
 8007fa4:	20002060 	.word	0x20002060
 8007fa8:	10624dd3 	.word	0x10624dd3
 8007fac:	080248bc 	.word	0x080248bc
 8007fb0:	080248ec 	.word	0x080248ec
 8007fb4:	20001764 	.word	0x20001764
 8007fb8:	200010e4 	.word	0x200010e4

08007fbc <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b0ae      	sub	sp, #184	; 0xb8
 8007fc0:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	22a6      	movs	r2, #166	; 0xa6
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f01a f848 	bl	8022064 <memset>
	uint16_t Serial_Byte=0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007fda:	4bc8      	ldr	r3, [pc, #800]	; (80082fc <Process_Send_Signals_2_MIE+0x340>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f006 ff4a 	bl	800ee78 <HAL_Elaps_Ticks>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	4bc6      	ldr	r3, [pc, #792]	; (8008300 <Process_Send_Signals_2_MIE+0x344>)
 8007fe8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007fec:	429a      	cmp	r2, r3
 8007fee:	f240 8234 	bls.w	800845a <Process_Send_Signals_2_MIE+0x49e>
	{
		uint8_t Traverser = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008004:	e08f      	b.n	8008126 <Process_Send_Signals_2_MIE+0x16a>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008006:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800800a:	4abe      	ldr	r2, [pc, #760]	; (8008304 <Process_Send_Signals_2_MIE+0x348>)
 800800c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d11d      	bne.n	8008050 <Process_Send_Signals_2_MIE+0x94>
 8008014:	49bc      	ldr	r1, [pc, #752]	; (8008308 <Process_Send_Signals_2_MIE+0x34c>)
 8008016:	48bd      	ldr	r0, [pc, #756]	; (800830c <Process_Send_Signals_2_MIE+0x350>)
 8008018:	f7f8 f912 	bl	8000240 <strcmp>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d016      	beq.n	8008050 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008022:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008026:	4ab6      	ldr	r2, [pc, #728]	; (8008300 <Process_Send_Signals_2_MIE+0x344>)
 8008028:	3366      	adds	r3, #102	; 0x66
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4619      	mov	r1, r3
 8008032:	48b7      	ldr	r0, [pc, #732]	; (8008310 <Process_Send_Signals_2_MIE+0x354>)
 8008034:	f01a f8fe 	bl	8022234 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008038:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	4ab5      	ldr	r2, [pc, #724]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 8008040:	4413      	add	r3, r2
 8008042:	3302      	adds	r3, #2
 8008044:	2210      	movs	r2, #16
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f01a f80b 	bl	8022064 <memset>
				continue;
 800804e:	e065      	b.n	800811c <Process_Send_Signals_2_MIE+0x160>
			}
			Choice = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008056:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800805a:	4aaf      	ldr	r2, [pc, #700]	; (8008318 <Process_Send_Signals_2_MIE+0x35c>)
 800805c:	5cd3      	ldrb	r3, [r2, r3]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d106      	bne.n	8008070 <Process_Send_Signals_2_MIE+0xb4>
 8008062:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800806e:	e005      	b.n	800807c <Process_Send_Signals_2_MIE+0xc0>
 8008070:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(Link_Flag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 800807c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008080:	4aa6      	ldr	r2, [pc, #664]	; (800831c <Process_Send_Signals_2_MIE+0x360>)
 8008082:	5cd3      	ldrb	r3, [r2, r3]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d106      	bne.n	8008096 <Process_Send_Signals_2_MIE+0xda>
 8008088:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008094:	e005      	b.n	80080a2 <Process_Send_Signals_2_MIE+0xe6>
 8008096:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800809a:	f023 0302 	bic.w	r3, r3, #2
 800809e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			switch(Choice)
 80080a2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d005      	beq.n	80080b6 <Process_Send_Signals_2_MIE+0xfa>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd2b      	ble.n	8008106 <Process_Send_Signals_2_MIE+0x14a>
 80080ae:	3b02      	subs	r3, #2
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d828      	bhi.n	8008106 <Process_Send_Signals_2_MIE+0x14a>
 80080b4:	e013      	b.n	80080de <Process_Send_Signals_2_MIE+0x122>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80080b6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	4a95      	ldr	r2, [pc, #596]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 80080be:	4413      	add	r3, r2
 80080c0:	1c98      	adds	r0, r3, #2
 80080c2:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4a94      	ldr	r2, [pc, #592]	; (8008320 <Process_Send_Signals_2_MIE+0x364>)
 80080d0:	4413      	add	r3, r2
 80080d2:	3301      	adds	r3, #1
 80080d4:	2210      	movs	r2, #16
 80080d6:	4619      	mov	r1, r3
 80080d8:	f019 ff9c 	bl	8022014 <memcpy>
				break;
 80080dc:	e01e      	b.n	800811c <Process_Send_Signals_2_MIE+0x160>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80080de:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	4a8b      	ldr	r2, [pc, #556]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 80080e6:	4413      	add	r3, r2
 80080e8:	1c98      	adds	r0, r3, #2
 80080ea:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4a8b      	ldr	r2, [pc, #556]	; (8008324 <Process_Send_Signals_2_MIE+0x368>)
 80080f8:	4413      	add	r3, r2
 80080fa:	3301      	adds	r3, #1
 80080fc:	2210      	movs	r2, #16
 80080fe:	4619      	mov	r1, r3
 8008100:	f019 ff88 	bl	8022014 <memcpy>
				break;
 8008104:	e00a      	b.n	800811c <Process_Send_Signals_2_MIE+0x160>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008106:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	4a81      	ldr	r2, [pc, #516]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 800810e:	4413      	add	r3, r2
 8008110:	3302      	adds	r3, #2
 8008112:	2210      	movs	r2, #16
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f019 ffa4 	bl	8022064 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800811c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008120:	3301      	adds	r3, #1
 8008122:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008126:	4b76      	ldr	r3, [pc, #472]	; (8008300 <Process_Send_Signals_2_MIE+0x344>)
 8008128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800812c:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008130:	429a      	cmp	r2, r3
 8008132:	f4ff af68 	bcc.w	8008006 <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008136:	4974      	ldr	r1, [pc, #464]	; (8008308 <Process_Send_Signals_2_MIE+0x34c>)
 8008138:	4874      	ldr	r0, [pc, #464]	; (800830c <Process_Send_Signals_2_MIE+0x350>)
 800813a:	f7f8 f881 	bl	8000240 <strcmp>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <Process_Send_Signals_2_MIE+0x18e>
		{
			Is_CAN_Exchange_happening = YES;
 8008144:	4b78      	ldr	r3, [pc, #480]	; (8008328 <Process_Send_Signals_2_MIE+0x36c>)
 8008146:	2201      	movs	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 800814a:	4b77      	ldr	r3, [pc, #476]	; (8008328 <Process_Send_Signals_2_MIE+0x36c>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <Process_Send_Signals_2_MIE+0x1ac>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008152:	4876      	ldr	r0, [pc, #472]	; (800832c <Process_Send_Signals_2_MIE+0x370>)
 8008154:	f01a f90a 	bl	802236c <puts>
			printf("Sending Blank Relay statuses\n");
 8008158:	4875      	ldr	r0, [pc, #468]	; (8008330 <Process_Send_Signals_2_MIE+0x374>)
 800815a:	f01a f907 	bl	802236c <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 800815e:	22a2      	movs	r2, #162	; 0xa2
 8008160:	2100      	movs	r1, #0
 8008162:	486c      	ldr	r0, [pc, #432]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 8008164:	f019 ff7e 	bl	8022064 <memset>
		}


		if(Debug_flag == 1)
 8008168:	4b72      	ldr	r3, [pc, #456]	; (8008334 <Process_Send_Signals_2_MIE+0x378>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d133      	bne.n	80081d8 <Process_Send_Signals_2_MIE+0x21c>
		{
			Get_time();
 8008170:	f003 fa0a 	bl	800b588 <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008174:	4b70      	ldr	r3, [pc, #448]	; (8008338 <Process_Send_Signals_2_MIE+0x37c>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	4619      	mov	r1, r3
 800817a:	4b6f      	ldr	r3, [pc, #444]	; (8008338 <Process_Send_Signals_2_MIE+0x37c>)
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	461a      	mov	r2, r3
 8008180:	4b6d      	ldr	r3, [pc, #436]	; (8008338 <Process_Send_Signals_2_MIE+0x37c>)
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	486d      	ldr	r0, [pc, #436]	; (800833c <Process_Send_Signals_2_MIE+0x380>)
 8008186:	f01a f855 	bl	8022234 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 800818a:	2300      	movs	r3, #0
 800818c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008190:	e017      	b.n	80081c2 <Process_Send_Signals_2_MIE+0x206>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008192:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008196:	4a5f      	ldr	r2, [pc, #380]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 8008198:	4413      	add	r3, r2
 800819a:	789b      	ldrb	r3, [r3, #2]
 800819c:	4619      	mov	r1, r3
 800819e:	4868      	ldr	r0, [pc, #416]	; (8008340 <Process_Send_Signals_2_MIE+0x384>)
 80081a0:	f01a f848 	bl	8022234 <iprintf>
				if(((Byte+1)%16)==0)
 80081a4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80081a8:	3301      	adds	r3, #1
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <Process_Send_Signals_2_MIE+0x1fc>
				{
					printf("\n");
 80081b2:	200a      	movs	r0, #10
 80081b4:	f01a f856 	bl	8022264 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80081b8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80081bc:	3301      	adds	r3, #1
 80081be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80081c2:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80081c6:	4b4e      	ldr	r3, [pc, #312]	; (8008300 <Process_Send_Signals_2_MIE+0x344>)
 80081c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	429a      	cmp	r2, r3
 80081d0:	dbdf      	blt.n	8008192 <Process_Send_Signals_2_MIE+0x1d6>
				}
			}
			printf("\n");
 80081d2:	200a      	movs	r0, #10
 80081d4:	f01a f846 	bl	8022264 <putchar>
			//		printf("\n_________________________________________\n");
		}
		TransmitCanPkt(EI_PROCESS_DATA);
 80081d8:	f240 1019 	movw	r0, #281	; 0x119
 80081dc:	f007 fc4e 	bl	800fa7c <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80081e0:	4949      	ldr	r1, [pc, #292]	; (8008308 <Process_Send_Signals_2_MIE+0x34c>)
 80081e2:	484a      	ldr	r0, [pc, #296]	; (800830c <Process_Send_Signals_2_MIE+0x350>)
 80081e4:	f7f8 f82c 	bl	8000240 <strcmp>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 8130 	bne.w	8008450 <Process_Send_Signals_2_MIE+0x494>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 80081f0:	4b54      	ldr	r3, [pc, #336]	; (8008344 <Process_Send_Signals_2_MIE+0x388>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f006 fe3f 	bl	800ee78 <HAL_Elaps_Ticks>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008200:	f0c0 80a8 	bcc.w	8008354 <Process_Send_Signals_2_MIE+0x398>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008204:	4a50      	ldr	r2, [pc, #320]	; (8008348 <Process_Send_Signals_2_MIE+0x38c>)
 8008206:	4b43      	ldr	r3, [pc, #268]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 8008208:	4610      	mov	r0, r2
 800820a:	3302      	adds	r3, #2
 800820c:	22a0      	movs	r2, #160	; 0xa0
 800820e:	4619      	mov	r1, r3
 8008210:	f019 ff00 	bl	8022014 <memcpy>
				Serial_Byte = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800821a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008224:	33b8      	adds	r3, #184	; 0xb8
 8008226:	443b      	add	r3, r7
 8008228:	227e      	movs	r2, #126	; 0x7e
 800822a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800822e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008238:	33b8      	adds	r3, #184	; 0xb8
 800823a:	443b      	add	r3, r7
 800823c:	227e      	movs	r2, #126	; 0x7e
 800823e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008242:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800824c:	33b8      	adds	r3, #184	; 0xb8
 800824e:	443b      	add	r3, r7
 8008250:	227e      	movs	r2, #126	; 0x7e
 8008252:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008256:	4b37      	ldr	r3, [pc, #220]	; (8008334 <Process_Send_Signals_2_MIE+0x378>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d102      	bne.n	8008264 <Process_Send_Signals_2_MIE+0x2a8>
				{
					printf("Sending Signals over Ethernet:\n");
 800825e:	483b      	ldr	r0, [pc, #236]	; (800834c <Process_Send_Signals_2_MIE+0x390>)
 8008260:	f01a f884 	bl	802236c <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008264:	2300      	movs	r3, #0
 8008266:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800826a:	e014      	b.n	8008296 <Process_Send_Signals_2_MIE+0x2da>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 800826c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008270:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008274:	1c59      	adds	r1, r3, #1
 8008276:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 800827a:	4619      	mov	r1, r3
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 800827e:	4413      	add	r3, r2
 8008280:	789a      	ldrb	r2, [r3, #2]
 8008282:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008286:	443b      	add	r3, r7
 8008288:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 800828c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008290:	3301      	adds	r3, #1
 8008292:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008296:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <Process_Send_Signals_2_MIE+0x358>)
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800829e:	429a      	cmp	r2, r3
 80082a0:	d3e4      	bcc.n	800826c <Process_Send_Signals_2_MIE+0x2b0>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80082a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082ac:	33b8      	adds	r3, #184	; 0xb8
 80082ae:	443b      	add	r3, r7
 80082b0:	227f      	movs	r2, #127	; 0x7f
 80082b2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80082b6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082c0:	33b8      	adds	r3, #184	; 0xb8
 80082c2:	443b      	add	r3, r7
 80082c4:	227f      	movs	r2, #127	; 0x7f
 80082c6:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80082ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082d4:	33b8      	adds	r3, #184	; 0xb8
 80082d6:	443b      	add	r3, r7
 80082d8:	227f      	movs	r2, #127	; 0x7f
 80082da:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80082de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082e2:	b2d9      	uxtb	r1, r3
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <Process_Send_Signals_2_MIE+0x394>)
 80082e6:	1d3b      	adds	r3, r7, #4
 80082e8:	6812      	ldr	r2, [r2, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f007 f9e0 	bl	800f6b0 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 80082f0:	f00d f89e 	bl	8015430 <HAL_GetTick>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4a13      	ldr	r2, [pc, #76]	; (8008344 <Process_Send_Signals_2_MIE+0x388>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e0a9      	b.n	8008450 <Process_Send_Signals_2_MIE+0x494>
 80082fc:	20000e70 	.word	0x20000e70
 8008300:	20000304 	.word	0x20000304
 8008304:	20000ec4 	.word	0x20000ec4
 8008308:	08023a40 	.word	0x08023a40
 800830c:	20000305 	.word	0x20000305
 8008310:	08024910 	.word	0x08024910
 8008314:	200010e4 	.word	0x200010e4
 8008318:	20000f70 	.word	0x20000f70
 800831c:	20000f64 	.word	0x20000f64
 8008320:	20001f30 	.word	0x20001f30
 8008324:	20001e68 	.word	0x20001e68
 8008328:	20000108 	.word	0x20000108
 800832c:	08024924 	.word	0x08024924
 8008330:	08024948 	.word	0x08024948
 8008334:	20000645 	.word	0x20000645
 8008338:	20002870 	.word	0x20002870
 800833c:	08024968 	.word	0x08024968
 8008340:	08024990 	.word	0x08024990
 8008344:	20002064 	.word	0x20002064
 8008348:	20002068 	.word	0x20002068
 800834c:	08024998 	.word	0x08024998
 8008350:	20001058 	.word	0x20001058
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008354:	22a0      	movs	r2, #160	; 0xa0
 8008356:	4943      	ldr	r1, [pc, #268]	; (8008464 <Process_Send_Signals_2_MIE+0x4a8>)
 8008358:	4843      	ldr	r0, [pc, #268]	; (8008468 <Process_Send_Signals_2_MIE+0x4ac>)
 800835a:	f019 fe4b 	bl	8021ff4 <memcmp>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d075      	beq.n	8008450 <Process_Send_Signals_2_MIE+0x494>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008364:	4a40      	ldr	r2, [pc, #256]	; (8008468 <Process_Send_Signals_2_MIE+0x4ac>)
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <Process_Send_Signals_2_MIE+0x4b0>)
 8008368:	4610      	mov	r0, r2
 800836a:	3302      	adds	r3, #2
 800836c:	22a0      	movs	r2, #160	; 0xa0
 800836e:	4619      	mov	r1, r3
 8008370:	f019 fe50 	bl	8022014 <memcpy>
				Serial_Byte = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800837a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008384:	33b8      	adds	r3, #184	; 0xb8
 8008386:	443b      	add	r3, r7
 8008388:	227e      	movs	r2, #126	; 0x7e
 800838a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800838e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008398:	33b8      	adds	r3, #184	; 0xb8
 800839a:	443b      	add	r3, r7
 800839c:	227e      	movs	r2, #126	; 0x7e
 800839e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80083a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80083ac:	33b8      	adds	r3, #184	; 0xb8
 80083ae:	443b      	add	r3, r7
 80083b0:	227e      	movs	r2, #126	; 0x7e
 80083b2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 80083b6:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <Process_Send_Signals_2_MIE+0x4b4>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d102      	bne.n	80083c4 <Process_Send_Signals_2_MIE+0x408>
				{
					printf("Sending Signals over Ethernet:\n");
 80083be:	482d      	ldr	r0, [pc, #180]	; (8008474 <Process_Send_Signals_2_MIE+0x4b8>)
 80083c0:	f019 ffd4 	bl	802236c <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083ca:	e014      	b.n	80083f6 <Process_Send_Signals_2_MIE+0x43a>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80083cc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083d4:	1c59      	adds	r1, r3, #1
 80083d6:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80083da:	4619      	mov	r1, r3
 80083dc:	4b23      	ldr	r3, [pc, #140]	; (800846c <Process_Send_Signals_2_MIE+0x4b0>)
 80083de:	4413      	add	r3, r2
 80083e0:	789a      	ldrb	r2, [r3, #2]
 80083e2:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80083e6:	443b      	add	r3, r7
 80083e8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083ec:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80083f0:	3301      	adds	r3, #1
 80083f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083f6:	4b1d      	ldr	r3, [pc, #116]	; (800846c <Process_Send_Signals_2_MIE+0x4b0>)
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3e4      	bcc.n	80083cc <Process_Send_Signals_2_MIE+0x410>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008402:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800840c:	33b8      	adds	r3, #184	; 0xb8
 800840e:	443b      	add	r3, r7
 8008410:	227f      	movs	r2, #127	; 0x7f
 8008412:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008416:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008420:	33b8      	adds	r3, #184	; 0xb8
 8008422:	443b      	add	r3, r7
 8008424:	227f      	movs	r2, #127	; 0x7f
 8008426:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800842a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008434:	33b8      	adds	r3, #184	; 0xb8
 8008436:	443b      	add	r3, r7
 8008438:	227f      	movs	r2, #127	; 0x7f
 800843a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 800843e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008442:	b2d9      	uxtb	r1, r3
 8008444:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <Process_Send_Signals_2_MIE+0x4bc>)
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f007 f930 	bl	800f6b0 <Udp_Send_SigInfo>
			}
			printf("\n");
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008450:	f00c ffee 	bl	8015430 <HAL_GetTick>
 8008454:	4603      	mov	r3, r0
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <Process_Send_Signals_2_MIE+0x4c0>)
 8008458:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 800845a:	bf00      	nop
 800845c:	37b8      	adds	r7, #184	; 0xb8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200010e6 	.word	0x200010e6
 8008468:	20002068 	.word	0x20002068
 800846c:	200010e4 	.word	0x200010e4
 8008470:	20000645 	.word	0x20000645
 8008474:	08024998 	.word	0x08024998
 8008478:	20001058 	.word	0x20001058
 800847c:	20000e70 	.word	0x20000e70

08008480 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008482:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008486:	af04      	add	r7, sp, #16
 8008488:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800848c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800849a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800849e:	4602      	mov	r2, r0
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084a6:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80084aa:	460a      	mov	r2, r1
 80084ac:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 80084ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	3304      	adds	r3, #4
 80084bc:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f019 fdce 	bl	8022064 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80084ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084d2:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <Print_EI_DATA+0x64>
 80084dc:	48a8      	ldr	r0, [pc, #672]	; (8008780 <Print_EI_DATA+0x300>)
 80084de:	f000 f975 	bl	80087cc <Display>
 80084e2:	e002      	b.n	80084ea <Print_EI_DATA+0x6a>
 80084e4:	48a7      	ldr	r0, [pc, #668]	; (8008784 <Print_EI_DATA+0x304>)
 80084e6:	f000 f971 	bl	80087cc <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80084ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	461a      	mov	r2, r3
 80084f8:	2110      	movs	r1, #16
 80084fa:	2000      	movs	r0, #0
 80084fc:	f7f8 f88a 	bl	8000614 <ExtractBits>
 8008500:	4602      	mov	r2, r0
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	49a0      	ldr	r1, [pc, #640]	; (8008788 <Print_EI_DATA+0x308>)
 8008508:	4618      	mov	r0, r3
 800850a:	f01a f84b 	bl	80225a4 <siprintf>
	Display(Print_buff);
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f95a 	bl	80087cc <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008518:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800851c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3303      	adds	r3, #3
 8008524:	461a      	mov	r2, r3
 8008526:	2110      	movs	r1, #16
 8008528:	2000      	movs	r0, #0
 800852a:	f7f8 f873 	bl	8000614 <ExtractBits>
 800852e:	4602      	mov	r2, r0
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	4995      	ldr	r1, [pc, #596]	; (800878c <Print_EI_DATA+0x30c>)
 8008536:	4618      	mov	r0, r3
 8008538:	f01a f834 	bl	80225a4 <siprintf>
	Display(Print_buff);
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f943 	bl	80087cc <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 8008546:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800854a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3307      	adds	r3, #7
 8008552:	461a      	mov	r2, r3
 8008554:	2108      	movs	r1, #8
 8008556:	2000      	movs	r0, #0
 8008558:	f7f8 f85c 	bl	8000614 <ExtractBits>
 800855c:	4603      	mov	r3, r0
 800855e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008562:	488b      	ldr	r0, [pc, #556]	; (8008790 <Print_EI_DATA+0x310>)
 8008564:	f000 f932 	bl	80087cc <Display>
	switch(Msg_type)
 8008568:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800856c:	3b01      	subs	r3, #1
 800856e:	2b05      	cmp	r3, #5
 8008570:	d829      	bhi.n	80085c6 <Print_EI_DATA+0x146>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <Print_EI_DATA+0xf8>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008591 	.word	0x08008591
 800857c:	080085af 	.word	0x080085af
 8008580:	080085c7 	.word	0x080085c7
 8008584:	080085b7 	.word	0x080085b7
 8008588:	080085c7 	.word	0x080085c7
 800858c:	080085bf 	.word	0x080085bf
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008590:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008594:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <Print_EI_DATA+0x126>
 800859e:	487d      	ldr	r0, [pc, #500]	; (8008794 <Print_EI_DATA+0x314>)
 80085a0:	f000 f914 	bl	80087cc <Display>
		//Display("INIT     ");
		break;
 80085a4:	e012      	b.n	80085cc <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80085a6:	487c      	ldr	r0, [pc, #496]	; (8008798 <Print_EI_DATA+0x318>)
 80085a8:	f000 f910 	bl	80087cc <Display>
		break;
 80085ac:	e00e      	b.n	80085cc <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 80085ae:	487b      	ldr	r0, [pc, #492]	; (800879c <Print_EI_DATA+0x31c>)
 80085b0:	f000 f90c 	bl	80087cc <Display>
		break;
 80085b4:	e00a      	b.n	80085cc <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 80085b6:	487a      	ldr	r0, [pc, #488]	; (80087a0 <Print_EI_DATA+0x320>)
 80085b8:	f000 f908 	bl	80087cc <Display>
		break;
 80085bc:	e006      	b.n	80085cc <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80085be:	4879      	ldr	r0, [pc, #484]	; (80087a4 <Print_EI_DATA+0x324>)
 80085c0:	f000 f904 	bl	80087cc <Display>
		break;
 80085c4:	e002      	b.n	80085cc <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80085c6:	4878      	ldr	r0, [pc, #480]	; (80087a8 <Print_EI_DATA+0x328>)
 80085c8:	f000 f900 	bl	80087cc <Display>
	}
	Display("|");
 80085cc:	4877      	ldr	r0, [pc, #476]	; (80087ac <Print_EI_DATA+0x32c>)
 80085ce:	f000 f8fd 	bl	80087cc <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80085d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3305      	adds	r3, #5
 80085de:	461a      	mov	r2, r3
 80085e0:	2108      	movs	r1, #8
 80085e2:	2000      	movs	r0, #0
 80085e4:	f7f8 f816 	bl	8000614 <ExtractBits>
 80085e8:	4602      	mov	r2, r0
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	4970      	ldr	r1, [pc, #448]	; (80087b0 <Print_EI_DATA+0x330>)
 80085f0:	4618      	mov	r0, r3
 80085f2:	f019 ffd7 	bl	80225a4 <siprintf>
	Display(Print_buff);
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f8e6 	bl	80087cc <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008600:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008604:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3306      	adds	r3, #6
 800860c:	461a      	mov	r2, r3
 800860e:	2108      	movs	r1, #8
 8008610:	2000      	movs	r0, #0
 8008612:	f7f7 ffff 	bl	8000614 <ExtractBits>
 8008616:	4602      	mov	r2, r0
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4965      	ldr	r1, [pc, #404]	; (80087b4 <Print_EI_DATA+0x334>)
 800861e:	4618      	mov	r0, r3
 8008620:	f019 ffc0 	bl	80225a4 <siprintf>
	Display(Print_buff);
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f8cf 	bl	80087cc <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 800862e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008632:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	461a      	mov	r2, r3
 800863c:	2110      	movs	r1, #16
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 ffe8 	bl	8000614 <ExtractBits>
 8008644:	4603      	mov	r3, r0
 8008646:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800864a:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 800864e:	f107 030c 	add.w	r3, r7, #12
 8008652:	4959      	ldr	r1, [pc, #356]	; (80087b8 <Print_EI_DATA+0x338>)
 8008654:	4618      	mov	r0, r3
 8008656:	f019 ffa5 	bl	80225a4 <siprintf>
	Display(Print_buff);
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f8b4 	bl	80087cc <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008664:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008668:	095b      	lsrs	r3, r3, #5
 800866a:	b29b      	uxth	r3, r3
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d03f      	beq.n	80086f4 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008674:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008678:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330a      	adds	r3, #10
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461d      	mov	r5, r3
 8008684:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008688:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	330b      	adds	r3, #11
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461e      	mov	r6, r3
 8008694:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008698:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086a8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	330d      	adds	r3, #13
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	4619      	mov	r1, r3
 80086b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	330e      	adds	r3, #14
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	461c      	mov	r4, r3
 80086c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	330f      	adds	r3, #15
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f107 000c 	add.w	r0, r7, #12
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	9402      	str	r4, [sp, #8]
 80086da:	9101      	str	r1, [sp, #4]
 80086dc:	9200      	str	r2, [sp, #0]
 80086de:	4633      	mov	r3, r6
 80086e0:	462a      	mov	r2, r5
 80086e2:	4936      	ldr	r1, [pc, #216]	; (80087bc <Print_EI_DATA+0x33c>)
 80086e4:	f019 ff5e 	bl	80225a4 <siprintf>
		Display(Print_buff);
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f86d 	bl	80087cc <Display>
 80086f2:	e002      	b.n	80086fa <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80086f4:	4832      	ldr	r0, [pc, #200]	; (80087c0 <Print_EI_DATA+0x340>)
 80086f6:	f000 f869 	bl	80087cc <Display>
	}
	if(Debug_flag == 1)
 80086fa:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <Print_EI_DATA+0x344>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d139      	bne.n	8008776 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008702:	2300      	movs	r3, #0
 8008704:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008708:	e019      	b.n	800873e <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 800870a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800870e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008712:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	4929      	ldr	r1, [pc, #164]	; (80087c8 <Print_EI_DATA+0x348>)
 8008724:	4618      	mov	r0, r3
 8008726:	f019 ff3d 	bl	80225a4 <siprintf>
			Display(Print_buff);
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f84c 	bl	80087cc <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008734:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008738:	3301      	adds	r3, #1
 800873a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800873e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008742:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008746:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3dc      	bcc.n	800870a <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008750:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008754:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	22f6      	movs	r2, #246	; 0xf6
 8008764:	4918      	ldr	r1, [pc, #96]	; (80087c8 <Print_EI_DATA+0x348>)
 8008766:	4618      	mov	r0, r3
 8008768:	f019 ff1c 	bl	80225a4 <siprintf>
			Display(Print_buff);
 800876c:	f107 030c 	add.w	r3, r7, #12
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f82b 	bl	80087cc <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008776:	bf00      	nop
 8008778:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800877c:	46bd      	mov	sp, r7
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008780:	080249b8 	.word	0x080249b8
 8008784:	080249bc 	.word	0x080249bc
 8008788:	080249c0 	.word	0x080249c0
 800878c:	080249c8 	.word	0x080249c8
 8008790:	080249d0 	.word	0x080249d0
 8008794:	080249d4 	.word	0x080249d4
 8008798:	080249dc 	.word	0x080249dc
 800879c:	080249e4 	.word	0x080249e4
 80087a0:	080249e8 	.word	0x080249e8
 80087a4:	080249ec 	.word	0x080249ec
 80087a8:	080249f0 	.word	0x080249f0
 80087ac:	08024a04 	.word	0x08024a04
 80087b0:	08024a08 	.word	0x08024a08
 80087b4:	08024a14 	.word	0x08024a14
 80087b8:	08024a20 	.word	0x08024a20
 80087bc:	08024a2c 	.word	0x08024a2c
 80087c0:	08024a50 	.word	0x08024a50
 80087c4:	20000645 	.word	0x20000645
 80087c8:	08024990 	.word	0x08024990

080087cc <Display>:

void Display(char *Data)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80087d8:	e00a      	b.n	80087f0 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	4619      	mov	r1, r3
 80087e4:	2000      	movs	r0, #0
 80087e6:	f00c fbcb 	bl	8014f80 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	3301      	adds	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1ee      	bne.n	80087da <Display+0xe>
	}
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 8008808:	b5b0      	push	{r4, r5, r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008812:	4890      	ldr	r0, [pc, #576]	; (8008a54 <print_self_Details+0x24c>)
 8008814:	f019 fdaa 	bl	802236c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008818:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <print_self_Details+0x250>)
 800881a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800881e:	4619      	mov	r1, r3
 8008820:	488e      	ldr	r0, [pc, #568]	; (8008a5c <print_self_Details+0x254>)
 8008822:	f019 fd07 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008826:	4b8c      	ldr	r3, [pc, #560]	; (8008a58 <print_self_Details+0x250>)
 8008828:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800882c:	4619      	mov	r1, r3
 800882e:	488c      	ldr	r0, [pc, #560]	; (8008a60 <print_self_Details+0x258>)
 8008830:	f019 fd00 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008834:	4b88      	ldr	r3, [pc, #544]	; (8008a58 <print_self_Details+0x250>)
 8008836:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800883a:	4619      	mov	r1, r3
 800883c:	4889      	ldr	r0, [pc, #548]	; (8008a64 <print_self_Details+0x25c>)
 800883e:	f019 fcf9 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008842:	4b85      	ldr	r3, [pc, #532]	; (8008a58 <print_self_Details+0x250>)
 8008844:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008848:	4619      	mov	r1, r3
 800884a:	4887      	ldr	r0, [pc, #540]	; (8008a68 <print_self_Details+0x260>)
 800884c:	f019 fcf2 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008850:	4b81      	ldr	r3, [pc, #516]	; (8008a58 <print_self_Details+0x250>)
 8008852:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008856:	4619      	mov	r1, r3
 8008858:	4884      	ldr	r0, [pc, #528]	; (8008a6c <print_self_Details+0x264>)
 800885a:	f019 fceb 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800885e:	4b7e      	ldr	r3, [pc, #504]	; (8008a58 <print_self_Details+0x250>)
 8008860:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008864:	4619      	mov	r1, r3
 8008866:	4882      	ldr	r0, [pc, #520]	; (8008a70 <print_self_Details+0x268>)
 8008868:	f019 fce4 	bl	8022234 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 800886c:	4b7a      	ldr	r3, [pc, #488]	; (8008a58 <print_self_Details+0x250>)
 800886e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008872:	4619      	mov	r1, r3
 8008874:	4879      	ldr	r0, [pc, #484]	; (8008a5c <print_self_Details+0x254>)
 8008876:	f019 fcdd 	bl	8022234 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800887a:	2300      	movs	r3, #0
 800887c:	71fb      	strb	r3, [r7, #7]
 800887e:	e03b      	b.n	80088f8 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008880:	79f9      	ldrb	r1, [r7, #7]
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	4a74      	ldr	r2, [pc, #464]	; (8008a58 <print_self_Details+0x250>)
 8008886:	3312      	adds	r3, #18
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	78db      	ldrb	r3, [r3, #3]
 800888e:	461c      	mov	r4, r3
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	4a71      	ldr	r2, [pc, #452]	; (8008a58 <print_self_Details+0x250>)
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800889c:	461d      	mov	r5, r3
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	4a6d      	ldr	r2, [pc, #436]	; (8008a58 <print_self_Details+0x250>)
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80088aa:	4618      	mov	r0, r3
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	4a6a      	ldr	r2, [pc, #424]	; (8008a58 <print_self_Details+0x250>)
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	9000      	str	r0, [sp, #0]
 80088bc:	462b      	mov	r3, r5
 80088be:	4622      	mov	r2, r4
 80088c0:	486c      	ldr	r0, [pc, #432]	; (8008a74 <print_self_Details+0x26c>)
 80088c2:	f019 fcb7 	bl	8022234 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80088c6:	79f9      	ldrb	r1, [r7, #7]
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	4a63      	ldr	r2, [pc, #396]	; (8008a58 <print_self_Details+0x250>)
 80088cc:	333e      	adds	r3, #62	; 0x3e
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	461a      	mov	r2, r3
 80088d6:	4868      	ldr	r0, [pc, #416]	; (8008a78 <print_self_Details+0x270>)
 80088d8:	f019 fcac 	bl	8022234 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80088dc:	79f9      	ldrb	r1, [r7, #7]
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4a5d      	ldr	r2, [pc, #372]	; (8008a58 <print_self_Details+0x250>)
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80088ea:	461a      	mov	r2, r3
 80088ec:	4863      	ldr	r0, [pc, #396]	; (8008a7c <print_self_Details+0x274>)
 80088ee:	f019 fca1 	bl	8022234 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	3301      	adds	r3, #1
 80088f6:	71fb      	strb	r3, [r7, #7]
 80088f8:	4b57      	ldr	r3, [pc, #348]	; (8008a58 <print_self_Details+0x250>)
 80088fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088fe:	79fa      	ldrb	r2, [r7, #7]
 8008900:	429a      	cmp	r2, r3
 8008902:	d3bd      	bcc.n	8008880 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8008904:	4b54      	ldr	r3, [pc, #336]	; (8008a58 <print_self_Details+0x250>)
 8008906:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800890a:	4619      	mov	r1, r3
 800890c:	4b52      	ldr	r3, [pc, #328]	; (8008a58 <print_self_Details+0x250>)
 800890e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008912:	461a      	mov	r2, r3
 8008914:	4b50      	ldr	r3, [pc, #320]	; (8008a58 <print_self_Details+0x250>)
 8008916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800891a:	4618      	mov	r0, r3
 800891c:	4b4e      	ldr	r3, [pc, #312]	; (8008a58 <print_self_Details+0x250>)
 800891e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4603      	mov	r3, r0
 8008926:	4856      	ldr	r0, [pc, #344]	; (8008a80 <print_self_Details+0x278>)
 8008928:	f019 fc84 	bl	8022234 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 800892c:	4b4a      	ldr	r3, [pc, #296]	; (8008a58 <print_self_Details+0x250>)
 800892e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008932:	4618      	mov	r0, r3
 8008934:	4b48      	ldr	r3, [pc, #288]	; (8008a58 <print_self_Details+0x250>)
 8008936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800893a:	461c      	mov	r4, r3
 800893c:	4b46      	ldr	r3, [pc, #280]	; (8008a58 <print_self_Details+0x250>)
 800893e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008942:	461d      	mov	r5, r3
 8008944:	4b44      	ldr	r3, [pc, #272]	; (8008a58 <print_self_Details+0x250>)
 8008946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800894a:	461a      	mov	r2, r3
 800894c:	4b42      	ldr	r3, [pc, #264]	; (8008a58 <print_self_Details+0x250>)
 800894e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008952:	4619      	mov	r1, r3
 8008954:	4b40      	ldr	r3, [pc, #256]	; (8008a58 <print_self_Details+0x250>)
 8008956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	9101      	str	r1, [sp, #4]
 800895e:	9200      	str	r2, [sp, #0]
 8008960:	462b      	mov	r3, r5
 8008962:	4622      	mov	r2, r4
 8008964:	4601      	mov	r1, r0
 8008966:	4847      	ldr	r0, [pc, #284]	; (8008a84 <print_self_Details+0x27c>)
 8008968:	f019 fc64 	bl	8022234 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800896c:	4b3a      	ldr	r3, [pc, #232]	; (8008a58 <print_self_Details+0x250>)
 800896e:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008972:	4619      	mov	r1, r3
 8008974:	4844      	ldr	r0, [pc, #272]	; (8008a88 <print_self_Details+0x280>)
 8008976:	f019 fc5d 	bl	8022234 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800897a:	2300      	movs	r3, #0
 800897c:	71fb      	strb	r3, [r7, #7]
 800897e:	e05c      	b.n	8008a3a <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	3301      	adds	r3, #1
 8008984:	4619      	mov	r1, r3
 8008986:	4841      	ldr	r0, [pc, #260]	; (8008a8c <print_self_Details+0x284>)
 8008988:	f019 fc54 	bl	8022234 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	4a32      	ldr	r2, [pc, #200]	; (8008a58 <print_self_Details+0x250>)
 8008990:	3366      	adds	r3, #102	; 0x66
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4619      	mov	r1, r3
 800899a:	483d      	ldr	r0, [pc, #244]	; (8008a90 <print_self_Details+0x288>)
 800899c:	f019 fc4a 	bl	8022234 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	4a2d      	ldr	r2, [pc, #180]	; (8008a58 <print_self_Details+0x250>)
 80089a4:	3370      	adds	r3, #112	; 0x70
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4619      	mov	r1, r3
 80089ae:	4839      	ldr	r0, [pc, #228]	; (8008a94 <print_self_Details+0x28c>)
 80089b0:	f019 fc40 	bl	8022234 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	4a28      	ldr	r2, [pc, #160]	; (8008a58 <print_self_Details+0x250>)
 80089b8:	33f4      	adds	r3, #244	; 0xf4
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	889b      	ldrh	r3, [r3, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	4835      	ldr	r0, [pc, #212]	; (8008a98 <print_self_Details+0x290>)
 80089c4:	f019 fc36 	bl	8022234 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <print_self_Details+0x250>)
 80089cc:	4413      	add	r3, r2
 80089ce:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80089d2:	4619      	mov	r1, r3
 80089d4:	4831      	ldr	r0, [pc, #196]	; (8008a9c <print_self_Details+0x294>)
 80089d6:	f019 fc2d 	bl	8022234 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <print_self_Details+0x250>)
 80089de:	4413      	add	r3, r2
 80089e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089e4:	4619      	mov	r1, r3
 80089e6:	482e      	ldr	r0, [pc, #184]	; (8008aa0 <print_self_Details+0x298>)
 80089e8:	f019 fc24 	bl	8022234 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	4a1a      	ldr	r2, [pc, #104]	; (8008a58 <print_self_Details+0x250>)
 80089f0:	4413      	add	r3, r2
 80089f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089f6:	4619      	mov	r1, r3
 80089f8:	482a      	ldr	r0, [pc, #168]	; (8008aa4 <print_self_Details+0x29c>)
 80089fa:	f019 fc1b 	bl	8022234 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <print_self_Details+0x250>)
 8008a02:	338a      	adds	r3, #138	; 0x8a
 8008a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4827      	ldr	r0, [pc, #156]	; (8008aa8 <print_self_Details+0x2a0>)
 8008a0c:	f019 fc12 	bl	8022234 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	4a11      	ldr	r2, [pc, #68]	; (8008a58 <print_self_Details+0x250>)
 8008a14:	3394      	adds	r3, #148	; 0x94
 8008a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4823      	ldr	r0, [pc, #140]	; (8008aac <print_self_Details+0x2a4>)
 8008a1e:	f019 fc09 	bl	8022234 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	4a0c      	ldr	r2, [pc, #48]	; (8008a58 <print_self_Details+0x250>)
 8008a26:	339e      	adds	r3, #158	; 0x9e
 8008a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4820      	ldr	r0, [pc, #128]	; (8008ab0 <print_self_Details+0x2a8>)
 8008a30:	f019 fc00 	bl	8022234 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	3301      	adds	r3, #1
 8008a38:	71fb      	strb	r3, [r7, #7]
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <print_self_Details+0x250>)
 8008a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d39c      	bcc.n	8008980 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008a46:	4803      	ldr	r0, [pc, #12]	; (8008a54 <print_self_Details+0x24c>)
 8008a48:	f019 fc90 	bl	802236c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bdb0      	pop	{r4, r5, r7, pc}
 8008a54:	08024ac4 	.word	0x08024ac4
 8008a58:	20000304 	.word	0x20000304
 8008a5c:	08024b18 	.word	0x08024b18
 8008a60:	08024b3c 	.word	0x08024b3c
 8008a64:	08024b60 	.word	0x08024b60
 8008a68:	08024b8c 	.word	0x08024b8c
 8008a6c:	08024bb8 	.word	0x08024bb8
 8008a70:	08024be4 	.word	0x08024be4
 8008a74:	08024c10 	.word	0x08024c10
 8008a78:	08024c30 	.word	0x08024c30
 8008a7c:	08024c40 	.word	0x08024c40
 8008a80:	08024c50 	.word	0x08024c50
 8008a84:	08024c6c 	.word	0x08024c6c
 8008a88:	08024c9c 	.word	0x08024c9c
 8008a8c:	08024cb0 	.word	0x08024cb0
 8008a90:	08024cc4 	.word	0x08024cc4
 8008a94:	08024ce0 	.word	0x08024ce0
 8008a98:	08024cfc 	.word	0x08024cfc
 8008a9c:	08024d18 	.word	0x08024d18
 8008aa0:	08024d30 	.word	0x08024d30
 8008aa4:	08024d44 	.word	0x08024d44
 8008aa8:	08024d58 	.word	0x08024d58
 8008aac:	08024d74 	.word	0x08024d74
 8008ab0:	08024d90 	.word	0x08024d90

08008ab4 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008abe:	2300      	movs	r3, #0
 8008ac0:	71fb      	strb	r3, [r7, #7]
 8008ac2:	e054      	b.n	8008b6e <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	4a2f      	ldr	r2, [pc, #188]	; (8008b84 <Send_Init_After_Timeout+0xd0>)
 8008ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d04b      	beq.n	8008b68 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <Send_Init_After_Timeout+0xd0>)
 8008ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f006 f9cd 	bl	800ee78 <HAL_Elaps_Ticks>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	4929      	ldr	r1, [pc, #164]	; (8008b88 <Send_Init_After_Timeout+0xd4>)
 8008ae4:	3394      	adds	r3, #148	; 0x94
 8008ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d93c      	bls.n	8008b68 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <Send_Init_After_Timeout+0xd8>)
 8008af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f006 f9be 	bl	800ee78 <HAL_Elaps_Ticks>
 8008afc:	4602      	mov	r2, r0
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4921      	ldr	r1, [pc, #132]	; (8008b88 <Send_Init_After_Timeout+0xd4>)
 8008b02:	3394      	adds	r3, #148	; 0x94
 8008b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d92d      	bls.n	8008b68 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4a20      	ldr	r2, [pc, #128]	; (8008b90 <Send_Init_After_Timeout+0xdc>)
 8008b10:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d028      	beq.n	8008b68 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	4a1e      	ldr	r2, [pc, #120]	; (8008b94 <Send_Init_After_Timeout+0xe0>)
 8008b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b22:	d921      	bls.n	8008b68 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <Send_Init_After_Timeout+0xd0>)
 8008b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f006 f9a3 	bl	800ee78 <HAL_Elaps_Ticks>
 8008b32:	4603      	mov	r3, r0
 8008b34:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <Send_Init_After_Timeout+0xe4>)
 8008b36:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3a:	099b      	lsrs	r3, r3, #6
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4817      	ldr	r0, [pc, #92]	; (8008b9c <Send_Init_After_Timeout+0xe8>)
 8008b40:	f019 fb78 	bl	8022234 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <Send_Init_After_Timeout+0xec>)
 8008b48:	2101      	movs	r1, #1
 8008b4a:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f9 fbc8 	bl	80022e8 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	4a0d      	ldr	r2, [pc, #52]	; (8008b90 <Send_Init_After_Timeout+0xdc>)
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	4a10      	ldr	r2, [pc, #64]	; (8008ba4 <Send_Init_After_Timeout+0xf0>)
 8008b64:	2101      	movs	r1, #1
 8008b66:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	71fb      	strb	r3, [r7, #7]
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <Send_Init_After_Timeout+0xd4>)
 8008b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b74:	79fa      	ldrb	r2, [r7, #7]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d3a4      	bcc.n	8008ac4 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000fa4 	.word	0x20000fa4
 8008b88:	20000304 	.word	0x20000304
 8008b8c:	20000e9c 	.word	0x20000e9c
 8008b90:	2000108c 	.word	0x2000108c
 8008b94:	20001098 	.word	0x20001098
 8008b98:	10624dd3 	.word	0x10624dd3
 8008b9c:	08024dac 	.word	0x08024dac
 8008ba0:	200010cc 	.word	0x200010cc
 8008ba4:	200010c0 	.word	0x200010c0

08008ba8 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bb2:	e037      	b.n	8008c24 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bb4:	79fa      	ldrb	r2, [r7, #7]
 8008bb6:	4921      	ldr	r1, [pc, #132]	; (8008c3c <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008bb8:	4613      	mov	r3, r2
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	4413      	add	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	440b      	add	r3, r1
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	781b      	ldrb	r3, [r3, #0]
		if(
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d006      	beq.n	8008bd8 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d122      	bne.n	8008c1e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	4a1a      	ldr	r2, [pc, #104]	; (8008c44 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bdc:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d11d      	bne.n	8008c1e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	4a17      	ldr	r2, [pc, #92]	; (8008c44 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008be6:	3302      	adds	r3, #2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f006 f942 	bl	800ee78 <HAL_Elaps_Ticks>
 8008bf4:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bf6:	2b32      	cmp	r3, #50	; 0x32
 8008bf8:	d911      	bls.n	8008c1e <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fb f8a5 	bl	8003d50 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4a0e      	ldr	r2, [pc, #56]	; (8008c44 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	4a0c      	ldr	r2, [pc, #48]	; (8008c44 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008c12:	3302      	adds	r3, #2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	3301      	adds	r3, #1
 8008c22:	71fb      	strb	r3, [r7, #7]
 8008c24:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c2a:	79fa      	ldrb	r2, [r7, #7]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d3c1      	bcc.n	8008bb4 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001674 	.word	0x20001674
 8008c40:	20000304 	.word	0x20000304
 8008c44:	20001c7c 	.word	0x20001c7c

08008c48 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c4e:	2300      	movs	r3, #0
 8008c50:	71fb      	strb	r3, [r7, #7]
 8008c52:	e04e      	b.n	8008cf2 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	4a2c      	ldr	r2, [pc, #176]	; (8008d08 <Check_Recv_Status_fail+0xc0>)
 8008c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d045      	beq.n	8008cec <Check_Recv_Status_fail+0xa4>
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	492a      	ldr	r1, [pc, #168]	; (8008d0c <Check_Recv_Status_fail+0xc4>)
 8008c64:	4613      	mov	r3, r2
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3303      	adds	r3, #3
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d03a      	beq.n	8008cec <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <Check_Recv_Status_fail+0xc0>)
 8008c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f006 f8fa 	bl	800ee78 <HAL_Elaps_Ticks>
 8008c84:	4602      	mov	r2, r0
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	4921      	ldr	r1, [pc, #132]	; (8008d10 <Check_Recv_Status_fail+0xc8>)
 8008c8a:	338a      	adds	r3, #138	; 0x8a
 8008c8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d92b      	bls.n	8008cec <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	4a1e      	ldr	r2, [pc, #120]	; (8008d10 <Check_Recv_Status_fail+0xc8>)
 8008c98:	3366      	adds	r3, #102	; 0x66
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	6859      	ldr	r1, [r3, #4]
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <Check_Recv_Status_fail+0xc8>)
 8008ca4:	338a      	adds	r3, #138	; 0x8a
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <Check_Recv_Status_fail+0xcc>)
 8008cac:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb0:	099b      	lsrs	r3, r3, #6
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4818      	ldr	r0, [pc, #96]	; (8008d18 <Check_Recv_Status_fail+0xd0>)
 8008cb6:	f019 fabd 	bl	8022234 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	4a12      	ldr	r2, [pc, #72]	; (8008d08 <Check_Recv_Status_fail+0xc0>)
 8008cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4815      	ldr	r0, [pc, #84]	; (8008d1c <Check_Recv_Status_fail+0xd4>)
 8008cc6:	f019 fab5 	bl	8022234 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8008cca:	f00c fbb1 	bl	8015430 <HAL_GetTick>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4813      	ldr	r0, [pc, #76]	; (8008d20 <Check_Recv_Status_fail+0xd8>)
 8008cd4:	f019 faae 	bl	8022234 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008cd8:	79fa      	ldrb	r2, [r7, #7]
 8008cda:	490c      	ldr	r1, [pc, #48]	; (8008d0c <Check_Recv_Status_fail+0xc4>)
 8008cdc:	4613      	mov	r3, r2
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	4413      	add	r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	440b      	add	r3, r1
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	2200      	movs	r2, #0
 8008cea:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	71fb      	strb	r3, [r7, #7]
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <Check_Recv_Status_fail+0xc8>)
 8008cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d3aa      	bcc.n	8008c54 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20000fcc 	.word	0x20000fcc
 8008d0c:	20001674 	.word	0x20001674
 8008d10:	20000304 	.word	0x20000304
 8008d14:	10624dd3 	.word	0x10624dd3
 8008d18:	08024dd8 	.word	0x08024dd8
 8008d1c:	08024e0c 	.word	0x08024e0c
 8008d20:	08024e3c 	.word	0x08024e3c

08008d24 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	4a39      	ldr	r2, [pc, #228]	; (8008e24 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d168      	bne.n	8008e1a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008d48:	4b37      	ldr	r3, [pc, #220]	; (8008e28 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d164      	bne.n	8008e1a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d50:	79fa      	ldrb	r2, [r7, #7]
 8008d52:	4936      	ldr	r1, [pc, #216]	; (8008e2c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d54:	4613      	mov	r3, r2
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	4413      	add	r3, r2
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	440b      	add	r3, r1
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 fb15 	bl	800b390 <bcdToDec>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d6e:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d72:	79fa      	ldrb	r2, [r7, #7]
 8008d74:	492d      	ldr	r1, [pc, #180]	; (8008e2c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d76:	4613      	mov	r3, r2
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	4413      	add	r3, r2
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	440b      	add	r3, r1
 8008d80:	3301      	adds	r3, #1
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 fb03 	bl	800b390 <bcdToDec>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4613      	mov	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d96:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d98:	79fa      	ldrb	r2, [r7, #7]
 8008d9a:	4924      	ldr	r1, [pc, #144]	; (8008e2c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	4413      	add	r3, r2
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	440b      	add	r3, r1
 8008da6:	3302      	adds	r3, #2
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 faf0 	bl	800b390 <bcdToDec>
 8008db0:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008db2:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008db4:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008db6:	613b      	str	r3, [r7, #16]

		Get_time();
 8008db8:	f002 fbe6 	bl	800b588 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008dc6:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008dca:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	1a5b      	subs	r3, r3, r1
 8008dd6:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dd8:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008dda:	4a15      	ldr	r2, [pc, #84]	; (8008e30 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008ddc:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008dde:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008de0:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008de2:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bfb8      	it	lt
 8008dee:	425b      	neglt	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	dd12      	ble.n	8008e1a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008dfe:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008e06:	3366      	adds	r3, #102	; 0x66
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4808      	ldr	r0, [pc, #32]	; (8008e34 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008e12:	f019 fa0f 	bl	8022234 <iprintf>
			Return_Value  = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd90      	pop	{r4, r7, pc}
 8008e24:	20000304 	.word	0x20000304
 8008e28:	20000e6c 	.word	0x20000e6c
 8008e2c:	20001188 	.word	0x20001188
 8008e30:	20002870 	.word	0x20002870
 8008e34:	08024e48 	.word	0x08024e48

08008e38 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008e38:	b590      	push	{r4, r7, lr}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008e3e:	2300      	movs	r3, #0
 8008e40:	71fb      	strb	r3, [r7, #7]
 8008e42:	e045      	b.n	8008ed0 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fde0 	bl	8007a0c <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008e4c:	79fa      	ldrb	r2, [r7, #7]
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <Check_All_Peers+0xb0>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f006 f80a 	bl	800ee78 <HAL_Elaps_Ticks>
 8008e64:	4602      	mov	r2, r0
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	4920      	ldr	r1, [pc, #128]	; (8008eec <Check_All_Peers+0xb4>)
 8008e6a:	338a      	adds	r3, #138	; 0x8a
 8008e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d92a      	bls.n	8008eca <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008e74:	79fa      	ldrb	r2, [r7, #7]
 8008e76:	491c      	ldr	r1, [pc, #112]	; (8008ee8 <Check_All_Peers+0xb0>)
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	3301      	adds	r3, #1
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d11f      	bne.n	8008eca <Check_All_Peers+0x92>
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	4a18      	ldr	r2, [pc, #96]	; (8008ef0 <Check_All_Peers+0xb8>)
 8008e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e92:	79fa      	ldrb	r2, [r7, #7]
 8008e94:	4814      	ldr	r0, [pc, #80]	; (8008ee8 <Check_All_Peers+0xb0>)
 8008e96:	4613      	mov	r3, r2
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4403      	add	r3, r0
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d010      	beq.n	8008eca <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008ea8:	79fa      	ldrb	r2, [r7, #7]
 8008eaa:	490f      	ldr	r1, [pc, #60]	; (8008ee8 <Check_All_Peers+0xb0>)
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008ebc:	79fc      	ldrb	r4, [r7, #7]
 8008ebe:	f00c fab7 	bl	8015430 <HAL_GetTick>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4a0a      	ldr	r2, [pc, #40]	; (8008ef0 <Check_All_Peers+0xb8>)
 8008ec6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	71fb      	strb	r3, [r7, #7]
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <Check_All_Peers+0xb4>)
 8008ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ed6:	79fa      	ldrb	r2, [r7, #7]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d3b3      	bcc.n	8008e44 <Check_All_Peers+0xc>
			}
		}
	}
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001cb0 	.word	0x20001cb0
 8008eec:	20000304 	.word	0x20000304
 8008ef0:	20002108 	.word	0x20002108

08008ef4 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008efa:	4949      	ldr	r1, [pc, #292]	; (8009020 <Check_for_RelayMisMatch+0x12c>)
 8008efc:	4849      	ldr	r0, [pc, #292]	; (8009024 <Check_for_RelayMisMatch+0x130>)
 8008efe:	f7f7 f99f 	bl	8000240 <strcmp>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8086 	beq.w	8009016 <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008f0a:	4b47      	ldr	r3, [pc, #284]	; (8009028 <Check_for_RelayMisMatch+0x134>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f005 ffb2 	bl	800ee78 <HAL_Elaps_Ticks>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2bc8      	cmp	r3, #200	; 0xc8
 8008f18:	d97e      	bls.n	8009018 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	71fb      	strb	r3, [r7, #7]
 8008f1e:	e06e      	b.n	8008ffe <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	4a42      	ldr	r2, [pc, #264]	; (800902c <Check_for_RelayMisMatch+0x138>)
 8008f24:	5cd3      	ldrb	r3, [r2, r3]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d116      	bne.n	8008f58 <Check_for_RelayMisMatch+0x64>
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	4a40      	ldr	r2, [pc, #256]	; (8009030 <Check_for_RelayMisMatch+0x13c>)
 8008f2e:	5cd3      	ldrb	r3, [r2, r3]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d111      	bne.n	8008f58 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008f34:	79fa      	ldrb	r2, [r7, #7]
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a3d      	ldr	r2, [pc, #244]	; (8009034 <Check_for_RelayMisMatch+0x140>)
 8008f40:	1898      	adds	r0, r3, r2
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4a3a      	ldr	r2, [pc, #232]	; (8009038 <Check_for_RelayMisMatch+0x144>)
 8008f4e:	4413      	add	r3, r2
 8008f50:	2214      	movs	r2, #20
 8008f52:	4619      	mov	r1, r3
 8008f54:	f019 f85e 	bl	8022014 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008f58:	79fa      	ldrb	r2, [r7, #7]
 8008f5a:	4936      	ldr	r1, [pc, #216]	; (8009034 <Check_for_RelayMisMatch+0x140>)
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	3312      	adds	r3, #18
 8008f68:	8819      	ldrh	r1, [r3, #0]
 8008f6a:	79fa      	ldrb	r2, [r7, #7]
 8008f6c:	4832      	ldr	r0, [pc, #200]	; (8009038 <Check_for_RelayMisMatch+0x144>)
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4403      	add	r3, r0
 8008f78:	3312      	adds	r3, #18
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	d034      	beq.n	8008fea <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	4a2e      	ldr	r2, [pc, #184]	; (800903c <Check_for_RelayMisMatch+0x148>)
 8008f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f005 ff75 	bl	800ee78 <HAL_Elaps_Ticks>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f94:	d32f      	bcc.n	8008ff6 <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4a29      	ldr	r2, [pc, #164]	; (8009040 <Check_for_RelayMisMatch+0x14c>)
 8008f9a:	3366      	adds	r3, #102	; 0x66
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4827      	ldr	r0, [pc, #156]	; (8009044 <Check_for_RelayMisMatch+0x150>)
 8008fa6:	f019 f945 	bl	8022234 <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008faa:	79fa      	ldrb	r2, [r7, #7]
 8008fac:	4921      	ldr	r1, [pc, #132]	; (8009034 <Check_for_RelayMisMatch+0x140>)
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	3312      	adds	r3, #18
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4822      	ldr	r0, [pc, #136]	; (8009048 <Check_for_RelayMisMatch+0x154>)
 8008fc0:	f019 f938 	bl	8022234 <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008fc4:	79fa      	ldrb	r2, [r7, #7]
 8008fc6:	491c      	ldr	r1, [pc, #112]	; (8009038 <Check_for_RelayMisMatch+0x144>)
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3312      	adds	r3, #18
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	481c      	ldr	r0, [pc, #112]	; (800904c <Check_for_RelayMisMatch+0x158>)
 8008fda:	f019 f92b 	bl	8022234 <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	4a1b      	ldr	r2, [pc, #108]	; (8009050 <Check_for_RelayMisMatch+0x15c>)
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fe8:	e006      	b.n	8008ff8 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	4a18      	ldr	r2, [pc, #96]	; (8009050 <Check_for_RelayMisMatch+0x15c>)
 8008fee:	2100      	movs	r1, #0
 8008ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008ff4:	e000      	b.n	8008ff8 <Check_for_RelayMisMatch+0x104>
					continue;
 8008ff6:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	71fb      	strb	r3, [r7, #7]
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <Check_for_RelayMisMatch+0x14c>)
 8009000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009004:	79fa      	ldrb	r2, [r7, #7]
 8009006:	429a      	cmp	r2, r3
 8009008:	d38a      	bcc.n	8008f20 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 800900a:	f00c fa11 	bl	8015430 <HAL_GetTick>
 800900e:	4603      	mov	r3, r0
 8009010:	4a05      	ldr	r2, [pc, #20]	; (8009028 <Check_for_RelayMisMatch+0x134>)
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	e000      	b.n	8009018 <Check_for_RelayMisMatch+0x124>
		return;
 8009016:	bf00      	nop
	}
}
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	08023a40 	.word	0x08023a40
 8009024:	20000305 	.word	0x20000305
 8009028:	20002130 	.word	0x20002130
 800902c:	20000f70 	.word	0x20000f70
 8009030:	20000f64 	.word	0x20000f64
 8009034:	20001e68 	.word	0x20001e68
 8009038:	20001f30 	.word	0x20001f30
 800903c:	20000ed8 	.word	0x20000ed8
 8009040:	20000304 	.word	0x20000304
 8009044:	08024e88 	.word	0x08024e88
 8009048:	08024e94 	.word	0x08024e94
 800904c:	08024ea4 	.word	0x08024ea4
 8009050:	20000ec4 	.word	0x20000ec4

08009054 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800905e:	f00c f9e7 	bl	8015430 <HAL_GetTick>
 8009062:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009064:	79fa      	ldrb	r2, [r7, #7]
 8009066:	492a      	ldr	r1, [pc, #168]	; (8009110 <CheckOtherLinkStatus+0xbc>)
 8009068:	4613      	mov	r3, r2
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	4413      	add	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	440b      	add	r3, r1
 8009072:	3302      	adds	r3, #2
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d11d      	bne.n	80090b6 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	4925      	ldr	r1, [pc, #148]	; (8009114 <CheckOtherLinkStatus+0xc0>)
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009084:	79fa      	ldrb	r2, [r7, #7]
 8009086:	4924      	ldr	r1, [pc, #144]	; (8009118 <CheckOtherLinkStatus+0xc4>)
 8009088:	4613      	mov	r3, r2
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	3304      	adds	r3, #4
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009098:	79fa      	ldrb	r2, [r7, #7]
 800909a:	491f      	ldr	r1, [pc, #124]	; (8009118 <CheckOtherLinkStatus+0xc4>)
 800909c:	4613      	mov	r3, r2
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	3301      	adds	r3, #1
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	4a1b      	ldr	r2, [pc, #108]	; (800911c <CheckOtherLinkStatus+0xc8>)
 80090b0:	2101      	movs	r1, #1
 80090b2:	54d1      	strb	r1, [r2, r3]
 80090b4:	e017      	b.n	80090e6 <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	4a18      	ldr	r2, [pc, #96]	; (800911c <CheckOtherLinkStatus+0xc8>)
 80090ba:	2100      	movs	r1, #0
 80090bc:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80090be:	79fa      	ldrb	r2, [r7, #7]
 80090c0:	4915      	ldr	r1, [pc, #84]	; (8009118 <CheckOtherLinkStatus+0xc4>)
 80090c2:	4613      	mov	r3, r2
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3308      	adds	r3, #8
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 80090d2:	79fa      	ldrb	r2, [r7, #7]
 80090d4:	4910      	ldr	r1, [pc, #64]	; (8009118 <CheckOtherLinkStatus+0xc4>)
 80090d6:	4613      	mov	r3, r2
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	440b      	add	r3, r1
 80090e0:	3301      	adds	r3, #1
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80090e6:	79fa      	ldrb	r2, [r7, #7]
 80090e8:	4909      	ldr	r1, [pc, #36]	; (8009110 <CheckOtherLinkStatus+0xbc>)
 80090ea:	4613      	mov	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	440b      	add	r3, r1
 80090f4:	3301      	adds	r3, #1
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d104      	bne.n	8009106 <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	4908      	ldr	r1, [pc, #32]	; (8009120 <CheckOtherLinkStatus+0xcc>)
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20001764 	.word	0x20001764
 8009114:	20000f3c 	.word	0x20000f3c
 8009118:	20001d28 	.word	0x20001d28
 800911c:	20000f70 	.word	0x20000f70
 8009120:	20000e9c 	.word	0x20000e9c

08009124 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009128:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <SendRelay2_Other+0x70>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f005 fea3 	bl	800ee78 <HAL_Elaps_Ticks>
 8009132:	4603      	mov	r3, r0
 8009134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009138:	d92a      	bls.n	8009190 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 800913a:	2214      	movs	r2, #20
 800913c:	2100      	movs	r1, #0
 800913e:	4816      	ldr	r0, [pc, #88]	; (8009198 <SendRelay2_Other+0x74>)
 8009140:	f018 ff90 	bl	8022064 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009144:	4b15      	ldr	r3, [pc, #84]	; (800919c <SendRelay2_Other+0x78>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a13      	ldr	r2, [pc, #76]	; (80091a0 <SendRelay2_Other+0x7c>)
 8009152:	4413      	add	r3, r2
 8009154:	2214      	movs	r2, #20
 8009156:	4619      	mov	r1, r3
 8009158:	480f      	ldr	r0, [pc, #60]	; (8009198 <SendRelay2_Other+0x74>)
 800915a:	f018 ff5b 	bl	8022014 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800915e:	f240 2007 	movw	r0, #519	; 0x207
 8009162:	f006 fc8b 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <SendRelay2_Other+0x78>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <SendRelay2_Other+0x78>)
 800916e:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <SendRelay2_Other+0x80>)
 8009172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009176:	461a      	mov	r2, r3
 8009178:	4b08      	ldr	r3, [pc, #32]	; (800919c <SendRelay2_Other+0x78>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d102      	bne.n	8009186 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <SendRelay2_Other+0x78>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009186:	f00c f953 	bl	8015430 <HAL_GetTick>
 800918a:	4603      	mov	r3, r0
 800918c:	4a01      	ldr	r2, [pc, #4]	; (8009194 <SendRelay2_Other+0x70>)
 800918e:	6013      	str	r3, [r2, #0]
	}
}
 8009190:	bf00      	nop
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20002134 	.word	0x20002134
 8009198:	20001ff8 	.word	0x20001ff8
 800919c:	20002138 	.word	0x20002138
 80091a0:	20001e68 	.word	0x20001e68
 80091a4:	20000304 	.word	0x20000304

080091a8 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80091ac:	f013 fb3a 	bl	801c824 <MX_LWIP_Process>

		CheckDatRequest();
 80091b0:	f006 fab6 	bl	800f720 <CheckDatRequest>

		CheckEthernetStatus();
 80091b4:	f000 f83c 	bl	8009230 <CheckEthernetStatus>

		HAL_IWDG_Refresh(&hiwdg);
 80091b8:	481a      	ldr	r0, [pc, #104]	; (8009224 <Process_HitachiEI+0x7c>)
 80091ba:	f00f fbab 	bl	8018914 <HAL_IWDG_Refresh>

		Feed_wdt();
 80091be:	f009 fff3 	bl	80131a8 <Feed_wdt>

		readCanToStructs();
 80091c2:	f006 fde1 	bl	800fd88 <readCanToStructs>

		Check_for_cmd();
 80091c6:	f7f7 fcc7 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 80091ca:	f7f7 febf 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 80091ce:	f7f7 ff35 	bl	800103c <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 80091d2:	f7fe fef3 	bl	8007fbc <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 80091d6:	f7fe fe2b 	bl	8007e30 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 80091da:	f7fe fe8d 	bl	8007ef8 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 80091de:	f7fe fdb1 	bl	8007d44 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 80091e2:	f7ff fe29 	bl	8008e38 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 80091e6:	f7ff fcdf 	bl	8008ba8 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 80091ea:	f7ff fc63 	bl	8008ab4 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 80091ee:	f7ff fd2b 	bl	8008c48 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 80091f2:	f002 fa2b 	bl	800b64c <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 80091f6:	f7ff fe7d 	bl	8008ef4 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 80091fa:	f7ff ff93 	bl	8009124 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 80091fe:	f00b f8e5 	bl	80143cc <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <Process_HitachiEI+0x80>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <Process_HitachiEI+0x6a>
		{
			gucFlagUpdate = 3;
 800920a:	4b08      	ldr	r3, [pc, #32]	; (800922c <Process_HitachiEI+0x84>)
 800920c:	2203      	movs	r2, #3
 800920e:	701a      	strb	r2, [r3, #0]
			break;
 8009210:	e002      	b.n	8009218 <Process_HitachiEI+0x70>
		}

		Enable_UART_Interrupts();
 8009212:	f00b fefb 	bl	801500c <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009216:	e7c9      	b.n	80091ac <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009218:	f00a ffd6 	bl	80141c8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <Process_HitachiEI+0x7c>)
 800921e:	f00f fb79 	bl	8018914 <HAL_IWDG_Refresh>
		Data_Processing();
 8009222:	e7f9      	b.n	8009218 <Process_HitachiEI+0x70>
 8009224:	20009ce4 	.word	0x20009ce4
 8009228:	20000644 	.word	0x20000644
 800922c:	20000a49 	.word	0x20000a49

08009230 <CheckEthernetStatus>:
	}
}


void CheckEthernetStatus(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
	int32_t LinkState = DP83848_GetLinkState(&DP83848);
 8009236:	4834      	ldr	r0, [pc, #208]	; (8009308 <CheckEthernetStatus+0xd8>)
 8009238:	f00c f813 	bl	8015262 <DP83848_GetLinkState>
 800923c:	6078      	str	r0, [r7, #4]
	static int32_t PreviousLinkState = 0;


	if(PreviousLinkState != LinkState)
 800923e:	4b33      	ldr	r3, [pc, #204]	; (800930c <CheckEthernetStatus+0xdc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d05a      	beq.n	80092fe <CheckEthernetStatus+0xce>
	{
		PreviousLinkState = LinkState;
 8009248:	4a30      	ldr	r2, [pc, #192]	; (800930c <CheckEthernetStatus+0xdc>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6013      	str	r3, [r2, #0]
		printf("Link State Changed:%ld\n",LinkState);
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	482f      	ldr	r0, [pc, #188]	; (8009310 <CheckEthernetStatus+0xe0>)
 8009252:	f018 ffef 	bl	8022234 <iprintf>
		switch(LinkState)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3305      	adds	r3, #5
 800925a:	2b0b      	cmp	r3, #11
 800925c:	d84a      	bhi.n	80092f4 <CheckEthernetStatus+0xc4>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <CheckEthernetStatus+0x34>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009295 	.word	0x08009295
 8009268:	0800929d 	.word	0x0800929d
 800926c:	080092a5 	.word	0x080092a5
 8009270:	080092ad 	.word	0x080092ad
 8009274:	080092b5 	.word	0x080092b5
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092c5 	.word	0x080092c5
 8009280:	080092cd 	.word	0x080092cd
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092dd 	.word	0x080092dd
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092ed 	.word	0x080092ed
		{
		case DP83848_STATUS_READ_ERROR:
			printf("CurentLinkState:DP83848_STATUS_READ_ERROR\n");
 8009294:	481f      	ldr	r0, [pc, #124]	; (8009314 <CheckEthernetStatus+0xe4>)
 8009296:	f019 f869 	bl	802236c <puts>
			break;
 800929a:	e031      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_WRITE_ERROR:
			printf("CurentLinkState:DP83848_STATUS_WRITE_ERROR\n");
 800929c:	481e      	ldr	r0, [pc, #120]	; (8009318 <CheckEthernetStatus+0xe8>)
 800929e:	f019 f865 	bl	802236c <puts>
			break;
 80092a2:	e02d      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_ADDRESS_ERROR:
			printf("CurentLinkState:DP83848_STATUS_ADDRESS_ERROR\n");
 80092a4:	481d      	ldr	r0, [pc, #116]	; (800931c <CheckEthernetStatus+0xec>)
 80092a6:	f019 f861 	bl	802236c <puts>
			break;
 80092aa:	e029      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_RESET_TIMEOUT:
			printf("CuurentLinkState:DP83848_STATUS_RESET_TIMEOUT\n");
 80092ac:	481c      	ldr	r0, [pc, #112]	; (8009320 <CheckEthernetStatus+0xf0>)
 80092ae:	f019 f85d 	bl	802236c <puts>
			break;
 80092b2:	e025      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_ERROR:
			printf("CuurentLinkState:DP83848_STATUS_ERROR\n");
 80092b4:	481b      	ldr	r0, [pc, #108]	; (8009324 <CheckEthernetStatus+0xf4>)
 80092b6:	f019 f859 	bl	802236c <puts>
			break;
 80092ba:	e021      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_OK:
			printf("CuurentLinkState:DP83848_STATUS_OK\n");
 80092bc:	481a      	ldr	r0, [pc, #104]	; (8009328 <CheckEthernetStatus+0xf8>)
 80092be:	f019 f855 	bl	802236c <puts>
			break;
 80092c2:	e01d      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_LINK_DOWN:
			printf("CuurentLinkState:DP83848_STATUS_LINK_DOWN\n");
 80092c4:	4819      	ldr	r0, [pc, #100]	; (800932c <CheckEthernetStatus+0xfc>)
 80092c6:	f019 f851 	bl	802236c <puts>
			break;
 80092ca:	e019      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_100MBITS_FULLDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_100MBITS_FULLDUPLEX\n");
 80092cc:	4818      	ldr	r0, [pc, #96]	; (8009330 <CheckEthernetStatus+0x100>)
 80092ce:	f019 f84d 	bl	802236c <puts>
			break;
 80092d2:	e015      	b.n	8009300 <CheckEthernetStatus+0xd0>
		case DP83848_STATUS_100MBITS_HALFDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_100MBITS_HALFDUPLEX\n");
 80092d4:	4817      	ldr	r0, [pc, #92]	; (8009334 <CheckEthernetStatus+0x104>)
 80092d6:	f019 f849 	bl	802236c <puts>
			break;
 80092da:	e011      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_10MBITS_FULLDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_10MBITS_FULLDUPLEX\n");
 80092dc:	4816      	ldr	r0, [pc, #88]	; (8009338 <CheckEthernetStatus+0x108>)
 80092de:	f019 f845 	bl	802236c <puts>
			break;
 80092e2:	e00d      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_10MBITS_HALFDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_10MBITS_HALFDUPLEX\n");
 80092e4:	4815      	ldr	r0, [pc, #84]	; (800933c <CheckEthernetStatus+0x10c>)
 80092e6:	f019 f841 	bl	802236c <puts>
			break;
 80092ea:	e009      	b.n	8009300 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_AUTONEGO_NOTDONE:
			printf("CuurentLinkState:DP83848_STATUS_AUTONEGO_NOTDONE\n");
 80092ec:	4814      	ldr	r0, [pc, #80]	; (8009340 <CheckEthernetStatus+0x110>)
 80092ee:	f019 f83d 	bl	802236c <puts>
			break;
 80092f2:	e005      	b.n	8009300 <CheckEthernetStatus+0xd0>

		default:
			printf("UNKNOWN Link State with Value:%ld\n",LinkState);
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4813      	ldr	r0, [pc, #76]	; (8009344 <CheckEthernetStatus+0x114>)
 80092f8:	f018 ff9c 	bl	8022234 <iprintf>

		}

	}

}
 80092fc:	e000      	b.n	8009300 <CheckEthernetStatus+0xd0>
	}
 80092fe:	bf00      	nop
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200107b8 	.word	0x200107b8
 800930c:	2000213c 	.word	0x2000213c
 8009310:	08024eb4 	.word	0x08024eb4
 8009314:	08024ecc 	.word	0x08024ecc
 8009318:	08024ef8 	.word	0x08024ef8
 800931c:	08024f24 	.word	0x08024f24
 8009320:	08024f54 	.word	0x08024f54
 8009324:	08024f84 	.word	0x08024f84
 8009328:	08024fac 	.word	0x08024fac
 800932c:	08024fd0 	.word	0x08024fd0
 8009330:	08024ffc 	.word	0x08024ffc
 8009334:	08025030 	.word	0x08025030
 8009338:	08025064 	.word	0x08025064
 800933c:	08025098 	.word	0x08025098
 8009340:	080250cc 	.word	0x080250cc
 8009344:	08025100 	.word	0x08025100

08009348 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800934e:	4b26      	ldr	r3, [pc, #152]	; (80093e8 <reset_cause_get+0xa0>)
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	2b00      	cmp	r3, #0
 8009354:	da02      	bge.n	800935c <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8009356:	2301      	movs	r3, #1
 8009358:	71fb      	strb	r3, [r7, #7]
 800935a:	e037      	b.n	80093cc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800935c:	4b22      	ldr	r3, [pc, #136]	; (80093e8 <reset_cause_get+0xa0>)
 800935e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8009368:	2302      	movs	r3, #2
 800936a:	71fb      	strb	r3, [r7, #7]
 800936c:	e02e      	b.n	80093cc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800936e:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <reset_cause_get+0xa0>)
 8009370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800937a:	2303      	movs	r3, #3
 800937c:	71fb      	strb	r3, [r7, #7]
 800937e:	e025      	b.n	80093cc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8009380:	4b19      	ldr	r3, [pc, #100]	; (80093e8 <reset_cause_get+0xa0>)
 8009382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800938c:	2304      	movs	r3, #4
 800938e:	71fb      	strb	r3, [r7, #7]
 8009390:	e01c      	b.n	80093cc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <reset_cause_get+0xa0>)
 8009394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800939e:	2305      	movs	r3, #5
 80093a0:	71fb      	strb	r3, [r7, #7]
 80093a2:	e013      	b.n	80093cc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80093a4:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <reset_cause_get+0xa0>)
 80093a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 80093b0:	2306      	movs	r3, #6
 80093b2:	71fb      	strb	r3, [r7, #7]
 80093b4:	e00a      	b.n	80093cc <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <reset_cause_get+0xa0>)
 80093b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 80093c2:	2307      	movs	r3, #7
 80093c4:	71fb      	strb	r3, [r7, #7]
 80093c6:	e001      	b.n	80093cc <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 80093c8:	2300      	movs	r3, #0
 80093ca:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <reset_cause_get+0xa0>)
 80093ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d0:	4a05      	ldr	r2, [pc, #20]	; (80093e8 <reset_cause_get+0xa0>)
 80093d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093d6:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 80093d8:	79fb      	ldrb	r3, [r7, #7]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	40023800 	.word	0x40023800

080093ec <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 80093f6:	4b1c      	ldr	r3, [pc, #112]	; (8009468 <reset_cause_get_name+0x7c>)
 80093f8:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b07      	cmp	r3, #7
 80093fe:	d82b      	bhi.n	8009458 <reset_cause_get_name+0x6c>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <reset_cause_get_name+0x1c>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009429 	.word	0x08009429
 800940c:	0800942f 	.word	0x0800942f
 8009410:	08009435 	.word	0x08009435
 8009414:	0800943b 	.word	0x0800943b
 8009418:	08009441 	.word	0x08009441
 800941c:	08009447 	.word	0x08009447
 8009420:	0800944d 	.word	0x0800944d
 8009424:	08009453 	.word	0x08009453
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8009428:	4b10      	ldr	r3, [pc, #64]	; (800946c <reset_cause_get_name+0x80>)
 800942a:	60fb      	str	r3, [r7, #12]
            break;
 800942c:	e014      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800942e:	4b10      	ldr	r3, [pc, #64]	; (8009470 <reset_cause_get_name+0x84>)
 8009430:	60fb      	str	r3, [r7, #12]
            break;
 8009432:	e011      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <reset_cause_get_name+0x88>)
 8009436:	60fb      	str	r3, [r7, #12]
            break;
 8009438:	e00e      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <reset_cause_get_name+0x8c>)
 800943c:	60fb      	str	r3, [r7, #12]
            break;
 800943e:	e00b      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <reset_cause_get_name+0x90>)
 8009442:	60fb      	str	r3, [r7, #12]
            break;
 8009444:	e008      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8009446:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <reset_cause_get_name+0x94>)
 8009448:	60fb      	str	r3, [r7, #12]
            break;
 800944a:	e005      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <reset_cause_get_name+0x98>)
 800944e:	60fb      	str	r3, [r7, #12]
            break;
 8009450:	e002      	b.n	8009458 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <reset_cause_get_name+0x9c>)
 8009454:	60fb      	str	r3, [r7, #12]
            break;
 8009456:	bf00      	nop
    }

    return reset_cause_name;
 8009458:	68fb      	ldr	r3, [r7, #12]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	08025124 	.word	0x08025124
 800946c:	08025128 	.word	0x08025128
 8009470:	08025130 	.word	0x08025130
 8009474:	08025140 	.word	0x08025140
 8009478:	08025158 	.word	0x08025158
 800947c:	08025174 	.word	0x08025174
 8009480:	08025184 	.word	0x08025184
 8009484:	080251b4 	.word	0x080251b4
 8009488:	080251d0 	.word	0x080251d0

0800948c <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8009490:	f00a ff9c 	bl	80143cc <Print_BuildDat_Details>

		readCanToStructs();
 8009494:	f006 fc78 	bl	800fd88 <readCanToStructs>

		Feed_wdt();
 8009498:	f009 fe86 	bl	80131a8 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800949c:	480f      	ldr	r0, [pc, #60]	; (80094dc <Process_Medha_EI+0x50>)
 800949e:	f00f fa39 	bl	8018914 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 80094a2:	f000 f91d 	bl	80096e0 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 80094a6:	f000 fed3 	bl	800a250 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 80094aa:	f000 ff39 	bl	800a320 <Process_Clear_Relays>

		Send_Data_to_Other();
 80094ae:	f000 ffcf 	bl	800a450 <Send_Data_to_Other>

		Process_Data_from_Other();
 80094b2:	f001 f827 	bl	800a504 <Process_Data_from_Other>

		CheckforMedhaCMD();
 80094b6:	f001 f9ed 	bl	800a894 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <Process_Medha_EI+0x54>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 80094c2:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <Process_Medha_EI+0x58>)
 80094c4:	2203      	movs	r2, #3
 80094c6:	701a      	strb	r2, [r3, #0]
			break;
 80094c8:	e002      	b.n	80094d0 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 80094ca:	f00b fd9f 	bl	801500c <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 80094ce:	e7df      	b.n	8009490 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80094d0:	4802      	ldr	r0, [pc, #8]	; (80094dc <Process_Medha_EI+0x50>)
 80094d2:	f00f fa1f 	bl	8018914 <HAL_IWDG_Refresh>
		Data_Processing();
 80094d6:	f00a fe77 	bl	80141c8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80094da:	e7f9      	b.n	80094d0 <Process_Medha_EI+0x44>
 80094dc:	20009ce4 	.word	0x20009ce4
 80094e0:	20000644 	.word	0x20000644
 80094e4:	20000a49 	.word	0x20000a49

080094e8 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
 80094f4:	4613      	mov	r3, r2
 80094f6:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80094fc:	2300      	movs	r3, #0
 80094fe:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 8009500:	e0d0      	b.n	80096a4 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	4618      	mov	r0, r3
 8009506:	f00b fc6b 	bl	8014de0 <Com_Get_Byte>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	4b6c      	ldr	r3, [pc, #432]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 8009510:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 8009512:	4b6c      	ldr	r3, [pc, #432]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	3b01      	subs	r3, #1
 8009518:	2b04      	cmp	r3, #4
 800951a:	f200 80c2 	bhi.w	80096a2 <Get_Medha_EI_Message+0x1ba>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <Get_Medha_EI_Message+0x3c>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	08009539 	.word	0x08009539
 8009528:	08009551 	.word	0x08009551
 800952c:	080096a3 	.word	0x080096a3
 8009530:	0800959d 	.word	0x0800959d
 8009534:	080095f5 	.word	0x080095f5
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 8009538:	4b61      	ldr	r3, [pc, #388]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b53      	cmp	r3, #83	; 0x53
 800953e:	f040 80b1 	bne.w	80096a4 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 8009542:	4b61      	ldr	r3, [pc, #388]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009544:	2201      	movs	r2, #1
 8009546:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8009548:	4b5e      	ldr	r3, [pc, #376]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 800954a:	2202      	movs	r2, #2
 800954c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800954e:	e0a9      	b.n	80096a4 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8009550:	4b5d      	ldr	r3, [pc, #372]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d111      	bne.n	800957c <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8009558:	4b5b      	ldr	r3, [pc, #364]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	4413      	add	r3, r2
 8009562:	4a57      	ldr	r2, [pc, #348]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	701a      	strb	r2, [r3, #0]
					i++;
 8009568:	4b57      	ldr	r3, [pc, #348]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	3301      	adds	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	4b55      	ldr	r3, [pc, #340]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009572:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009574:	4b53      	ldr	r3, [pc, #332]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 8009576:	2204      	movs	r2, #4
 8009578:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800957a:	e00d      	b.n	8009598 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800957c:	4b52      	ldr	r3, [pc, #328]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a4e      	ldr	r2, [pc, #312]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	701a      	strb	r2, [r3, #0]
					i++;
 800958c:	4b4e      	ldr	r3, [pc, #312]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009596:	801a      	strh	r2, [r3, #0]
				break;
 8009598:	bf00      	nop
			}
			break;
 800959a:	e083      	b.n	80096a4 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800959c:	4b4a      	ldr	r3, [pc, #296]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	3b02      	subs	r3, #2
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 80095ac:	4b47      	ldr	r3, [pc, #284]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	801a      	strh	r2, [r3, #0]
				j=1;
 80095b2:	4b47      	ldr	r3, [pc, #284]	; (80096d0 <Get_Medha_EI_Message+0x1e8>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 80095b8:	4b43      	ldr	r3, [pc, #268]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	4413      	add	r3, r2
 80095c2:	4a3f      	ldr	r2, [pc, #252]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 80095c4:	7812      	ldrb	r2, [r2, #0]
 80095c6:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 80095c8:	4b40      	ldr	r3, [pc, #256]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	3301      	adds	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	4b3e      	ldr	r3, [pc, #248]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 80095d2:	801a      	strh	r2, [r3, #0]
				i++;
 80095d4:	4b3c      	ldr	r3, [pc, #240]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	4b3a      	ldr	r3, [pc, #232]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 80095de:	801a      	strh	r2, [r3, #0]
				j++;
 80095e0:	4b3b      	ldr	r3, [pc, #236]	; (80096d0 <Get_Medha_EI_Message+0x1e8>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	4b39      	ldr	r3, [pc, #228]	; (80096d0 <Get_Medha_EI_Message+0x1e8>)
 80095ea:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80095ec:	4b35      	ldr	r3, [pc, #212]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 80095ee:	2205      	movs	r2, #5
 80095f0:	701a      	strb	r2, [r3, #0]
				break;
 80095f2:	e057      	b.n	80096a4 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80095f4:	4b34      	ldr	r3, [pc, #208]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	4413      	add	r3, r2
 80095fe:	4a30      	ldr	r2, [pc, #192]	; (80096c0 <Get_Medha_EI_Message+0x1d8>)
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 8009604:	89ba      	ldrh	r2, [r7, #12]
 8009606:	4b31      	ldr	r3, [pc, #196]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d940      	bls.n	8009690 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800960e:	4b2f      	ldr	r3, [pc, #188]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	b29a      	uxth	r2, r3
 8009616:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 8009618:	801a      	strh	r2, [r3, #0]
					i++;
 800961a:	4b2b      	ldr	r3, [pc, #172]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	3301      	adds	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009624:	801a      	strh	r2, [r3, #0]
					j++;
 8009626:	4b2a      	ldr	r3, [pc, #168]	; (80096d0 <Get_Medha_EI_Message+0x1e8>)
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	4b28      	ldr	r3, [pc, #160]	; (80096d0 <Get_Medha_EI_Message+0x1e8>)
 8009630:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 8009632:	89ba      	ldrh	r2, [r7, #12]
 8009634:	4b25      	ldr	r3, [pc, #148]	; (80096cc <Get_Medha_EI_Message+0x1e4>)
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d133      	bne.n	80096a4 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800963c:	4b22      	ldr	r3, [pc, #136]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	3b04      	subs	r3, #4
 8009642:	b29a      	uxth	r2, r3
 8009644:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <Get_Medha_EI_Message+0x1ec>)
 8009646:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009648:	4b22      	ldr	r3, [pc, #136]	; (80096d4 <Get_Medha_EI_Message+0x1ec>)
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800964e:	4b1e      	ldr	r3, [pc, #120]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009650:	2200      	movs	r2, #0
 8009652:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009654:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 8009656:	2201      	movs	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800965e:	89fb      	ldrh	r3, [r7, #14]
 8009660:	2b04      	cmp	r3, #4
 8009662:	d804      	bhi.n	800966e <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009664:	481c      	ldr	r0, [pc, #112]	; (80096d8 <Get_Medha_EI_Message+0x1f0>)
 8009666:	f018 fe81 	bl	802236c <puts>
							return ZERO;
 800966a:	2300      	movs	r3, #0
 800966c:	e023      	b.n	80096b6 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800966e:	4b19      	ldr	r3, [pc, #100]	; (80096d4 <Get_Medha_EI_Message+0x1ec>)
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	2000      	movs	r0, #0
 8009678:	f001 fbce 	bl	800ae18 <CheckCRC32>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	e017      	b.n	80096b6 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 8009686:	4815      	ldr	r0, [pc, #84]	; (80096dc <Get_Medha_EI_Message+0x1f4>)
 8009688:	f018 fe70 	bl	802236c <puts>
							return ZERO;
 800968c:	2300      	movs	r3, #0
 800968e:	e012      	b.n	80096b6 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <Get_Medha_EI_Message+0x1e0>)
 8009692:	2200      	movs	r2, #0
 8009694:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <Get_Medha_EI_Message+0x1dc>)
 8009698:	2201      	movs	r2, #1
 800969a:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	81bb      	strh	r3, [r7, #12]
				}
				break;
 80096a0:	e000      	b.n	80096a4 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 80096a2:	bf00      	nop
	while(Com_DataReady(ComPort))
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f00b fb5a 	bl	8014d60 <Com_DataReady>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f af27 	bne.w	8009502 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	2000283c 	.word	0x2000283c
 80096c4:	20000116 	.word	0x20000116
 80096c8:	2000283e 	.word	0x2000283e
 80096cc:	20002840 	.word	0x20002840
 80096d0:	20002842 	.word	0x20002842
 80096d4:	20002844 	.word	0x20002844
 80096d8:	080251e8 	.word	0x080251e8
 80096dc:	080251f0 	.word	0x080251f0

080096e0 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80096e0:	b5b0      	push	{r4, r5, r7, lr}
 80096e2:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80096e6:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80096ee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	3304      	adds	r3, #4
 80096fc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f018 fcae 	bl	8022064 <memset>
	uint16_t NoOfInputs 		= 0;
 8009708:	2300      	movs	r3, #0
 800970a:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800970e:	2300      	movs	r3, #0
 8009710:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 8009714:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009718:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	3304      	adds	r3, #4
 8009722:	227c      	movs	r2, #124	; 0x7c
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f018 fc9c 	bl	8022064 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800972c:	2300      	movs	r3, #0
 800972e:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 8009738:	4bbf      	ldr	r3, [pc, #764]	; (8009a38 <Medha_EI_Analyser+0x358>)
 800973a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800973e:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fece 	bl	80094e8 <Get_Medha_EI_Message>
 800974c:	4603      	mov	r3, r0
 800974e:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 8009752:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009756:	2b05      	cmp	r3, #5
 8009758:	d934      	bls.n	80097c4 <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 800975a:	48b8      	ldr	r0, [pc, #736]	; (8009a3c <Medha_EI_Analyser+0x35c>)
 800975c:	f018 fe06 	bl	802236c <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009760:	2300      	movs	r3, #0
 8009762:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009766:	e024      	b.n	80097b2 <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 8009768:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800976c:	2b00      	cmp	r3, #0
 800976e:	d010      	beq.n	8009792 <Medha_EI_Analyser+0xb2>
 8009770:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009774:	4bb2      	ldr	r3, [pc, #712]	; (8009a40 <Medha_EI_Analyser+0x360>)
 8009776:	fba3 1302 	umull	r1, r3, r3, r2
 800977a:	08d9      	lsrs	r1, r3, #3
 800977c:	460b      	mov	r3, r1
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	b29b      	uxth	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 800978c:	200a      	movs	r0, #10
 800978e:	f018 fd69 	bl	8022264 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009792:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009796:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800979a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800979e:	5cd3      	ldrb	r3, [r2, r3]
 80097a0:	4619      	mov	r1, r3
 80097a2:	48a8      	ldr	r0, [pc, #672]	; (8009a44 <Medha_EI_Analyser+0x364>)
 80097a4:	f018 fd46 	bl	8022234 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 80097a8:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 80097ac:	3301      	adds	r3, #1
 80097ae:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 80097b2:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 80097b6:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3d4      	bcc.n	8009768 <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 80097be:	200a      	movs	r0, #10
 80097c0:	f018 fd50 	bl	8022264 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 80097c4:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 83ba 	beq.w	8009f42 <Medha_EI_Analyser+0x862>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80097ce:	463b      	mov	r3, r7
 80097d0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f018 fc44 	bl	8022064 <memset>

		BYTEINIT(0);
 80097dc:	2300      	movs	r3, #0
 80097de:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80097e2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097e6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097ea:	4413      	add	r3, r2
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097f2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097f6:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80097f8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097fc:	3301      	adds	r3, #1
 80097fe:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 8009802:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009806:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29a      	uxth	r2, r3
 8009810:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009814:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009818:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800981a:	4b87      	ldr	r3, [pc, #540]	; (8009a38 <Medha_EI_Analyser+0x358>)
 800981c:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 8009820:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009824:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009828:	889b      	ldrh	r3, [r3, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d010      	beq.n	8009850 <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800982e:	4886      	ldr	r0, [pc, #536]	; (8009a48 <Medha_EI_Analyser+0x368>)
 8009830:	f018 fd9c 	bl	802236c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009834:	4b80      	ldr	r3, [pc, #512]	; (8009a38 <Medha_EI_Analyser+0x358>)
 8009836:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800983a:	4619      	mov	r1, r3
 800983c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009840:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009844:	889b      	ldrh	r3, [r3, #4]
 8009846:	461a      	mov	r2, r3
 8009848:	4880      	ldr	r0, [pc, #512]	; (8009a4c <Medha_EI_Analyser+0x36c>)
 800984a:	f018 fcf3 	bl	8022234 <iprintf>
			return;
 800984e:	e37b      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 8009850:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009854:	3302      	adds	r3, #2
 8009856:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800985a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800985e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009862:	4413      	add	r3, r2
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29a      	uxth	r2, r3
 8009868:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800986c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009870:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009872:	4b71      	ldr	r3, [pc, #452]	; (8009a38 <Medha_EI_Analyser+0x358>)
 8009874:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009878:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800987c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	429a      	cmp	r2, r3
 8009884:	d010      	beq.n	80098a8 <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009886:	4872      	ldr	r0, [pc, #456]	; (8009a50 <Medha_EI_Analyser+0x370>)
 8009888:	f018 fd70 	bl	802236c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800988c:	4b6a      	ldr	r3, [pc, #424]	; (8009a38 <Medha_EI_Analyser+0x358>)
 800988e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009892:	4619      	mov	r1, r3
 8009894:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009898:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	461a      	mov	r2, r3
 80098a0:	486a      	ldr	r0, [pc, #424]	; (8009a4c <Medha_EI_Analyser+0x36c>)
 80098a2:	f018 fcc7 	bl	8022234 <iprintf>
			return;
 80098a6:	e34f      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 80098a8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098ac:	3302      	adds	r3, #2
 80098ae:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 80098b2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098b6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80098ba:	4413      	add	r3, r2
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098c2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098c6:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 80098c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098cc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098d0:	799b      	ldrb	r3, [r3, #6]
 80098d2:	2baa      	cmp	r3, #170	; 0xaa
 80098d4:	d010      	beq.n	80098f8 <Medha_EI_Analyser+0x218>
 80098d6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098da:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098de:	799b      	ldrb	r3, [r3, #6]
 80098e0:	2bbb      	cmp	r3, #187	; 0xbb
 80098e2:	d009      	beq.n	80098f8 <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80098e4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ec:	799b      	ldrb	r3, [r3, #6]
 80098ee:	4619      	mov	r1, r3
 80098f0:	4858      	ldr	r0, [pc, #352]	; (8009a54 <Medha_EI_Analyser+0x374>)
 80098f2:	f018 fc9f 	bl	8022234 <iprintf>
			return;
 80098f6:	e327      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(1);
 80098f8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098fc:	3301      	adds	r3, #1
 80098fe:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 8009902:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009906:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800990a:	4413      	add	r3, r2
 800990c:	781a      	ldrb	r2, [r3, #0]
 800990e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009912:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009916:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 8009918:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800991c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009920:	79db      	ldrb	r3, [r3, #7]
 8009922:	2be1      	cmp	r3, #225	; 0xe1
 8009924:	d009      	beq.n	800993a <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 8009926:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800992a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800992e:	79db      	ldrb	r3, [r3, #7]
 8009930:	4619      	mov	r1, r3
 8009932:	4849      	ldr	r0, [pc, #292]	; (8009a58 <Medha_EI_Analyser+0x378>)
 8009934:	f018 fc7e 	bl	8022234 <iprintf>
			return;
 8009938:	e306      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 800993a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800993e:	3301      	adds	r3, #1
 8009940:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009944:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009948:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800994c:	4413      	add	r3, r2
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29a      	uxth	r2, r3
 8009952:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009956:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800995a:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800995c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009960:	3302      	adds	r3, #2
 8009962:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009966:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800996a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800996e:	4413      	add	r3, r2
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009976:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800997a:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800997c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009980:	3301      	adds	r3, #1
 8009982:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009986:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800998a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800998e:	441a      	add	r2, r3
 8009990:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009994:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009998:	330b      	adds	r3, #11
 800999a:	6811      	ldr	r1, [r2, #0]
 800999c:	6019      	str	r1, [r3, #0]
 800999e:	8891      	ldrh	r1, [r2, #4]
 80099a0:	7992      	ldrb	r2, [r2, #6]
 80099a2:	8099      	strh	r1, [r3, #4]
 80099a4:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 80099a6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099aa:	3307      	adds	r3, #7
 80099ac:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 80099b0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099b4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80099b8:	4413      	add	r3, r2
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099c0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099c4:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 80099c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099ce:	7c9b      	ldrb	r3, [r3, #18]
 80099d0:	2b11      	cmp	r3, #17
 80099d2:	d009      	beq.n	80099e8 <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80099d4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099d8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099dc:	7c9b      	ldrb	r3, [r3, #18]
 80099de:	4619      	mov	r1, r3
 80099e0:	481e      	ldr	r0, [pc, #120]	; (8009a5c <Medha_EI_Analyser+0x37c>)
 80099e2:	f018 fc27 	bl	8022234 <iprintf>
			return;
 80099e6:	e2af      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 80099e8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099ec:	3301      	adds	r3, #1
 80099ee:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80099f2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099f6:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80099fa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099fe:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009a02:	4413      	add	r3, r2
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a0c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a10:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 8009a12:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a16:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a1a:	8a9b      	ldrh	r3, [r3, #20]
 8009a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a20:	d920      	bls.n	8009a64 <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009a22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a2a:	8a9b      	ldrh	r3, [r3, #20]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	480c      	ldr	r0, [pc, #48]	; (8009a60 <Medha_EI_Analyser+0x380>)
 8009a30:	f018 fc00 	bl	8022234 <iprintf>
			return;
 8009a34:	e288      	b.n	8009f48 <Medha_EI_Analyser+0x868>
 8009a36:	bf00      	nop
 8009a38:	20000304 	.word	0x20000304
 8009a3c:	080251f8 	.word	0x080251f8
 8009a40:	cccccccd 	.word	0xcccccccd
 8009a44:	08025204 	.word	0x08025204
 8009a48:	0802520c 	.word	0x0802520c
 8009a4c:	08025240 	.word	0x08025240
 8009a50:	08025264 	.word	0x08025264
 8009a54:	08025294 	.word	0x08025294
 8009a58:	080252cc 	.word	0x080252cc
 8009a5c:	08025304 	.word	0x08025304
 8009a60:	08025348 	.word	0x08025348
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009a64:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a68:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a6c:	8a9a      	ldrh	r2, [r3, #20]
 8009a6e:	4ba6      	ldr	r3, [pc, #664]	; (8009d08 <Medha_EI_Analyser+0x628>)
 8009a70:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d014      	beq.n	8009aa2 <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009a78:	4ba3      	ldr	r3, [pc, #652]	; (8009d08 <Medha_EI_Analyser+0x628>)
 8009a7a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a84:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a88:	8a9b      	ldrh	r3, [r3, #20]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	489f      	ldr	r0, [pc, #636]	; (8009d0c <Medha_EI_Analyser+0x62c>)
 8009a8e:	f018 fbd1 	bl	8022234 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009a92:	499f      	ldr	r1, [pc, #636]	; (8009d10 <Medha_EI_Analyser+0x630>)
 8009a94:	489f      	ldr	r0, [pc, #636]	; (8009d14 <Medha_EI_Analyser+0x634>)
 8009a96:	f7f6 fbd3 	bl	8000240 <strcmp>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8252 	beq.w	8009f46 <Medha_EI_Analyser+0x866>
			{
				return;
			}
		}

		BYTEINC(2);
 8009aa2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009aa6:	3302      	adds	r3, #2
 8009aa8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009aac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ab0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ab4:	8a9b      	ldrh	r3, [r3, #20]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 8009abe:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009ac6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ace:	8a9b      	ldrh	r3, [r3, #20]
 8009ad0:	08db      	lsrs	r3, r3, #3
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009ada:	e007      	b.n	8009aec <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009adc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ae0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ae4:	8a9b      	ldrh	r3, [r3, #20]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009aec:	2300      	movs	r3, #0
 8009aee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009af2:	e02a      	b.n	8009b4a <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009af4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009af8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009afc:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009b00:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009b04:	5c89      	ldrb	r1, [r1, r2]
 8009b06:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b0a:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b0e:	4413      	add	r3, r2
 8009b10:	460a      	mov	r2, r1
 8009b12:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009b14:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b18:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b1c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b20:	4413      	add	r3, r2
 8009b22:	7d9a      	ldrb	r2, [r3, #22]
 8009b24:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b28:	43d2      	mvns	r2, r2
 8009b2a:	b2d1      	uxtb	r1, r2
 8009b2c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b30:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009b34:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009b36:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b40:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b44:	3301      	adds	r3, #1
 8009b46:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b4a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b4e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d3ce      	bcc.n	8009af4 <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b56:	2300      	movs	r3, #0
 8009b58:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b5c:	e01a      	b.n	8009b94 <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009b5e:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009b62:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b66:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009b6a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009b6e:	5c89      	ldrb	r1, [r1, r2]
 8009b70:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b74:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b78:	4413      	add	r3, r2
 8009b7a:	460a      	mov	r2, r1
 8009b7c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009b80:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b84:	3301      	adds	r3, #1
 8009b86:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b8a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b94:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b98:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3de      	bcc.n	8009b5e <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009ba0:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009ba4:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009ba8:	463b      	mov	r3, r7
 8009baa:	3396      	adds	r3, #150	; 0x96
 8009bac:	4618      	mov	r0, r3
 8009bae:	f018 fa21 	bl	8021ff4 <memcmp>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d03f      	beq.n	8009c38 <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009bb8:	4857      	ldr	r0, [pc, #348]	; (8009d18 <Medha_EI_Analyser+0x638>)
 8009bba:	f018 fbd7 	bl	802236c <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bc4:	e011      	b.n	8009bea <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009bc6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bca:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009bce:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4850      	ldr	r0, [pc, #320]	; (8009d1c <Medha_EI_Analyser+0x63c>)
 8009bdc:	f018 fb2a 	bl	8022234 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009be0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009be4:	3301      	adds	r3, #1
 8009be6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bea:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009bee:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d3e7      	bcc.n	8009bc6 <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009bf6:	484a      	ldr	r0, [pc, #296]	; (8009d20 <Medha_EI_Analyser+0x640>)
 8009bf8:	f018 fbb8 	bl	802236c <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009c02:	e00f      	b.n	8009c24 <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 8009c04:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c08:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009c0c:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009c10:	5cd3      	ldrb	r3, [r2, r3]
 8009c12:	4619      	mov	r1, r3
 8009c14:	4841      	ldr	r0, [pc, #260]	; (8009d1c <Medha_EI_Analyser+0x63c>)
 8009c16:	f018 fb0d 	bl	8022234 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009c1a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c1e:	3301      	adds	r3, #1
 8009c20:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009c24:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009c28:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d3e9      	bcc.n	8009c04 <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 8009c30:	483c      	ldr	r0, [pc, #240]	; (8009d24 <Medha_EI_Analyser+0x644>)
 8009c32:	f018 fb9b 	bl	802236c <puts>
			return;
 8009c36:	e187      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009c38:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009c3c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009c40:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 f8b3 	bl	800adb0 <GetCRC32>
 8009c4a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009c4e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c52:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c56:	4413      	add	r3, r2
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c60:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c64:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009c68:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c6c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c70:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c74:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d00c      	beq.n	8009c96 <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009c7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c80:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c84:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c88:	461a      	mov	r2, r3
 8009c8a:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009c8e:	4826      	ldr	r0, [pc, #152]	; (8009d28 <Medha_EI_Analyser+0x648>)
 8009c90:	f018 fad0 	bl	8022234 <iprintf>
			return;
 8009c94:	e158      	b.n	8009f48 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(4);
 8009c96:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009ca0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009ca4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cb2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cb6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009cba:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009cbe:	3302      	adds	r3, #2
 8009cc0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009cc4:	f00b fbb4 	bl	8015430 <HAL_GetTick>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4a18      	ldr	r2, [pc, #96]	; (8009d2c <Medha_EI_Analyser+0x64c>)
 8009ccc:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 8009cce:	4a18      	ldr	r2, [pc, #96]	; (8009d30 <Medha_EI_Analyser+0x650>)
 8009cd0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cd4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4619      	mov	r1, r3
 8009cdc:	f44f 7392 	mov.w	r3, #292	; 0x124
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f018 f997 	bl	8022014 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <Medha_EI_Analyser+0x654>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009cec:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <Medha_EI_Analyser+0x650>)
 8009cee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009cf2:	4a10      	ldr	r2, [pc, #64]	; (8009d34 <Medha_EI_Analyser+0x654>)
 8009cf4:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 8009cf6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f954 	bl	8009fa8 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009d00:	2300      	movs	r3, #0
 8009d02:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d06:	e028      	b.n	8009d5a <Medha_EI_Analyser+0x67a>
 8009d08:	20000304 	.word	0x20000304
 8009d0c:	08025398 	.word	0x08025398
 8009d10:	080253d4 	.word	0x080253d4
 8009d14:	20000305 	.word	0x20000305
 8009d18:	080253e0 	.word	0x080253e0
 8009d1c:	08025204 	.word	0x08025204
 8009d20:	0802542c 	.word	0x0802542c
 8009d24:	08025450 	.word	0x08025450
 8009d28:	08025464 	.word	0x08025464
 8009d2c:	20002688 	.word	0x20002688
 8009d30:	20002534 	.word	0x20002534
 8009d34:	20002698 	.word	0x20002698
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009d38:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d3c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d40:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009d44:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009d48:	440a      	add	r2, r1
 8009d4a:	7d91      	ldrb	r1, [r2, #22]
 8009d4c:	4a80      	ldr	r2, [pc, #512]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009d4e:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009d50:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d54:	3301      	adds	r3, #1
 8009d56:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d5a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d5e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d3e8      	bcc.n	8009d38 <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009d66:	4b7b      	ldr	r3, [pc, #492]	; (8009f54 <Medha_EI_Analyser+0x874>)
 8009d68:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009d6c:	4a78      	ldr	r2, [pc, #480]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009d6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009d72:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d76:	461a      	mov	r2, r3
 8009d78:	4975      	ldr	r1, [pc, #468]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009d7a:	4877      	ldr	r0, [pc, #476]	; (8009f58 <Medha_EI_Analyser+0x878>)
 8009d7c:	f018 f93a 	bl	8021ff4 <memcmp>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d030      	beq.n	8009de8 <Medha_EI_Analyser+0x708>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009d86:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4970      	ldr	r1, [pc, #448]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009d8e:	4872      	ldr	r0, [pc, #456]	; (8009f58 <Medha_EI_Analyser+0x878>)
 8009d90:	f018 f940 	bl	8022014 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009d94:	4b6e      	ldr	r3, [pc, #440]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d9a:	4a6f      	ldr	r2, [pc, #444]	; (8009f58 <Medha_EI_Analyser+0x878>)
 8009d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 8009da0:	2230      	movs	r2, #48	; 0x30
 8009da2:	2100      	movs	r1, #0
 8009da4:	486d      	ldr	r0, [pc, #436]	; (8009f5c <Medha_EI_Analyser+0x87c>)
 8009da6:	f018 f95d 	bl	8022064 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009daa:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009dae:	461a      	mov	r2, r3
 8009db0:	4967      	ldr	r1, [pc, #412]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009db2:	486a      	ldr	r0, [pc, #424]	; (8009f5c <Medha_EI_Analyser+0x87c>)
 8009db4:	f018 f92e 	bl	8022014 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 8009db8:	f240 1019 	movw	r0, #281	; 0x119
 8009dbc:	f005 fe5e 	bl	800fa7c <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009dc0:	f00b fb36 	bl	8015430 <HAL_GetTick>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	4a66      	ldr	r2, [pc, #408]	; (8009f60 <Medha_EI_Analyser+0x880>)
 8009dc8:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 8009dca:	4866      	ldr	r0, [pc, #408]	; (8009f64 <Medha_EI_Analyser+0x884>)
 8009dcc:	f018 face 	bl	802236c <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8009dd0:	f240 2001 	movw	r0, #513	; 0x201
 8009dd4:	f005 fe52 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 8009dd8:	4b63      	ldr	r3, [pc, #396]	; (8009f68 <Medha_EI_Analyser+0x888>)
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <Medha_EI_Analyser+0x708>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009de0:	f240 2007 	movw	r0, #519	; 0x207
 8009de4:	f005 fe4a 	bl	800fa7c <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 8009de8:	4860      	ldr	r0, [pc, #384]	; (8009f6c <Medha_EI_Analyser+0x88c>)
 8009dea:	f018 fabf 	bl	802236c <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 8009dee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009df2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009df6:	889b      	ldrh	r3, [r3, #4]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	485d      	ldr	r0, [pc, #372]	; (8009f70 <Medha_EI_Analyser+0x890>)
 8009dfc:	f018 fa1a 	bl	8022234 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009e00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4859      	ldr	r0, [pc, #356]	; (8009f74 <Medha_EI_Analyser+0x894>)
 8009e0e:	f018 fa11 	bl	8022234 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009e12:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e16:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e1a:	799b      	ldrb	r3, [r3, #6]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4856      	ldr	r0, [pc, #344]	; (8009f78 <Medha_EI_Analyser+0x898>)
 8009e20:	f018 fa08 	bl	8022234 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009e24:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e28:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e2c:	79db      	ldrb	r3, [r3, #7]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4852      	ldr	r0, [pc, #328]	; (8009f7c <Medha_EI_Analyser+0x89c>)
 8009e32:	f018 f9ff 	bl	8022234 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009e36:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e3a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	4619      	mov	r1, r3
 8009e42:	484f      	ldr	r0, [pc, #316]	; (8009f80 <Medha_EI_Analyser+0x8a0>)
 8009e44:	f018 f9f6 	bl	8022234 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009e48:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e4c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e50:	7a9b      	ldrb	r3, [r3, #10]
 8009e52:	4619      	mov	r1, r3
 8009e54:	484b      	ldr	r0, [pc, #300]	; (8009f84 <Medha_EI_Analyser+0x8a4>)
 8009e56:	f018 f9ed 	bl	8022234 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009e5a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e5e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e62:	7b9b      	ldrb	r3, [r3, #14]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e6a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e6e:	7b5b      	ldrb	r3, [r3, #13]
 8009e70:	461c      	mov	r4, r3
 8009e72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e76:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e7a:	7b1b      	ldrb	r3, [r3, #12]
 8009e7c:	461d      	mov	r5, r3
 8009e7e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e82:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e86:	7bdb      	ldrb	r3, [r3, #15]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e8e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e92:	7c1b      	ldrb	r3, [r3, #16]
 8009e94:	4619      	mov	r1, r3
 8009e96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e9e:	7c5b      	ldrb	r3, [r3, #17]
 8009ea0:	9302      	str	r3, [sp, #8]
 8009ea2:	9101      	str	r1, [sp, #4]
 8009ea4:	9200      	str	r2, [sp, #0]
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	4601      	mov	r1, r0
 8009eac:	4836      	ldr	r0, [pc, #216]	; (8009f88 <Medha_EI_Analyser+0x8a8>)
 8009eae:	f018 f9c1 	bl	8022234 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009eb2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009eb6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009eba:	7c9b      	ldrb	r3, [r3, #18]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4833      	ldr	r0, [pc, #204]	; (8009f8c <Medha_EI_Analyser+0x8ac>)
 8009ec0:	f018 f9b8 	bl	8022234 <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009ec4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ec8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ecc:	8a9b      	ldrh	r3, [r3, #20]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	482f      	ldr	r0, [pc, #188]	; (8009f90 <Medha_EI_Analyser+0x8b0>)
 8009ed2:	f018 f9af 	bl	8022234 <iprintf>
		printf("SIGNAL DATA       :");
 8009ed6:	482f      	ldr	r0, [pc, #188]	; (8009f94 <Medha_EI_Analyser+0x8b4>)
 8009ed8:	f018 f9ac 	bl	8022234 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ee2:	e021      	b.n	8009f28 <Medha_EI_Analyser+0x848>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009ee4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d010      	beq.n	8009f0e <Medha_EI_Analyser+0x82e>
 8009eec:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ef0:	4b29      	ldr	r3, [pc, #164]	; (8009f98 <Medha_EI_Analyser+0x8b8>)
 8009ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef6:	08d9      	lsrs	r1, r3, #3
 8009ef8:	460b      	mov	r3, r1
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <Medha_EI_Analyser+0x82e>
			{
				printf("\n                   ");
 8009f08:	4824      	ldr	r0, [pc, #144]	; (8009f9c <Medha_EI_Analyser+0x8bc>)
 8009f0a:	f018 f993 	bl	8022234 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009f0e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f12:	4a0f      	ldr	r2, [pc, #60]	; (8009f50 <Medha_EI_Analyser+0x870>)
 8009f14:	5cd3      	ldrb	r3, [r2, r3]
 8009f16:	4619      	mov	r1, r3
 8009f18:	4821      	ldr	r0, [pc, #132]	; (8009fa0 <Medha_EI_Analyser+0x8c0>)
 8009f1a:	f018 f98b 	bl	8022234 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f1e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f22:	3301      	adds	r3, #1
 8009f24:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f28:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009f2c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d3d7      	bcc.n	8009ee4 <Medha_EI_Analyser+0x804>
		}
		printf("\n");
 8009f34:	200a      	movs	r0, #10
 8009f36:	f018 f995 	bl	8022264 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009f3a:	481a      	ldr	r0, [pc, #104]	; (8009fa4 <Medha_EI_Analyser+0x8c4>)
 8009f3c:	f018 fa16 	bl	802236c <puts>
		return;
 8009f40:	e002      	b.n	8009f48 <Medha_EI_Analyser+0x868>
	}
	else
	{
		return;
 8009f42:	bf00      	nop
 8009f44:	e000      	b.n	8009f48 <Medha_EI_Analyser+0x868>
				return;
 8009f46:	bf00      	nop
	}
}
 8009f48:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f50:	200026b0 	.word	0x200026b0
 8009f54:	20002534 	.word	0x20002534
 8009f58:	200027b8 	.word	0x200027b8
 8009f5c:	20002658 	.word	0x20002658
 8009f60:	20002688 	.word	0x20002688
 8009f64:	080254a4 	.word	0x080254a4
 8009f68:	200026a0 	.word	0x200026a0
 8009f6c:	080254bc 	.word	0x080254bc
 8009f70:	080254e4 	.word	0x080254e4
 8009f74:	080254ec 	.word	0x080254ec
 8009f78:	080254f4 	.word	0x080254f4
 8009f7c:	08025500 	.word	0x08025500
 8009f80:	0802550c 	.word	0x0802550c
 8009f84:	08025514 	.word	0x08025514
 8009f88:	0802551c 	.word	0x0802551c
 8009f8c:	08025540 	.word	0x08025540
 8009f90:	0802554c 	.word	0x0802554c
 8009f94:	08025554 	.word	0x08025554
 8009f98:	cccccccd 	.word	0xcccccccd
 8009f9c:	08025568 	.word	0x08025568
 8009fa0:	08025204 	.word	0x08025204
 8009fa4:	08025580 	.word	0x08025580

08009fa8 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b0d2      	sub	sp, #328	; 0x148
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4602      	mov	r2, r0
 8009fb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fb4:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fb8:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009fba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fbe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f018 f848 	bl	8022064 <memset>
	uint32_t Cal_Crc =0;
 8009fd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fd8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009fe6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fea:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009fee:	2200      	movs	r2, #0
 8009ff0:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009ff8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ffc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a000:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a004:	2153      	movs	r1, #83	; 0x53
 800a006:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a008:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a00c:	3301      	adds	r3, #1
 800a00e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800a012:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a016:	f107 0214 	add.w	r2, r7, #20
 800a01a:	4413      	add	r3, r2
 800a01c:	4a88      	ldr	r2, [pc, #544]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a01e:	8852      	ldrh	r2, [r2, #2]
 800a020:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a022:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a026:	3302      	adds	r3, #2
 800a028:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800a02c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a030:	f107 0214 	add.w	r2, r7, #20
 800a034:	4413      	add	r3, r2
 800a036:	4a82      	ldr	r2, [pc, #520]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a038:	8892      	ldrh	r2, [r2, #4]
 800a03a:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a03c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a040:	3302      	adds	r3, #2
 800a042:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800a046:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a04a:	f107 0214 	add.w	r2, r7, #20
 800a04e:	4413      	add	r3, r2
 800a050:	4a7b      	ldr	r2, [pc, #492]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a052:	7992      	ldrb	r2, [r2, #6]
 800a054:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a056:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a05a:	3301      	adds	r3, #1
 800a05c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800a060:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a064:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a068:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a06c:	21e2      	movs	r1, #226	; 0xe2
 800a06e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a070:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a074:	3301      	adds	r3, #1
 800a076:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800a07a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a07e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800a082:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a086:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a08a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a08e:	2100      	movs	r1, #0
 800a090:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800a092:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a096:	3301      	adds	r3, #1
 800a098:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a09c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800a0a4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0a8:	3302      	adds	r3, #2
 800a0aa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800a0ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0b2:	f107 0214 	add.w	r2, r7, #20
 800a0b6:	4413      	add	r3, r2
 800a0b8:	4a61      	ldr	r2, [pc, #388]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a0ba:	7a92      	ldrb	r2, [r2, #10]
 800a0bc:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a0be:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800a0c8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0cc:	f107 0214 	add.w	r2, r7, #20
 800a0d0:	441a      	add	r2, r3
 800a0d2:	4b5b      	ldr	r3, [pc, #364]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a0d4:	330b      	adds	r3, #11
 800a0d6:	6819      	ldr	r1, [r3, #0]
 800a0d8:	6011      	str	r1, [r2, #0]
 800a0da:	8899      	ldrh	r1, [r3, #4]
 800a0dc:	799b      	ldrb	r3, [r3, #6]
 800a0de:	8091      	strh	r1, [r2, #4]
 800a0e0:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800a0e2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0e6:	3307      	adds	r3, #7
 800a0e8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800a0ec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0f0:	f107 0214 	add.w	r2, r7, #20
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4a52      	ldr	r2, [pc, #328]	; (800a240 <Send_Medha_EI_Reply+0x298>)
 800a0f8:	8a92      	ldrh	r2, [r2, #20]
 800a0fa:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a0fc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a100:	3302      	adds	r3, #2
 800a102:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800a106:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a10a:	f107 0214 	add.w	r2, r7, #20
 800a10e:	18d0      	adds	r0, r2, r3
 800a110:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a114:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	4949      	ldr	r1, [pc, #292]	; (800a244 <Send_Medha_EI_Reply+0x29c>)
 800a11e:	f017 ff79 	bl	8022014 <memcpy>
	BYTEINC(Outputs);
 800a122:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a126:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a12a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	4413      	add	r3, r2
 800a132:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800a136:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a13a:	f107 0214 	add.w	r2, r7, #20
 800a13e:	18d0      	adds	r0, r2, r3
 800a140:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a144:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	493e      	ldr	r1, [pc, #248]	; (800a248 <Send_Medha_EI_Reply+0x2a0>)
 800a14e:	f017 ff61 	bl	8022014 <memcpy>
	BYTEINC(Outputs);
 800a152:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a156:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a15a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	4413      	add	r3, r2
 800a162:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800a166:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a16a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a16e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a172:	2100      	movs	r1, #0
 800a174:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a176:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a17a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a17e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a182:	2100      	movs	r1, #0
 800a184:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a186:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a18a:	3302      	adds	r3, #2
 800a18c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a190:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a194:	b29b      	uxth	r3, r3
 800a196:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3302      	adds	r3, #2
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1a6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a1aa:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a1ac:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a1b0:	f107 0214 	add.w	r2, r7, #20
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1ba:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a1be:	8812      	ldrh	r2, [r2, #0]
 800a1c0:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a1c2:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a1c6:	f107 0314 	add.w	r3, r7, #20
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f000 fdef 	bl	800adb0 <GetCRC32>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a1dc:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a1de:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1e2:	f107 0214 	add.w	r2, r7, #20
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1ec:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a1f0:	6812      	ldr	r2, [r2, #0]
 800a1f2:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a1f4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a204:	e011      	b.n	800a22a <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a206:	4b11      	ldr	r3, [pc, #68]	; (800a24c <Send_Medha_EI_Reply+0x2a4>)
 800a208:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a20c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a210:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a214:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a218:	5cd3      	ldrb	r3, [r2, r3]
 800a21a:	4619      	mov	r1, r3
 800a21c:	f00a feb0 	bl	8014f80 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a220:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a224:	3301      	adds	r3, #1
 800a226:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a22a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a22e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a232:	429a      	cmp	r2, r3
 800a234:	d3e7      	bcc.n	800a206 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a236:	bf00      	nop
}
 800a238:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20002534 	.word	0x20002534
 800a244:	2000254a 	.word	0x2000254a
 800a248:	200025ca 	.word	0x200025ca
 800a24c:	20000304 	.word	0x20000304

0800a250 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a256:	4b2c      	ldr	r3, [pc, #176]	; (800a308 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f004 fe0c 	bl	800ee78 <HAL_Elaps_Ticks>
 800a260:	4602      	mov	r2, r0
 800a262:	4b2a      	ldr	r3, [pc, #168]	; (800a30c <Send_Relay_Statuses_2_MIE+0xbc>)
 800a264:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a268:	429a      	cmp	r2, r3
 800a26a:	d349      	bcc.n	800a300 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a270:	4b26      	ldr	r3, [pc, #152]	; (800a30c <Send_Relay_Statuses_2_MIE+0xbc>)
 800a272:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <Send_Relay_Statuses_2_MIE+0x40>
 800a280:	4b22      	ldr	r3, [pc, #136]	; (800a30c <Send_Relay_Statuses_2_MIE+0xbc>)
 800a282:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3301      	adds	r3, #1
 800a28c:	80fb      	strh	r3, [r7, #6]
 800a28e:	e004      	b.n	800a29a <Send_Relay_Statuses_2_MIE+0x4a>
 800a290:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <Send_Relay_Statuses_2_MIE+0xbc>)
 800a292:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a296:	08db      	lsrs	r3, r3, #3
 800a298:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a29a:	f00b f8c9 	bl	8015430 <HAL_GetTick>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a2a2:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a2a4:	481a      	ldr	r0, [pc, #104]	; (800a310 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a2a6:	f018 f861 	bl	802236c <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	603b      	str	r3, [r7, #0]
 800a2ae:	e01c      	b.n	800a2ea <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00e      	beq.n	800a2d4 <Send_Relay_Statuses_2_MIE+0x84>
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	4b16      	ldr	r3, [pc, #88]	; (800a314 <Send_Relay_Statuses_2_MIE+0xc4>)
 800a2ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a2be:	091a      	lsrs	r2, r3, #4
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	1aca      	subs	r2, r1, r3
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	d102      	bne.n	800a2d4 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 800a2ce:	200a      	movs	r0, #10
 800a2d0:	f017 ffc8 	bl	8022264 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a2d4:	4a10      	ldr	r2, [pc, #64]	; (800a318 <Send_Relay_Statuses_2_MIE+0xc8>)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	4413      	add	r3, r2
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	480f      	ldr	r0, [pc, #60]	; (800a31c <Send_Relay_Statuses_2_MIE+0xcc>)
 800a2e0:	f017 ffa8 	bl	8022234 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	603b      	str	r3, [r7, #0]
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d3de      	bcc.n	800a2b0 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 800a2f2:	200a      	movs	r0, #10
 800a2f4:	f017 ffb6 	bl	8022264 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a2f8:	f240 1019 	movw	r0, #281	; 0x119
 800a2fc:	f005 fbbe 	bl	800fa7c <TransmitCanPkt>
#endif
	}
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20002688 	.word	0x20002688
 800a30c:	20000304 	.word	0x20000304
 800a310:	080255a8 	.word	0x080255a8
 800a314:	cccccccd 	.word	0xcccccccd
 800a318:	20002658 	.word	0x20002658
 800a31c:	08025204 	.word	0x08025204

0800a320 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a326:	4b3d      	ldr	r3, [pc, #244]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f004 fda4 	bl	800ee78 <HAL_Elaps_Ticks>
 800a330:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a332:	4b3b      	ldr	r3, [pc, #236]	; (800a420 <Process_Clear_Relays+0x100>)
 800a334:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a338:	4a39      	ldr	r2, [pc, #228]	; (800a420 <Process_Clear_Relays+0x100>)
 800a33a:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a344:	4937      	ldr	r1, [pc, #220]	; (800a424 <Process_Clear_Relays+0x104>)
 800a346:	4838      	ldr	r0, [pc, #224]	; (800a428 <Process_Clear_Relays+0x108>)
 800a348:	f7f5 ff7a 	bl	8000240 <strcmp>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d05f      	beq.n	800a412 <Process_Clear_Relays+0xf2>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d30c      	bcc.n	800a374 <Process_Clear_Relays+0x54>
 800a35a:	4b30      	ldr	r3, [pc, #192]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	4b33      	ldr	r3, [pc, #204]	; (800a42c <Process_Clear_Relays+0x10c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d006      	beq.n	800a374 <Process_Clear_Relays+0x54>
 800a366:	4b32      	ldr	r3, [pc, #200]	; (800a430 <Process_Clear_Relays+0x110>)
 800a368:	785a      	ldrb	r2, [r3, #1]
 800a36a:	4b2d      	ldr	r3, [pc, #180]	; (800a420 <Process_Clear_Relays+0x100>)
 800a36c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a370:	429a      	cmp	r2, r3
 800a372:	d808      	bhi.n	800a386 <Process_Clear_Relays+0x66>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a374:	4b29      	ldr	r3, [pc, #164]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d04b      	beq.n	800a414 <Process_Clear_Relays+0xf4>
 800a37c:	4b2d      	ldr	r3, [pc, #180]	; (800a434 <Process_Clear_Relays+0x114>)
 800a37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a382:	2b00      	cmp	r3, #0
 800a384:	d046      	beq.n	800a414 <Process_Clear_Relays+0xf4>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a386:	4b25      	ldr	r3, [pc, #148]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	4619      	mov	r1, r3
 800a38c:	482a      	ldr	r0, [pc, #168]	; (800a438 <Process_Clear_Relays+0x118>)
 800a38e:	f017 ff51 	bl	8022234 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a392:	4b22      	ldr	r3, [pc, #136]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d006      	beq.n	800a3ac <Process_Clear_Relays+0x8c>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a39e:	4b1f      	ldr	r3, [pc, #124]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f023 0301 	bic.w	r3, r3, #1
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	4b1c      	ldr	r3, [pc, #112]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a3aa:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	f003 0302 	and.w	r3, r3, #2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <Process_Clear_Relays+0xa6>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a3b8:	4b18      	ldr	r3, [pc, #96]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	f023 0302 	bic.w	r3, r3, #2
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	4b16      	ldr	r3, [pc, #88]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a3c4:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3c6:	2284      	movs	r2, #132	; 0x84
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	481a      	ldr	r0, [pc, #104]	; (800a434 <Process_Clear_Relays+0x114>)
 800a3cc:	f017 fe4a 	bl	8022064 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a3d0:	2230      	movs	r2, #48	; 0x30
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4819      	ldr	r0, [pc, #100]	; (800a43c <Process_Clear_Relays+0x11c>)
 800a3d6:	f017 fe45 	bl	8022064 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3da:	2284      	movs	r2, #132	; 0x84
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4818      	ldr	r0, [pc, #96]	; (800a440 <Process_Clear_Relays+0x120>)
 800a3e0:	f017 fe40 	bl	8022064 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3e4:	2208      	movs	r2, #8
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4816      	ldr	r0, [pc, #88]	; (800a444 <Process_Clear_Relays+0x124>)
 800a3ea:	f017 fe3b 	bl	8022064 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	480f      	ldr	r0, [pc, #60]	; (800a430 <Process_Clear_Relays+0x110>)
 800a3f4:	f017 fe36 	bl	8022064 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4812      	ldr	r0, [pc, #72]	; (800a448 <Process_Clear_Relays+0x128>)
 800a3fe:	f017 fe31 	bl	8022064 <memset>
		printf("Cleared Relay Statuses\n");
 800a402:	4812      	ldr	r0, [pc, #72]	; (800a44c <Process_Clear_Relays+0x12c>)
 800a404:	f017 ffb2 	bl	802236c <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a408:	4b04      	ldr	r3, [pc, #16]	; (800a41c <Process_Clear_Relays+0xfc>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	4a07      	ldr	r2, [pc, #28]	; (800a42c <Process_Clear_Relays+0x10c>)
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	e000      	b.n	800a414 <Process_Clear_Relays+0xf4>
		return;
 800a412:	bf00      	nop
	}
}
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20002688 	.word	0x20002688
 800a420:	20000304 	.word	0x20000304
 800a424:	080253d4 	.word	0x080253d4
 800a428:	20000305 	.word	0x20000305
 800a42c:	20002848 	.word	0x20002848
 800a430:	200026a0 	.word	0x200026a0
 800a434:	200026b0 	.word	0x200026b0
 800a438:	080255bc 	.word	0x080255bc
 800a43c:	20002658 	.word	0x20002658
 800a440:	200027b8 	.word	0x200027b8
 800a444:	20002698 	.word	0x20002698
 800a448:	200026a8 	.word	0x200026a8
 800a44c:	080255ec 	.word	0x080255ec

0800a450 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a454:	4b26      	ldr	r3, [pc, #152]	; (800a4f0 <Send_Data_to_Other+0xa0>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4618      	mov	r0, r3
 800a45a:	f004 fd0d 	bl	800ee78 <HAL_Elaps_Ticks>
 800a45e:	4602      	mov	r2, r0
 800a460:	4b24      	ldr	r3, [pc, #144]	; (800a4f4 <Send_Data_to_Other+0xa4>)
 800a462:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a466:	4923      	ldr	r1, [pc, #140]	; (800a4f4 <Send_Data_to_Other+0xa4>)
 800a468:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a46c:	fb01 f303 	mul.w	r3, r1, r3
 800a470:	429a      	cmp	r2, r3
 800a472:	d306      	bcc.n	800a482 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a474:	4b20      	ldr	r3, [pc, #128]	; (800a4f8 <Send_Data_to_Other+0xa8>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a47c:	4b1e      	ldr	r3, [pc, #120]	; (800a4f8 <Send_Data_to_Other+0xa8>)
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a482:	4b1b      	ldr	r3, [pc, #108]	; (800a4f0 <Send_Data_to_Other+0xa0>)
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4618      	mov	r0, r3
 800a488:	f004 fcf6 	bl	800ee78 <HAL_Elaps_Ticks>
 800a48c:	4602      	mov	r2, r0
 800a48e:	4b19      	ldr	r3, [pc, #100]	; (800a4f4 <Send_Data_to_Other+0xa4>)
 800a490:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a494:	429a      	cmp	r2, r3
 800a496:	d90e      	bls.n	800a4b6 <Send_Data_to_Other+0x66>
 800a498:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <Send_Data_to_Other+0xa0>)
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	4b17      	ldr	r3, [pc, #92]	; (800a4fc <Send_Data_to_Other+0xac>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d008      	beq.n	800a4b6 <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a4a4:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <Send_Data_to_Other+0xa0>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <Send_Data_to_Other+0xac>)
 800a4aa:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a4ac:	f240 2001 	movw	r0, #513	; 0x201
 800a4b0:	f005 fae4 	bl	800fa7c <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a4b4:	e01a      	b.n	800a4ec <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a4b6:	4b12      	ldr	r3, [pc, #72]	; (800a500 <Send_Data_to_Other+0xb0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f004 fcdc 	bl	800ee78 <HAL_Elaps_Ticks>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c6:	d911      	bls.n	800a4ec <Send_Data_to_Other+0x9c>
 800a4c8:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <Send_Data_to_Other+0xa0>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f004 fcd3 	bl	800ee78 <HAL_Elaps_Ticks>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a4d8:	d908      	bls.n	800a4ec <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a4da:	f00a ffa9 	bl	8015430 <HAL_GetTick>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	4a07      	ldr	r2, [pc, #28]	; (800a500 <Send_Data_to_Other+0xb0>)
 800a4e2:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a4e4:	f240 2001 	movw	r0, #513	; 0x201
 800a4e8:	f005 fac8 	bl	800fa7c <TransmitCanPkt>
}
 800a4ec:	bf00      	nop
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20002688 	.word	0x20002688
 800a4f4:	20000304 	.word	0x20000304
 800a4f8:	20002698 	.word	0x20002698
 800a4fc:	2000284c 	.word	0x2000284c
 800a500:	20002850 	.word	0x20002850

0800a504 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a504:	b5b0      	push	{r4, r5, r7, lr}
 800a506:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a508:	4b95      	ldr	r3, [pc, #596]	; (800a760 <Process_Data_from_Other+0x25c>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	4b95      	ldr	r3, [pc, #596]	; (800a764 <Process_Data_from_Other+0x260>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d109      	bne.n	800a528 <Process_Data_from_Other+0x24>
 800a514:	4b92      	ldr	r3, [pc, #584]	; (800a760 <Process_Data_from_Other+0x25c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f004 fcad 	bl	800ee78 <HAL_Elaps_Ticks>
 800a51e:	4603      	mov	r3, r0
 800a520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a524:	f0c0 80e4 	bcc.w	800a6f0 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a528:	f00a ff82 	bl	8015430 <HAL_GetTick>
 800a52c:	4603      	mov	r3, r0
 800a52e:	4a8c      	ldr	r2, [pc, #560]	; (800a760 <Process_Data_from_Other+0x25c>)
 800a530:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a532:	4b8d      	ldr	r3, [pc, #564]	; (800a768 <Process_Data_from_Other+0x264>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d007      	beq.n	800a54a <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a53a:	4b8c      	ldr	r3, [pc, #560]	; (800a76c <Process_Data_from_Other+0x268>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f043 0301 	orr.w	r3, r3, #1
 800a542:	b2da      	uxtb	r2, r3
 800a544:	4b89      	ldr	r3, [pc, #548]	; (800a76c <Process_Data_from_Other+0x268>)
 800a546:	701a      	strb	r2, [r3, #0]
 800a548:	e006      	b.n	800a558 <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a54a:	4b88      	ldr	r3, [pc, #544]	; (800a76c <Process_Data_from_Other+0x268>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	4b85      	ldr	r3, [pc, #532]	; (800a76c <Process_Data_from_Other+0x268>)
 800a556:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a558:	4b85      	ldr	r3, [pc, #532]	; (800a770 <Process_Data_from_Other+0x26c>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d007      	beq.n	800a570 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a560:	4b82      	ldr	r3, [pc, #520]	; (800a76c <Process_Data_from_Other+0x268>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	f043 0302 	orr.w	r3, r3, #2
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	4b80      	ldr	r3, [pc, #512]	; (800a76c <Process_Data_from_Other+0x268>)
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	e006      	b.n	800a57e <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a570:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <Process_Data_from_Other+0x268>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	f023 0302 	bic.w	r3, r3, #2
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4b7c      	ldr	r3, [pc, #496]	; (800a76c <Process_Data_from_Other+0x268>)
 800a57c:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a57e:	4b7b      	ldr	r3, [pc, #492]	; (800a76c <Process_Data_from_Other+0x268>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b03      	cmp	r3, #3
 800a584:	f200 809a 	bhi.w	800a6bc <Process_Data_from_Other+0x1b8>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <Process_Data_from_Other+0x8c>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a631 	.word	0x0800a631
 800a598:	0800a5af 	.word	0x0800a5af
 800a59c:	0800a681 	.word	0x0800a681
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a5a0:	4b71      	ldr	r3, [pc, #452]	; (800a768 <Process_Data_from_Other+0x264>)
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	4b6f      	ldr	r3, [pc, #444]	; (800a768 <Process_Data_from_Other+0x264>)
 800a5aa:	705a      	strb	r2, [r3, #1]
			break;
 800a5ac:	e086      	b.n	800a6bc <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a5ae:	4b70      	ldr	r3, [pc, #448]	; (800a770 <Process_Data_from_Other+0x26c>)
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	4b6d      	ldr	r3, [pc, #436]	; (800a768 <Process_Data_from_Other+0x264>)
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d02f      	beq.n	800a61a <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a5ba:	4b6e      	ldr	r3, [pc, #440]	; (800a774 <Process_Data_from_Other+0x270>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d179      	bne.n	800a6b6 <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a5c2:	4b69      	ldr	r3, [pc, #420]	; (800a768 <Process_Data_from_Other+0x264>)
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	486b      	ldr	r0, [pc, #428]	; (800a778 <Process_Data_from_Other+0x274>)
 800a5ca:	f017 fe33 	bl	8022234 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a5ce:	4b68      	ldr	r3, [pc, #416]	; (800a770 <Process_Data_from_Other+0x26c>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4869      	ldr	r0, [pc, #420]	; (800a77c <Process_Data_from_Other+0x278>)
 800a5d6:	f017 fe2d 	bl	8022234 <iprintf>
					Received_CAN_Relay_Status=NO;
 800a5da:	4b66      	ldr	r3, [pc, #408]	; (800a774 <Process_Data_from_Other+0x270>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a5e0:	4867      	ldr	r0, [pc, #412]	; (800a780 <Process_Data_from_Other+0x27c>)
 800a5e2:	f017 fec3 	bl	802236c <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a5e6:	4a67      	ldr	r2, [pc, #412]	; (800a784 <Process_Data_from_Other+0x280>)
 800a5e8:	4b67      	ldr	r3, [pc, #412]	; (800a788 <Process_Data_from_Other+0x284>)
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	2384      	movs	r3, #132	; 0x84
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f017 fd0f 	bl	8022014 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a5f6:	4a65      	ldr	r2, [pc, #404]	; (800a78c <Process_Data_from_Other+0x288>)
 800a5f8:	4b62      	ldr	r3, [pc, #392]	; (800a784 <Process_Data_from_Other+0x280>)
 800a5fa:	4614      	mov	r4, r2
 800a5fc:	461d      	mov	r5, r3
 800a5fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a60a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a60e:	4b5d      	ldr	r3, [pc, #372]	; (800a784 <Process_Data_from_Other+0x280>)
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a614:	4a54      	ldr	r2, [pc, #336]	; (800a768 <Process_Data_from_Other+0x264>)
 800a616:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a618:	e04d      	b.n	800a6b6 <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a61a:	4b53      	ldr	r3, [pc, #332]	; (800a768 <Process_Data_from_Other+0x264>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a620:	4b5b      	ldr	r3, [pc, #364]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	f023 0301 	bic.w	r3, r3, #1
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	4b59      	ldr	r3, [pc, #356]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a62c:	701a      	strb	r2, [r3, #0]
			break;
 800a62e:	e042      	b.n	800a6b6 <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a630:	4b4f      	ldr	r3, [pc, #316]	; (800a770 <Process_Data_from_Other+0x26c>)
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	4b4c      	ldr	r3, [pc, #304]	; (800a768 <Process_Data_from_Other+0x264>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d016      	beq.n	800a66a <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a63c:	4855      	ldr	r0, [pc, #340]	; (800a794 <Process_Data_from_Other+0x290>)
 800a63e:	f017 fe95 	bl	802236c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a642:	4b49      	ldr	r3, [pc, #292]	; (800a768 <Process_Data_from_Other+0x264>)
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	3301      	adds	r3, #1
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	4b47      	ldr	r3, [pc, #284]	; (800a768 <Process_Data_from_Other+0x264>)
 800a64c:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a64e:	4b46      	ldr	r3, [pc, #280]	; (800a768 <Process_Data_from_Other+0x264>)
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d931      	bls.n	800a6ba <Process_Data_from_Other+0x1b6>
 800a656:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <Process_Data_from_Other+0x280>)
 800a658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d02c      	beq.n	800a6ba <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a660:	f240 2007 	movw	r0, #519	; 0x207
 800a664:	f005 fa0a 	bl	800fa7c <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a668:	e027      	b.n	800a6ba <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a66a:	4b49      	ldr	r3, [pc, #292]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	f023 0301 	bic.w	r3, r3, #1
 800a672:	b2da      	uxtb	r2, r3
 800a674:	4b46      	ldr	r3, [pc, #280]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a676:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a678:	4b3b      	ldr	r3, [pc, #236]	; (800a768 <Process_Data_from_Other+0x264>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	705a      	strb	r2, [r3, #1]
			break;
 800a67e:	e01c      	b.n	800a6ba <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a680:	4b3b      	ldr	r3, [pc, #236]	; (800a770 <Process_Data_from_Other+0x26c>)
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	4b38      	ldr	r3, [pc, #224]	; (800a768 <Process_Data_from_Other+0x264>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d009      	beq.n	800a6a0 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a68c:	4841      	ldr	r0, [pc, #260]	; (800a794 <Process_Data_from_Other+0x290>)
 800a68e:	f017 fe6d 	bl	802236c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a692:	4b35      	ldr	r3, [pc, #212]	; (800a768 <Process_Data_from_Other+0x264>)
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	3301      	adds	r3, #1
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	4b33      	ldr	r3, [pc, #204]	; (800a768 <Process_Data_from_Other+0x264>)
 800a69c:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a69e:	e00d      	b.n	800a6bc <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a6a0:	4b3b      	ldr	r3, [pc, #236]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	f023 0301 	bic.w	r3, r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b39      	ldr	r3, [pc, #228]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a6ac:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a6ae:	4b2e      	ldr	r3, [pc, #184]	; (800a768 <Process_Data_from_Other+0x264>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	705a      	strb	r2, [r3, #1]
			break;
 800a6b4:	e002      	b.n	800a6bc <Process_Data_from_Other+0x1b8>
			break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <Process_Data_from_Other+0x1b8>
			break;
 800a6ba:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a6bc:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <Process_Data_from_Other+0x264>)
 800a6be:	785a      	ldrb	r2, [r3, #1]
 800a6c0:	4b35      	ldr	r3, [pc, #212]	; (800a798 <Process_Data_from_Other+0x294>)
 800a6c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d312      	bcc.n	800a6f0 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10c      	bne.n	800a6f0 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a6d6:	4831      	ldr	r0, [pc, #196]	; (800a79c <Process_Data_from_Other+0x298>)
 800a6d8:	f017 fe48 	bl	802236c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a6dc:	4b22      	ldr	r3, [pc, #136]	; (800a768 <Process_Data_from_Other+0x264>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a6e2:	4b2b      	ldr	r3, [pc, #172]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	4b28      	ldr	r3, [pc, #160]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a6ee:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a6f0:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <Process_Data_from_Other+0x260>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f004 fbbf 	bl	800ee78 <HAL_Elaps_Ticks>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b26      	ldr	r3, [pc, #152]	; (800a798 <Process_Data_from_Other+0x294>)
 800a6fe:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a702:	429a      	cmp	r2, r3
 800a704:	d92a      	bls.n	800a75c <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a706:	4b26      	ldr	r3, [pc, #152]	; (800a7a0 <Process_Data_from_Other+0x29c>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b16      	ldr	r3, [pc, #88]	; (800a764 <Process_Data_from_Other+0x260>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d024      	beq.n	800a75c <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a712:	4b14      	ldr	r3, [pc, #80]	; (800a764 <Process_Data_from_Other+0x260>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a22      	ldr	r2, [pc, #136]	; (800a7a0 <Process_Data_from_Other+0x29c>)
 800a718:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a71a:	4b12      	ldr	r3, [pc, #72]	; (800a764 <Process_Data_from_Other+0x260>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f004 fbaa 	bl	800ee78 <HAL_Elaps_Ticks>
 800a724:	4603      	mov	r3, r0
 800a726:	4a1f      	ldr	r2, [pc, #124]	; (800a7a4 <Process_Data_from_Other+0x2a0>)
 800a728:	fba2 2303 	umull	r2, r3, r2, r3
 800a72c:	099b      	lsrs	r3, r3, #6
 800a72e:	4619      	mov	r1, r3
 800a730:	481d      	ldr	r0, [pc, #116]	; (800a7a8 <Process_Data_from_Other+0x2a4>)
 800a732:	f017 fd7f 	bl	8022234 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a736:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <Process_Data_from_Other+0x260>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4619      	mov	r1, r3
 800a73c:	481b      	ldr	r0, [pc, #108]	; (800a7ac <Process_Data_from_Other+0x2a8>)
 800a73e:	f017 fd79 	bl	8022234 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a74e:	4b10      	ldr	r3, [pc, #64]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f043 0302 	orr.w	r3, r3, #2
 800a756:	b2da      	uxtb	r2, r3
 800a758:	4b0d      	ldr	r3, [pc, #52]	; (800a790 <Process_Data_from_Other+0x28c>)
 800a75a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a75c:	bf00      	nop
 800a75e:	bdb0      	pop	{r4, r5, r7, pc}
 800a760:	20002854 	.word	0x20002854
 800a764:	20002144 	.word	0x20002144
 800a768:	20002698 	.word	0x20002698
 800a76c:	20002142 	.word	0x20002142
 800a770:	200026a0 	.word	0x200026a0
 800a774:	20002141 	.word	0x20002141
 800a778:	08025604 	.word	0x08025604
 800a77c:	0802561c 	.word	0x0802561c
 800a780:	08025634 	.word	0x08025634
 800a784:	200026b0 	.word	0x200026b0
 800a788:	20002734 	.word	0x20002734
 800a78c:	20002658 	.word	0x20002658
 800a790:	20002688 	.word	0x20002688
 800a794:	08025668 	.word	0x08025668
 800a798:	20000304 	.word	0x20000304
 800a79c:	0802568c 	.word	0x0802568c
 800a7a0:	20002858 	.word	0x20002858
 800a7a4:	10624dd3 	.word	0x10624dd3
 800a7a8:	080256a4 	.word	0x080256a4
 800a7ac:	080256d4 	.word	0x080256d4

0800a7b0 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a7b4:	482a      	ldr	r0, [pc, #168]	; (800a860 <Print_Medha_Self_Details+0xb0>)
 800a7b6:	f017 fdd9 	bl	802236c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a7ba:	4b2a      	ldr	r3, [pc, #168]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a7bc:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4829      	ldr	r0, [pc, #164]	; (800a868 <Print_Medha_Self_Details+0xb8>)
 800a7c4:	f017 fd36 	bl	8022234 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a7c8:	4b26      	ldr	r3, [pc, #152]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a7ca:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4826      	ldr	r0, [pc, #152]	; (800a86c <Print_Medha_Self_Details+0xbc>)
 800a7d2:	f017 fd2f 	bl	8022234 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a7d6:	4b23      	ldr	r3, [pc, #140]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a7d8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4824      	ldr	r0, [pc, #144]	; (800a870 <Print_Medha_Self_Details+0xc0>)
 800a7e0:	f017 fd28 	bl	8022234 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a7e4:	4b1f      	ldr	r3, [pc, #124]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a7e6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4821      	ldr	r0, [pc, #132]	; (800a874 <Print_Medha_Self_Details+0xc4>)
 800a7ee:	f017 fd21 	bl	8022234 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a7f2:	4b1c      	ldr	r3, [pc, #112]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a7f4:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	481f      	ldr	r0, [pc, #124]	; (800a878 <Print_Medha_Self_Details+0xc8>)
 800a7fc:	f017 fd1a 	bl	8022234 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a800:	4b18      	ldr	r3, [pc, #96]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a802:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a806:	4619      	mov	r1, r3
 800a808:	481c      	ldr	r0, [pc, #112]	; (800a87c <Print_Medha_Self_Details+0xcc>)
 800a80a:	f017 fd13 	bl	8022234 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a80e:	4b15      	ldr	r3, [pc, #84]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a810:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a814:	4619      	mov	r1, r3
 800a816:	481a      	ldr	r0, [pc, #104]	; (800a880 <Print_Medha_Self_Details+0xd0>)
 800a818:	f017 fd0c 	bl	8022234 <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a81c:	4b11      	ldr	r3, [pc, #68]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a81e:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a822:	4619      	mov	r1, r3
 800a824:	4817      	ldr	r0, [pc, #92]	; (800a884 <Print_Medha_Self_Details+0xd4>)
 800a826:	f017 fd05 	bl	8022234 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a82a:	4b0e      	ldr	r3, [pc, #56]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a82c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a830:	4619      	mov	r1, r3
 800a832:	4815      	ldr	r0, [pc, #84]	; (800a888 <Print_Medha_Self_Details+0xd8>)
 800a834:	f017 fcfe 	bl	8022234 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a838:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a83a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a83e:	4619      	mov	r1, r3
 800a840:	4812      	ldr	r0, [pc, #72]	; (800a88c <Print_Medha_Self_Details+0xdc>)
 800a842:	f017 fcf7 	bl	8022234 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a846:	4b07      	ldr	r3, [pc, #28]	; (800a864 <Print_Medha_Self_Details+0xb4>)
 800a848:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a84c:	4619      	mov	r1, r3
 800a84e:	4810      	ldr	r0, [pc, #64]	; (800a890 <Print_Medha_Self_Details+0xe0>)
 800a850:	f017 fcf0 	bl	8022234 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a854:	4802      	ldr	r0, [pc, #8]	; (800a860 <Print_Medha_Self_Details+0xb0>)
 800a856:	f017 fd89 	bl	802236c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800a85a:	bf00      	nop
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	080256fc 	.word	0x080256fc
 800a864:	20000304 	.word	0x20000304
 800a868:	08025750 	.word	0x08025750
 800a86c:	08025774 	.word	0x08025774
 800a870:	08025798 	.word	0x08025798
 800a874:	080257bc 	.word	0x080257bc
 800a878:	080257e0 	.word	0x080257e0
 800a87c:	08025804 	.word	0x08025804
 800a880:	08025828 	.word	0x08025828
 800a884:	0802584c 	.word	0x0802584c
 800a888:	08025870 	.word	0x08025870
 800a88c:	08025894 	.word	0x08025894
 800a890:	080258b8 	.word	0x080258b8

0800a894 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b09a      	sub	sp, #104	; 0x68
 800a898:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	1d3b      	adds	r3, r7, #4
 800a8b2:	2260      	movs	r2, #96	; 0x60
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f017 fbd4 	bl	8022064 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a8bc:	4bb9      	ldr	r3, [pc, #740]	; (800aba4 <CheckforMedhaCMD+0x310>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f004 fad9 	bl	800ee78 <HAL_Elaps_Ticks>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	f240 81ad 	bls.w	800ac28 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a8ce:	e010      	b.n	800a8f2 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	f00a fa85 	bl	8014de0 <Com_Get_Byte>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a8dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a8e6:	3368      	adds	r3, #104	; 0x68
 800a8e8:	443b      	add	r3, r7
 800a8ea:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a8ee:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	f00a fa34 	bl	8014d60 <Com_DataReady>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1e8      	bne.n	800a8d0 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a8fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 8144 	beq.w	800ab90 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a908:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a90c:	3368      	adds	r3, #104	; 0x68
 800a90e:	443b      	add	r3, r7
 800a910:	2200      	movs	r2, #0
 800a912:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a916:	463b      	mov	r3, r7
 800a918:	4619      	mov	r1, r3
 800a91a:	48a3      	ldr	r0, [pc, #652]	; (800aba8 <CheckforMedhaCMD+0x314>)
 800a91c:	f017 fc8a 	bl	8022234 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a920:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a924:	463b      	mov	r3, r7
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 fa0d 	bl	800ad48 <Is_MedhaCommand_Valid>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b0c      	cmp	r3, #12
 800a932:	f200 8129 	bhi.w	800ab88 <CheckforMedhaCMD+0x2f4>
 800a936:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <CheckforMedhaCMD+0xa8>)
 800a938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93c:	0800a971 	.word	0x0800a971
 800a940:	0800a97f 	.word	0x0800a97f
 800a944:	0800a9e3 	.word	0x0800a9e3
 800a948:	0800aa05 	.word	0x0800aa05
 800a94c:	0800aa2d 	.word	0x0800aa2d
 800a950:	0800aa55 	.word	0x0800aa55
 800a954:	0800aa7d 	.word	0x0800aa7d
 800a958:	0800aaa5 	.word	0x0800aaa5
 800a95c:	0800aacd 	.word	0x0800aacd
 800a960:	0800aaf5 	.word	0x0800aaf5
 800a964:	0800ab1d 	.word	0x0800ab1d
 800a968:	0800ab45 	.word	0x0800ab45
 800a96c:	0800ab6d 	.word	0x0800ab6d
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a970:	4b8e      	ldr	r3, [pc, #568]	; (800abac <CheckforMedhaCMD+0x318>)
 800a972:	2201      	movs	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a976:	488e      	ldr	r0, [pc, #568]	; (800abb0 <CheckforMedhaCMD+0x31c>)
 800a978:	f017 fcf8 	bl	802236c <puts>
				break;
 800a97c:	e109      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a97e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a982:	3b01      	subs	r3, #1
 800a984:	3368      	adds	r3, #104	; 0x68
 800a986:	443b      	add	r3, r7
 800a988:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a98c:	3b30      	subs	r3, #48	; 0x30
 800a98e:	461a      	mov	r2, r3
 800a990:	4988      	ldr	r1, [pc, #544]	; (800abb4 <CheckforMedhaCMD+0x320>)
 800a992:	4889      	ldr	r0, [pc, #548]	; (800abb8 <CheckforMedhaCMD+0x324>)
 800a994:	f017 fc4e 	bl	8022234 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a998:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a99c:	3b01      	subs	r3, #1
 800a99e:	3368      	adds	r3, #104	; 0x68
 800a9a0:	443b      	add	r3, r7
 800a9a2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a9a6:	2b2f      	cmp	r3, #47	; 0x2f
 800a9a8:	d914      	bls.n	800a9d4 <CheckforMedhaCMD+0x140>
 800a9aa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	3368      	adds	r3, #104	; 0x68
 800a9b2:	443b      	add	r3, r7
 800a9b4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a9b8:	2b32      	cmp	r3, #50	; 0x32
 800a9ba:	d80b      	bhi.n	800a9d4 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a9bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	3368      	adds	r3, #104	; 0x68
 800a9c4:	443b      	add	r3, r7
 800a9c6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a9ca:	3b30      	subs	r3, #48	; 0x30
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	4b7b      	ldr	r3, [pc, #492]	; (800abbc <CheckforMedhaCMD+0x328>)
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	e002      	b.n	800a9da <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a9d4:	487a      	ldr	r0, [pc, #488]	; (800abc0 <CheckforMedhaCMD+0x32c>)
 800a9d6:	f017 fcc9 	bl	802236c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9e0:	e0d7      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a9e2:	4978      	ldr	r1, [pc, #480]	; (800abc4 <CheckforMedhaCMD+0x330>)
 800a9e4:	4878      	ldr	r0, [pc, #480]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800a9e6:	f017 fc25 	bl	8022234 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a9ea:	4878      	ldr	r0, [pc, #480]	; (800abcc <CheckforMedhaCMD+0x338>)
 800a9ec:	f017 fcbe 	bl	802236c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9f0:	4b77      	ldr	r3, [pc, #476]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f043 0301 	orr.w	r3, r3, #1
 800a9f8:	4a75      	ldr	r2, [pc, #468]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800a9fa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa02:	e0c6      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800aa04:	4973      	ldr	r1, [pc, #460]	; (800abd4 <CheckforMedhaCMD+0x340>)
 800aa06:	4870      	ldr	r0, [pc, #448]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aa08:	f017 fc14 	bl	8022234 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800aa0c:	4872      	ldr	r0, [pc, #456]	; (800abd8 <CheckforMedhaCMD+0x344>)
 800aa0e:	f017 fcad 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa12:	4b6f      	ldr	r3, [pc, #444]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa18:	4b6d      	ldr	r3, [pc, #436]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f043 0302 	orr.w	r3, r3, #2
 800aa20:	4a6b      	ldr	r2, [pc, #428]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa22:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa2a:	e0b2      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800aa2c:	496b      	ldr	r1, [pc, #428]	; (800abdc <CheckforMedhaCMD+0x348>)
 800aa2e:	4866      	ldr	r0, [pc, #408]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aa30:	f017 fc00 	bl	8022234 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800aa34:	486a      	ldr	r0, [pc, #424]	; (800abe0 <CheckforMedhaCMD+0x34c>)
 800aa36:	f017 fc99 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa3a:	4b65      	ldr	r3, [pc, #404]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa40:	4b63      	ldr	r3, [pc, #396]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f043 0304 	orr.w	r3, r3, #4
 800aa48:	4a61      	ldr	r2, [pc, #388]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa4a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa52:	e09e      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800aa54:	4963      	ldr	r1, [pc, #396]	; (800abe4 <CheckforMedhaCMD+0x350>)
 800aa56:	485c      	ldr	r0, [pc, #368]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aa58:	f017 fbec 	bl	8022234 <iprintf>
				printf("INVALID_DES_PORT\n");
 800aa5c:	4862      	ldr	r0, [pc, #392]	; (800abe8 <CheckforMedhaCMD+0x354>)
 800aa5e:	f017 fc85 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa62:	4b5b      	ldr	r3, [pc, #364]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa68:	4b59      	ldr	r3, [pc, #356]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f043 0308 	orr.w	r3, r3, #8
 800aa70:	4a57      	ldr	r2, [pc, #348]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa72:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa7a:	e08a      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800aa7c:	495b      	ldr	r1, [pc, #364]	; (800abec <CheckforMedhaCMD+0x358>)
 800aa7e:	4852      	ldr	r0, [pc, #328]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aa80:	f017 fbd8 	bl	8022234 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800aa84:	485a      	ldr	r0, [pc, #360]	; (800abf0 <CheckforMedhaCMD+0x35c>)
 800aa86:	f017 fc71 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa8a:	4b51      	ldr	r3, [pc, #324]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa90:	4b4f      	ldr	r3, [pc, #316]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f043 0310 	orr.w	r3, r3, #16
 800aa98:	4a4d      	ldr	r2, [pc, #308]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aa9a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaa2:	e076      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800aaa4:	4953      	ldr	r1, [pc, #332]	; (800abf4 <CheckforMedhaCMD+0x360>)
 800aaa6:	4848      	ldr	r0, [pc, #288]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aaa8:	f017 fbc4 	bl	8022234 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800aaac:	4852      	ldr	r0, [pc, #328]	; (800abf8 <CheckforMedhaCMD+0x364>)
 800aaae:	f017 fc5d 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aab2:	4b47      	ldr	r3, [pc, #284]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aab8:	4b45      	ldr	r3, [pc, #276]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f043 0320 	orr.w	r3, r3, #32
 800aac0:	4a43      	ldr	r2, [pc, #268]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aac2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaca:	e062      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800aacc:	494b      	ldr	r1, [pc, #300]	; (800abfc <CheckforMedhaCMD+0x368>)
 800aace:	484c      	ldr	r0, [pc, #304]	; (800ac00 <CheckforMedhaCMD+0x36c>)
 800aad0:	f017 fbb0 	bl	8022234 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800aad4:	484b      	ldr	r0, [pc, #300]	; (800ac04 <CheckforMedhaCMD+0x370>)
 800aad6:	f017 fc49 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aada:	4b3d      	ldr	r3, [pc, #244]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aadc:	2200      	movs	r2, #0
 800aade:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aae0:	4b3b      	ldr	r3, [pc, #236]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae8:	4a39      	ldr	r2, [pc, #228]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800aaea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aaec:	2301      	movs	r3, #1
 800aaee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaf2:	e04e      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800aaf4:	4944      	ldr	r1, [pc, #272]	; (800ac08 <CheckforMedhaCMD+0x374>)
 800aaf6:	4834      	ldr	r0, [pc, #208]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800aaf8:	f017 fb9c 	bl	8022234 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800aafc:	4843      	ldr	r0, [pc, #268]	; (800ac0c <CheckforMedhaCMD+0x378>)
 800aafe:	f017 fc35 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab02:	4b33      	ldr	r3, [pc, #204]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab10:	4a2f      	ldr	r2, [pc, #188]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab12:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab1a:	e03a      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800ab1c:	493c      	ldr	r1, [pc, #240]	; (800ac10 <CheckforMedhaCMD+0x37c>)
 800ab1e:	482a      	ldr	r0, [pc, #168]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800ab20:	f017 fb88 	bl	8022234 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ab24:	483b      	ldr	r0, [pc, #236]	; (800ac14 <CheckforMedhaCMD+0x380>)
 800ab26:	f017 fc21 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab2a:	4b29      	ldr	r3, [pc, #164]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab30:	4b27      	ldr	r3, [pc, #156]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab38:	4a25      	ldr	r2, [pc, #148]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab3a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab42:	e026      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800ab44:	4934      	ldr	r1, [pc, #208]	; (800ac18 <CheckforMedhaCMD+0x384>)
 800ab46:	4820      	ldr	r0, [pc, #128]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800ab48:	f017 fb74 	bl	8022234 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800ab4c:	4833      	ldr	r0, [pc, #204]	; (800ac1c <CheckforMedhaCMD+0x388>)
 800ab4e:	f017 fc0d 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab52:	4b1f      	ldr	r3, [pc, #124]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab58:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab60:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab62:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab6a:	e012      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800ab6c:	492c      	ldr	r1, [pc, #176]	; (800ac20 <CheckforMedhaCMD+0x38c>)
 800ab6e:	4816      	ldr	r0, [pc, #88]	; (800abc8 <CheckforMedhaCMD+0x334>)
 800ab70:	f017 fb60 	bl	8022234 <iprintf>
				printf("CLEAR ALL\n");
 800ab74:	482b      	ldr	r0, [pc, #172]	; (800ac24 <CheckforMedhaCMD+0x390>)
 800ab76:	f017 fbf9 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab7a:	4b15      	ldr	r3, [pc, #84]	; (800abd0 <CheckforMedhaCMD+0x33c>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab86:	e004      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800ab88:	480d      	ldr	r0, [pc, #52]	; (800abc0 <CheckforMedhaCMD+0x32c>)
 800ab8a:	f017 fbef 	bl	802236c <puts>
 800ab8e:	e000      	b.n	800ab92 <CheckforMedhaCMD+0x2fe>
			}
		}
 800ab90:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800ab92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d147      	bne.n	800ac2a <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800ab9a:	f240 2005 	movw	r0, #517	; 0x205
 800ab9e:	f004 ff6d 	bl	800fa7c <TransmitCanPkt>
 800aba2:	e042      	b.n	800ac2a <CheckforMedhaCMD+0x396>
 800aba4:	2000a07c 	.word	0x2000a07c
 800aba8:	080258dc 	.word	0x080258dc
 800abac:	20000644 	.word	0x20000644
 800abb0:	080258f4 	.word	0x080258f4
 800abb4:	2000217a 	.word	0x2000217a
 800abb8:	08025934 	.word	0x08025934
 800abbc:	20000645 	.word	0x20000645
 800abc0:	08025948 	.word	0x08025948
 800abc4:	200021ac 	.word	0x200021ac
 800abc8:	08025964 	.word	0x08025964
 800abcc:	08025974 	.word	0x08025974
 800abd0:	20003500 	.word	0x20003500
 800abd4:	200021de 	.word	0x200021de
 800abd8:	0802598c 	.word	0x0802598c
 800abdc:	20002210 	.word	0x20002210
 800abe0:	080259a4 	.word	0x080259a4
 800abe4:	20002242 	.word	0x20002242
 800abe8:	080259b8 	.word	0x080259b8
 800abec:	20002274 	.word	0x20002274
 800abf0:	080259cc 	.word	0x080259cc
 800abf4:	200022a6 	.word	0x200022a6
 800abf8:	080259e0 	.word	0x080259e0
 800abfc:	200022d8 	.word	0x200022d8
 800ac00:	080259fc 	.word	0x080259fc
 800ac04:	08025a14 	.word	0x08025a14
 800ac08:	2000230a 	.word	0x2000230a
 800ac0c:	08025a28 	.word	0x08025a28
 800ac10:	2000233c 	.word	0x2000233c
 800ac14:	08025a40 	.word	0x08025a40
 800ac18:	2000236e 	.word	0x2000236e
 800ac1c:	08025a60 	.word	0x08025a60
 800ac20:	200023a0 	.word	0x200023a0
 800ac24:	08025a80 	.word	0x08025a80
		return;
 800ac28:	bf00      	nop
		}
	}
}
 800ac2a:	3768      	adds	r7, #104	; 0x68
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800ac3a:	79fb      	ldrb	r3, [r7, #7]
 800ac3c:	4a3d      	ldr	r2, [pc, #244]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac3e:	2132      	movs	r1, #50	; 0x32
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	4413      	add	r3, r2
 800ac46:	2224      	movs	r2, #36	; 0x24
 800ac48:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	4a39      	ldr	r2, [pc, #228]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac4e:	2132      	movs	r1, #50	; 0x32
 800ac50:	fb01 f303 	mul.w	r3, r1, r3
 800ac54:	4413      	add	r3, r2
 800ac56:	3301      	adds	r3, #1
 800ac58:	2201      	movs	r2, #1
 800ac5a:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	4a35      	ldr	r2, [pc, #212]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac60:	2132      	movs	r1, #50	; 0x32
 800ac62:	fb01 f303 	mul.w	r3, r1, r3
 800ac66:	4413      	add	r3, r2
 800ac68:	3302      	adds	r3, #2
 800ac6a:	2230      	movs	r2, #48	; 0x30
 800ac6c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	4a30      	ldr	r2, [pc, #192]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac72:	2132      	movs	r1, #50	; 0x32
 800ac74:	fb01 f303 	mul.w	r3, r1, r3
 800ac78:	4413      	add	r3, r2
 800ac7a:	3303      	adds	r3, #3
 800ac7c:	2240      	movs	r2, #64	; 0x40
 800ac7e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	4a2c      	ldr	r2, [pc, #176]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac84:	2132      	movs	r1, #50	; 0x32
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	22c0      	movs	r2, #192	; 0xc0
 800ac90:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	4a27      	ldr	r2, [pc, #156]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ac96:	2132      	movs	r1, #50	; 0x32
 800ac98:	fb01 f303 	mul.w	r3, r1, r3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3305      	adds	r3, #5
 800aca0:	224e      	movs	r2, #78	; 0x4e
 800aca2:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	4a23      	ldr	r2, [pc, #140]	; (800ad34 <Update_MedhaCommands+0x104>)
 800aca8:	2132      	movs	r1, #50	; 0x32
 800acaa:	fb01 f303 	mul.w	r3, r1, r3
 800acae:	4413      	add	r3, r2
 800acb0:	3306      	adds	r3, #6
 800acb2:	2226      	movs	r2, #38	; 0x26
 800acb4:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	3301      	adds	r3, #1
 800acba:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	71fa      	strb	r2, [r7, #7]
 800acc2:	461a      	mov	r2, r3
 800acc4:	2332      	movs	r3, #50	; 0x32
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	4a1a      	ldr	r2, [pc, #104]	; (800ad34 <Update_MedhaCommands+0x104>)
 800accc:	4413      	add	r3, r2
 800acce:	491a      	ldr	r1, [pc, #104]	; (800ad38 <Update_MedhaCommands+0x108>)
 800acd0:	461a      	mov	r2, r3
 800acd2:	460b      	mov	r3, r1
 800acd4:	cb03      	ldmia	r3!, {r0, r1}
 800acd6:	6010      	str	r0, [r2, #0]
 800acd8:	6051      	str	r1, [r2, #4]
 800acda:	8819      	ldrh	r1, [r3, #0]
 800acdc:	789b      	ldrb	r3, [r3, #2]
 800acde:	8111      	strh	r1, [r2, #8]
 800ace0:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	71fa      	strb	r2, [r7, #7]
 800ace8:	461a      	mov	r2, r3
 800acea:	2332      	movs	r3, #50	; 0x32
 800acec:	fb02 f303 	mul.w	r3, r2, r3
 800acf0:	4a10      	ldr	r2, [pc, #64]	; (800ad34 <Update_MedhaCommands+0x104>)
 800acf2:	4413      	add	r3, r2
 800acf4:	4911      	ldr	r1, [pc, #68]	; (800ad3c <Update_MedhaCommands+0x10c>)
 800acf6:	461a      	mov	r2, r3
 800acf8:	460b      	mov	r3, r1
 800acfa:	cb03      	ldmia	r3!, {r0, r1}
 800acfc:	6010      	str	r0, [r2, #0]
 800acfe:	6051      	str	r1, [r2, #4]
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	71fa      	strb	r2, [r7, #7]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	2332      	movs	r3, #50	; 0x32
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <Update_MedhaCommands+0x104>)
 800ad14:	4413      	add	r3, r2
 800ad16:	4a0a      	ldr	r2, [pc, #40]	; (800ad40 <Update_MedhaCommands+0x110>)
 800ad18:	6810      	ldr	r0, [r2, #0]
 800ad1a:	6018      	str	r0, [r3, #0]
 800ad1c:	7912      	ldrb	r2, [r2, #4]
 800ad1e:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <Update_MedhaCommands+0x114>)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	7013      	strb	r3, [r2, #0]
}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20002148 	.word	0x20002148
 800ad38:	08025a8c 	.word	0x08025a8c
 800ad3c:	08025a98 	.word	0x08025a98
 800ad40:	08025aa4 	.word	0x08025aa4
 800ad44:	20002530 	.word	0x20002530

0800ad48 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
 800ad58:	e01c      	b.n	800ad94 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	2232      	movs	r2, #50	; 0x32
 800ad5e:	fb02 f303 	mul.w	r3, r2, r3
 800ad62:	4a11      	ldr	r2, [pc, #68]	; (800ada8 <Is_MedhaCommand_Valid+0x60>)
 800ad64:	189c      	adds	r4, r3, r2
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	2232      	movs	r2, #50	; 0x32
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	4a0e      	ldr	r2, [pc, #56]	; (800ada8 <Is_MedhaCommand_Valid+0x60>)
 800ad70:	4413      	add	r3, r2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f5 fa6e 	bl	8000254 <strlen>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f017 f938 	bl	8021ff4 <memcmp>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	e008      	b.n	800ada0 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	3301      	adds	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <Is_MedhaCommand_Valid+0x64>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	7bfa      	ldrb	r2, [r7, #15]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d3dd      	bcc.n	800ad5a <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800ad9e:	23ff      	movs	r3, #255	; 0xff
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd90      	pop	{r4, r7, pc}
 800ada8:	20002148 	.word	0x20002148
 800adac:	20002530 	.word	0x20002530

0800adb0 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	4603      	mov	r3, r0
 800adb8:	6039      	str	r1, [r7, #0]
 800adba:	80fb      	strh	r3, [r7, #6]
 800adbc:	4613      	mov	r3, r2
 800adbe:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800adcc:	88fb      	ldrh	r3, [r7, #6]
 800adce:	613b      	str	r3, [r7, #16]
 800add0:	e015      	b.n	800adfe <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	b2da      	uxtb	r2, r3
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	440b      	add	r3, r1
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4053      	eors	r3, r2
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	0a1b      	lsrs	r3, r3, #8
 800ade8:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800adea:	4a0a      	ldr	r2, [pc, #40]	; (800ae14 <GetCRC32+0x64>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4053      	eors	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3301      	adds	r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	88bb      	ldrh	r3, [r7, #4]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d3e5      	bcc.n	800add2 <GetCRC32+0x22>
	}

	return Crc;
 800ae06:	697b      	ldr	r3, [r7, #20]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	08028684 	.word	0x08028684

0800ae18 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	6039      	str	r1, [r7, #0]
 800ae22:	80fb      	strh	r3, [r7, #6]
 800ae24:	4613      	mov	r3, r2
 800ae26:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800ae30:	88ba      	ldrh	r2, [r7, #4]
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff ffba 	bl	800adb0 <GetCRC32>
 800ae3c:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800ae3e:	88bb      	ldrh	r3, [r7, #4]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	4413      	add	r3, r2
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d101      	bne.n	800ae54 <CheckCRC32+0x3c>
	{
		return OK;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e009      	b.n	800ae68 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	4619      	mov	r1, r3
 800ae58:	4805      	ldr	r0, [pc, #20]	; (800ae70 <CheckCRC32+0x58>)
 800ae5a:	f017 f9eb 	bl	8022234 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	4804      	ldr	r0, [pc, #16]	; (800ae74 <CheckCRC32+0x5c>)
 800ae62:	f017 f9e7 	bl	8022234 <iprintf>
		return NOT_OK;
 800ae66:	2300      	movs	r3, #0
	}

}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	08025aac 	.word	0x08025aac
 800ae74:	08025ac4 	.word	0x08025ac4

0800ae78 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	f107 0310 	add.w	r3, r7, #16
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f107 010c 	add.w	r1, r7, #12
 800ae98:	220a      	movs	r2, #10
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f846 	bl	800af2c <ReadAndFormMsg>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd34      	ble.n	800af10 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aea6:	7b7b      	ldrb	r3, [r7, #13]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d115      	bne.n	800aed8 <CheckForRqst+0x60>
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d112      	bne.n	800aed8 <CheckForRqst+0x60>
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d10f      	bne.n	800aed8 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800aeb8:	4818      	ldr	r0, [pc, #96]	; (800af1c <CheckForRqst+0xa4>)
 800aeba:	f017 fa57 	bl	802236c <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2202      	movs	r2, #2
 800aec2:	2101      	movs	r1, #1
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 f933 	bl	800b130 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aeca:	f00a fab1 	bl	8015430 <HAL_GetTick>
 800aece:	4603      	mov	r3, r0
 800aed0:	4a13      	ldr	r2, [pc, #76]	; (800af20 <CheckForRqst+0xa8>)
 800aed2:	6013      	str	r3, [r2, #0]
			return 0x01;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e01c      	b.n	800af12 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aed8:	7b7b      	ldrb	r3, [r7, #13]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d115      	bne.n	800af0a <CheckForRqst+0x92>
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d112      	bne.n	800af0a <CheckForRqst+0x92>
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d10f      	bne.n	800af0a <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800aeea:	480e      	ldr	r0, [pc, #56]	; (800af24 <CheckForRqst+0xac>)
 800aeec:	f017 fa3e 	bl	802236c <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	2202      	movs	r2, #2
 800aef4:	2102      	movs	r1, #2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 f91a 	bl	800b130 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aefc:	f00a fa98 	bl	8015430 <HAL_GetTick>
 800af00:	4603      	mov	r3, r0
 800af02:	4a07      	ldr	r2, [pc, #28]	; (800af20 <CheckForRqst+0xa8>)
 800af04:	6013      	str	r3, [r2, #0]
			return 0x02;
 800af06:	2302      	movs	r3, #2
 800af08:	e003      	b.n	800af12 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800af0a:	4807      	ldr	r0, [pc, #28]	; (800af28 <CheckForRqst+0xb0>)
 800af0c:	f017 fa2e 	bl	802236c <puts>
	}
	return 0x00;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	08025adc 	.word	0x08025adc
 800af20:	20000a4c 	.word	0x20000a4c
 800af24:	08025af4 	.word	0x08025af4
 800af28:	08025b0c 	.word	0x08025b0c

0800af2c <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b087      	sub	sp, #28
 800af30:	af02      	add	r7, sp, #8
 800af32:	4603      	mov	r3, r0
 800af34:	6039      	str	r1, [r7, #0]
 800af36:	80fb      	strh	r3, [r7, #6]
 800af38:	4613      	mov	r3, r2
 800af3a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800af40:	2300      	movs	r3, #0
 800af42:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800af44:	2300      	movs	r3, #0
 800af46:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800af48:	e0d4      	b.n	800b0f4 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800af4a:	4b71      	ldr	r3, [pc, #452]	; (800b110 <ReadAndFormMsg+0x1e4>)
 800af4c:	2201      	movs	r2, #1
 800af4e:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800af50:	4870      	ldr	r0, [pc, #448]	; (800b114 <ReadAndFormMsg+0x1e8>)
 800af52:	f00d fcdf 	bl	8018914 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800af56:	88fb      	ldrh	r3, [r7, #6]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	4618      	mov	r0, r3
 800af5c:	f009 ff40 	bl	8014de0 <Com_Get_Byte>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800af64:	f00a f852 	bl	801500c <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800af68:	4b6b      	ldr	r3, [pc, #428]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	f000 8099 	beq.w	800b0a4 <ReadAndFormMsg+0x178>
 800af72:	2b03      	cmp	r3, #3
 800af74:	f300 80b0 	bgt.w	800b0d8 <ReadAndFormMsg+0x1ac>
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d002      	beq.n	800af82 <ReadAndFormMsg+0x56>
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d00e      	beq.n	800af9e <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800af80:	e0aa      	b.n	800b0d8 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	2b24      	cmp	r3, #36	; 0x24
 800af86:	f040 80a9 	bne.w	800b0dc <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	7bfa      	ldrb	r2, [r7, #15]
 800af8e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800af90:	4b62      	ldr	r3, [pc, #392]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800af92:	2201      	movs	r2, #1
 800af94:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af96:	4b60      	ldr	r3, [pc, #384]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800af98:	2202      	movs	r2, #2
 800af9a:	701a      	strb	r2, [r3, #0]
			break;
 800af9c:	e09e      	b.n	800b0dc <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	2b26      	cmp	r3, #38	; 0x26
 800afa2:	d006      	beq.n	800afb2 <ReadAndFormMsg+0x86>
 800afa4:	2b26      	cmp	r3, #38	; 0x26
 800afa6:	dc6e      	bgt.n	800b086 <ReadAndFormMsg+0x15a>
 800afa8:	2b05      	cmp	r3, #5
 800afaa:	d068      	beq.n	800b07e <ReadAndFormMsg+0x152>
 800afac:	2b24      	cmp	r3, #36	; 0x24
 800afae:	d05c      	beq.n	800b06a <ReadAndFormMsg+0x13e>
 800afb0:	e069      	b.n	800b086 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800afb2:	4b5a      	ldr	r3, [pc, #360]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	3b02      	subs	r3, #2
 800afb8:	b29b      	uxth	r3, r3
 800afba:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800afbc:	4b57      	ldr	r3, [pc, #348]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800afc2:	4b56      	ldr	r3, [pc, #344]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800afc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da01      	bge.n	800afd4 <ReadAndFormMsg+0xa8>
					return 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	e099      	b.n	800b108 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800afd4:	4b50      	ldr	r3, [pc, #320]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800afd6:	2201      	movs	r2, #1
 800afd8:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800afda:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800afde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800afe8:	461c      	mov	r4, r3
 800afea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afee:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800aff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	4413      	add	r3, r2
 800affa:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	4603      	mov	r3, r0
 800b000:	4622      	mov	r2, r4
 800b002:	4847      	ldr	r0, [pc, #284]	; (800b120 <ReadAndFormMsg+0x1f4>)
 800b004:	f017 f916 	bl	8022234 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	f007 fd28 	bl	8012a64 <CheckCRC>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d012      	beq.n	800b040 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b01a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	4413      	add	r3, r2
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	4619      	mov	r1, r3
 800b026:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	4413      	add	r3, r2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	483b      	ldr	r0, [pc, #236]	; (800b124 <ReadAndFormMsg+0x1f8>)
 800b036:	f017 f8fd 	bl	8022234 <iprintf>
					return us_ReturnBytes;
 800b03a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b03e:	e063      	b.n	800b108 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800b040:	4839      	ldr	r0, [pc, #228]	; (800b128 <ReadAndFormMsg+0x1fc>)
 800b042:	f017 f8f7 	bl	8022234 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b046:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	4619      	mov	r1, r3
 800b052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b056:	3301      	adds	r3, #1
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	4413      	add	r3, r2
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	4832      	ldr	r0, [pc, #200]	; (800b12c <ReadAndFormMsg+0x200>)
 800b062:	f017 f8e7 	bl	8022234 <iprintf>
					return 0;
 800b066:	2300      	movs	r3, #0
 800b068:	e04e      	b.n	800b108 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	7bfa      	ldrb	r2, [r7, #15]
 800b06e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b070:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b072:	2201      	movs	r2, #1
 800b074:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b076:	4b28      	ldr	r3, [pc, #160]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800b078:	2202      	movs	r2, #2
 800b07a:	701a      	strb	r2, [r3, #0]
				break;
 800b07c:	e011      	b.n	800b0a2 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800b07e:	4b26      	ldr	r3, [pc, #152]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800b080:	2203      	movs	r2, #3
 800b082:	701a      	strb	r2, [r3, #0]
				break;
 800b084:	e00d      	b.n	800b0a2 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800b086:	4b25      	ldr	r3, [pc, #148]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	4413      	add	r3, r2
 800b090:	7bfa      	ldrb	r2, [r7, #15]
 800b092:	701a      	strb	r2, [r3, #0]
				j++;
 800b094:	4b21      	ldr	r3, [pc, #132]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b09e:	801a      	strh	r2, [r3, #0]
				break;
 800b0a0:	bf00      	nop
			break;
 800b0a2:	e01c      	b.n	800b0de <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b24      	cmp	r3, #36	; 0x24
 800b0a8:	d005      	beq.n	800b0b6 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b26      	cmp	r3, #38	; 0x26
 800b0ae:	d002      	beq.n	800b0b6 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	d10c      	bne.n	800b0d0 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800b0b6:	4b19      	ldr	r3, [pc, #100]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	4413      	add	r3, r2
 800b0c0:	7bfa      	ldrb	r2, [r7, #15]
 800b0c2:	701a      	strb	r2, [r3, #0]
					j++;
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b0ce:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b0d0:	4b11      	ldr	r3, [pc, #68]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	701a      	strb	r2, [r3, #0]
				break;
 800b0d6:	e002      	b.n	800b0de <ReadAndFormMsg+0x1b2>
				break;
 800b0d8:	bf00      	nop
 800b0da:	e000      	b.n	800b0de <ReadAndFormMsg+0x1b2>
			break;
 800b0dc:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	88ba      	ldrh	r2, [r7, #4]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d805      	bhi.n	800b0f4 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800b0e8:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <ReadAndFormMsg+0x1ec>)
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800b0ee:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <ReadAndFormMsg+0x1f0>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b0f4:	88fb      	ldrh	r3, [r7, #6]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f009 fe31 	bl	8014d60 <Com_DataReady>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	f47f af22 	bne.w	800af4a <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd90      	pop	{r4, r7, pc}
 800b110:	20000a4a 	.word	0x20000a4a
 800b114:	20009ce4 	.word	0x20009ce4
 800b118:	20000117 	.word	0x20000117
 800b11c:	2000285c 	.word	0x2000285c
 800b120:	08025b1c 	.word	0x08025b1c
 800b124:	08025b44 	.word	0x08025b44
 800b128:	08025b58 	.word	0x08025b58
 800b12c:	08025b64 	.word	0x08025b64

0800b130 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
 800b13a:	460b      	mov	r3, r1
 800b13c:	71bb      	strb	r3, [r7, #6]
 800b13e:	4613      	mov	r3, r2
 800b140:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800b146:	2300      	movs	r3, #0
 800b148:	60bb      	str	r3, [r7, #8]
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800b154:	2324      	movs	r3, #36	; 0x24
 800b156:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800b158:	79bb      	ldrb	r3, [r7, #6]
 800b15a:	121b      	asrs	r3, r3, #8
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800b160:	79bb      	ldrb	r3, [r7, #6]
 800b162:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800b164:	797b      	ldrb	r3, [r7, #5]
 800b166:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	2104      	movs	r1, #4
 800b16e:	4618      	mov	r0, r3
 800b170:	f007 fd22 	bl	8012bb8 <ComputeCRC>
	puc_Message[6]= '&';
 800b174:	2326      	movs	r3, #38	; 0x26
 800b176:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b178:	7b3b      	ldrb	r3, [r7, #12]
 800b17a:	4619      	mov	r1, r3
 800b17c:	7b7b      	ldrb	r3, [r7, #13]
 800b17e:	461a      	mov	r2, r3
 800b180:	480f      	ldr	r0, [pc, #60]	; (800b1c0 <SendAck+0x90>)
 800b182:	f017 f857 	bl	8022234 <iprintf>

	AckTim=HAL_GetTick();
 800b186:	f00a f953 	bl	8015430 <HAL_GetTick>
 800b18a:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b18c:	e002      	b.n	800b194 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b18e:	480d      	ldr	r0, [pc, #52]	; (800b1c4 <SendAck+0x94>)
 800b190:	f00d fbc0 	bl	8018914 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b194:	6978      	ldr	r0, [r7, #20]
 800b196:	f003 fe6f 	bl	800ee78 <HAL_Elaps_Ticks>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f240 52db 	movw	r2, #1499	; 0x5db
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d9f4      	bls.n	800b18e <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b1a4:	f107 0108 	add.w	r1, r7, #8
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2206      	movs	r2, #6
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f009 fe97 	bl	8014ee0 <CommTransmitMessage>

	AckTim = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	617b      	str	r3, [r7, #20]
}
 800b1b6:	bf00      	nop
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	08025b70 	.word	0x08025b70
 800b1c4:	20009ce4 	.word	0x20009ce4

0800b1c8 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	6039      	str	r1, [r7, #0]
 800b1d2:	80fb      	strh	r3, [r7, #6]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b1e4:	e0ba      	b.n	800b35c <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b1e6:	88fb      	ldrh	r3, [r7, #6]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f009 fdf8 	bl	8014de0 <Com_Get_Byte>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b1f4:	f009 ff0a 	bl	801500c <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b1f8:	485f      	ldr	r0, [pc, #380]	; (800b378 <ReadAndFormConfig+0x1b0>)
 800b1fa:	f00d fb8b 	bl	8018914 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b1fe:	4b5f      	ldr	r3, [pc, #380]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b03      	cmp	r3, #3
 800b204:	f000 8082 	beq.w	800b30c <ReadAndFormConfig+0x144>
 800b208:	2b03      	cmp	r3, #3
 800b20a:	f300 8099 	bgt.w	800b340 <ReadAndFormConfig+0x178>
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d002      	beq.n	800b218 <ReadAndFormConfig+0x50>
 800b212:	2b02      	cmp	r3, #2
 800b214:	d00e      	beq.n	800b234 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b216:	e093      	b.n	800b340 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b24      	cmp	r3, #36	; 0x24
 800b21c:	f040 8092 	bne.w	800b344 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	7bfa      	ldrb	r2, [r7, #15]
 800b224:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b226:	4b56      	ldr	r3, [pc, #344]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b228:	2201      	movs	r2, #1
 800b22a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b22c:	4b53      	ldr	r3, [pc, #332]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b22e:	2202      	movs	r2, #2
 800b230:	701a      	strb	r2, [r3, #0]
			break;
 800b232:	e087      	b.n	800b344 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b26      	cmp	r3, #38	; 0x26
 800b238:	d006      	beq.n	800b248 <ReadAndFormConfig+0x80>
 800b23a:	2b26      	cmp	r3, #38	; 0x26
 800b23c:	dc57      	bgt.n	800b2ee <ReadAndFormConfig+0x126>
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d051      	beq.n	800b2e6 <ReadAndFormConfig+0x11e>
 800b242:	2b24      	cmp	r3, #36	; 0x24
 800b244:	d045      	beq.n	800b2d2 <ReadAndFormConfig+0x10a>
 800b246:	e052      	b.n	800b2ee <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b248:	4b4d      	ldr	r3, [pc, #308]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	3b02      	subs	r3, #2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b252:	4b4b      	ldr	r3, [pc, #300]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b258:	4b49      	ldr	r3, [pc, #292]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b25e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	da01      	bge.n	800b26a <ReadAndFormConfig+0xa2>
					return 0;
 800b266:	2300      	movs	r3, #0
 800b268:	e082      	b.n	800b370 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b26a:	4b44      	ldr	r3, [pc, #272]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b26c:	2201      	movs	r2, #1
 800b26e:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b270:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b274:	4619      	mov	r1, r3
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f007 fbf4 	bl	8012a64 <CheckCRC>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d012      	beq.n	800b2a8 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b282:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4413      	add	r3, r2
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	4619      	mov	r1, r3
 800b28e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	4413      	add	r3, r2
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	4839      	ldr	r0, [pc, #228]	; (800b384 <ReadAndFormConfig+0x1bc>)
 800b29e:	f016 ffc9 	bl	8022234 <iprintf>
					return us_ReturnBytes;
 800b2a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b2a6:	e063      	b.n	800b370 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b2a8:	4837      	ldr	r0, [pc, #220]	; (800b388 <ReadAndFormConfig+0x1c0>)
 800b2aa:	f016 ffc3 	bl	8022234 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b2ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4830      	ldr	r0, [pc, #192]	; (800b38c <ReadAndFormConfig+0x1c4>)
 800b2ca:	f016 ffb3 	bl	8022234 <iprintf>
					return 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e04e      	b.n	800b370 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	7bfa      	ldrb	r2, [r7, #15]
 800b2d6:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b2d8:	4b29      	ldr	r3, [pc, #164]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b2de:	4b27      	ldr	r3, [pc, #156]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	701a      	strb	r2, [r3, #0]
				break;
 800b2e4:	e011      	b.n	800b30a <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b2e6:	4b25      	ldr	r3, [pc, #148]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	701a      	strb	r2, [r3, #0]
				break;
 800b2ec:	e00d      	b.n	800b30a <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b2ee:	4b24      	ldr	r3, [pc, #144]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	7bfa      	ldrb	r2, [r7, #15]
 800b2fa:	701a      	strb	r2, [r3, #0]
				i++;
 800b2fc:	4b20      	ldr	r3, [pc, #128]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	3301      	adds	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	4b1e      	ldr	r3, [pc, #120]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b306:	801a      	strh	r2, [r3, #0]
				break;
 800b308:	bf00      	nop
			break;
 800b30a:	e01c      	b.n	800b346 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	2b24      	cmp	r3, #36	; 0x24
 800b310:	d005      	beq.n	800b31e <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b26      	cmp	r3, #38	; 0x26
 800b316:	d002      	beq.n	800b31e <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d10c      	bne.n	800b338 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b31e:	4b18      	ldr	r3, [pc, #96]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	4413      	add	r3, r2
 800b328:	7bfa      	ldrb	r2, [r7, #15]
 800b32a:	701a      	strb	r2, [r3, #0]
					i++;
 800b32c:	4b14      	ldr	r3, [pc, #80]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	b29a      	uxth	r2, r3
 800b334:	4b12      	ldr	r3, [pc, #72]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b336:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b338:	4b10      	ldr	r3, [pc, #64]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b33a:	2202      	movs	r2, #2
 800b33c:	701a      	strb	r2, [r3, #0]
				break;
 800b33e:	e002      	b.n	800b346 <ReadAndFormConfig+0x17e>
				break;
 800b340:	bf00      	nop
 800b342:	e000      	b.n	800b346 <ReadAndFormConfig+0x17e>
			break;
 800b344:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b346:	4b0e      	ldr	r3, [pc, #56]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	88ba      	ldrh	r2, [r7, #4]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d805      	bhi.n	800b35c <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <ReadAndFormConfig+0x1b4>)
 800b352:	2201      	movs	r2, #1
 800b354:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b356:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <ReadAndFormConfig+0x1b8>)
 800b358:	2200      	movs	r2, #0
 800b35a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	4618      	mov	r0, r3
 800b362:	f009 fcfd 	bl	8014d60 <Com_DataReady>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f47f af3c 	bne.w	800b1e6 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20009ce4 	.word	0x20009ce4
 800b37c:	20000118 	.word	0x20000118
 800b380:	2000285e 	.word	0x2000285e
 800b384:	08025b8c 	.word	0x08025b8c
 800b388:	08025b58 	.word	0x08025b58
 800b38c:	08025ba0 	.word	0x08025ba0

0800b390 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b39a:	79fb      	ldrb	r3, [r7, #7]
 800b39c:	091b      	lsrs	r3, r3, #4
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	b2db      	uxtb	r3, r3
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	4a0d      	ldr	r2, [pc, #52]	; (800b408 <Dec_to_BCD+0x44>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	08db      	lsrs	r3, r3, #3
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	b2d8      	uxtb	r0, r3
 800b3de:	79fa      	ldrb	r2, [r7, #7]
 800b3e0:	4b09      	ldr	r3, [pc, #36]	; (800b408 <Dec_to_BCD+0x44>)
 800b3e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b3e6:	08d9      	lsrs	r1, r3, #3
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	4403      	add	r3, r0
 800b3f6:	71fb      	strb	r3, [r7, #7]
	return c;
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	cccccccd 	.word	0xcccccccd

0800b40c <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b40c:	b480      	push	{r7}
 800b40e:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <Is_GPS_Valid+0x34>)
 800b412:	795b      	ldrb	r3, [r3, #5]
 800b414:	2b09      	cmp	r3, #9
 800b416:	d801      	bhi.n	800b41c <Is_GPS_Valid+0x10>
	{
		return 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	e00c      	b.n	800b436 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b41c:	4b08      	ldr	r3, [pc, #32]	; (800b440 <Is_GPS_Valid+0x34>)
 800b41e:	791b      	ldrb	r3, [r3, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b424:	2300      	movs	r3, #0
 800b426:	e006      	b.n	800b436 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b428:	4b05      	ldr	r3, [pc, #20]	; (800b440 <Is_GPS_Valid+0x34>)
 800b42a:	78db      	ldrb	r3, [r3, #3]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b430:	2300      	movs	r3, #0
 800b432:	e000      	b.n	800b436 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b434:	2301      	movs	r3, #1
}
 800b436:	4618      	mov	r0, r3
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	20002860 	.word	0x20002860

0800b444 <Write_RTC>:


void Write_RTC(void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b44a:	2300      	movs	r3, #0
 800b44c:	603b      	str	r3, [r7, #0]
 800b44e:	1d3b      	adds	r3, r7, #4
 800b450:	2100      	movs	r1, #0
 800b452:	460a      	mov	r2, r1
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	460a      	mov	r2, r1
 800b458:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b45a:	f7ff ffd7 	bl	800b40c <Is_GPS_Valid>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d103      	bne.n	800b46c <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b464:	4844      	ldr	r0, [pc, #272]	; (800b578 <Write_RTC+0x134>)
 800b466:	f016 ff81 	bl	802236c <puts>
 800b46a:	e081      	b.n	800b570 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b46c:	4b43      	ldr	r3, [pc, #268]	; (800b57c <Write_RTC+0x138>)
 800b46e:	2201      	movs	r2, #1
 800b470:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b472:	4b43      	ldr	r3, [pc, #268]	; (800b580 <Write_RTC+0x13c>)
 800b474:	789b      	ldrb	r3, [r3, #2]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff ffa4 	bl	800b3c4 <Dec_to_BCD>
 800b47c:	4603      	mov	r3, r0
 800b47e:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b480:	4b3f      	ldr	r3, [pc, #252]	; (800b580 <Write_RTC+0x13c>)
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff ff9d 	bl	800b3c4 <Dec_to_BCD>
 800b48a:	4603      	mov	r3, r0
 800b48c:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b48e:	4b3c      	ldr	r3, [pc, #240]	; (800b580 <Write_RTC+0x13c>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff96 	bl	800b3c4 <Dec_to_BCD>
 800b498:	4603      	mov	r3, r0
 800b49a:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b49c:	4b38      	ldr	r3, [pc, #224]	; (800b580 <Write_RTC+0x13c>)
 800b49e:	78db      	ldrb	r3, [r3, #3]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ff8f 	bl	800b3c4 <Dec_to_BCD>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b4aa:	4b35      	ldr	r3, [pc, #212]	; (800b580 <Write_RTC+0x13c>)
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ff88 	bl	800b3c4 <Dec_to_BCD>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b4b8:	4b31      	ldr	r3, [pc, #196]	; (800b580 <Write_RTC+0x13c>)
 800b4ba:	795b      	ldrb	r3, [r3, #5]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff ff81 	bl	800b3c4 <Dec_to_BCD>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b4c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	21d0      	movs	r1, #208	; 0xd0
 800b4da:	482a      	ldr	r0, [pc, #168]	; (800b584 <Write_RTC+0x140>)
 800b4dc:	f00c fc6c 	bl	8017db8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b4e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4e4:	9302      	str	r3, [sp, #8]
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	21d0      	movs	r1, #208	; 0xd0
 800b4f6:	4823      	ldr	r0, [pc, #140]	; (800b584 <Write_RTC+0x140>)
 800b4f8:	f00c fc5e 	bl	8017db8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b500:	9302      	str	r3, [sp, #8]
 800b502:	2301      	movs	r3, #1
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	463b      	mov	r3, r7
 800b508:	3302      	adds	r3, #2
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2301      	movs	r3, #1
 800b50e:	2202      	movs	r2, #2
 800b510:	21d0      	movs	r1, #208	; 0xd0
 800b512:	481c      	ldr	r0, [pc, #112]	; (800b584 <Write_RTC+0x140>)
 800b514:	f00c fc50 	bl	8017db8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b51c:	9302      	str	r3, [sp, #8]
 800b51e:	2301      	movs	r3, #1
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	463b      	mov	r3, r7
 800b524:	3303      	adds	r3, #3
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	2301      	movs	r3, #1
 800b52a:	2204      	movs	r2, #4
 800b52c:	21d0      	movs	r1, #208	; 0xd0
 800b52e:	4815      	ldr	r0, [pc, #84]	; (800b584 <Write_RTC+0x140>)
 800b530:	f00c fc42 	bl	8017db8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b538:	9302      	str	r3, [sp, #8]
 800b53a:	2301      	movs	r3, #1
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	463b      	mov	r3, r7
 800b540:	3304      	adds	r3, #4
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2301      	movs	r3, #1
 800b546:	2205      	movs	r2, #5
 800b548:	21d0      	movs	r1, #208	; 0xd0
 800b54a:	480e      	ldr	r0, [pc, #56]	; (800b584 <Write_RTC+0x140>)
 800b54c:	f00c fc34 	bl	8017db8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b554:	9302      	str	r3, [sp, #8]
 800b556:	2301      	movs	r3, #1
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	463b      	mov	r3, r7
 800b55c:	3305      	adds	r3, #5
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2301      	movs	r3, #1
 800b562:	2206      	movs	r2, #6
 800b564:	21d0      	movs	r1, #208	; 0xd0
 800b566:	4807      	ldr	r0, [pc, #28]	; (800b584 <Write_RTC+0x140>)
 800b568:	f00c fc26 	bl	8017db8 <HAL_I2C_Mem_Write>

	Get_time();
 800b56c:	f000 f80c 	bl	800b588 <Get_time>

}
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	08025c00 	.word	0x08025c00
 800b57c:	20000e6c 	.word	0x20000e6c
 800b580:	20002860 	.word	0x20002860
 800b584:	20009c3c 	.word	0x20009c3c

0800b588 <Get_time>:


void Get_time(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b58e:	463b      	mov	r3, r7
 800b590:	2207      	movs	r2, #7
 800b592:	2100      	movs	r1, #0
 800b594:	4618      	mov	r0, r3
 800b596:	f016 fd65 	bl	8022064 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b59a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	2307      	movs	r3, #7
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	21d0      	movs	r1, #208	; 0xd0
 800b5ae:	4824      	ldr	r0, [pc, #144]	; (800b640 <Get_time+0xb8>)
 800b5b0:	f00c fd16 	bl	8017fe0 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b5b4:	783b      	ldrb	r3, [r7, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff feea 	bl	800b390 <bcdToDec>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4b20      	ldr	r3, [pc, #128]	; (800b644 <Get_time+0xbc>)
 800b5c2:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b5c4:	787b      	ldrb	r3, [r7, #1]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fee2 	bl	800b390 <bcdToDec>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <Get_time+0xbc>)
 800b5d2:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b5d4:	78bb      	ldrb	r3, [r7, #2]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff feda 	bl	800b390 <bcdToDec>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4b18      	ldr	r3, [pc, #96]	; (800b644 <Get_time+0xbc>)
 800b5e2:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b5e4:	793b      	ldrb	r3, [r7, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fed2 	bl	800b390 <bcdToDec>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4b14      	ldr	r3, [pc, #80]	; (800b644 <Get_time+0xbc>)
 800b5f2:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b5f4:	797b      	ldrb	r3, [r7, #5]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff feca 	bl	800b390 <bcdToDec>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461a      	mov	r2, r3
 800b600:	4b10      	ldr	r3, [pc, #64]	; (800b644 <Get_time+0xbc>)
 800b602:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b604:	79bb      	ldrb	r3, [r7, #6]
 800b606:	4618      	mov	r0, r3
 800b608:	f7ff fec2 	bl	800b390 <bcdToDec>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	4b0c      	ldr	r3, [pc, #48]	; (800b644 <Get_time+0xbc>)
 800b612:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b614:	783a      	ldrb	r2, [r7, #0]
 800b616:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <Get_time+0xc0>)
 800b618:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b61a:	787a      	ldrb	r2, [r7, #1]
 800b61c:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <Get_time+0xc0>)
 800b61e:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b620:	78ba      	ldrb	r2, [r7, #2]
 800b622:	4b09      	ldr	r3, [pc, #36]	; (800b648 <Get_time+0xc0>)
 800b624:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b626:	793a      	ldrb	r2, [r7, #4]
 800b628:	4b07      	ldr	r3, [pc, #28]	; (800b648 <Get_time+0xc0>)
 800b62a:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b62c:	797a      	ldrb	r2, [r7, #5]
 800b62e:	4b06      	ldr	r3, [pc, #24]	; (800b648 <Get_time+0xc0>)
 800b630:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b632:	79ba      	ldrb	r2, [r7, #6]
 800b634:	4b04      	ldr	r3, [pc, #16]	; (800b648 <Get_time+0xc0>)
 800b636:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b638:	bf00      	nop
}
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20009c3c 	.word	0x20009c3c
 800b644:	20002870 	.word	0x20002870
 800b648:	20002878 	.word	0x20002878

0800b64c <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b650:	4b09      	ldr	r3, [pc, #36]	; (800b678 <Update_Time_Every_Sec+0x2c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4618      	mov	r0, r3
 800b656:	f003 fc0f 	bl	800ee78 <HAL_Elaps_Ticks>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b660:	d307      	bcc.n	800b672 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b662:	f7ff ff91 	bl	800b588 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b666:	f009 fee3 	bl	8015430 <HAL_GetTick>
 800b66a:	4603      	mov	r3, r0
 800b66c:	4a02      	ldr	r2, [pc, #8]	; (800b678 <Update_Time_Every_Sec+0x2c>)
 800b66e:	6013      	str	r3, [r2, #0]
	}
	return;
 800b670:	bf00      	nop
 800b672:	bf00      	nop
}
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20002880 	.word	0x20002880

0800b67c <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b680:	f011 f8d0 	bl	801c824 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b684:	4813      	ldr	r0, [pc, #76]	; (800b6d4 <Process_SiemensEI+0x58>)
 800b686:	f00d f945 	bl	8018914 <HAL_IWDG_Refresh>

		Feed_wdt();
 800b68a:	f007 fd8d 	bl	80131a8 <Feed_wdt>

		readCanToStructs();
 800b68e:	f004 fb7b 	bl	800fd88 <readCanToStructs>

		Chech_forSiemensCMD();
 800b692:	f001 fe25 	bl	800d2e0 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b696:	f001 fb83 	bl	800cda0 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b69a:	f001 fc69 	bl	800cf70 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b69e:	f000 f81f 	bl	800b6e0 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b6a2:	f001 fc87 	bl	800cfb4 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b6a6:	f001 fcc9 	bl	800d03c <SendRelays2Other>

		CheckRelayMisMatch();
 800b6aa:	f001 fcdf 	bl	800d06c <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b6ae:	f001 fd17 	bl	800d0e0 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b6b2:	f008 fe8b 	bl	80143cc <Print_BuildDat_Details>

		GetTimeStamp();
 800b6b6:	f002 fd9d 	bl	800e1f4 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <Process_SiemensEI+0x5c>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0de      	beq.n	800b680 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b6c2:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <Process_SiemensEI+0x60>)
 800b6c4:	2203      	movs	r2, #3
 800b6c6:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b6c8:	f008 fd7e 	bl	80141c8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <Process_SiemensEI+0x58>)
 800b6ce:	f00d f921 	bl	8018914 <HAL_IWDG_Refresh>
		Data_Processing();
 800b6d2:	e7f9      	b.n	800b6c8 <Process_SiemensEI+0x4c>
 800b6d4:	20009ce4 	.word	0x20009ce4
 800b6d8:	20000644 	.word	0x20000644
 800b6dc:	20000a49 	.word	0x20000a49

0800b6e0 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b6e6:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b700:	2300      	movs	r3, #0
 800b702:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b706:	2300      	movs	r3, #0
 800b708:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b70c:	2300      	movs	r3, #0
 800b70e:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b712:	2300      	movs	r3, #0
 800b714:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b736:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b73a:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	3304      	adds	r3, #4
 800b744:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f016 fc8a 	bl	8022064 <memset>
	uint16_t Size = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b75c:	4b7c      	ldr	r3, [pc, #496]	; (800b950 <Siemens_Data_Analyser+0x270>)
 800b75e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b762:	2b0a      	cmp	r3, #10
 800b764:	f240 86dc 	bls.w	800c520 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b768:	4b79      	ldr	r3, [pc, #484]	; (800b950 <Siemens_Data_Analyser+0x270>)
 800b76a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b76e:	461a      	mov	r2, r3
 800b770:	f107 030c 	add.w	r3, r7, #12
 800b774:	4976      	ldr	r1, [pc, #472]	; (800b950 <Siemens_Data_Analyser+0x270>)
 800b776:	4618      	mov	r0, r3
 800b778:	f016 fc4c 	bl	8022014 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b77c:	4b74      	ldr	r3, [pc, #464]	; (800b950 <Siemens_Data_Analyser+0x270>)
 800b77e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b782:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b786:	f240 6204 	movw	r2, #1540	; 0x604
 800b78a:	2100      	movs	r1, #0
 800b78c:	4870      	ldr	r0, [pc, #448]	; (800b950 <Siemens_Data_Analyser+0x270>)
 800b78e:	f016 fc69 	bl	8022064 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b792:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b796:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b79a:	2100      	movs	r1, #0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f016 fc61 	bl	8022064 <memset>


	BITSTUFFINIT(0,0);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b7ae:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b02      	subs	r3, #2
 800b7b8:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b7bc:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7c0:	085b      	lsrs	r3, r3, #1
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b02      	subs	r3, #2
 800b7c6:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b7ca:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7ce:	3b02      	subs	r3, #2
 800b7d0:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b7d4:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7d8:	085b      	lsrs	r3, r3, #1
 800b7da:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b7de:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fbe9 	bl	800dfc0 <Data_Compliment>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d004      	beq.n	800b7fe <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b7f4:	4857      	ldr	r0, [pc, #348]	; (800b954 <Siemens_Data_Analyser+0x274>)
 800b7f6:	f016 fdb9 	bl	802236c <puts>
		return ;
 800b7fa:	f000 be94 	b.w	800c526 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b7fe:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b802:	f107 020c 	add.w	r2, r7, #12
 800b806:	4413      	add	r3, r2
 800b808:	461a      	mov	r2, r3
 800b80a:	2110      	movs	r1, #16
 800b80c:	2000      	movs	r0, #0
 800b80e:	f7f4 ff01 	bl	8000614 <ExtractBits>
 800b812:	4603      	mov	r3, r0
 800b814:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b818:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b81c:	f107 030c 	add.w	r3, r7, #12
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f002 f8d0 	bl	800d9c8 <Siemens_CRC>
 800b828:	4603      	mov	r3, r0
 800b82a:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b82e:	4b4a      	ldr	r3, [pc, #296]	; (800b958 <Siemens_Data_Analyser+0x278>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	095b      	lsrs	r3, r3, #5
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01c      	beq.n	800b876 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b83c:	4847      	ldr	r0, [pc, #284]	; (800b95c <Siemens_Data_Analyser+0x27c>)
 800b83e:	f016 fd95 	bl	802236c <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b842:	4847      	ldr	r0, [pc, #284]	; (800b960 <Siemens_Data_Analyser+0x280>)
 800b844:	f00e f9b2 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800b848:	4601      	mov	r1, r0
 800b84a:	4b46      	ldr	r3, [pc, #280]	; (800b964 <Siemens_Data_Analyser+0x284>)
 800b84c:	fba3 2301 	umull	r2, r3, r3, r1
 800b850:	0bda      	lsrs	r2, r3, #15
 800b852:	4613      	mov	r3, r2
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	1aca      	subs	r2, r1, r3
 800b85a:	4613      	mov	r3, r2
 800b85c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b860:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b864:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b868:	429a      	cmp	r2, r3
 800b86a:	d104      	bne.n	800b876 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b86c:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b870:	3304      	adds	r3, #4
 800b872:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b876:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b87a:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b87e:	429a      	cmp	r2, r3
 800b880:	d010      	beq.n	800b8a4 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b882:	4839      	ldr	r0, [pc, #228]	; (800b968 <Siemens_Data_Analyser+0x288>)
 800b884:	f016 fd72 	bl	802236c <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b888:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b88c:	4619      	mov	r1, r3
 800b88e:	4837      	ldr	r0, [pc, #220]	; (800b96c <Siemens_Data_Analyser+0x28c>)
 800b890:	f016 fcd0 	bl	8022234 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b894:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b898:	4619      	mov	r1, r3
 800b89a:	4835      	ldr	r0, [pc, #212]	; (800b970 <Siemens_Data_Analyser+0x290>)
 800b89c:	f016 fcca 	bl	8022234 <iprintf>
		return;
 800b8a0:	f000 be41 	b.w	800c526 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b8a4:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b8a8:	f107 020c 	add.w	r2, r7, #12
 800b8ac:	4413      	add	r3, r2
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	2110      	movs	r1, #16
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	f7f4 feae 	bl	8000614 <ExtractBits>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b8be:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b8c2:	f107 020c 	add.w	r2, r7, #12
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 f87a 	bl	800d9c8 <Siemens_CRC>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b8da:	4b1f      	ldr	r3, [pc, #124]	; (800b958 <Siemens_Data_Analyser+0x278>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01c      	beq.n	800b922 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b8e8:	4822      	ldr	r0, [pc, #136]	; (800b974 <Siemens_Data_Analyser+0x294>)
 800b8ea:	f016 fd3f 	bl	802236c <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b8ee:	481c      	ldr	r0, [pc, #112]	; (800b960 <Siemens_Data_Analyser+0x280>)
 800b8f0:	f00e f95c 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4b1b      	ldr	r3, [pc, #108]	; (800b964 <Siemens_Data_Analyser+0x284>)
 800b8f8:	fba3 2301 	umull	r2, r3, r3, r1
 800b8fc:	0bda      	lsrs	r2, r3, #15
 800b8fe:	4613      	mov	r3, r2
 800b900:	041b      	lsls	r3, r3, #16
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	1aca      	subs	r2, r1, r3
 800b906:	4613      	mov	r3, r2
 800b908:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b90c:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b910:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b914:	429a      	cmp	r2, r3
 800b916:	d104      	bne.n	800b922 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b918:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b91c:	3304      	adds	r3, #4
 800b91e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b922:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b926:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d02a      	beq.n	800b984 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b92e:	4812      	ldr	r0, [pc, #72]	; (800b978 <Siemens_Data_Analyser+0x298>)
 800b930:	f016 fd1c 	bl	802236c <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b934:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b938:	4619      	mov	r1, r3
 800b93a:	4810      	ldr	r0, [pc, #64]	; (800b97c <Siemens_Data_Analyser+0x29c>)
 800b93c:	f016 fc7a 	bl	8022234 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b940:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b944:	4619      	mov	r1, r3
 800b946:	480e      	ldr	r0, [pc, #56]	; (800b980 <Siemens_Data_Analyser+0x2a0>)
 800b948:	f016 fc74 	bl	8022234 <iprintf>
		return;
 800b94c:	f000 bdeb 	b.w	800c526 <Siemens_Data_Analyser+0xe46>
 800b950:	20004c3c 	.word	0x20004c3c
 800b954:	08025c20 	.word	0x08025c20
 800b958:	20003500 	.word	0x20003500
 800b95c:	08025c40 	.word	0x08025c40
 800b960:	20009cf4 	.word	0x20009cf4
 800b964:	80008001 	.word	0x80008001
 800b968:	08025c68 	.word	0x08025c68
 800b96c:	08025c78 	.word	0x08025c78
 800b970:	08025c8c 	.word	0x08025c8c
 800b974:	08025ca0 	.word	0x08025ca0
 800b978:	08025ccc 	.word	0x08025ccc
 800b97c:	08025cdc 	.word	0x08025cdc
 800b980:	08025cf8 	.word	0x08025cf8
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b984:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b988:	b2d8      	uxtb	r0, r3
 800b98a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b98e:	f107 020c 	add.w	r2, r7, #12
 800b992:	441a      	add	r2, r3
 800b994:	2301      	movs	r3, #1
 800b996:	2108      	movs	r1, #8
 800b998:	f002 f86a 	bl	800da70 <Extract_Parity_Data>
 800b99c:	4603      	mov	r3, r0
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9a4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9a8:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b9aa:	4b56      	ldr	r3, [pc, #344]	; (800bb04 <Siemens_Data_Analyser+0x424>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d02a      	beq.n	800ba0c <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b9b6:	4854      	ldr	r0, [pc, #336]	; (800bb08 <Siemens_Data_Analyser+0x428>)
 800b9b8:	f016 fcd8 	bl	802236c <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b9bc:	4853      	ldr	r0, [pc, #332]	; (800bb0c <Siemens_Data_Analyser+0x42c>)
 800b9be:	f00e f8f5 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	4b52      	ldr	r3, [pc, #328]	; (800bb10 <Siemens_Data_Analyser+0x430>)
 800b9c6:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ca:	09da      	lsrs	r2, r3, #7
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	1aca      	subs	r2, r1, r3
 800b9d4:	b2d2      	uxtb	r2, r2
 800b9d6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9de:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b9e0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9e4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9e8:	781a      	ldrb	r2, [r3, #0]
 800b9ea:	4b4a      	ldr	r3, [pc, #296]	; (800bb14 <Siemens_Data_Analyser+0x434>)
 800b9ec:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d10b      	bne.n	800ba0c <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b9f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9f8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba06:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba0a:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800ba0c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba10:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba14:	781a      	ldrb	r2, [r3, #0]
 800ba16:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <Siemens_Data_Analyser+0x434>)
 800ba18:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d015      	beq.n	800ba4c <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800ba20:	483d      	ldr	r0, [pc, #244]	; (800bb18 <Siemens_Data_Analyser+0x438>)
 800ba22:	f016 fca3 	bl	802236c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800ba26:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba2a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	4619      	mov	r1, r3
 800ba32:	483a      	ldr	r0, [pc, #232]	; (800bb1c <Siemens_Data_Analyser+0x43c>)
 800ba34:	f016 fbfe 	bl	8022234 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800ba38:	4b36      	ldr	r3, [pc, #216]	; (800bb14 <Siemens_Data_Analyser+0x434>)
 800ba3a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4837      	ldr	r0, [pc, #220]	; (800bb20 <Siemens_Data_Analyser+0x440>)
 800ba42:	f016 fbf7 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800ba4c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ba50:	3308      	adds	r3, #8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	da00      	bge.n	800ba58 <Siemens_Data_Analyser+0x378>
 800ba56:	3307      	adds	r3, #7
 800ba58:	10db      	asrs	r3, r3, #3
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba60:	4413      	add	r3, r2
 800ba62:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ba66:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	b21b      	sxth	r3, r3
 800ba70:	425a      	negs	r2, r3
 800ba72:	f003 0307 	and.w	r3, r3, #7
 800ba76:	f002 0207 	and.w	r2, r2, #7
 800ba7a:	bf58      	it	pl
 800ba7c:	4253      	negpl	r3, r2
 800ba7e:	b21b      	sxth	r3, r3
 800ba80:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800ba84:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba88:	b2d8      	uxtb	r0, r3
 800ba8a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba8e:	f107 020c 	add.w	r2, r7, #12
 800ba92:	441a      	add	r2, r3
 800ba94:	2300      	movs	r3, #0
 800ba96:	2118      	movs	r1, #24
 800ba98:	f001 ffea 	bl	800da70 <Extract_Parity_Data>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baa4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baa8:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800baaa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	d036      	beq.n	800bb28 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800baba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800babe:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800bac2:	4a18      	ldr	r2, [pc, #96]	; (800bb24 <Siemens_Data_Analyser+0x444>)
 800bac4:	8812      	ldrh	r2, [r2, #0]
 800bac6:	801a      	strh	r2, [r3, #0]
 800bac8:	2200      	movs	r2, #0
 800baca:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bacc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bad0:	f107 020c 	add.w	r2, r7, #12
 800bad4:	4413      	add	r3, r2
 800bad6:	f107 0208 	add.w	r2, r7, #8
 800bada:	2103      	movs	r1, #3
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fd4d 	bl	800c57c <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800bae2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bae6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baea:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800baee:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800baf2:	3308      	adds	r3, #8
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	4611      	mov	r1, r2
 800baf8:	8019      	strh	r1, [r3, #0]
 800bafa:	3302      	adds	r3, #2
 800bafc:	0c12      	lsrs	r2, r2, #16
 800bafe:	701a      	strb	r2, [r3, #0]
 800bb00:	e015      	b.n	800bb2e <Siemens_Data_Analyser+0x44e>
 800bb02:	bf00      	nop
 800bb04:	20003500 	.word	0x20003500
 800bb08:	08025d14 	.word	0x08025d14
 800bb0c:	20009cf4 	.word	0x20009cf4
 800bb10:	80808081 	.word	0x80808081
 800bb14:	20000304 	.word	0x20000304
 800bb18:	08025d34 	.word	0x08025d34
 800bb1c:	08025d58 	.word	0x08025d58
 800bb20:	08025d68 	.word	0x08025d68
 800bb24:	08025eec 	.word	0x08025eec
	}
	else
	{
		RejectPacketFlag = 1;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800bb2e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb32:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	4bbf      	ldr	r3, [pc, #764]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bb3a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d015      	beq.n	800bb6e <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800bb42:	48be      	ldr	r0, [pc, #760]	; (800be3c <Siemens_Data_Analyser+0x75c>)
 800bb44:	f016 fc12 	bl	802236c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800bb48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4619      	mov	r1, r3
 800bb54:	48ba      	ldr	r0, [pc, #744]	; (800be40 <Siemens_Data_Analyser+0x760>)
 800bb56:	f016 fb6d 	bl	8022234 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800bb5a:	4bb7      	ldr	r3, [pc, #732]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bb5c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bb60:	4619      	mov	r1, r3
 800bb62:	48b8      	ldr	r0, [pc, #736]	; (800be44 <Siemens_Data_Analyser+0x764>)
 800bb64:	f016 fb66 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800bb6e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb72:	3318      	adds	r3, #24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	da00      	bge.n	800bb7a <Siemens_Data_Analyser+0x49a>
 800bb78:	3307      	adds	r3, #7
 800bb7a:	10db      	asrs	r3, r3, #3
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb82:	4413      	add	r3, r2
 800bb84:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb88:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb8c:	3318      	adds	r3, #24
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	b21b      	sxth	r3, r3
 800bb92:	425a      	negs	r2, r3
 800bb94:	f003 0307 	and.w	r3, r3, #7
 800bb98:	f002 0207 	and.w	r2, r2, #7
 800bb9c:	bf58      	it	pl
 800bb9e:	4253      	negpl	r3, r2
 800bba0:	b21b      	sxth	r3, r3
 800bba2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800bba6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bbaa:	b2d8      	uxtb	r0, r3
 800bbac:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bbb0:	f107 020c 	add.w	r2, r7, #12
 800bbb4:	441a      	add	r2, r3
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	2108      	movs	r1, #8
 800bbba:	f001 ff59 	bl	800da70 <Extract_Parity_Data>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbc6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbca:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bbcc:	4b9e      	ldr	r3, [pc, #632]	; (800be48 <Siemens_Data_Analyser+0x768>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	085b      	lsrs	r3, r3, #1
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d02a      	beq.n	800bc30 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800bbda:	489c      	ldr	r0, [pc, #624]	; (800be4c <Siemens_Data_Analyser+0x76c>)
 800bbdc:	f016 fbc6 	bl	802236c <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bbe0:	489b      	ldr	r0, [pc, #620]	; (800be50 <Siemens_Data_Analyser+0x770>)
 800bbe2:	f00d ffe3 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	4b9a      	ldr	r3, [pc, #616]	; (800be54 <Siemens_Data_Analyser+0x774>)
 800bbea:	fba3 2301 	umull	r2, r3, r3, r1
 800bbee:	09da      	lsrs	r2, r3, #7
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	021b      	lsls	r3, r3, #8
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	1aca      	subs	r2, r1, r3
 800bbf8:	b2d2      	uxtb	r2, r2
 800bbfa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbfe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc02:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800bc04:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc08:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc0c:	7b1a      	ldrb	r2, [r3, #12]
 800bc0e:	4b8a      	ldr	r3, [pc, #552]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bc10:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d10b      	bne.n	800bc30 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800bc18:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc1c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc20:	7b1b      	ldrb	r3, [r3, #12]
 800bc22:	3304      	adds	r3, #4
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc2a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc2e:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800bc30:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc34:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc38:	7b1a      	ldrb	r2, [r3, #12]
 800bc3a:	4b7f      	ldr	r3, [pc, #508]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bc3c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d015      	beq.n	800bc70 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800bc44:	4884      	ldr	r0, [pc, #528]	; (800be58 <Siemens_Data_Analyser+0x778>)
 800bc46:	f016 fb91 	bl	802236c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800bc4a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc4e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc52:	7b1b      	ldrb	r3, [r3, #12]
 800bc54:	4619      	mov	r1, r3
 800bc56:	4881      	ldr	r0, [pc, #516]	; (800be5c <Siemens_Data_Analyser+0x77c>)
 800bc58:	f016 faec 	bl	8022234 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800bc5c:	4b76      	ldr	r3, [pc, #472]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bc5e:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc62:	4619      	mov	r1, r3
 800bc64:	487e      	ldr	r0, [pc, #504]	; (800be60 <Siemens_Data_Analyser+0x780>)
 800bc66:	f016 fae5 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800bc70:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc74:	3308      	adds	r3, #8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da00      	bge.n	800bc7c <Siemens_Data_Analyser+0x59c>
 800bc7a:	3307      	adds	r3, #7
 800bc7c:	10db      	asrs	r3, r3, #3
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc84:	4413      	add	r3, r2
 800bc86:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc8a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc8e:	3308      	adds	r3, #8
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	b21b      	sxth	r3, r3
 800bc94:	425a      	negs	r2, r3
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	f002 0207 	and.w	r2, r2, #7
 800bc9e:	bf58      	it	pl
 800bca0:	4253      	negpl	r3, r2
 800bca2:	b21b      	sxth	r3, r3
 800bca4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800bca8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bcac:	b2d8      	uxtb	r0, r3
 800bcae:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcb2:	f107 020c 	add.w	r2, r7, #12
 800bcb6:	441a      	add	r2, r3
 800bcb8:	2300      	movs	r3, #0
 800bcba:	2118      	movs	r1, #24
 800bcbc:	f001 fed8 	bl	800da70 <Extract_Parity_Data>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcc8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bccc:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800bcce:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcd2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcdc:	d021      	beq.n	800bd22 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bcde:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bce2:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800bce6:	4a5f      	ldr	r2, [pc, #380]	; (800be64 <Siemens_Data_Analyser+0x784>)
 800bce8:	8812      	ldrh	r2, [r2, #0]
 800bcea:	801a      	strh	r2, [r3, #0]
 800bcec:	2200      	movs	r2, #0
 800bcee:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bcf0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcf4:	f107 020c 	add.w	r2, r7, #12
 800bcf8:	4413      	add	r3, r2
 800bcfa:	1d3a      	adds	r2, r7, #4
 800bcfc:	2103      	movs	r1, #3
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fc3c 	bl	800c57c <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800bd04:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd08:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd0c:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bd10:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800bd14:	3314      	adds	r3, #20
 800bd16:	6812      	ldr	r2, [r2, #0]
 800bd18:	4611      	mov	r1, r2
 800bd1a:	8019      	strh	r1, [r3, #0]
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	0c12      	lsrs	r2, r2, #16
 800bd20:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bd22:	4b49      	ldr	r3, [pc, #292]	; (800be48 <Siemens_Data_Analyser+0x768>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	089b      	lsrs	r3, r3, #2
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02c      	beq.n	800bd8a <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800bd30:	484d      	ldr	r0, [pc, #308]	; (800be68 <Siemens_Data_Analyser+0x788>)
 800bd32:	f016 fb1b 	bl	802236c <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800bd36:	4846      	ldr	r0, [pc, #280]	; (800be50 <Siemens_Data_Analyser+0x770>)
 800bd38:	f00d ff38 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800bd3c:	4601      	mov	r1, r0
 800bd3e:	f240 1301 	movw	r3, #257	; 0x101
 800bd42:	fba3 2301 	umull	r2, r3, r3, r1
 800bd46:	1aca      	subs	r2, r1, r3
 800bd48:	0852      	lsrs	r2, r2, #1
 800bd4a:	4413      	add	r3, r2
 800bd4c:	0dda      	lsrs	r2, r3, #23
 800bd4e:	4613      	mov	r3, r2
 800bd50:	061b      	lsls	r3, r3, #24
 800bd52:	1a9b      	subs	r3, r3, r2
 800bd54:	1aca      	subs	r2, r1, r3
 800bd56:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd5a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd5e:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800bd60:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd64:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd68:	695a      	ldr	r2, [r3, #20]
 800bd6a:	4b33      	ldr	r3, [pc, #204]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bd6c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d10a      	bne.n	800bd8a <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800bd74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd84:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd88:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800bd8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd92:	695a      	ldr	r2, [r3, #20]
 800bd94:	4b28      	ldr	r3, [pc, #160]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bd96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d015      	beq.n	800bdca <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800bd9e:	4833      	ldr	r0, [pc, #204]	; (800be6c <Siemens_Data_Analyser+0x78c>)
 800bda0:	f016 fae4 	bl	802236c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800bda4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bda8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4823      	ldr	r0, [pc, #140]	; (800be40 <Siemens_Data_Analyser+0x760>)
 800bdb2:	f016 fa3f 	bl	8022234 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800bdb6:	4b20      	ldr	r3, [pc, #128]	; (800be38 <Siemens_Data_Analyser+0x758>)
 800bdb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4821      	ldr	r0, [pc, #132]	; (800be44 <Siemens_Data_Analyser+0x764>)
 800bdc0:	f016 fa38 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800bdca:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bdce:	3318      	adds	r3, #24
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	da00      	bge.n	800bdd6 <Siemens_Data_Analyser+0x6f6>
 800bdd4:	3307      	adds	r3, #7
 800bdd6:	10db      	asrs	r3, r3, #3
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bdde:	4413      	add	r3, r2
 800bde0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bde4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bde8:	3318      	adds	r3, #24
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	b21b      	sxth	r3, r3
 800bdee:	425a      	negs	r2, r3
 800bdf0:	f003 0307 	and.w	r3, r3, #7
 800bdf4:	f002 0207 	and.w	r2, r2, #7
 800bdf8:	bf58      	it	pl
 800bdfa:	4253      	negpl	r3, r2
 800bdfc:	b21b      	sxth	r3, r3
 800bdfe:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800be02:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be06:	b2d8      	uxtb	r0, r3
 800be08:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be0c:	f107 020c 	add.w	r2, r7, #12
 800be10:	441a      	add	r2, r3
 800be12:	2300      	movs	r3, #0
 800be14:	2108      	movs	r1, #8
 800be16:	f001 fe2b 	bl	800da70 <Extract_Parity_Data>
 800be1a:	4603      	mov	r3, r0
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be22:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be26:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800be28:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800be2c:	3308      	adds	r3, #8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da1e      	bge.n	800be70 <Siemens_Data_Analyser+0x790>
 800be32:	3307      	adds	r3, #7
 800be34:	e01c      	b.n	800be70 <Siemens_Data_Analyser+0x790>
 800be36:	bf00      	nop
 800be38:	20000304 	.word	0x20000304
 800be3c:	08025d78 	.word	0x08025d78
 800be40:	08025d98 	.word	0x08025d98
 800be44:	08025da8 	.word	0x08025da8
 800be48:	20003500 	.word	0x20003500
 800be4c:	08025db8 	.word	0x08025db8
 800be50:	20009cf4 	.word	0x20009cf4
 800be54:	80808081 	.word	0x80808081
 800be58:	08025dd8 	.word	0x08025dd8
 800be5c:	08025d58 	.word	0x08025d58
 800be60:	08025d68 	.word	0x08025d68
 800be64:	08025eec 	.word	0x08025eec
 800be68:	08025df8 	.word	0x08025df8
 800be6c:	08025e14 	.word	0x08025e14
 800be70:	10db      	asrs	r3, r3, #3
 800be72:	b29a      	uxth	r2, r3
 800be74:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be78:	4413      	add	r3, r2
 800be7a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800be7e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be82:	3308      	adds	r3, #8
 800be84:	b29b      	uxth	r3, r3
 800be86:	b21b      	sxth	r3, r3
 800be88:	425a      	negs	r2, r3
 800be8a:	f003 0307 	and.w	r3, r3, #7
 800be8e:	f002 0207 	and.w	r2, r2, #7
 800be92:	bf58      	it	pl
 800be94:	4253      	negpl	r3, r2
 800be96:	b21b      	sxth	r3, r3
 800be98:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800be9c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bea0:	b2d8      	uxtb	r0, r3
 800bea2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bea6:	f107 020c 	add.w	r2, r7, #12
 800beaa:	441a      	add	r2, r3
 800beac:	2301      	movs	r3, #1
 800beae:	2108      	movs	r1, #8
 800beb0:	f001 fdde 	bl	800da70 <Extract_Parity_Data>
 800beb4:	4603      	mov	r3, r0
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bebc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bec0:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800bec2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bec6:	3308      	adds	r3, #8
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da00      	bge.n	800bece <Siemens_Data_Analyser+0x7ee>
 800becc:	3307      	adds	r3, #7
 800bece:	10db      	asrs	r3, r3, #3
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bed6:	4413      	add	r3, r2
 800bed8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bedc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bee0:	3308      	adds	r3, #8
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	b21b      	sxth	r3, r3
 800bee6:	425a      	negs	r2, r3
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	f002 0207 	and.w	r2, r2, #7
 800bef0:	bf58      	it	pl
 800bef2:	4253      	negpl	r3, r2
 800bef4:	b21b      	sxth	r3, r3
 800bef6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800befa:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800befe:	b2d8      	uxtb	r0, r3
 800bf00:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf04:	f107 020c 	add.w	r2, r7, #12
 800bf08:	441a      	add	r2, r3
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	2108      	movs	r1, #8
 800bf0e:	f001 fdaf 	bl	800da70 <Extract_Parity_Data>
 800bf12:	4603      	mov	r3, r0
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf1a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf1e:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bf20:	4bab      	ldr	r3, [pc, #684]	; (800c1d0 <Siemens_Data_Analyser+0xaf0>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	08db      	lsrs	r3, r3, #3
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d02a      	beq.n	800bf84 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800bf2e:	48a9      	ldr	r0, [pc, #676]	; (800c1d4 <Siemens_Data_Analyser+0xaf4>)
 800bf30:	f016 fa1c 	bl	802236c <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bf34:	48a8      	ldr	r0, [pc, #672]	; (800c1d8 <Siemens_Data_Analyser+0xaf8>)
 800bf36:	f00d fe39 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	4ba7      	ldr	r3, [pc, #668]	; (800c1dc <Siemens_Data_Analyser+0xafc>)
 800bf3e:	fba3 2301 	umull	r2, r3, r3, r1
 800bf42:	09da      	lsrs	r2, r3, #7
 800bf44:	4613      	mov	r3, r2
 800bf46:	021b      	lsls	r3, r3, #8
 800bf48:	1a9b      	subs	r3, r3, r2
 800bf4a:	1aca      	subs	r2, r1, r3
 800bf4c:	b2d2      	uxtb	r2, r2
 800bf4e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf52:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf56:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bf58:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf5c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf60:	7e9a      	ldrb	r2, [r3, #26]
 800bf62:	4b9f      	ldr	r3, [pc, #636]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800bf64:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d10b      	bne.n	800bf84 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800bf6c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf70:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf74:	7e9b      	ldrb	r3, [r3, #26]
 800bf76:	3304      	adds	r3, #4
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf82:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800bf84:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf88:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf8c:	7e9a      	ldrb	r2, [r3, #26]
 800bf8e:	4b94      	ldr	r3, [pc, #592]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800bf90:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d015      	beq.n	800bfc4 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800bf98:	4892      	ldr	r0, [pc, #584]	; (800c1e4 <Siemens_Data_Analyser+0xb04>)
 800bf9a:	f016 f9e7 	bl	802236c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800bf9e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfa2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfa6:	7e9b      	ldrb	r3, [r3, #26]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	488f      	ldr	r0, [pc, #572]	; (800c1e8 <Siemens_Data_Analyser+0xb08>)
 800bfac:	f016 f942 	bl	8022234 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800bfb0:	4b8b      	ldr	r3, [pc, #556]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800bfb2:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	488c      	ldr	r0, [pc, #560]	; (800c1ec <Siemens_Data_Analyser+0xb0c>)
 800bfba:	f016 f93b 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800bfc4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bfc8:	3308      	adds	r3, #8
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	da00      	bge.n	800bfd0 <Siemens_Data_Analyser+0x8f0>
 800bfce:	3307      	adds	r3, #7
 800bfd0:	10db      	asrs	r3, r3, #3
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bfd8:	4413      	add	r3, r2
 800bfda:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bfde:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	b21b      	sxth	r3, r3
 800bfe8:	425a      	negs	r2, r3
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	f002 0207 	and.w	r2, r2, #7
 800bff2:	bf58      	it	pl
 800bff4:	4253      	negpl	r3, r2
 800bff6:	b21b      	sxth	r3, r3
 800bff8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bffc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c000:	b2d8      	uxtb	r0, r3
 800c002:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c006:	f107 020c 	add.w	r2, r7, #12
 800c00a:	441a      	add	r2, r3
 800c00c:	2302      	movs	r3, #2
 800c00e:	2108      	movs	r1, #8
 800c010:	f001 fd2e 	bl	800da70 <Extract_Parity_Data>
 800c014:	4603      	mov	r3, r0
 800c016:	b2da      	uxtb	r2, r3
 800c018:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c01c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c020:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c022:	4b6b      	ldr	r3, [pc, #428]	; (800c1d0 <Siemens_Data_Analyser+0xaf0>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	091b      	lsrs	r3, r3, #4
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d02a      	beq.n	800c086 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800c030:	486f      	ldr	r0, [pc, #444]	; (800c1f0 <Siemens_Data_Analyser+0xb10>)
 800c032:	f016 f99b 	bl	802236c <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c036:	4868      	ldr	r0, [pc, #416]	; (800c1d8 <Siemens_Data_Analyser+0xaf8>)
 800c038:	f00d fdb8 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800c03c:	4601      	mov	r1, r0
 800c03e:	4b67      	ldr	r3, [pc, #412]	; (800c1dc <Siemens_Data_Analyser+0xafc>)
 800c040:	fba3 2301 	umull	r2, r3, r3, r1
 800c044:	09da      	lsrs	r2, r3, #7
 800c046:	4613      	mov	r3, r2
 800c048:	021b      	lsls	r3, r3, #8
 800c04a:	1a9b      	subs	r3, r3, r2
 800c04c:	1aca      	subs	r2, r1, r3
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c054:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c058:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800c05a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c05e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c062:	7eda      	ldrb	r2, [r3, #27]
 800c064:	4b5e      	ldr	r3, [pc, #376]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800c066:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d10b      	bne.n	800c086 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800c06e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c072:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c076:	7edb      	ldrb	r3, [r3, #27]
 800c078:	3304      	adds	r3, #4
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c080:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c084:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800c086:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c08a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c08e:	7eda      	ldrb	r2, [r3, #27]
 800c090:	4b53      	ldr	r3, [pc, #332]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800c092:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c096:	429a      	cmp	r2, r3
 800c098:	d015      	beq.n	800c0c6 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800c09a:	4856      	ldr	r0, [pc, #344]	; (800c1f4 <Siemens_Data_Analyser+0xb14>)
 800c09c:	f016 f966 	bl	802236c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800c0a0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0a4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0a8:	7edb      	ldrb	r3, [r3, #27]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	484e      	ldr	r0, [pc, #312]	; (800c1e8 <Siemens_Data_Analyser+0xb08>)
 800c0ae:	f016 f8c1 	bl	8022234 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800c0b2:	4b4b      	ldr	r3, [pc, #300]	; (800c1e0 <Siemens_Data_Analyser+0xb00>)
 800c0b4:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	484c      	ldr	r0, [pc, #304]	; (800c1ec <Siemens_Data_Analyser+0xb0c>)
 800c0bc:	f016 f8ba 	bl	8022234 <iprintf>
		RejectPacketFlag = 1;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800c0c6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	da00      	bge.n	800c0d2 <Siemens_Data_Analyser+0x9f2>
 800c0d0:	3307      	adds	r3, #7
 800c0d2:	10db      	asrs	r3, r3, #3
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c0da:	4413      	add	r3, r2
 800c0dc:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c0e0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	b21b      	sxth	r3, r3
 800c0ea:	425a      	negs	r2, r3
 800c0ec:	f003 0307 	and.w	r3, r3, #7
 800c0f0:	f002 0207 	and.w	r2, r2, #7
 800c0f4:	bf58      	it	pl
 800c0f6:	4253      	negpl	r3, r2
 800c0f8:	b21b      	sxth	r3, r3
 800c0fa:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c0fe:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c102:	b2d8      	uxtb	r0, r3
 800c104:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c108:	f107 020c 	add.w	r2, r7, #12
 800c10c:	441a      	add	r2, r3
 800c10e:	2302      	movs	r3, #2
 800c110:	2120      	movs	r1, #32
 800c112:	f001 fcad 	bl	800da70 <Extract_Parity_Data>
 800c116:	4603      	mov	r3, r0
 800c118:	461a      	mov	r2, r3
 800c11a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c11e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c122:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800c124:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c128:	3320      	adds	r3, #32
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	da00      	bge.n	800c130 <Siemens_Data_Analyser+0xa50>
 800c12e:	3307      	adds	r3, #7
 800c130:	10db      	asrs	r3, r3, #3
 800c132:	b29a      	uxth	r2, r3
 800c134:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c138:	4413      	add	r3, r2
 800c13a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c13e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c142:	3320      	adds	r3, #32
 800c144:	b29b      	uxth	r3, r3
 800c146:	b21b      	sxth	r3, r3
 800c148:	425a      	negs	r2, r3
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	f002 0207 	and.w	r2, r2, #7
 800c152:	bf58      	it	pl
 800c154:	4253      	negpl	r3, r2
 800c156:	b21b      	sxth	r3, r3
 800c158:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c15c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c160:	b2d8      	uxtb	r0, r3
 800c162:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c166:	f107 020c 	add.w	r2, r7, #12
 800c16a:	441a      	add	r2, r3
 800c16c:	2302      	movs	r3, #2
 800c16e:	2120      	movs	r1, #32
 800c170:	f001 fc7e 	bl	800da70 <Extract_Parity_Data>
 800c174:	4603      	mov	r3, r0
 800c176:	461a      	mov	r2, r3
 800c178:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c17c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c180:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800c182:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c186:	3320      	adds	r3, #32
 800c188:	2b00      	cmp	r3, #0
 800c18a:	da00      	bge.n	800c18e <Siemens_Data_Analyser+0xaae>
 800c18c:	3307      	adds	r3, #7
 800c18e:	10db      	asrs	r3, r3, #3
 800c190:	b29a      	uxth	r2, r3
 800c192:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c196:	4413      	add	r3, r2
 800c198:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c19c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c1a0:	3320      	adds	r3, #32
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	425a      	negs	r2, r3
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	f002 0207 	and.w	r2, r2, #7
 800c1b0:	bf58      	it	pl
 800c1b2:	4253      	negpl	r3, r2
 800c1b4:	b21b      	sxth	r3, r3
 800c1b6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800c1c0:	200a      	movs	r0, #10
 800c1c2:	f016 f84f 	bl	8022264 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c1c6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c1ca:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c1ce:	e052      	b.n	800c276 <Siemens_Data_Analyser+0xb96>
 800c1d0:	20003500 	.word	0x20003500
 800c1d4:	08025e30 	.word	0x08025e30
 800c1d8:	20009cf4 	.word	0x20009cf4
 800c1dc:	80808081 	.word	0x80808081
 800c1e0:	20000304 	.word	0x20000304
 800c1e4:	08025e4c 	.word	0x08025e4c
 800c1e8:	08025d58 	.word	0x08025d58
 800c1ec:	08025d68 	.word	0x08025d68
 800c1f0:	08025e6c 	.word	0x08025e6c
 800c1f4:	08025e88 	.word	0x08025e88
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800c1f8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c1fc:	b2d8      	uxtb	r0, r3
 800c1fe:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c202:	f107 020c 	add.w	r2, r7, #12
 800c206:	441a      	add	r2, r3
 800c208:	2300      	movs	r3, #0
 800c20a:	2108      	movs	r1, #8
 800c20c:	f001 fc30 	bl	800da70 <Extract_Parity_Data>
 800c210:	4601      	mov	r1, r0
 800c212:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800c21c:	461a      	mov	r2, r3
 800c21e:	b2c9      	uxtb	r1, r1
 800c220:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c224:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c228:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800c22a:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800c22e:	3301      	adds	r3, #1
 800c230:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800c234:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c238:	3308      	adds	r3, #8
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da00      	bge.n	800c240 <Siemens_Data_Analyser+0xb60>
 800c23e:	3307      	adds	r3, #7
 800c240:	10db      	asrs	r3, r3, #3
 800c242:	b29a      	uxth	r2, r3
 800c244:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c248:	4413      	add	r3, r2
 800c24a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c24e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c252:	3308      	adds	r3, #8
 800c254:	b29b      	uxth	r3, r3
 800c256:	b21b      	sxth	r3, r3
 800c258:	425a      	negs	r2, r3
 800c25a:	f003 0307 	and.w	r3, r3, #7
 800c25e:	f002 0207 	and.w	r2, r2, #7
 800c262:	bf58      	it	pl
 800c264:	4253      	negpl	r3, r2
 800c266:	b21b      	sxth	r3, r3
 800c268:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c26c:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c270:	3301      	adds	r3, #1
 800c272:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c276:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c280:	429a      	cmp	r2, r3
 800c282:	d8b9      	bhi.n	800c1f8 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800c284:	200a      	movs	r0, #10
 800c286:	f015 ffed 	bl	8022264 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800c28a:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c28e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c292:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800c296:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f96e 	bl	800c57c <ExtractAppData>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2a8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c2ac:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800c2ae:	4ba0      	ldr	r3, [pc, #640]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c2b0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800c2bc:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d008      	beq.n	800c2d6 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c2c4:	4b9a      	ldr	r3, [pc, #616]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c2c6:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c2ca:	08db      	lsrs	r3, r3, #3
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800c2d4:	e005      	b.n	800c2e2 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800c2d6:	4b96      	ldr	r3, [pc, #600]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c2d8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c2dc:	08db      	lsrs	r3, r3, #3
 800c2de:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800c2e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c2ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2ec:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d02c      	beq.n	800c34e <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800c2f4:	488f      	ldr	r0, [pc, #572]	; (800c534 <Siemens_Data_Analyser+0xe54>)
 800c2f6:	f016 f839 	bl	802236c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800c2fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c302:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c304:	4619      	mov	r1, r3
 800c306:	488c      	ldr	r0, [pc, #560]	; (800c538 <Siemens_Data_Analyser+0xe58>)
 800c308:	f015 ff94 	bl	8022234 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800c30c:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c310:	4619      	mov	r1, r3
 800c312:	488a      	ldr	r0, [pc, #552]	; (800c53c <Siemens_Data_Analyser+0xe5c>)
 800c314:	f015 ff8e 	bl	8022234 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800c318:	4989      	ldr	r1, [pc, #548]	; (800c540 <Siemens_Data_Analyser+0xe60>)
 800c31a:	488a      	ldr	r0, [pc, #552]	; (800c544 <Siemens_Data_Analyser+0xe64>)
 800c31c:	f7f3 ff90 	bl	8000240 <strcmp>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800c32c:	4984      	ldr	r1, [pc, #528]	; (800c540 <Siemens_Data_Analyser+0xe60>)
 800c32e:	4885      	ldr	r0, [pc, #532]	; (800c544 <Siemens_Data_Analyser+0xe64>)
 800c330:	f7f3 ff86 	bl	8000240 <strcmp>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d109      	bne.n	800c34e <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800c33a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c33e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c342:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	b29a      	uxth	r2, r3
 800c348:	4b79      	ldr	r3, [pc, #484]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c34a:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800c34e:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800c352:	2b01      	cmp	r3, #1
 800c354:	f000 80e6 	beq.w	800c524 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800c358:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800c35c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c360:	3326      	adds	r3, #38	; 0x26
 800c362:	4619      	mov	r1, r3
 800c364:	2000      	movs	r0, #0
 800c366:	f006 fbd1 	bl	8012b0c <GetCRC16>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800c370:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c374:	f107 020c 	add.w	r2, r7, #12
 800c378:	4413      	add	r3, r2
 800c37a:	461a      	mov	r2, r3
 800c37c:	2110      	movs	r1, #16
 800c37e:	2000      	movs	r0, #0
 800c380:	f7f4 f948 	bl	8000614 <ExtractBits>
 800c384:	4603      	mov	r3, r0
 800c386:	b29a      	uxth	r2, r3
 800c388:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c38c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c390:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c394:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c398:	2100      	movs	r1, #0
 800c39a:	486b      	ldr	r0, [pc, #428]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c39c:	f015 fe62 	bl	8022064 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800c3a0:	4a69      	ldr	r2, [pc, #420]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c3a2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3a6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f015 fe2e 	bl	8022014 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800c3b8:	f000 f936 	bl	800c628 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c3bc:	4b63      	ldr	r3, [pc, #396]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4b5b      	ldr	r3, [pc, #364]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c3c4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bfb8      	it	lt
 800c3ce:	425b      	neglt	r3, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4b57      	ldr	r3, [pc, #348]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c3d4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d871      	bhi.n	800c4c0 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800c3dc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3e0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3e4:	69da      	ldr	r2, [r3, #28]
 800c3e6:	4b5a      	ldr	r3, [pc, #360]	; (800c550 <Siemens_Data_Analyser+0xe70>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d04c      	beq.n	800c488 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800c3ee:	f009 f81f 	bl	8015430 <HAL_GetTick>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	4a57      	ldr	r2, [pc, #348]	; (800c554 <Siemens_Data_Analyser+0xe74>)
 800c3f6:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800c3f8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3fc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c400:	69db      	ldr	r3, [r3, #28]
 800c402:	4a53      	ldr	r2, [pc, #332]	; (800c550 <Siemens_Data_Analyser+0xe70>)
 800c404:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c406:	4b51      	ldr	r3, [pc, #324]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c408:	2200      	movs	r2, #0
 800c40a:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c40c:	4b52      	ldr	r3, [pc, #328]	; (800c558 <Siemens_Data_Analyser+0xe78>)
 800c40e:	885b      	ldrh	r3, [r3, #2]
 800c410:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c414:	429a      	cmp	r2, r3
 800c416:	d053      	beq.n	800c4c0 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c418:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c41c:	2100      	movs	r1, #0
 800c41e:	484e      	ldr	r0, [pc, #312]	; (800c558 <Siemens_Data_Analyser+0xe78>)
 800c420:	f015 fe20 	bl	8022064 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c424:	f240 2202 	movw	r2, #514	; 0x202
 800c428:	2100      	movs	r1, #0
 800c42a:	484c      	ldr	r0, [pc, #304]	; (800c55c <Siemens_Data_Analyser+0xe7c>)
 800c42c:	f015 fe1a 	bl	8022064 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c430:	4a49      	ldr	r2, [pc, #292]	; (800c558 <Siemens_Data_Analyser+0xe78>)
 800c432:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c436:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c438:	4b43      	ldr	r3, [pc, #268]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c43a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c43c:	4b46      	ldr	r3, [pc, #280]	; (800c558 <Siemens_Data_Analyser+0xe78>)
 800c43e:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c440:	4b41      	ldr	r3, [pc, #260]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c442:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c444:	461a      	mov	r2, r3
 800c446:	4946      	ldr	r1, [pc, #280]	; (800c560 <Siemens_Data_Analyser+0xe80>)
 800c448:	4846      	ldr	r0, [pc, #280]	; (800c564 <Siemens_Data_Analyser+0xe84>)
 800c44a:	f015 fde3 	bl	8022014 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c44e:	4b3e      	ldr	r3, [pc, #248]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c450:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c452:	4b42      	ldr	r3, [pc, #264]	; (800c55c <Siemens_Data_Analyser+0xe7c>)
 800c454:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c456:	4b3c      	ldr	r3, [pc, #240]	; (800c548 <Siemens_Data_Analyser+0xe68>)
 800c458:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c45a:	461a      	mov	r2, r3
 800c45c:	4940      	ldr	r1, [pc, #256]	; (800c560 <Siemens_Data_Analyser+0xe80>)
 800c45e:	4842      	ldr	r0, [pc, #264]	; (800c568 <Siemens_Data_Analyser+0xe88>)
 800c460:	f015 fdd8 	bl	8022014 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == CLEAR)
 800c464:	4b3b      	ldr	r3, [pc, #236]	; (800c554 <Siemens_Data_Analyser+0xe74>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800c46c:	f240 1019 	movw	r0, #281	; 0x119
 800c470:	f003 fb04 	bl	800fa7c <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800c474:	f240 2007 	movw	r0, #519	; 0x207
 800c478:	f003 fb00 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c47c:	f008 ffd8 	bl	8015430 <HAL_GetTick>
 800c480:	4603      	mov	r3, r0
 800c482:	4a34      	ldr	r2, [pc, #208]	; (800c554 <Siemens_Data_Analyser+0xe74>)
 800c484:	6113      	str	r3, [r2, #16]
 800c486:	e01b      	b.n	800c4c0 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c488:	4b30      	ldr	r3, [pc, #192]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	b29a      	uxth	r2, r3
 800c490:	4b2e      	ldr	r3, [pc, #184]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c492:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c494:	4b2d      	ldr	r3, [pc, #180]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	4b25      	ldr	r3, [pc, #148]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c49c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d90d      	bls.n	800c4c0 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c4a4:	4b29      	ldr	r3, [pc, #164]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	4830      	ldr	r0, [pc, #192]	; (800c56c <Siemens_Data_Analyser+0xe8c>)
 800c4ac:	f015 fec2 	bl	8022234 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c4b0:	4b1f      	ldr	r3, [pc, #124]	; (800c530 <Siemens_Data_Analyser+0xe50>)
 800c4b2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	4b23      	ldr	r3, [pc, #140]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c4be:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c4c0:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c4c4:	f107 010c 	add.w	r1, r7, #12
 800c4c8:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	f000 fe41 	bl	800d154 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c4d2:	4b27      	ldr	r3, [pc, #156]	; (800c570 <Siemens_Data_Analyser+0xe90>)
 800c4d4:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00d      	beq.n	800c4f8 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c4dc:	4b24      	ldr	r3, [pc, #144]	; (800c570 <Siemens_Data_Analyser+0xe90>)
 800c4de:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	4922      	ldr	r1, [pc, #136]	; (800c570 <Siemens_Data_Analyser+0xe90>)
 800c4e6:	4823      	ldr	r0, [pc, #140]	; (800c574 <Siemens_Data_Analyser+0xe94>)
 800c4e8:	f000 fe34 	bl	800d154 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c4ec:	f240 6202 	movw	r2, #1538	; 0x602
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	481f      	ldr	r0, [pc, #124]	; (800c570 <Siemens_Data_Analyser+0xe90>)
 800c4f4:	f015 fdb6 	bl	8022064 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c4f8:	4b14      	ldr	r3, [pc, #80]	; (800c54c <Siemens_Data_Analyser+0xe6c>)
 800c4fa:	881a      	ldrh	r2, [r3, #0]
 800c4fc:	4b1e      	ldr	r3, [pc, #120]	; (800c578 <Siemens_Data_Analyser+0xe98>)
 800c4fe:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c500:	4b1d      	ldr	r3, [pc, #116]	; (800c578 <Siemens_Data_Analyser+0xe98>)
 800c502:	2201      	movs	r2, #1
 800c504:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c506:	4b1c      	ldr	r3, [pc, #112]	; (800c578 <Siemens_Data_Analyser+0xe98>)
 800c508:	2201      	movs	r2, #1
 800c50a:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800c50c:	f240 2001 	movw	r0, #513	; 0x201
 800c510:	f003 fab4 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c514:	f008 ff8c 	bl	8015430 <HAL_GetTick>
 800c518:	4603      	mov	r3, r0
 800c51a:	4a0e      	ldr	r2, [pc, #56]	; (800c554 <Siemens_Data_Analyser+0xe74>)
 800c51c:	6093      	str	r3, [r2, #8]

	return;
 800c51e:	e002      	b.n	800c526 <Siemens_Data_Analyser+0xe46>
		return;
 800c520:	bf00      	nop
 800c522:	e000      	b.n	800c526 <Siemens_Data_Analyser+0xe46>
		return;
 800c524:	bf00      	nop
}
 800c526:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000304 	.word	0x20000304
 800c534:	08025ea0 	.word	0x08025ea0
 800c538:	08025d58 	.word	0x08025d58
 800c53c:	08025d68 	.word	0x08025d68
 800c540:	08025ec0 	.word	0x08025ec0
 800c544:	20000305 	.word	0x20000305
 800c548:	20002884 	.word	0x20002884
 800c54c:	20003d44 	.word	0x20003d44
 800c550:	20003d40 	.word	0x20003d40
 800c554:	20003514 	.word	0x20003514
 800c558:	20003734 	.word	0x20003734
 800c55c:	20003530 	.word	0x20003530
 800c560:	200028aa 	.word	0x200028aa
 800c564:	20003738 	.word	0x20003738
 800c568:	20003532 	.word	0x20003532
 800c56c:	08025ecc 	.word	0x08025ecc
 800c570:	20002efc 	.word	0x20002efc
 800c574:	20002cd4 	.word	0x20002cd4
 800c578:	20003508 	.word	0x20003508

0800c57c <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b089      	sub	sp, #36	; 0x24
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	460b      	mov	r3, r1
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c592:	897b      	ldrh	r3, [r7, #10]
 800c594:	00db      	lsls	r3, r3, #3
 800c596:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c598:	2300      	movs	r3, #0
 800c59a:	837b      	strh	r3, [r7, #26]
 800c59c:	e039      	b.n	800c612 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c59e:	8b7b      	ldrh	r3, [r7, #26]
 800c5a0:	08db      	lsrs	r3, r3, #3
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c5a6:	8b7b      	ldrh	r3, [r7, #26]
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b07      	cmp	r3, #7
 800c5b2:	d02a      	beq.n	800c60a <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	8b7b      	ldrh	r3, [r7, #26]
 800c5c0:	f003 0307 	and.w	r3, r3, #7
 800c5c4:	fa42 f303 	asr.w	r3, r2, r3
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d010      	beq.n	800c5f2 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c5d0:	8bfb      	ldrh	r3, [r7, #30]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b25a      	sxtb	r2, r3
 800c5da:	7f7b      	ldrb	r3, [r7, #29]
 800c5dc:	2101      	movs	r1, #1
 800c5de:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e2:	b25b      	sxtb	r3, r3
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	b259      	sxtb	r1, r3
 800c5e8:	8bfb      	ldrh	r3, [r7, #30]
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	b2ca      	uxtb	r2, r1
 800c5f0:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c5f2:	7f7b      	ldrb	r3, [r7, #29]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c5f8:	7f7b      	ldrb	r3, [r7, #29]
 800c5fa:	2b08      	cmp	r3, #8
 800c5fc:	d106      	bne.n	800c60c <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c602:	8bfb      	ldrh	r3, [r7, #30]
 800c604:	3301      	adds	r3, #1
 800c606:	83fb      	strh	r3, [r7, #30]
 800c608:	e000      	b.n	800c60c <ExtractAppData+0x90>
			continue;
 800c60a:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c60c:	8b7b      	ldrh	r3, [r7, #26]
 800c60e:	3301      	adds	r3, #1
 800c610:	837b      	strh	r3, [r7, #26]
 800c612:	8b7a      	ldrh	r2, [r7, #26]
 800c614:	8b3b      	ldrh	r3, [r7, #24]
 800c616:	429a      	cmp	r2, r3
 800c618:	d3c1      	bcc.n	800c59e <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c61a:	8bfb      	ldrh	r3, [r7, #30]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3724      	adds	r7, #36	; 0x24
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c62c:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c630:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c632:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c636:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c63a:	2300      	movs	r3, #0
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	1d10      	adds	r0, r2, #4
 800c640:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c644:	461a      	mov	r2, r3
 800c646:	2100      	movs	r1, #0
 800c648:	f015 fd0c 	bl	8022064 <memset>
	uint16_t App_data_Traverser = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c652:	2300      	movs	r3, #0
 800c654:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c664:	2300      	movs	r3, #0
 800c666:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c66a:	2300      	movs	r3, #0
 800c66c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c670:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c674:	2100      	movs	r1, #0
 800c676:	48ba      	ldr	r0, [pc, #744]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c678:	f015 fcf4 	bl	8022064 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c67c:	4bb9      	ldr	r3, [pc, #740]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c67e:	7b1b      	ldrb	r3, [r3, #12]
 800c680:	4ab7      	ldr	r2, [pc, #732]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c682:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c684:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c688:	b2d8      	uxtb	r0, r3
 800c68a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c68e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c692:	1899      	adds	r1, r3, r2
 800c694:	4bb2      	ldr	r3, [pc, #712]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2200      	movs	r2, #0
 800c69c:	461c      	mov	r4, r3
 800c69e:	4615      	mov	r5, r2
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	9302      	str	r3, [sp, #8]
 800c6a4:	e9cd 4500 	strd	r4, r5, [sp]
 800c6a8:	460a      	mov	r2, r1
 800c6aa:	2108      	movs	r1, #8
 800c6ac:	f001 fb22 	bl	800dcf4 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c6b0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da00      	bge.n	800c6bc <Form_Siemens_Reply+0x94>
 800c6ba:	3307      	adds	r3, #7
 800c6bc:	10db      	asrs	r3, r3, #3
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6ca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	b21b      	sxth	r3, r3
 800c6d4:	425a      	negs	r2, r3
 800c6d6:	f003 0107 	and.w	r1, r3, #7
 800c6da:	f002 0307 	and.w	r3, r2, #7
 800c6de:	bf58      	it	pl
 800c6e0:	4259      	negpl	r1, r3
 800c6e2:	b20b      	sxth	r3, r1
 800c6e4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c6e8:	4b9e      	ldr	r3, [pc, #632]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c6ea:	691a      	ldr	r2, [r3, #16]
 800c6ec:	4b9c      	ldr	r3, [pc, #624]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c6ee:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c6f0:	4b9c      	ldr	r3, [pc, #624]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c6f2:	695a      	ldr	r2, [r3, #20]
 800c6f4:	4b9a      	ldr	r3, [pc, #616]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c6f6:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c6f8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6fc:	b2d8      	uxtb	r0, r3
 800c6fe:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c702:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c706:	1899      	adds	r1, r3, r2
 800c708:	4b95      	ldr	r3, [pc, #596]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	4698      	mov	r8, r3
 800c710:	4691      	mov	r9, r2
 800c712:	2300      	movs	r3, #0
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	e9cd 8900 	strd	r8, r9, [sp]
 800c71a:	460a      	mov	r2, r1
 800c71c:	2118      	movs	r1, #24
 800c71e:	f001 fae9 	bl	800dcf4 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c722:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c726:	3318      	adds	r3, #24
 800c728:	2b00      	cmp	r3, #0
 800c72a:	da00      	bge.n	800c72e <Form_Siemens_Reply+0x106>
 800c72c:	3307      	adds	r3, #7
 800c72e:	10db      	asrs	r3, r3, #3
 800c730:	b29a      	uxth	r2, r3
 800c732:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c736:	4413      	add	r3, r2
 800c738:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c73c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c740:	3318      	adds	r3, #24
 800c742:	b29b      	uxth	r3, r3
 800c744:	b21b      	sxth	r3, r3
 800c746:	425a      	negs	r2, r3
 800c748:	f003 0107 	and.w	r1, r3, #7
 800c74c:	f002 0307 	and.w	r3, r2, #7
 800c750:	bf58      	it	pl
 800c752:	4259      	negpl	r1, r3
 800c754:	b20b      	sxth	r3, r1
 800c756:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c75a:	4b82      	ldr	r3, [pc, #520]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	4a80      	ldr	r2, [pc, #512]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c760:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c762:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c766:	b2d8      	uxtb	r0, r3
 800c768:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c76c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c770:	1899      	adds	r1, r3, r2
 800c772:	4b7b      	ldr	r3, [pc, #492]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c774:	7b1b      	ldrb	r3, [r3, #12]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2200      	movs	r2, #0
 800c77a:	469a      	mov	sl, r3
 800c77c:	4693      	mov	fp, r2
 800c77e:	2301      	movs	r3, #1
 800c780:	9302      	str	r3, [sp, #8]
 800c782:	e9cd ab00 	strd	sl, fp, [sp]
 800c786:	460a      	mov	r2, r1
 800c788:	2108      	movs	r1, #8
 800c78a:	f001 fab3 	bl	800dcf4 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c78e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c792:	3308      	adds	r3, #8
 800c794:	2b00      	cmp	r3, #0
 800c796:	da00      	bge.n	800c79a <Form_Siemens_Reply+0x172>
 800c798:	3307      	adds	r3, #7
 800c79a:	10db      	asrs	r3, r3, #3
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c7a8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	b21b      	sxth	r3, r3
 800c7b2:	425a      	negs	r2, r3
 800c7b4:	f003 0107 	and.w	r1, r3, #7
 800c7b8:	f002 0307 	and.w	r3, r2, #7
 800c7bc:	bf58      	it	pl
 800c7be:	4259      	negpl	r1, r3
 800c7c0:	b20b      	sxth	r3, r1
 800c7c2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c7c6:	4b67      	ldr	r3, [pc, #412]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	4b65      	ldr	r3, [pc, #404]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c7cc:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c7ce:	4b65      	ldr	r3, [pc, #404]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	4b63      	ldr	r3, [pc, #396]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c7d4:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c7d6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7da:	b2d8      	uxtb	r0, r3
 800c7dc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c7e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7e4:	1899      	adds	r1, r3, r2
 800c7e6:	4b5e      	ldr	r3, [pc, #376]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ee:	647a      	str	r2, [r7, #68]	; 0x44
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9302      	str	r3, [sp, #8]
 800c7f4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c7f8:	e9cd 3400 	strd	r3, r4, [sp]
 800c7fc:	460a      	mov	r2, r1
 800c7fe:	2118      	movs	r1, #24
 800c800:	f001 fa78 	bl	800dcf4 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c804:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c808:	3318      	adds	r3, #24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	da00      	bge.n	800c810 <Form_Siemens_Reply+0x1e8>
 800c80e:	3307      	adds	r3, #7
 800c810:	10db      	asrs	r3, r3, #3
 800c812:	b29a      	uxth	r2, r3
 800c814:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c818:	4413      	add	r3, r2
 800c81a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c81e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c822:	3318      	adds	r3, #24
 800c824:	b29b      	uxth	r3, r3
 800c826:	b21b      	sxth	r3, r3
 800c828:	425a      	negs	r2, r3
 800c82a:	f003 0107 	and.w	r1, r3, #7
 800c82e:	f002 0307 	and.w	r3, r2, #7
 800c832:	bf58      	it	pl
 800c834:	4259      	negpl	r1, r3
 800c836:	b20b      	sxth	r3, r1
 800c838:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c83c:	4a48      	ldr	r2, [pc, #288]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c83e:	230a      	movs	r3, #10
 800c840:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c842:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c846:	b2d8      	uxtb	r0, r3
 800c848:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c84c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c850:	1899      	adds	r1, r3, r2
 800c852:	4b43      	ldr	r3, [pc, #268]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c854:	7e1b      	ldrb	r3, [r3, #24]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2200      	movs	r2, #0
 800c85a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c85c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c85e:	2300      	movs	r3, #0
 800c860:	9302      	str	r3, [sp, #8]
 800c862:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c866:	e9cd 3400 	strd	r3, r4, [sp]
 800c86a:	460a      	mov	r2, r1
 800c86c:	2108      	movs	r1, #8
 800c86e:	f001 fa41 	bl	800dcf4 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c872:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c876:	3308      	adds	r3, #8
 800c878:	2b00      	cmp	r3, #0
 800c87a:	da00      	bge.n	800c87e <Form_Siemens_Reply+0x256>
 800c87c:	3307      	adds	r3, #7
 800c87e:	10db      	asrs	r3, r3, #3
 800c880:	b29a      	uxth	r2, r3
 800c882:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c886:	4413      	add	r3, r2
 800c888:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c88c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c890:	3308      	adds	r3, #8
 800c892:	b29b      	uxth	r3, r3
 800c894:	b21b      	sxth	r3, r3
 800c896:	425a      	negs	r2, r3
 800c898:	f003 0107 	and.w	r1, r3, #7
 800c89c:	f002 0307 	and.w	r3, r2, #7
 800c8a0:	bf58      	it	pl
 800c8a2:	4259      	negpl	r1, r3
 800c8a4:	b20b      	sxth	r3, r1
 800c8a6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c8aa:	4a2d      	ldr	r2, [pc, #180]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c8b0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8b4:	b2d8      	uxtb	r0, r3
 800c8b6:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c8ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8be:	1899      	adds	r1, r3, r2
 800c8c0:	4b27      	ldr	r3, [pc, #156]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c8c2:	7e5b      	ldrb	r3, [r3, #25]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ca:	637a      	str	r2, [r7, #52]	; 0x34
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c8d4:	e9cd 3400 	strd	r3, r4, [sp]
 800c8d8:	460a      	mov	r2, r1
 800c8da:	2108      	movs	r1, #8
 800c8dc:	f001 fa0a 	bl	800dcf4 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c8e0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	da00      	bge.n	800c8ec <Form_Siemens_Reply+0x2c4>
 800c8ea:	3307      	adds	r3, #7
 800c8ec:	10db      	asrs	r3, r3, #3
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c8fa:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8fe:	3308      	adds	r3, #8
 800c900:	b29b      	uxth	r3, r3
 800c902:	b21b      	sxth	r3, r3
 800c904:	425a      	negs	r2, r3
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	f002 0207 	and.w	r2, r2, #7
 800c90e:	bf58      	it	pl
 800c910:	4253      	negpl	r3, r2
 800c912:	b21b      	sxth	r3, r3
 800c914:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c918:	4b12      	ldr	r3, [pc, #72]	; (800c964 <Form_Siemens_Reply+0x33c>)
 800c91a:	7edb      	ldrb	r3, [r3, #27]
 800c91c:	4a10      	ldr	r2, [pc, #64]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c91e:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c920:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c924:	b2d8      	uxtb	r0, r3
 800c926:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c92a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c92e:	1899      	adds	r1, r3, r2
 800c930:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <Form_Siemens_Reply+0x338>)
 800c932:	7e9b      	ldrb	r3, [r3, #26]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2200      	movs	r2, #0
 800c938:	62bb      	str	r3, [r7, #40]	; 0x28
 800c93a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c93c:	2302      	movs	r3, #2
 800c93e:	9302      	str	r3, [sp, #8]
 800c940:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c944:	e9cd 3400 	strd	r3, r4, [sp]
 800c948:	460a      	mov	r2, r1
 800c94a:	2108      	movs	r1, #8
 800c94c:	f001 f9d2 	bl	800dcf4 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c950:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c954:	3308      	adds	r3, #8
 800c956:	2b00      	cmp	r3, #0
 800c958:	da06      	bge.n	800c968 <Form_Siemens_Reply+0x340>
 800c95a:	3307      	adds	r3, #7
 800c95c:	e004      	b.n	800c968 <Form_Siemens_Reply+0x340>
 800c95e:	bf00      	nop
 800c960:	20002aac 	.word	0x20002aac
 800c964:	20002884 	.word	0x20002884
 800c968:	10db      	asrs	r3, r3, #3
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c970:	4413      	add	r3, r2
 800c972:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c976:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c97a:	3308      	adds	r3, #8
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	b21b      	sxth	r3, r3
 800c980:	425a      	negs	r2, r3
 800c982:	f003 0307 	and.w	r3, r3, #7
 800c986:	f002 0207 	and.w	r2, r2, #7
 800c98a:	bf58      	it	pl
 800c98c:	4253      	negpl	r3, r2
 800c98e:	b21b      	sxth	r3, r3
 800c990:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c994:	4bc4      	ldr	r3, [pc, #784]	; (800cca8 <Form_Siemens_Reply+0x680>)
 800c996:	7e9a      	ldrb	r2, [r3, #26]
 800c998:	4bc4      	ldr	r3, [pc, #784]	; (800ccac <Form_Siemens_Reply+0x684>)
 800c99a:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c99c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c9a0:	b2d8      	uxtb	r0, r3
 800c9a2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c9a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9aa:	441a      	add	r2, r3
 800c9ac:	4bbf      	ldr	r3, [pc, #764]	; (800ccac <Form_Siemens_Reply+0x684>)
 800c9ae:	7edb      	ldrb	r3, [r3, #27]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	623b      	str	r3, [r7, #32]
 800c9b6:	6279      	str	r1, [r7, #36]	; 0x24
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	9302      	str	r3, [sp, #8]
 800c9bc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c9c0:	e9cd 3400 	strd	r3, r4, [sp]
 800c9c4:	2108      	movs	r1, #8
 800c9c6:	f001 f995 	bl	800dcf4 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c9ca:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da00      	bge.n	800c9d6 <Form_Siemens_Reply+0x3ae>
 800c9d4:	3307      	adds	r3, #7
 800c9d6:	10db      	asrs	r3, r3, #3
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c9de:	4413      	add	r3, r2
 800c9e0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c9e4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	b21b      	sxth	r3, r3
 800c9ee:	425a      	negs	r2, r3
 800c9f0:	f003 0307 	and.w	r3, r3, #7
 800c9f4:	f002 0207 	and.w	r2, r2, #7
 800c9f8:	bf58      	it	pl
 800c9fa:	4253      	negpl	r3, r2
 800c9fc:	b21b      	sxth	r3, r3
 800c9fe:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800ca02:	4ba9      	ldr	r3, [pc, #676]	; (800cca8 <Form_Siemens_Reply+0x680>)
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	4aa9      	ldr	r2, [pc, #676]	; (800ccac <Form_Siemens_Reply+0x684>)
 800ca08:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800ca0a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca0e:	b2d8      	uxtb	r0, r3
 800ca10:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca18:	4413      	add	r3, r2
 800ca1a:	4aa4      	ldr	r2, [pc, #656]	; (800ccac <Form_Siemens_Reply+0x684>)
 800ca1c:	69d2      	ldr	r2, [r2, #28]
 800ca1e:	2100      	movs	r1, #0
 800ca20:	61ba      	str	r2, [r7, #24]
 800ca22:	61f9      	str	r1, [r7, #28]
 800ca24:	2202      	movs	r2, #2
 800ca26:	9202      	str	r2, [sp, #8]
 800ca28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca2c:	e9cd 1200 	strd	r1, r2, [sp]
 800ca30:	461a      	mov	r2, r3
 800ca32:	2120      	movs	r1, #32
 800ca34:	f001 f95e 	bl	800dcf4 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800ca38:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ca3c:	3320      	adds	r3, #32
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da00      	bge.n	800ca44 <Form_Siemens_Reply+0x41c>
 800ca42:	3307      	adds	r3, #7
 800ca44:	10db      	asrs	r3, r3, #3
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ca52:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca56:	3320      	adds	r3, #32
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	b21b      	sxth	r3, r3
 800ca5c:	425a      	negs	r2, r3
 800ca5e:	f003 0307 	and.w	r3, r3, #7
 800ca62:	f002 0207 	and.w	r2, r2, #7
 800ca66:	bf58      	it	pl
 800ca68:	4253      	negpl	r3, r2
 800ca6a:	b21b      	sxth	r3, r3
 800ca6c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800ca70:	4b8f      	ldr	r3, [pc, #572]	; (800ccb0 <Form_Siemens_Reply+0x688>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a8d      	ldr	r2, [pc, #564]	; (800ccac <Form_Siemens_Reply+0x684>)
 800ca76:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800ca78:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca7c:	b2d8      	uxtb	r0, r3
 800ca7e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca86:	4413      	add	r3, r2
 800ca88:	4a88      	ldr	r2, [pc, #544]	; (800ccac <Form_Siemens_Reply+0x684>)
 800ca8a:	6a12      	ldr	r2, [r2, #32]
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	613a      	str	r2, [r7, #16]
 800ca90:	6179      	str	r1, [r7, #20]
 800ca92:	2202      	movs	r2, #2
 800ca94:	9202      	str	r2, [sp, #8]
 800ca96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca9a:	e9cd 1200 	strd	r1, r2, [sp]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	2120      	movs	r1, #32
 800caa2:	f001 f927 	bl	800dcf4 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800caa6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800caaa:	3320      	adds	r3, #32
 800caac:	2b00      	cmp	r3, #0
 800caae:	da00      	bge.n	800cab2 <Form_Siemens_Reply+0x48a>
 800cab0:	3307      	adds	r3, #7
 800cab2:	10db      	asrs	r3, r3, #3
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800caba:	4413      	add	r3, r2
 800cabc:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cac0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cac4:	3320      	adds	r3, #32
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	b21b      	sxth	r3, r3
 800caca:	425a      	negs	r2, r3
 800cacc:	f003 0307 	and.w	r3, r3, #7
 800cad0:	f002 0207 	and.w	r2, r2, #7
 800cad4:	bf58      	it	pl
 800cad6:	4253      	negpl	r3, r2
 800cad8:	b21b      	sxth	r3, r3
 800cada:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800cade:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800cae2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cae6:	2201      	movs	r2, #1
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 fa69 	bl	800dfc0 <Data_Compliment>
 800caee:	4603      	mov	r3, r0
 800caf0:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800caf4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800caf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cafc:	4611      	mov	r1, r2
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 ff62 	bl	800d9c8 <Siemens_CRC>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cb0a:	4b6a      	ldr	r3, [pc, #424]	; (800ccb4 <Form_Siemens_Reply+0x68c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	09db      	lsrs	r3, r3, #7
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d02c      	beq.n	800cb72 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800cb18:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb1c:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cb20:	4865      	ldr	r0, [pc, #404]	; (800ccb8 <Form_Siemens_Reply+0x690>)
 800cb22:	f015 fc23 	bl	802236c <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800cb26:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4863      	ldr	r0, [pc, #396]	; (800ccbc <Form_Siemens_Reply+0x694>)
 800cb2e:	f015 fb81 	bl	8022234 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cb32:	4863      	ldr	r0, [pc, #396]	; (800ccc0 <Form_Siemens_Reply+0x698>)
 800cb34:	f00d f83a 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800cb38:	4601      	mov	r1, r0
 800cb3a:	4b62      	ldr	r3, [pc, #392]	; (800ccc4 <Form_Siemens_Reply+0x69c>)
 800cb3c:	fba3 2301 	umull	r2, r3, r3, r1
 800cb40:	0bda      	lsrs	r2, r3, #15
 800cb42:	4613      	mov	r3, r2
 800cb44:	041b      	lsls	r3, r3, #16
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	1aca      	subs	r2, r1, r3
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800cb50:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cb54:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d104      	bne.n	800cb66 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800cb5c:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb60:	3304      	adds	r3, #4
 800cb62:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800cb66:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4856      	ldr	r0, [pc, #344]	; (800ccc8 <Form_Siemens_Reply+0x6a0>)
 800cb6e:	f015 fb61 	bl	8022234 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800cb72:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb76:	b2d8      	uxtb	r0, r3
 800cb78:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cb80:	4413      	add	r3, r2
 800cb82:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cb86:	2100      	movs	r1, #0
 800cb88:	60ba      	str	r2, [r7, #8]
 800cb8a:	60f9      	str	r1, [r7, #12]
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	9202      	str	r2, [sp, #8]
 800cb90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb94:	e9cd 1200 	strd	r1, r2, [sp]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	2110      	movs	r1, #16
 800cb9c:	f001 f8aa 	bl	800dcf4 <Insert_cal_parity>
	BITSTUFFINC(16);
 800cba0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cba4:	3310      	adds	r3, #16
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da00      	bge.n	800cbac <Form_Siemens_Reply+0x584>
 800cbaa:	3307      	adds	r3, #7
 800cbac:	10db      	asrs	r3, r3, #3
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cbba:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cbbe:	3310      	adds	r3, #16
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	b21b      	sxth	r3, r3
 800cbc4:	425a      	negs	r2, r3
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	f002 0207 	and.w	r2, r2, #7
 800cbce:	bf58      	it	pl
 800cbd0:	4253      	negpl	r3, r2
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800cbd8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cbe0:	441a      	add	r2, r3
 800cbe2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbe6:	3b02      	subs	r3, #2
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f000 feeb 	bl	800d9c8 <Siemens_CRC>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cbf8:	4b2e      	ldr	r3, [pc, #184]	; (800ccb4 <Form_Siemens_Reply+0x68c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	0a5b      	lsrs	r3, r3, #9
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d02c      	beq.n	800cc60 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800cc06:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc0a:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cc0e:	482a      	ldr	r0, [pc, #168]	; (800ccb8 <Form_Siemens_Reply+0x690>)
 800cc10:	f015 fbac 	bl	802236c <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cc14:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc18:	4619      	mov	r1, r3
 800cc1a:	482c      	ldr	r0, [pc, #176]	; (800cccc <Form_Siemens_Reply+0x6a4>)
 800cc1c:	f015 fb0a 	bl	8022234 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cc20:	4827      	ldr	r0, [pc, #156]	; (800ccc0 <Form_Siemens_Reply+0x698>)
 800cc22:	f00c ffc3 	bl	8019bac <HAL_RNG_GetRandomNumber>
 800cc26:	4601      	mov	r1, r0
 800cc28:	4b26      	ldr	r3, [pc, #152]	; (800ccc4 <Form_Siemens_Reply+0x69c>)
 800cc2a:	fba3 2301 	umull	r2, r3, r3, r1
 800cc2e:	0bda      	lsrs	r2, r3, #15
 800cc30:	4613      	mov	r3, r2
 800cc32:	041b      	lsls	r3, r3, #16
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	1aca      	subs	r2, r1, r3
 800cc38:	4613      	mov	r3, r2
 800cc3a:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800cc3e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cc42:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d104      	bne.n	800cc54 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800cc4a:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc4e:	3304      	adds	r3, #4
 800cc50:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cc54:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc58:	4619      	mov	r1, r3
 800cc5a:	481d      	ldr	r0, [pc, #116]	; (800ccd0 <Form_Siemens_Reply+0x6a8>)
 800cc5c:	f015 faea 	bl	8022234 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800cc60:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800cc6a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc6e:	b2d8      	uxtb	r0, r3
 800cc70:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cc74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cc78:	4413      	add	r3, r2
 800cc7a:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cc7e:	2100      	movs	r1, #0
 800cc80:	603a      	str	r2, [r7, #0]
 800cc82:	6079      	str	r1, [r7, #4]
 800cc84:	2202      	movs	r2, #2
 800cc86:	9202      	str	r2, [sp, #8]
 800cc88:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc8c:	e9cd 1200 	strd	r1, r2, [sp]
 800cc90:	461a      	mov	r2, r3
 800cc92:	2110      	movs	r1, #16
 800cc94:	f001 f82e 	bl	800dcf4 <Insert_cal_parity>
	BITSTUFFINC(16);
 800cc98:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cc9c:	3310      	adds	r3, #16
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	da18      	bge.n	800ccd4 <Form_Siemens_Reply+0x6ac>
 800cca2:	3307      	adds	r3, #7
 800cca4:	e016      	b.n	800ccd4 <Form_Siemens_Reply+0x6ac>
 800cca6:	bf00      	nop
 800cca8:	20002884 	.word	0x20002884
 800ccac:	20002aac 	.word	0x20002aac
 800ccb0:	20003d48 	.word	0x20003d48
 800ccb4:	20003500 	.word	0x20003500
 800ccb8:	08025c40 	.word	0x08025c40
 800ccbc:	08025ef0 	.word	0x08025ef0
 800ccc0:	20009cf4 	.word	0x20009cf4
 800ccc4:	80008001 	.word	0x80008001
 800ccc8:	08025f04 	.word	0x08025f04
 800cccc:	08025f18 	.word	0x08025f18
 800ccd0:	08025f34 	.word	0x08025f34
 800ccd4:	10db      	asrs	r3, r3, #3
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ccdc:	4413      	add	r3, r2
 800ccde:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cce2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cce6:	3310      	adds	r3, #16
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	b21b      	sxth	r3, r3
 800ccec:	425a      	negs	r2, r3
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	f002 0207 	and.w	r2, r2, #7
 800ccf6:	bf58      	it	pl
 800ccf8:	4253      	negpl	r3, r2
 800ccfa:	b21b      	sxth	r3, r3
 800ccfc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800cd00:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd04:	3302      	adds	r3, #2
 800cd06:	461a      	mov	r2, r3
 800cd08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	481d      	ldr	r0, [pc, #116]	; (800cd84 <Form_Siemens_Reply+0x75c>)
 800cd10:	f015 f980 	bl	8022014 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800cd14:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd18:	3302      	adds	r3, #2
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	4b19      	ldr	r3, [pc, #100]	; (800cd84 <Form_Siemens_Reply+0x75c>)
 800cd1e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800cd22:	f001 f9b9 	bl	800e098 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <Form_Siemens_Reply+0x760>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	099b      	lsrs	r3, r3, #6
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800cd34:	4815      	ldr	r0, [pc, #84]	; (800cd8c <Form_Siemens_Reply+0x764>)
 800cd36:	f015 fb19 	bl	802236c <puts>
 800cd3a:	e00e      	b.n	800cd5a <Form_Siemens_Reply+0x732>
	}
	else
	{
		if(SendReply == 1)
 800cd3c:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <Form_Siemens_Reply+0x768>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d10a      	bne.n	800cd5a <Form_Siemens_Reply+0x732>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800cd44:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd48:	3302      	adds	r3, #2
 800cd4a:	b299      	uxth	r1, r3
 800cd4c:	4a11      	ldr	r2, [pc, #68]	; (800cd94 <Form_Siemens_Reply+0x76c>)
 800cd4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd52:	6812      	ldr	r2, [r2, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f002 fc2b 	bl	800f5b0 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800cd5a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cd5e:	2100      	movs	r1, #0
 800cd60:	480d      	ldr	r0, [pc, #52]	; (800cd98 <Form_Siemens_Reply+0x770>)
 800cd62:	f015 f97f 	bl	8022064 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800cd66:	4a0c      	ldr	r2, [pc, #48]	; (800cd98 <Form_Siemens_Reply+0x770>)
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <Form_Siemens_Reply+0x774>)
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f44f 730a 	mov.w	r3, #552	; 0x228
 800cd72:	461a      	mov	r2, r3
 800cd74:	f015 f94e 	bl	8022014 <memcpy>
	UNUSED(App_data_Traverser);
}
 800cd78:	bf00      	nop
 800cd7a:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd84:	20002efc 	.word	0x20002efc
 800cd88:	20003500 	.word	0x20003500
 800cd8c:	08025f54 	.word	0x08025f54
 800cd90:	20004c29 	.word	0x20004c29
 800cd94:	20005290 	.word	0x20005290
 800cd98:	20002cd4 	.word	0x20002cd4
 800cd9c:	20002aac 	.word	0x20002aac

0800cda0 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800cda6:	4b64      	ldr	r3, [pc, #400]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f002 f864 	bl	800ee78 <HAL_Elaps_Ticks>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	4b62      	ldr	r3, [pc, #392]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800cdb4:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	f240 80b9 	bls.w	800cf30 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cdbe:	4b5e      	ldr	r3, [pc, #376]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
		if(
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d113      	bne.n	800cdee <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cdc6:	4b5c      	ldr	r3, [pc, #368]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800cdc8:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d10f      	bne.n	800cdee <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cdce:	4b5c      	ldr	r3, [pc, #368]	; (800cf40 <ProcessSendingSignals2MIE+0x1a0>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d10b      	bne.n	800cdee <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cdd6:	4b5b      	ldr	r3, [pc, #364]	; (800cf44 <ProcessSendingSignals2MIE+0x1a4>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d107      	bne.n	800cdee <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cdde:	4b5a      	ldr	r3, [pc, #360]	; (800cf48 <ProcessSendingSignals2MIE+0x1a8>)
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	4959      	ldr	r1, [pc, #356]	; (800cf4c <ProcessSendingSignals2MIE+0x1ac>)
 800cde6:	485a      	ldr	r0, [pc, #360]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800cde8:	f015 f914 	bl	8022014 <memcpy>
 800cdec:	e02d      	b.n	800ce4a <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800cdee:	4b54      	ldr	r3, [pc, #336]	; (800cf40 <ProcessSendingSignals2MIE+0x1a0>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d10f      	bne.n	800ce16 <ProcessSendingSignals2MIE+0x76>
 800cdf6:	4b53      	ldr	r3, [pc, #332]	; (800cf44 <ProcessSendingSignals2MIE+0x1a4>)
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10b      	bne.n	800ce16 <ProcessSendingSignals2MIE+0x76>
 800cdfe:	4b4e      	ldr	r3, [pc, #312]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800ce00:	785b      	ldrb	r3, [r3, #1]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d107      	bne.n	800ce16 <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800ce06:	4b53      	ldr	r3, [pc, #332]	; (800cf54 <ProcessSendingSignals2MIE+0x1b4>)
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	4952      	ldr	r1, [pc, #328]	; (800cf58 <ProcessSendingSignals2MIE+0x1b8>)
 800ce0e:	4850      	ldr	r0, [pc, #320]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800ce10:	f015 f900 	bl	8022014 <memcpy>
 800ce14:	e019      	b.n	800ce4a <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800ce16:	4b4b      	ldr	r3, [pc, #300]	; (800cf44 <ProcessSendingSignals2MIE+0x1a4>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d10f      	bne.n	800ce3e <ProcessSendingSignals2MIE+0x9e>
 800ce1e:	4b48      	ldr	r3, [pc, #288]	; (800cf40 <ProcessSendingSignals2MIE+0x1a0>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10b      	bne.n	800ce3e <ProcessSendingSignals2MIE+0x9e>
 800ce26:	4b44      	ldr	r3, [pc, #272]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800ce28:	785b      	ldrb	r3, [r3, #1]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d107      	bne.n	800ce3e <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ce2e:	4b46      	ldr	r3, [pc, #280]	; (800cf48 <ProcessSendingSignals2MIE+0x1a8>)
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	461a      	mov	r2, r3
 800ce34:	4945      	ldr	r1, [pc, #276]	; (800cf4c <ProcessSendingSignals2MIE+0x1ac>)
 800ce36:	4846      	ldr	r0, [pc, #280]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800ce38:	f015 f8ec 	bl	8022014 <memcpy>
 800ce3c:	e005      	b.n	800ce4a <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ce3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce42:	2100      	movs	r1, #0
 800ce44:	4842      	ldr	r0, [pc, #264]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800ce46:	f015 f90d 	bl	8022064 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ce4a:	4b3e      	ldr	r3, [pc, #248]	; (800cf44 <ProcessSendingSignals2MIE+0x1a4>)
 800ce4c:	885b      	ldrh	r3, [r3, #2]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	4b3a      	ldr	r3, [pc, #232]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800ce52:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d30d      	bcc.n	800ce76 <ProcessSendingSignals2MIE+0xd6>
 800ce5a:	4b39      	ldr	r3, [pc, #228]	; (800cf40 <ProcessSendingSignals2MIE+0x1a0>)
 800ce5c:	885b      	ldrh	r3, [r3, #2]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4b36      	ldr	r3, [pc, #216]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800ce62:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d305      	bcc.n	800ce76 <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ce6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce6e:	2100      	movs	r1, #0
 800ce70:	4837      	ldr	r0, [pc, #220]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800ce72:	f015 f8f7 	bl	8022064 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800ce76:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800ce78:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ce7c:	f003 0307 	and.w	r3, r3, #7
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	4b36      	ldr	r3, [pc, #216]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800ce84:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800ce86:	4b35      	ldr	r3, [pc, #212]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800ce8e:	4b2b      	ldr	r3, [pc, #172]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800ce90:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ce94:	08db      	lsrs	r3, r3, #3
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	3301      	adds	r3, #1
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	4b2f      	ldr	r3, [pc, #188]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800ce9e:	801a      	strh	r2, [r3, #0]
 800cea0:	e006      	b.n	800ceb0 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800cea2:	4b26      	ldr	r3, [pc, #152]	; (800cf3c <ProcessSendingSignals2MIE+0x19c>)
 800cea4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cea8:	08db      	lsrs	r3, r3, #3
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	4b2b      	ldr	r3, [pc, #172]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800ceae:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800ceb0:	492b      	ldr	r1, [pc, #172]	; (800cf60 <ProcessSendingSignals2MIE+0x1c0>)
 800ceb2:	482c      	ldr	r0, [pc, #176]	; (800cf64 <ProcessSendingSignals2MIE+0x1c4>)
 800ceb4:	f7f3 f9c4 	bl	8000240 <strcmp>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d008      	beq.n	800ced0 <ProcessSendingSignals2MIE+0x130>
 800cebe:	4b1e      	ldr	r3, [pc, #120]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800cec0:	785b      	ldrb	r3, [r3, #1]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d104      	bne.n	800ced0 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800cec6:	f240 1019 	movw	r0, #281	; 0x119
 800ceca:	f002 fdd7 	bl	800fa7c <TransmitCanPkt>
 800cece:	e011      	b.n	800cef4 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800ced0:	4923      	ldr	r1, [pc, #140]	; (800cf60 <ProcessSendingSignals2MIE+0x1c0>)
 800ced2:	4824      	ldr	r0, [pc, #144]	; (800cf64 <ProcessSendingSignals2MIE+0x1c4>)
 800ced4:	f7f3 f9b4 	bl	8000240 <strcmp>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cede:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <ProcessSendingSignals2MIE+0x1a8>)
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	461a      	mov	r2, r3
 800cee4:	4919      	ldr	r1, [pc, #100]	; (800cf4c <ProcessSendingSignals2MIE+0x1ac>)
 800cee6:	481a      	ldr	r0, [pc, #104]	; (800cf50 <ProcessSendingSignals2MIE+0x1b0>)
 800cee8:	f015 f894 	bl	8022014 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800ceec:	f240 1019 	movw	r0, #281	; 0x119
 800cef0:	f002 fdc4 	bl	800fa7c <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800cef4:	481c      	ldr	r0, [pc, #112]	; (800cf68 <ProcessSendingSignals2MIE+0x1c8>)
 800cef6:	f015 f99d 	bl	8022234 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cefa:	2300      	movs	r3, #0
 800cefc:	80fb      	strh	r3, [r7, #6]
 800cefe:	e00a      	b.n	800cf16 <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800cf00:	88fb      	ldrh	r3, [r7, #6]
 800cf02:	4a16      	ldr	r2, [pc, #88]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800cf04:	4413      	add	r3, r2
 800cf06:	789b      	ldrb	r3, [r3, #2]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4818      	ldr	r0, [pc, #96]	; (800cf6c <ProcessSendingSignals2MIE+0x1cc>)
 800cf0c:	f015 f992 	bl	8022234 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cf10:	88fb      	ldrh	r3, [r7, #6]
 800cf12:	3301      	adds	r3, #1
 800cf14:	80fb      	strh	r3, [r7, #6]
 800cf16:	4b11      	ldr	r3, [pc, #68]	; (800cf5c <ProcessSendingSignals2MIE+0x1bc>)
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	88fa      	ldrh	r2, [r7, #6]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d3ef      	bcc.n	800cf00 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800cf20:	200a      	movs	r0, #10
 800cf22:	f015 f99f 	bl	8022264 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800cf26:	f008 fa83 	bl	8015430 <HAL_GetTick>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4a02      	ldr	r2, [pc, #8]	; (800cf38 <ProcessSendingSignals2MIE+0x198>)
 800cf2e:	6053      	str	r3, [r2, #4]
	}
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20003514 	.word	0x20003514
 800cf3c:	20000304 	.word	0x20000304
 800cf40:	2000350c 	.word	0x2000350c
 800cf44:	20003508 	.word	0x20003508
 800cf48:	20003734 	.word	0x20003734
 800cf4c:	20003738 	.word	0x20003738
 800cf50:	20003532 	.word	0x20003532
 800cf54:	20003938 	.word	0x20003938
 800cf58:	2000393c 	.word	0x2000393c
 800cf5c:	20003530 	.word	0x20003530
 800cf60:	08025ec0 	.word	0x08025ec0
 800cf64:	20000305 	.word	0x20000305
 800cf68:	08025f7c 	.word	0x08025f7c
 800cf6c:	08025f94 	.word	0x08025f94

0800cf70 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800cf74:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <ProcessSelfSharing+0x38>)
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f001 ff7d 	bl	800ee78 <HAL_Elaps_Ticks>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <ProcessSelfSharing+0x3c>)
 800cf82:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d90b      	bls.n	800cfa2 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800cf8a:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <ProcessSelfSharing+0x40>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800cf90:	f240 2001 	movw	r0, #513	; 0x201
 800cf94:	f002 fd72 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800cf98:	f008 fa4a 	bl	8015430 <HAL_GetTick>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	4a02      	ldr	r2, [pc, #8]	; (800cfa8 <ProcessSelfSharing+0x38>)
 800cfa0:	6093      	str	r3, [r2, #8]
	}
}
 800cfa2:	bf00      	nop
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20003514 	.word	0x20003514
 800cfac:	20000304 	.word	0x20000304
 800cfb0:	20003508 	.word	0x20003508

0800cfb4 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	; (800d024 <ProcessDetectNoValidDataReceive+0x70>)
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d014      	beq.n	800cfea <ProcessDetectNoValidDataReceive+0x36>
 800cfc0:	4b18      	ldr	r3, [pc, #96]	; (800d024 <ProcessDetectNoValidDataReceive+0x70>)
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f001 ff57 	bl	800ee78 <HAL_Elaps_Ticks>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4b16      	ldr	r3, [pc, #88]	; (800d028 <ProcessDetectNoValidDataReceive+0x74>)
 800cfce:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d909      	bls.n	800cfea <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cfd6:	4b15      	ldr	r3, [pc, #84]	; (800d02c <ProcessDetectNoValidDataReceive+0x78>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800cfde:	4814      	ldr	r0, [pc, #80]	; (800d030 <ProcessDetectNoValidDataReceive+0x7c>)
 800cfe0:	f015 f9c4 	bl	802236c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cfe4:	4b11      	ldr	r3, [pc, #68]	; (800d02c <ProcessDetectNoValidDataReceive+0x78>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800cfea:	4b10      	ldr	r3, [pc, #64]	; (800d02c <ProcessDetectNoValidDataReceive+0x78>)
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	461a      	mov	r2, r3
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <ProcessDetectNoValidDataReceive+0x74>)
 800cff2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d911      	bls.n	800d01e <ProcessDetectNoValidDataReceive+0x6a>
 800cffa:	4b0e      	ldr	r3, [pc, #56]	; (800d034 <ProcessDetectNoValidDataReceive+0x80>)
 800cffc:	885b      	ldrh	r3, [r3, #2]
 800cffe:	461a      	mov	r2, r3
 800d000:	4b09      	ldr	r3, [pc, #36]	; (800d028 <ProcessDetectNoValidDataReceive+0x74>)
 800d002:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d006:	429a      	cmp	r2, r3
 800d008:	d909      	bls.n	800d01e <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800d00a:	4b08      	ldr	r3, [pc, #32]	; (800d02c <ProcessDetectNoValidDataReceive+0x78>)
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800d012:	4809      	ldr	r0, [pc, #36]	; (800d038 <ProcessDetectNoValidDataReceive+0x84>)
 800d014:	f015 f9aa 	bl	802236c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d018:	4b04      	ldr	r3, [pc, #16]	; (800d02c <ProcessDetectNoValidDataReceive+0x78>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800d01e:	bf00      	nop
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20003514 	.word	0x20003514
 800d028:	20000304 	.word	0x20000304
 800d02c:	20003508 	.word	0x20003508
 800d030:	08025f9c 	.word	0x08025f9c
 800d034:	2000350c 	.word	0x2000350c
 800d038:	08025fbc 	.word	0x08025fbc

0800d03c <SendRelays2Other>:

void SendRelays2Other(void)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800d040:	4b09      	ldr	r3, [pc, #36]	; (800d068 <SendRelays2Other+0x2c>)
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	4618      	mov	r0, r3
 800d046:	f001 ff17 	bl	800ee78 <HAL_Elaps_Ticks>
 800d04a:	4603      	mov	r3, r0
 800d04c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d050:	d908      	bls.n	800d064 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d052:	f240 2007 	movw	r0, #519	; 0x207
 800d056:	f002 fd11 	bl	800fa7c <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d05a:	f008 f9e9 	bl	8015430 <HAL_GetTick>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a01      	ldr	r2, [pc, #4]	; (800d068 <SendRelays2Other+0x2c>)
 800d062:	6113      	str	r3, [r2, #16]

	}
}
 800d064:	bf00      	nop
 800d066:	bd80      	pop	{r7, pc}
 800d068:	20003514 	.word	0x20003514

0800d06c <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800d070:	4b16      	ldr	r3, [pc, #88]	; (800d0cc <CheckRelayMisMatch+0x60>)
 800d072:	695b      	ldr	r3, [r3, #20]
 800d074:	4618      	mov	r0, r3
 800d076:	f001 feff 	bl	800ee78 <HAL_Elaps_Ticks>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d080:	d922      	bls.n	800d0c8 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d082:	4b13      	ldr	r3, [pc, #76]	; (800d0d0 <CheckRelayMisMatch+0x64>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10c      	bne.n	800d0a4 <CheckRelayMisMatch+0x38>
 800d08a:	4b12      	ldr	r3, [pc, #72]	; (800d0d4 <CheckRelayMisMatch+0x68>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d108      	bne.n	800d0a4 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800d092:	4a11      	ldr	r2, [pc, #68]	; (800d0d8 <CheckRelayMisMatch+0x6c>)
 800d094:	4b11      	ldr	r3, [pc, #68]	; (800d0dc <CheckRelayMisMatch+0x70>)
 800d096:	4610      	mov	r0, r2
 800d098:	4619      	mov	r1, r3
 800d09a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f014 ffb8 	bl	8022014 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800d0a4:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <CheckRelayMisMatch+0x70>)
 800d0a6:	885a      	ldrh	r2, [r3, #2]
 800d0a8:	4b0b      	ldr	r3, [pc, #44]	; (800d0d8 <CheckRelayMisMatch+0x6c>)
 800d0aa:	885b      	ldrh	r3, [r3, #2]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d003      	beq.n	800d0b8 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800d0b0:	4b06      	ldr	r3, [pc, #24]	; (800d0cc <CheckRelayMisMatch+0x60>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800d0b8:	4b04      	ldr	r3, [pc, #16]	; (800d0cc <CheckRelayMisMatch+0x60>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800d0be:	f008 f9b7 	bl	8015430 <HAL_GetTick>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	4a01      	ldr	r2, [pc, #4]	; (800d0cc <CheckRelayMisMatch+0x60>)
 800d0c6:	6153      	str	r3, [r2, #20]
	}
}
 800d0c8:	bf00      	nop
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	20003514 	.word	0x20003514
 800d0d0:	20003508 	.word	0x20003508
 800d0d4:	2000350c 	.word	0x2000350c
 800d0d8:	20003734 	.word	0x20003734
 800d0dc:	20003938 	.word	0x20003938

0800d0e0 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800d0e4:	4b16      	ldr	r3, [pc, #88]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0e6:	785b      	ldrb	r3, [r3, #1]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800d0ec:	f006 f878 	bl	80131e0 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800d0f0:	4b13      	ldr	r3, [pc, #76]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f001 febf 	bl	800ee78 <HAL_Elaps_Ticks>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	4b11      	ldr	r3, [pc, #68]	; (800d144 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800d0fe:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800d102:	429a      	cmp	r2, r3
 800d104:	d31a      	bcc.n	800d13c <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800d106:	4b0e      	ldr	r3, [pc, #56]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d108:	699a      	ldr	r2, [r3, #24]
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d014      	beq.n	800d13c <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800d112:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d114:	2200      	movs	r2, #0
 800d116:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800d118:	4b09      	ldr	r3, [pc, #36]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	4a0a      	ldr	r2, [pc, #40]	; (800d148 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d11e:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800d120:	4b07      	ldr	r3, [pc, #28]	; (800d140 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	4618      	mov	r0, r3
 800d126:	f001 fea7 	bl	800ee78 <HAL_Elaps_Ticks>
 800d12a:	4603      	mov	r3, r0
 800d12c:	4a07      	ldr	r2, [pc, #28]	; (800d14c <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800d12e:	fba2 2303 	umull	r2, r3, r2, r3
 800d132:	099b      	lsrs	r3, r3, #6
 800d134:	4619      	mov	r1, r3
 800d136:	4806      	ldr	r0, [pc, #24]	; (800d150 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800d138:	f015 f87c 	bl	8022234 <iprintf>
		}
	}
}
 800d13c:	bf00      	nop
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	20003514 	.word	0x20003514
 800d144:	20000304 	.word	0x20000304
 800d148:	20004c2c 	.word	0x20004c2c
 800d14c:	10624dd3 	.word	0x10624dd3
 800d150:	08025fe0 	.word	0x08025fe0

0800d154 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4611      	mov	r1, r2
 800d160:	461a      	mov	r2, r3
 800d162:	460b      	mov	r3, r1
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	4613      	mov	r3, r2
 800d168:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800d16a:	484d      	ldr	r0, [pc, #308]	; (800d2a0 <Print_Siemens_MSG+0x14c>)
 800d16c:	f015 f862 	bl	8022234 <iprintf>
	if(TX_RX == TX)
 800d170:	797b      	ldrb	r3, [r7, #5]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d103      	bne.n	800d17e <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800d176:	484b      	ldr	r0, [pc, #300]	; (800d2a4 <Print_Siemens_MSG+0x150>)
 800d178:	f015 f85c 	bl	8022234 <iprintf>
 800d17c:	e005      	b.n	800d18a <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800d17e:	797b      	ldrb	r3, [r7, #5]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d102      	bne.n	800d18a <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800d184:	4848      	ldr	r0, [pc, #288]	; (800d2a8 <Print_Siemens_MSG+0x154>)
 800d186:	f015 f855 	bl	8022234 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	4619      	mov	r1, r3
 800d190:	4846      	ldr	r0, [pc, #280]	; (800d2ac <Print_Siemens_MSG+0x158>)
 800d192:	f015 f84f 	bl	8022234 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	4619      	mov	r1, r3
 800d19c:	4844      	ldr	r0, [pc, #272]	; (800d2b0 <Print_Siemens_MSG+0x15c>)
 800d19e:	f015 f849 	bl	8022234 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	7b1b      	ldrb	r3, [r3, #12]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4842      	ldr	r0, [pc, #264]	; (800d2b4 <Print_Siemens_MSG+0x160>)
 800d1aa:	f015 f843 	bl	8022234 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	695b      	ldr	r3, [r3, #20]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	4840      	ldr	r0, [pc, #256]	; (800d2b8 <Print_Siemens_MSG+0x164>)
 800d1b6:	f015 f83d 	bl	8022234 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	7e1b      	ldrb	r3, [r3, #24]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	483e      	ldr	r0, [pc, #248]	; (800d2bc <Print_Siemens_MSG+0x168>)
 800d1c2:	f015 f837 	bl	8022234 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7e5b      	ldrb	r3, [r3, #25]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	483c      	ldr	r0, [pc, #240]	; (800d2c0 <Print_Siemens_MSG+0x16c>)
 800d1ce:	f015 f831 	bl	8022234 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	7e9b      	ldrb	r3, [r3, #26]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	483a      	ldr	r0, [pc, #232]	; (800d2c4 <Print_Siemens_MSG+0x170>)
 800d1da:	f015 f82b 	bl	8022234 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	7edb      	ldrb	r3, [r3, #27]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4838      	ldr	r0, [pc, #224]	; (800d2c8 <Print_Siemens_MSG+0x174>)
 800d1e6:	f015 f825 	bl	8022234 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4836      	ldr	r0, [pc, #216]	; (800d2cc <Print_Siemens_MSG+0x178>)
 800d1f2:	f015 f81f 	bl	8022234 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4834      	ldr	r0, [pc, #208]	; (800d2d0 <Print_Siemens_MSG+0x17c>)
 800d1fe:	f015 f819 	bl	8022234 <iprintf>
	if(TX_RX == RX)
 800d202:	797b      	ldrb	r3, [r7, #5]
 800d204:	2b02      	cmp	r3, #2
 800d206:	d122      	bne.n	800d24e <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d20c:	4619      	mov	r1, r3
 800d20e:	4831      	ldr	r0, [pc, #196]	; (800d2d4 <Print_Siemens_MSG+0x180>)
 800d210:	f015 f810 	bl	8022234 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d214:	2300      	movs	r3, #0
 800d216:	82fb      	strh	r3, [r7, #22]
 800d218:	e00b      	b.n	800d232 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800d21a:	8afb      	ldrh	r3, [r7, #22]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4413      	add	r3, r2
 800d220:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d224:	4619      	mov	r1, r3
 800d226:	482c      	ldr	r0, [pc, #176]	; (800d2d8 <Print_Siemens_MSG+0x184>)
 800d228:	f015 f804 	bl	8022234 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d22c:	8afb      	ldrh	r3, [r7, #22]
 800d22e:	3301      	adds	r3, #1
 800d230:	82fb      	strh	r3, [r7, #22]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d236:	8afa      	ldrh	r2, [r7, #22]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d3ee      	bcc.n	800d21a <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800d23c:	200a      	movs	r0, #10
 800d23e:	f015 f811 	bl	8022264 <putchar>

		if(Debug_flag == 2)
 800d242:	4b26      	ldr	r3, [pc, #152]	; (800d2dc <Print_Siemens_MSG+0x188>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d101      	bne.n	800d24e <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800d24a:	f000 ff65 	bl	800e118 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800d24e:	4b23      	ldr	r3, [pc, #140]	; (800d2dc <Print_Siemens_MSG+0x188>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d120      	bne.n	800d298 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d256:	2300      	movs	r3, #0
 800d258:	82bb      	strh	r3, [r7, #20]
 800d25a:	e016      	b.n	800d28a <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800d25c:	8abb      	ldrh	r3, [r7, #20]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <Print_Siemens_MSG+0x120>
 800d262:	8abb      	ldrh	r3, [r7, #20]
 800d264:	f003 031f 	and.w	r3, r3, #31
 800d268:	b29b      	uxth	r3, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800d26e:	200a      	movs	r0, #10
 800d270:	f014 fff8 	bl	8022264 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800d274:	8abb      	ldrh	r3, [r7, #20]
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	4413      	add	r3, r2
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	4619      	mov	r1, r3
 800d27e:	4816      	ldr	r0, [pc, #88]	; (800d2d8 <Print_Siemens_MSG+0x184>)
 800d280:	f014 ffd8 	bl	8022234 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d284:	8abb      	ldrh	r3, [r7, #20]
 800d286:	3301      	adds	r3, #1
 800d288:	82bb      	strh	r3, [r7, #20]
 800d28a:	8aba      	ldrh	r2, [r7, #20]
 800d28c:	88fb      	ldrh	r3, [r7, #6]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d3e4      	bcc.n	800d25c <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800d292:	200a      	movs	r0, #10
 800d294:	f014 ffe6 	bl	8022264 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800d298:	bf00      	nop
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	08026010 	.word	0x08026010
 800d2a4:	08026018 	.word	0x08026018
 800d2a8:	0802601c 	.word	0x0802601c
 800d2ac:	08026020 	.word	0x08026020
 800d2b0:	08026028 	.word	0x08026028
 800d2b4:	08026030 	.word	0x08026030
 800d2b8:	08026038 	.word	0x08026038
 800d2bc:	08026040 	.word	0x08026040
 800d2c0:	0802604c 	.word	0x0802604c
 800d2c4:	08026054 	.word	0x08026054
 800d2c8:	0802605c 	.word	0x0802605c
 800d2cc:	08026064 	.word	0x08026064
 800d2d0:	08026070 	.word	0x08026070
 800d2d4:	0802607c 	.word	0x0802607c
 800d2d8:	08025f94 	.word	0x08025f94
 800d2dc:	20000645 	.word	0x20000645

0800d2e0 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b09a      	sub	sp, #104	; 0x68
 800d2e4:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	1d3b      	adds	r3, r7, #4
 800d2fe:	2260      	movs	r2, #96	; 0x60
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f014 feae 	bl	8022064 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800d308:	4bb9      	ldr	r3, [pc, #740]	; (800d5f0 <Chech_forSiemensCMD+0x310>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f001 fdb3 	bl	800ee78 <HAL_Elaps_Ticks>
 800d312:	4603      	mov	r3, r0
 800d314:	2b09      	cmp	r3, #9
 800d316:	f240 81ad 	bls.w	800d674 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800d31a:	e010      	b.n	800d33e <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800d31c:	2000      	movs	r0, #0
 800d31e:	f007 fd5f 	bl	8014de0 <Com_Get_Byte>
 800d322:	4603      	mov	r3, r0
 800d324:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800d328:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800d332:	3368      	adds	r3, #104	; 0x68
 800d334:	443b      	add	r3, r7
 800d336:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800d33a:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800d33e:	2000      	movs	r0, #0
 800d340:	f007 fd0e 	bl	8014d60 <Com_DataReady>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e8      	bne.n	800d31c <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800d34a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8144 	beq.w	800d5dc <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800d354:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d358:	3368      	adds	r3, #104	; 0x68
 800d35a:	443b      	add	r3, r7
 800d35c:	2200      	movs	r2, #0
 800d35e:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800d362:	463b      	mov	r3, r7
 800d364:	4619      	mov	r1, r3
 800d366:	48a3      	ldr	r0, [pc, #652]	; (800d5f4 <Chech_forSiemensCMD+0x314>)
 800d368:	f014 ff64 	bl	8022234 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800d36c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800d370:	463b      	mov	r3, r7
 800d372:	4611      	mov	r1, r2
 800d374:	4618      	mov	r0, r3
 800d376:	f000 faf3 	bl	800d960 <Is_SiemensCommand_Valid>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b0c      	cmp	r3, #12
 800d37e:	f200 8129 	bhi.w	800d5d4 <Chech_forSiemensCMD+0x2f4>
 800d382:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <Chech_forSiemensCMD+0xa8>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d3bd 	.word	0x0800d3bd
 800d38c:	0800d3cb 	.word	0x0800d3cb
 800d390:	0800d42f 	.word	0x0800d42f
 800d394:	0800d451 	.word	0x0800d451
 800d398:	0800d479 	.word	0x0800d479
 800d39c:	0800d4a1 	.word	0x0800d4a1
 800d3a0:	0800d4c9 	.word	0x0800d4c9
 800d3a4:	0800d4f1 	.word	0x0800d4f1
 800d3a8:	0800d519 	.word	0x0800d519
 800d3ac:	0800d541 	.word	0x0800d541
 800d3b0:	0800d569 	.word	0x0800d569
 800d3b4:	0800d591 	.word	0x0800d591
 800d3b8:	0800d5b9 	.word	0x0800d5b9
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800d3bc:	4b8e      	ldr	r3, [pc, #568]	; (800d5f8 <Chech_forSiemensCMD+0x318>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800d3c2:	488e      	ldr	r0, [pc, #568]	; (800d5fc <Chech_forSiemensCMD+0x31c>)
 800d3c4:	f014 ffd2 	bl	802236c <puts>
				break;
 800d3c8:	e109      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800d3ca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	3368      	adds	r3, #104	; 0x68
 800d3d2:	443b      	add	r3, r7
 800d3d4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3d8:	3b30      	subs	r3, #48	; 0x30
 800d3da:	461a      	mov	r2, r3
 800d3dc:	4988      	ldr	r1, [pc, #544]	; (800d600 <Chech_forSiemensCMD+0x320>)
 800d3de:	4889      	ldr	r0, [pc, #548]	; (800d604 <Chech_forSiemensCMD+0x324>)
 800d3e0:	f014 ff28 	bl	8022234 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800d3e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	3368      	adds	r3, #104	; 0x68
 800d3ec:	443b      	add	r3, r7
 800d3ee:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3f2:	2b2f      	cmp	r3, #47	; 0x2f
 800d3f4:	d914      	bls.n	800d420 <Chech_forSiemensCMD+0x140>
 800d3f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	3368      	adds	r3, #104	; 0x68
 800d3fe:	443b      	add	r3, r7
 800d400:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d404:	2b32      	cmp	r3, #50	; 0x32
 800d406:	d80b      	bhi.n	800d420 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800d408:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d40c:	3b01      	subs	r3, #1
 800d40e:	3368      	adds	r3, #104	; 0x68
 800d410:	443b      	add	r3, r7
 800d412:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d416:	3b30      	subs	r3, #48	; 0x30
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	4b7b      	ldr	r3, [pc, #492]	; (800d608 <Chech_forSiemensCMD+0x328>)
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	e002      	b.n	800d426 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800d420:	487a      	ldr	r0, [pc, #488]	; (800d60c <Chech_forSiemensCMD+0x32c>)
 800d422:	f014 ffa3 	bl	802236c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800d426:	2301      	movs	r3, #1
 800d428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d42c:	e0d7      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800d42e:	4978      	ldr	r1, [pc, #480]	; (800d610 <Chech_forSiemensCMD+0x330>)
 800d430:	4878      	ldr	r0, [pc, #480]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d432:	f014 feff 	bl	8022234 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800d436:	4878      	ldr	r0, [pc, #480]	; (800d618 <Chech_forSiemensCMD+0x338>)
 800d438:	f014 ff98 	bl	802236c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d43c:	4b77      	ldr	r3, [pc, #476]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f043 0301 	orr.w	r3, r3, #1
 800d444:	4a75      	ldr	r2, [pc, #468]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d446:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d448:	2301      	movs	r3, #1
 800d44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d44e:	e0c6      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d450:	4973      	ldr	r1, [pc, #460]	; (800d620 <Chech_forSiemensCMD+0x340>)
 800d452:	4870      	ldr	r0, [pc, #448]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d454:	f014 feee 	bl	8022234 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d458:	4872      	ldr	r0, [pc, #456]	; (800d624 <Chech_forSiemensCMD+0x344>)
 800d45a:	f014 ff87 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d45e:	4b6f      	ldr	r3, [pc, #444]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d464:	4b6d      	ldr	r3, [pc, #436]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f043 0302 	orr.w	r3, r3, #2
 800d46c:	4a6b      	ldr	r2, [pc, #428]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d46e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d470:	2301      	movs	r3, #1
 800d472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d476:	e0b2      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d478:	496b      	ldr	r1, [pc, #428]	; (800d628 <Chech_forSiemensCMD+0x348>)
 800d47a:	4866      	ldr	r0, [pc, #408]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d47c:	f014 feda 	bl	8022234 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d480:	486a      	ldr	r0, [pc, #424]	; (800d62c <Chech_forSiemensCMD+0x34c>)
 800d482:	f014 ff73 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d486:	4b65      	ldr	r3, [pc, #404]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d48c:	4b63      	ldr	r3, [pc, #396]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f043 0304 	orr.w	r3, r3, #4
 800d494:	4a61      	ldr	r2, [pc, #388]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d496:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d498:	2301      	movs	r3, #1
 800d49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d49e:	e09e      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d4a0:	4963      	ldr	r1, [pc, #396]	; (800d630 <Chech_forSiemensCMD+0x350>)
 800d4a2:	485c      	ldr	r0, [pc, #368]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d4a4:	f014 fec6 	bl	8022234 <iprintf>
				printf("INVALID_DES_PORT\n");
 800d4a8:	4862      	ldr	r0, [pc, #392]	; (800d634 <Chech_forSiemensCMD+0x354>)
 800d4aa:	f014 ff5f 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4ae:	4b5b      	ldr	r3, [pc, #364]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d4b4:	4b59      	ldr	r3, [pc, #356]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	4a57      	ldr	r2, [pc, #348]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4be:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4c6:	e08a      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d4c8:	495b      	ldr	r1, [pc, #364]	; (800d638 <Chech_forSiemensCMD+0x358>)
 800d4ca:	4852      	ldr	r0, [pc, #328]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d4cc:	f014 feb2 	bl	8022234 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d4d0:	485a      	ldr	r0, [pc, #360]	; (800d63c <Chech_forSiemensCMD+0x35c>)
 800d4d2:	f014 ff4b 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4d6:	4b51      	ldr	r3, [pc, #324]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d4dc:	4b4f      	ldr	r3, [pc, #316]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f043 0310 	orr.w	r3, r3, #16
 800d4e4:	4a4d      	ldr	r2, [pc, #308]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d4e6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4ee:	e076      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d4f0:	4953      	ldr	r1, [pc, #332]	; (800d640 <Chech_forSiemensCMD+0x360>)
 800d4f2:	4848      	ldr	r0, [pc, #288]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d4f4:	f014 fe9e 	bl	8022234 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d4f8:	4852      	ldr	r0, [pc, #328]	; (800d644 <Chech_forSiemensCMD+0x364>)
 800d4fa:	f014 ff37 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4fe:	4b47      	ldr	r3, [pc, #284]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d504:	4b45      	ldr	r3, [pc, #276]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f043 0320 	orr.w	r3, r3, #32
 800d50c:	4a43      	ldr	r2, [pc, #268]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d50e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d510:	2301      	movs	r3, #1
 800d512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d516:	e062      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d518:	494b      	ldr	r1, [pc, #300]	; (800d648 <Chech_forSiemensCMD+0x368>)
 800d51a:	484c      	ldr	r0, [pc, #304]	; (800d64c <Chech_forSiemensCMD+0x36c>)
 800d51c:	f014 fe8a 	bl	8022234 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d520:	484b      	ldr	r0, [pc, #300]	; (800d650 <Chech_forSiemensCMD+0x370>)
 800d522:	f014 ff23 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d526:	4b3d      	ldr	r3, [pc, #244]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d52c:	4b3b      	ldr	r3, [pc, #236]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d534:	4a39      	ldr	r2, [pc, #228]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d536:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d538:	2301      	movs	r3, #1
 800d53a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d53e:	e04e      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d540:	4944      	ldr	r1, [pc, #272]	; (800d654 <Chech_forSiemensCMD+0x374>)
 800d542:	4834      	ldr	r0, [pc, #208]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d544:	f014 fe76 	bl	8022234 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d548:	4843      	ldr	r0, [pc, #268]	; (800d658 <Chech_forSiemensCMD+0x378>)
 800d54a:	f014 ff0f 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d54e:	4b33      	ldr	r3, [pc, #204]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d550:	2200      	movs	r2, #0
 800d552:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d554:	4b31      	ldr	r3, [pc, #196]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d55c:	4a2f      	ldr	r2, [pc, #188]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d55e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d560:	2301      	movs	r3, #1
 800d562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d566:	e03a      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d568:	493c      	ldr	r1, [pc, #240]	; (800d65c <Chech_forSiemensCMD+0x37c>)
 800d56a:	482a      	ldr	r0, [pc, #168]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d56c:	f014 fe62 	bl	8022234 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d570:	483b      	ldr	r0, [pc, #236]	; (800d660 <Chech_forSiemensCMD+0x380>)
 800d572:	f014 fefb 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d576:	4b29      	ldr	r3, [pc, #164]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d578:	2200      	movs	r2, #0
 800d57a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d57c:	4b27      	ldr	r3, [pc, #156]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d584:	4a25      	ldr	r2, [pc, #148]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d586:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d588:	2301      	movs	r3, #1
 800d58a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d58e:	e026      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d590:	4934      	ldr	r1, [pc, #208]	; (800d664 <Chech_forSiemensCMD+0x384>)
 800d592:	4820      	ldr	r0, [pc, #128]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d594:	f014 fe4e 	bl	8022234 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d598:	4833      	ldr	r0, [pc, #204]	; (800d668 <Chech_forSiemensCMD+0x388>)
 800d59a:	f014 fee7 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d59e:	4b1f      	ldr	r3, [pc, #124]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d5a4:	4b1d      	ldr	r3, [pc, #116]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d5ac:	4a1b      	ldr	r2, [pc, #108]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d5ae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d5b6:	e012      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d5b8:	492c      	ldr	r1, [pc, #176]	; (800d66c <Chech_forSiemensCMD+0x38c>)
 800d5ba:	4816      	ldr	r0, [pc, #88]	; (800d614 <Chech_forSiemensCMD+0x334>)
 800d5bc:	f014 fe3a 	bl	8022234 <iprintf>
				printf("CLEAR ALL\n");
 800d5c0:	482b      	ldr	r0, [pc, #172]	; (800d670 <Chech_forSiemensCMD+0x390>)
 800d5c2:	f014 fed3 	bl	802236c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d5c6:	4b15      	ldr	r3, [pc, #84]	; (800d61c <Chech_forSiemensCMD+0x33c>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d5d2:	e004      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d5d4:	480d      	ldr	r0, [pc, #52]	; (800d60c <Chech_forSiemensCMD+0x32c>)
 800d5d6:	f014 fec9 	bl	802236c <puts>
 800d5da:	e000      	b.n	800d5de <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d5dc:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d5de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d147      	bne.n	800d676 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d5e6:	f240 2005 	movw	r0, #517	; 0x205
 800d5ea:	f002 fa47 	bl	800fa7c <TransmitCanPkt>
 800d5ee:	e042      	b.n	800d676 <Chech_forSiemensCMD+0x396>
 800d5f0:	2000a07c 	.word	0x2000a07c
 800d5f4:	08026084 	.word	0x08026084
 800d5f8:	20000644 	.word	0x20000644
 800d5fc:	0802609c 	.word	0x0802609c
 800d600:	20004872 	.word	0x20004872
 800d604:	080260dc 	.word	0x080260dc
 800d608:	20000645 	.word	0x20000645
 800d60c:	080260f0 	.word	0x080260f0
 800d610:	200048a4 	.word	0x200048a4
 800d614:	0802610c 	.word	0x0802610c
 800d618:	0802611c 	.word	0x0802611c
 800d61c:	20003500 	.word	0x20003500
 800d620:	200048d6 	.word	0x200048d6
 800d624:	08026134 	.word	0x08026134
 800d628:	20004908 	.word	0x20004908
 800d62c:	0802614c 	.word	0x0802614c
 800d630:	2000493a 	.word	0x2000493a
 800d634:	08026160 	.word	0x08026160
 800d638:	2000496c 	.word	0x2000496c
 800d63c:	08026174 	.word	0x08026174
 800d640:	2000499e 	.word	0x2000499e
 800d644:	08026188 	.word	0x08026188
 800d648:	200049d0 	.word	0x200049d0
 800d64c:	080261a4 	.word	0x080261a4
 800d650:	080261bc 	.word	0x080261bc
 800d654:	20004a02 	.word	0x20004a02
 800d658:	080261d0 	.word	0x080261d0
 800d65c:	20004a34 	.word	0x20004a34
 800d660:	080261e8 	.word	0x080261e8
 800d664:	20004a66 	.word	0x20004a66
 800d668:	08026208 	.word	0x08026208
 800d66c:	20004a98 	.word	0x20004a98
 800d670:	08026228 	.word	0x08026228
		return;
 800d674:	bf00      	nop
		}
	}
}
 800d676:	3768      	adds	r7, #104	; 0x68
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d67c:	b4b0      	push	{r4, r5, r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	4aa6      	ldr	r2, [pc, #664]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d68a:	2132      	movs	r1, #50	; 0x32
 800d68c:	fb01 f303 	mul.w	r3, r1, r3
 800d690:	4413      	add	r3, r2
 800d692:	2224      	movs	r2, #36	; 0x24
 800d694:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	4aa2      	ldr	r2, [pc, #648]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d69a:	2132      	movs	r1, #50	; 0x32
 800d69c:	fb01 f303 	mul.w	r3, r1, r3
 800d6a0:	4413      	add	r3, r2
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d6a8:	79fb      	ldrb	r3, [r7, #7]
 800d6aa:	4a9e      	ldr	r2, [pc, #632]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d6ac:	2132      	movs	r1, #50	; 0x32
 800d6ae:	fb01 f303 	mul.w	r3, r1, r3
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3302      	adds	r3, #2
 800d6b6:	2230      	movs	r2, #48	; 0x30
 800d6b8:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	4a99      	ldr	r2, [pc, #612]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d6be:	2132      	movs	r1, #50	; 0x32
 800d6c0:	fb01 f303 	mul.w	r3, r1, r3
 800d6c4:	4413      	add	r3, r2
 800d6c6:	3303      	adds	r3, #3
 800d6c8:	2240      	movs	r2, #64	; 0x40
 800d6ca:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d6cc:	79fb      	ldrb	r3, [r7, #7]
 800d6ce:	4a95      	ldr	r2, [pc, #596]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d6d0:	2132      	movs	r1, #50	; 0x32
 800d6d2:	fb01 f303 	mul.w	r3, r1, r3
 800d6d6:	4413      	add	r3, r2
 800d6d8:	3304      	adds	r3, #4
 800d6da:	22c0      	movs	r2, #192	; 0xc0
 800d6dc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	4a90      	ldr	r2, [pc, #576]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d6e2:	2132      	movs	r1, #50	; 0x32
 800d6e4:	fb01 f303 	mul.w	r3, r1, r3
 800d6e8:	4413      	add	r3, r2
 800d6ea:	3305      	adds	r3, #5
 800d6ec:	224e      	movs	r2, #78	; 0x4e
 800d6ee:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	4a8c      	ldr	r2, [pc, #560]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d6f4:	2132      	movs	r1, #50	; 0x32
 800d6f6:	fb01 f303 	mul.w	r3, r1, r3
 800d6fa:	4413      	add	r3, r2
 800d6fc:	3306      	adds	r3, #6
 800d6fe:	2226      	movs	r2, #38	; 0x26
 800d700:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	3301      	adds	r3, #1
 800d706:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	71fa      	strb	r2, [r7, #7]
 800d70e:	461a      	mov	r2, r3
 800d710:	2332      	movs	r3, #50	; 0x32
 800d712:	fb02 f303 	mul.w	r3, r2, r3
 800d716:	4a83      	ldr	r2, [pc, #524]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d718:	4413      	add	r3, r2
 800d71a:	4983      	ldr	r1, [pc, #524]	; (800d928 <Update_SiemensCommands+0x2ac>)
 800d71c:	461a      	mov	r2, r3
 800d71e:	460b      	mov	r3, r1
 800d720:	cb03      	ldmia	r3!, {r0, r1}
 800d722:	6010      	str	r0, [r2, #0]
 800d724:	6051      	str	r1, [r2, #4]
 800d726:	8819      	ldrh	r1, [r3, #0]
 800d728:	789b      	ldrb	r3, [r3, #2]
 800d72a:	8111      	strh	r1, [r2, #8]
 800d72c:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	71fa      	strb	r2, [r7, #7]
 800d734:	461a      	mov	r2, r3
 800d736:	2332      	movs	r3, #50	; 0x32
 800d738:	fb02 f303 	mul.w	r3, r2, r3
 800d73c:	4a79      	ldr	r2, [pc, #484]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d73e:	4413      	add	r3, r2
 800d740:	4a7a      	ldr	r2, [pc, #488]	; (800d92c <Update_SiemensCommands+0x2b0>)
 800d742:	461d      	mov	r5, r3
 800d744:	4614      	mov	r4, r2
 800d746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d748:	6028      	str	r0, [r5, #0]
 800d74a:	6069      	str	r1, [r5, #4]
 800d74c:	60aa      	str	r2, [r5, #8]
 800d74e:	60eb      	str	r3, [r5, #12]
 800d750:	6820      	ldr	r0, [r4, #0]
 800d752:	6128      	str	r0, [r5, #16]
 800d754:	7923      	ldrb	r3, [r4, #4]
 800d756:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d758:	79fb      	ldrb	r3, [r7, #7]
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	71fa      	strb	r2, [r7, #7]
 800d75e:	461a      	mov	r2, r3
 800d760:	2332      	movs	r3, #50	; 0x32
 800d762:	fb02 f303 	mul.w	r3, r2, r3
 800d766:	4a6f      	ldr	r2, [pc, #444]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d768:	4413      	add	r3, r2
 800d76a:	4a71      	ldr	r2, [pc, #452]	; (800d930 <Update_SiemensCommands+0x2b4>)
 800d76c:	461d      	mov	r5, r3
 800d76e:	4614      	mov	r4, r2
 800d770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d772:	6028      	str	r0, [r5, #0]
 800d774:	6069      	str	r1, [r5, #4]
 800d776:	60aa      	str	r2, [r5, #8]
 800d778:	60eb      	str	r3, [r5, #12]
 800d77a:	6820      	ldr	r0, [r4, #0]
 800d77c:	6128      	str	r0, [r5, #16]
 800d77e:	7923      	ldrb	r3, [r4, #4]
 800d780:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	1c5a      	adds	r2, r3, #1
 800d786:	71fa      	strb	r2, [r7, #7]
 800d788:	461a      	mov	r2, r3
 800d78a:	2332      	movs	r3, #50	; 0x32
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
 800d790:	4a64      	ldr	r2, [pc, #400]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d792:	4413      	add	r3, r2
 800d794:	4a67      	ldr	r2, [pc, #412]	; (800d934 <Update_SiemensCommands+0x2b8>)
 800d796:	461d      	mov	r5, r3
 800d798:	4614      	mov	r4, r2
 800d79a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d79c:	6028      	str	r0, [r5, #0]
 800d79e:	6069      	str	r1, [r5, #4]
 800d7a0:	60aa      	str	r2, [r5, #8]
 800d7a2:	60eb      	str	r3, [r5, #12]
 800d7a4:	7823      	ldrb	r3, [r4, #0]
 800d7a6:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d7a8:	79fb      	ldrb	r3, [r7, #7]
 800d7aa:	1c5a      	adds	r2, r3, #1
 800d7ac:	71fa      	strb	r2, [r7, #7]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	2332      	movs	r3, #50	; 0x32
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	4a5b      	ldr	r2, [pc, #364]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d7b8:	4413      	add	r3, r2
 800d7ba:	4a5f      	ldr	r2, [pc, #380]	; (800d938 <Update_SiemensCommands+0x2bc>)
 800d7bc:	461d      	mov	r5, r3
 800d7be:	4614      	mov	r4, r2
 800d7c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7c2:	6028      	str	r0, [r5, #0]
 800d7c4:	6069      	str	r1, [r5, #4]
 800d7c6:	60aa      	str	r2, [r5, #8]
 800d7c8:	60eb      	str	r3, [r5, #12]
 800d7ca:	7823      	ldrb	r3, [r4, #0]
 800d7cc:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	71fa      	strb	r2, [r7, #7]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	2332      	movs	r3, #50	; 0x32
 800d7d8:	fb02 f303 	mul.w	r3, r2, r3
 800d7dc:	4a51      	ldr	r2, [pc, #324]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d7de:	4413      	add	r3, r2
 800d7e0:	4a56      	ldr	r2, [pc, #344]	; (800d93c <Update_SiemensCommands+0x2c0>)
 800d7e2:	461d      	mov	r5, r3
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7e8:	6028      	str	r0, [r5, #0]
 800d7ea:	6069      	str	r1, [r5, #4]
 800d7ec:	60aa      	str	r2, [r5, #8]
 800d7ee:	60eb      	str	r3, [r5, #12]
 800d7f0:	7823      	ldrb	r3, [r4, #0]
 800d7f2:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	71fa      	strb	r2, [r7, #7]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	2332      	movs	r3, #50	; 0x32
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	4a48      	ldr	r2, [pc, #288]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d804:	4413      	add	r3, r2
 800d806:	4a4e      	ldr	r2, [pc, #312]	; (800d940 <Update_SiemensCommands+0x2c4>)
 800d808:	461d      	mov	r5, r3
 800d80a:	4614      	mov	r4, r2
 800d80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d80e:	6028      	str	r0, [r5, #0]
 800d810:	6069      	str	r1, [r5, #4]
 800d812:	60aa      	str	r2, [r5, #8]
 800d814:	60eb      	str	r3, [r5, #12]
 800d816:	cc03      	ldmia	r4!, {r0, r1}
 800d818:	6128      	str	r0, [r5, #16]
 800d81a:	6169      	str	r1, [r5, #20]
 800d81c:	8823      	ldrh	r3, [r4, #0]
 800d81e:	78a2      	ldrb	r2, [r4, #2]
 800d820:	832b      	strh	r3, [r5, #24]
 800d822:	4613      	mov	r3, r2
 800d824:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	1c5a      	adds	r2, r3, #1
 800d82a:	71fa      	strb	r2, [r7, #7]
 800d82c:	461a      	mov	r2, r3
 800d82e:	2332      	movs	r3, #50	; 0x32
 800d830:	fb02 f303 	mul.w	r3, r2, r3
 800d834:	4a3b      	ldr	r2, [pc, #236]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d836:	4413      	add	r3, r2
 800d838:	4a42      	ldr	r2, [pc, #264]	; (800d944 <Update_SiemensCommands+0x2c8>)
 800d83a:	461d      	mov	r5, r3
 800d83c:	4614      	mov	r4, r2
 800d83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d840:	6028      	str	r0, [r5, #0]
 800d842:	6069      	str	r1, [r5, #4]
 800d844:	60aa      	str	r2, [r5, #8]
 800d846:	60eb      	str	r3, [r5, #12]
 800d848:	8823      	ldrh	r3, [r4, #0]
 800d84a:	78a2      	ldrb	r2, [r4, #2]
 800d84c:	822b      	strh	r3, [r5, #16]
 800d84e:	4613      	mov	r3, r2
 800d850:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	71fa      	strb	r2, [r7, #7]
 800d858:	461a      	mov	r2, r3
 800d85a:	2332      	movs	r3, #50	; 0x32
 800d85c:	fb02 f303 	mul.w	r3, r2, r3
 800d860:	4a30      	ldr	r2, [pc, #192]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d862:	4413      	add	r3, r2
 800d864:	4a38      	ldr	r2, [pc, #224]	; (800d948 <Update_SiemensCommands+0x2cc>)
 800d866:	461d      	mov	r5, r3
 800d868:	4614      	mov	r4, r2
 800d86a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d86c:	6028      	str	r0, [r5, #0]
 800d86e:	6069      	str	r1, [r5, #4]
 800d870:	60aa      	str	r2, [r5, #8]
 800d872:	60eb      	str	r3, [r5, #12]
 800d874:	cc03      	ldmia	r4!, {r0, r1}
 800d876:	6128      	str	r0, [r5, #16]
 800d878:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	71fa      	strb	r2, [r7, #7]
 800d880:	461a      	mov	r2, r3
 800d882:	2332      	movs	r3, #50	; 0x32
 800d884:	fb02 f303 	mul.w	r3, r2, r3
 800d888:	4a26      	ldr	r2, [pc, #152]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d88a:	4413      	add	r3, r2
 800d88c:	4a2f      	ldr	r2, [pc, #188]	; (800d94c <Update_SiemensCommands+0x2d0>)
 800d88e:	461c      	mov	r4, r3
 800d890:	4615      	mov	r5, r2
 800d892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d894:	6020      	str	r0, [r4, #0]
 800d896:	6061      	str	r1, [r4, #4]
 800d898:	60a2      	str	r2, [r4, #8]
 800d89a:	60e3      	str	r3, [r4, #12]
 800d89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d89e:	6120      	str	r0, [r4, #16]
 800d8a0:	6161      	str	r1, [r4, #20]
 800d8a2:	61a2      	str	r2, [r4, #24]
 800d8a4:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d8a6:	79fb      	ldrb	r3, [r7, #7]
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	71fa      	strb	r2, [r7, #7]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	2332      	movs	r3, #50	; 0x32
 800d8b0:	fb02 f303 	mul.w	r3, r2, r3
 800d8b4:	4a1b      	ldr	r2, [pc, #108]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d8b6:	4413      	add	r3, r2
 800d8b8:	4a25      	ldr	r2, [pc, #148]	; (800d950 <Update_SiemensCommands+0x2d4>)
 800d8ba:	461d      	mov	r5, r3
 800d8bc:	4614      	mov	r4, r2
 800d8be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8c0:	6028      	str	r0, [r5, #0]
 800d8c2:	6069      	str	r1, [r5, #4]
 800d8c4:	60aa      	str	r2, [r5, #8]
 800d8c6:	60eb      	str	r3, [r5, #12]
 800d8c8:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d8ca:	6128      	str	r0, [r5, #16]
 800d8cc:	6169      	str	r1, [r5, #20]
 800d8ce:	61aa      	str	r2, [r5, #24]
 800d8d0:	7823      	ldrb	r3, [r4, #0]
 800d8d2:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d8d4:	79fb      	ldrb	r3, [r7, #7]
 800d8d6:	1c5a      	adds	r2, r3, #1
 800d8d8:	71fa      	strb	r2, [r7, #7]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	2332      	movs	r3, #50	; 0x32
 800d8de:	fb02 f303 	mul.w	r3, r2, r3
 800d8e2:	4a10      	ldr	r2, [pc, #64]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d8e4:	4413      	add	r3, r2
 800d8e6:	491b      	ldr	r1, [pc, #108]	; (800d954 <Update_SiemensCommands+0x2d8>)
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	cb03      	ldmia	r3!, {r0, r1}
 800d8ee:	6010      	str	r0, [r2, #0]
 800d8f0:	6051      	str	r1, [r2, #4]
 800d8f2:	881b      	ldrh	r3, [r3, #0]
 800d8f4:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d8f6:	79fb      	ldrb	r3, [r7, #7]
 800d8f8:	1c5a      	adds	r2, r3, #1
 800d8fa:	71fa      	strb	r2, [r7, #7]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	2332      	movs	r3, #50	; 0x32
 800d900:	fb02 f303 	mul.w	r3, r2, r3
 800d904:	4a07      	ldr	r2, [pc, #28]	; (800d924 <Update_SiemensCommands+0x2a8>)
 800d906:	4413      	add	r3, r2
 800d908:	4a13      	ldr	r2, [pc, #76]	; (800d958 <Update_SiemensCommands+0x2dc>)
 800d90a:	6810      	ldr	r0, [r2, #0]
 800d90c:	6018      	str	r0, [r3, #0]
 800d90e:	7912      	ldrb	r2, [r2, #4]
 800d910:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d912:	4a12      	ldr	r2, [pc, #72]	; (800d95c <Update_SiemensCommands+0x2e0>)
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	7013      	strb	r3, [r2, #0]
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bcb0      	pop	{r4, r5, r7}
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	20004840 	.word	0x20004840
 800d928:	08026234 	.word	0x08026234
 800d92c:	0802611c 	.word	0x0802611c
 800d930:	08026134 	.word	0x08026134
 800d934:	0802614c 	.word	0x0802614c
 800d938:	08026160 	.word	0x08026160
 800d93c:	08026174 	.word	0x08026174
 800d940:	08026240 	.word	0x08026240
 800d944:	080261bc 	.word	0x080261bc
 800d948:	080261d0 	.word	0x080261d0
 800d94c:	080261e8 	.word	0x080261e8
 800d950:	08026208 	.word	0x08026208
 800d954:	0802625c 	.word	0x0802625c
 800d958:	08026268 	.word	0x08026268
 800d95c:	20004c28 	.word	0x20004c28

0800d960 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d960:	b590      	push	{r4, r7, lr}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d96c:	2300      	movs	r3, #0
 800d96e:	73fb      	strb	r3, [r7, #15]
 800d970:	e01c      	b.n	800d9ac <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	2232      	movs	r2, #50	; 0x32
 800d976:	fb02 f303 	mul.w	r3, r2, r3
 800d97a:	4a11      	ldr	r2, [pc, #68]	; (800d9c0 <Is_SiemensCommand_Valid+0x60>)
 800d97c:	189c      	adds	r4, r3, r2
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2232      	movs	r2, #50	; 0x32
 800d982:	fb02 f303 	mul.w	r3, r2, r3
 800d986:	4a0e      	ldr	r2, [pc, #56]	; (800d9c0 <Is_SiemensCommand_Valid+0x60>)
 800d988:	4413      	add	r3, r2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7f2 fc62 	bl	8000254 <strlen>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	4621      	mov	r1, r4
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f014 fb2c 	bl	8021ff4 <memcmp>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
 800d9a4:	e008      	b.n	800d9b8 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	73fb      	strb	r3, [r7, #15]
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <Is_SiemensCommand_Valid+0x64>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	7bfa      	ldrb	r2, [r7, #15]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d3dd      	bcc.n	800d972 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d9b6:	23ff      	movs	r3, #255	; 0xff
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd90      	pop	{r4, r7, pc}
 800d9c0:	20004840 	.word	0x20004840
 800d9c4:	20004c28 	.word	0x20004c28

0800d9c8 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d9d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9d8:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	82bb      	strh	r3, [r7, #20]
 800d9e6:	e022      	b.n	800da2e <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d9e8:	8abb      	ldrh	r3, [r7, #20]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	8afb      	ldrh	r3, [r7, #22]
 800d9f4:	4053      	eors	r3, r2
 800d9f6:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	e011      	b.n	800da22 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d9fe:	8afb      	ldrh	r3, [r7, #22]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	d006      	beq.n	800da16 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800da08:	8afb      	ldrh	r3, [r7, #22]
 800da0a:	085b      	lsrs	r3, r3, #1
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	4b17      	ldr	r3, [pc, #92]	; (800da6c <Siemens_CRC+0xa4>)
 800da10:	4053      	eors	r3, r2
 800da12:	82fb      	strh	r3, [r7, #22]
 800da14:	e002      	b.n	800da1c <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800da16:	8afb      	ldrh	r3, [r7, #22]
 800da18:	085b      	lsrs	r3, r3, #1
 800da1a:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	3301      	adds	r3, #1
 800da20:	613b      	str	r3, [r7, #16]
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	2b07      	cmp	r3, #7
 800da26:	ddea      	ble.n	800d9fe <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800da28:	8abb      	ldrh	r3, [r7, #20]
 800da2a:	3301      	adds	r3, #1
 800da2c:	82bb      	strh	r3, [r7, #20]
 800da2e:	8aba      	ldrh	r2, [r7, #20]
 800da30:	887b      	ldrh	r3, [r7, #2]
 800da32:	429a      	cmp	r2, r3
 800da34:	d3d8      	bcc.n	800d9e8 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800da36:	8afb      	ldrh	r3, [r7, #22]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800da3c:	8afb      	ldrh	r3, [r7, #22]
 800da3e:	0a1b      	lsrs	r3, r3, #8
 800da40:	b29b      	uxth	r3, r3
 800da42:	b2db      	uxtb	r3, r3
 800da44:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800da46:	7b3b      	ldrb	r3, [r7, #12]
 800da48:	021b      	lsls	r3, r3, #8
 800da4a:	b21a      	sxth	r2, r3
 800da4c:	7b7b      	ldrb	r3, [r7, #13]
 800da4e:	b21b      	sxth	r3, r3
 800da50:	4313      	orrs	r3, r2
 800da52:	b21b      	sxth	r3, r3
 800da54:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800da56:	8afb      	ldrh	r3, [r7, #22]
 800da58:	43db      	mvns	r3, r3
 800da5a:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800da5c:	8afb      	ldrh	r3, [r7, #22]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	ffff8408 	.word	0xffff8408

0800da70 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	603a      	str	r2, [r7, #0]
 800da78:	461a      	mov	r2, r3
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]
 800da7e:	460b      	mov	r3, r1
 800da80:	71bb      	strb	r3, [r7, #6]
 800da82:	4613      	mov	r3, r2
 800da84:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800da86:	2300      	movs	r3, #0
 800da88:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800da8e:	797b      	ldrb	r3, [r7, #5]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d010      	beq.n	800dab6 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800da94:	79bb      	ldrb	r3, [r7, #6]
 800da96:	08db      	lsrs	r3, r3, #3
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	797a      	ldrb	r2, [r7, #5]
 800da9c:	4619      	mov	r1, r3
 800da9e:	6838      	ldr	r0, [r7, #0]
 800daa0:	f000 f8d0 	bl	800dc44 <Verify_parity>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d110      	bne.n	800dacc <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800daaa:	4840      	ldr	r0, [pc, #256]	; (800dbac <Extract_Parity_Data+0x13c>)
 800daac:	f014 fc5e 	bl	802236c <puts>
			return -1;
 800dab0:	f04f 33ff 	mov.w	r3, #4294967295
 800dab4:	e075      	b.n	800dba2 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	79ba      	ldrb	r2, [r7, #6]
 800dabc:	b291      	uxth	r1, r2
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f2 fda7 	bl	8000614 <ExtractBits>
 800dac6:	6138      	str	r0, [r7, #16]
		return Return_value;
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	e06a      	b.n	800dba2 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800dacc:	79bb      	ldrb	r3, [r7, #6]
 800dace:	2b08      	cmp	r3, #8
 800dad0:	d108      	bne.n	800dae4 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
 800dada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dade:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	e05e      	b.n	800dba2 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800dae4:	79bb      	ldrb	r3, [r7, #6]
 800dae6:	2b18      	cmp	r3, #24
 800dae8:	d15a      	bne.n	800dba0 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800daf8:	7dfb      	ldrb	r3, [r7, #23]
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800db04:	7dfb      	ldrb	r3, [r7, #23]
 800db06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db0a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	089b      	lsrs	r3, r3, #2
 800db10:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800db12:	7dfb      	ldrb	r3, [r7, #23]
 800db14:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	785b      	ldrb	r3, [r3, #1]
 800db1a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800db1c:	7dfb      	ldrb	r3, [r7, #23]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800db24:	7dfb      	ldrb	r3, [r7, #23]
 800db26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	085b      	lsrs	r3, r3, #1
 800db30:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800db32:	7bbb      	ldrb	r3, [r7, #14]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d104      	bne.n	800db42 <Extract_Parity_Data+0xd2>
 800db38:	7dfb      	ldrb	r3, [r7, #23]
 800db3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db3e:	75fb      	strb	r3, [r7, #23]
 800db40:	e003      	b.n	800db4a <Extract_Parity_Data+0xda>
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db48:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d104      	bne.n	800db5a <Extract_Parity_Data+0xea>
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db56:	75fb      	strb	r3, [r7, #23]
 800db58:	e003      	b.n	800db62 <Extract_Parity_Data+0xf2>
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
 800db5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db60:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	021b      	lsls	r3, r3, #8
 800db66:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800db68:	7dfb      	ldrb	r3, [r7, #23]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	4413      	add	r3, r2
 800db6e:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	789b      	ldrb	r3, [r3, #2]
 800db74:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800db76:	7b7b      	ldrb	r3, [r7, #13]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <Extract_Parity_Data+0x116>
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db82:	75fb      	strb	r3, [r7, #23]
 800db84:	e003      	b.n	800db8e <Extract_Parity_Data+0x11e>
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db8c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	021b      	lsls	r3, r3, #8
 800db92:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	4413      	add	r3, r2
 800db9a:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	e000      	b.n	800dba2 <Extract_Parity_Data+0x132>
	}
	return 0;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	08026270 	.word	0x08026270

0800dbb0 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	460a      	mov	r2, r1
 800dbba:	71fb      	strb	r3, [r7, #7]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800dbc8:	2306      	movs	r3, #6
 800dbca:	73fb      	strb	r3, [r7, #15]
 800dbcc:	e014      	b.n	800dbf8 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800dbce:	79fa      	ldrb	r2, [r7, #7]
 800dbd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbd4:	fa42 f303 	asr.w	r3, r2, r3
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d005      	beq.n	800dbec <Calculate_Parity+0x3c>
		{
			count++;
 800dbe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800dbec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	73fb      	strb	r3, [r7, #15]
 800dbf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dae6      	bge.n	800dbce <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800dc00:	79bb      	ldrb	r3, [r7, #6]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d109      	bne.n	800dc1a <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <Calculate_Parity+0x66>
		{
			return 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e00f      	b.n	800dc36 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e00d      	b.n	800dc36 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800dc1a:	79bb      	ldrb	r3, [r7, #6]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d109      	bne.n	800dc34 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <Calculate_Parity+0x80>
		{
			return 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e002      	b.n	800dc36 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	e000      	b.n	800dc36 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
	...

0800dc44 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70fb      	strb	r3, [r7, #3]
 800dc50:	4613      	mov	r3, r2
 800dc52:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	73fb      	strb	r3, [r7, #15]
 800dc5c:	e03b      	b.n	800dcd6 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800dc5e:	7bfb      	ldrb	r3, [r7, #15]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	4413      	add	r3, r2
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	78ba      	ldrb	r2, [r7, #2]
 800dc68:	4611      	mov	r1, r2
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ffa0 	bl	800dbb0 <Calculate_Parity>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4619      	mov	r1, r3
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	4413      	add	r3, r2
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	09db      	lsrs	r3, r3, #7
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d023      	beq.n	800dcd0 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	4619      	mov	r1, r3
 800dc92:	4815      	ldr	r0, [pc, #84]	; (800dce8 <Verify_parity+0xa4>)
 800dc94:	f014 face 	bl	8022234 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	78ba      	ldrb	r2, [r7, #2]
 800dca2:	4611      	mov	r1, r2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff ff83 	bl	800dbb0 <Calculate_Parity>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	4619      	mov	r1, r3
 800dcae:	480f      	ldr	r0, [pc, #60]	; (800dcec <Verify_parity+0xa8>)
 800dcb0:	f014 fac0 	bl	8022234 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	4413      	add	r3, r2
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	09db      	lsrs	r3, r3, #7
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	480a      	ldr	r0, [pc, #40]	; (800dcf0 <Verify_parity+0xac>)
 800dcc8:	f014 fab4 	bl	8022234 <iprintf>
			return 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e007      	b.n	800dce0 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	73fb      	strb	r3, [r7, #15]
 800dcd6:	7bfa      	ldrb	r2, [r7, #15]
 800dcd8:	78fb      	ldrb	r3, [r7, #3]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d3bf      	bcc.n	800dc5e <Verify_parity+0x1a>
		}
	}
	return 1;
 800dcde:	2301      	movs	r3, #1
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	0802628c 	.word	0x0802628c
 800dcec:	080262a4 	.word	0x080262a4
 800dcf0:	080262b8 	.word	0x080262b8

0800dcf4 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	b089      	sub	sp, #36	; 0x24
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	60ba      	str	r2, [r7, #8]
 800dd00:	73fb      	strb	r3, [r7, #15]
 800dd02:	460b      	mov	r3, r1
 800dd04:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	83fb      	strh	r3, [r7, #30]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	83bb      	strh	r3, [r7, #28]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	833b      	strh	r3, [r7, #24]
 800dd12:	2300      	movs	r3, #0
 800dd14:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800dd1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d108      	bne.n	800dd34 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	b298      	uxth	r0, r3
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	b299      	uxth	r1, r3
 800dd2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	f7f2 fcfd 	bl	800072c <InsertBits>
		return;
 800dd32:	e13b      	b.n	800dfac <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	2b08      	cmp	r3, #8
 800dd38:	d12c      	bne.n	800dd94 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800dd3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd3e:	2a80      	cmp	r2, #128	; 0x80
 800dd40:	f173 0300 	sbcs.w	r3, r3, #0
 800dd44:	d303      	bcc.n	800dd4e <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800dd46:	489b      	ldr	r0, [pc, #620]	; (800dfb4 <Insert_cal_parity+0x2c0>)
 800dd48:	f014 fb10 	bl	802236c <puts>
			return;
 800dd4c:	e12e      	b.n	800dfac <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800dd4e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dd52:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff ff29 	bl	800dbb0 <Calculate_Parity>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d10b      	bne.n	800dd7c <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800dd64:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	e117      	b.n	800dfac <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800dd7c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	701a      	strb	r2, [r3, #0]
 800dd92:	e10b      	b.n	800dfac <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	2b18      	cmp	r3, #24
 800dd98:	f040 8104 	bne.w	800dfa4 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800dd9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dda0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800dda4:	f173 0300 	sbcs.w	r3, r3, #0
 800dda8:	d303      	bcc.n	800ddb2 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800ddaa:	4883      	ldr	r0, [pc, #524]	; (800dfb8 <Insert_cal_parity+0x2c4>)
 800ddac:	f014 fade 	bl	802236c <puts>
			return;
 800ddb0:	e0fc      	b.n	800dfac <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	76bb      	strb	r3, [r7, #26]
 800ddba:	e0ee      	b.n	800df9a <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800ddbc:	7ebb      	ldrb	r3, [r7, #26]
 800ddbe:	00d9      	lsls	r1, r3, #3
 800ddc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ddc4:	f1c1 0620 	rsb	r6, r1, #32
 800ddc8:	f1a1 0c20 	sub.w	ip, r1, #32
 800ddcc:	fa22 f001 	lsr.w	r0, r2, r1
 800ddd0:	6038      	str	r0, [r7, #0]
 800ddd2:	fa03 f606 	lsl.w	r6, r3, r6
 800ddd6:	6838      	ldr	r0, [r7, #0]
 800ddd8:	4330      	orrs	r0, r6
 800ddda:	6038      	str	r0, [r7, #0]
 800dddc:	fa23 fc0c 	lsr.w	ip, r3, ip
 800dde0:	6838      	ldr	r0, [r7, #0]
 800dde2:	ea40 000c 	orr.w	r0, r0, ip
 800dde6:	6038      	str	r0, [r7, #0]
 800dde8:	40cb      	lsrs	r3, r1
 800ddea:	607b      	str	r3, [r7, #4]
 800ddec:	783b      	ldrb	r3, [r7, #0]
 800ddee:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800ddf0:	7ebb      	ldrb	r3, [r7, #26]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d07a      	beq.n	800deec <Insert_cal_parity+0x1f8>
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	f300 8094 	bgt.w	800df24 <Insert_cal_parity+0x230>
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <Insert_cal_parity+0x112>
 800de00:	2b01      	cmp	r3, #1
 800de02:	d01f      	beq.n	800de44 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800de04:	e08e      	b.n	800df24 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800de06:	7ebb      	ldrb	r3, [r7, #26]
 800de08:	00d9      	lsls	r1, r3, #3
 800de0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de0e:	f1c1 0620 	rsb	r6, r1, #32
 800de12:	f1a1 0020 	sub.w	r0, r1, #32
 800de16:	fa22 f401 	lsr.w	r4, r2, r1
 800de1a:	fa03 f606 	lsl.w	r6, r3, r6
 800de1e:	4334      	orrs	r4, r6
 800de20:	fa23 f000 	lsr.w	r0, r3, r0
 800de24:	4304      	orrs	r4, r0
 800de26:	fa23 f501 	lsr.w	r5, r3, r1
 800de2a:	f04f 0200 	mov.w	r2, #0
 800de2e:	f04f 0300 	mov.w	r3, #0
 800de32:	09e2      	lsrs	r2, r4, #7
 800de34:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800de38:	09eb      	lsrs	r3, r5, #7
 800de3a:	b293      	uxth	r3, r2
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	83fb      	strh	r3, [r7, #30]
					break;
 800de42:	e070      	b.n	800df26 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800de44:	7efb      	ldrb	r3, [r7, #27]
 800de46:	005b      	lsls	r3, r3, #1
 800de48:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800de4a:	8bfb      	ldrh	r3, [r7, #30]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d104      	bne.n	800de5a <Insert_cal_parity+0x166>
 800de50:	7efb      	ldrb	r3, [r7, #27]
 800de52:	f023 0301 	bic.w	r3, r3, #1
 800de56:	76fb      	strb	r3, [r7, #27]
 800de58:	e003      	b.n	800de62 <Insert_cal_parity+0x16e>
 800de5a:	7efb      	ldrb	r3, [r7, #27]
 800de5c:	f043 0301 	orr.w	r3, r3, #1
 800de60:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800de62:	7ebb      	ldrb	r3, [r7, #26]
 800de64:	00d9      	lsls	r1, r3, #3
 800de66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de6a:	f1c1 0620 	rsb	r6, r1, #32
 800de6e:	f1a1 0020 	sub.w	r0, r1, #32
 800de72:	fa22 f801 	lsr.w	r8, r2, r1
 800de76:	fa03 f606 	lsl.w	r6, r3, r6
 800de7a:	ea48 0806 	orr.w	r8, r8, r6
 800de7e:	fa23 f000 	lsr.w	r0, r3, r0
 800de82:	ea48 0800 	orr.w	r8, r8, r0
 800de86:	fa23 f901 	lsr.w	r9, r3, r1
 800de8a:	f04f 0200 	mov.w	r2, #0
 800de8e:	f04f 0300 	mov.w	r3, #0
 800de92:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800de96:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800de9a:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800de9e:	b293      	uxth	r3, r2
 800dea0:	f003 0301 	and.w	r3, r3, #1
 800dea4:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800dea6:	7ebb      	ldrb	r3, [r7, #26]
 800dea8:	00d9      	lsls	r1, r3, #3
 800deaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800deae:	f1c1 0620 	rsb	r6, r1, #32
 800deb2:	f1a1 0020 	sub.w	r0, r1, #32
 800deb6:	fa22 fa01 	lsr.w	sl, r2, r1
 800deba:	fa03 f606 	lsl.w	r6, r3, r6
 800debe:	ea4a 0a06 	orr.w	sl, sl, r6
 800dec2:	fa23 f000 	lsr.w	r0, r3, r0
 800dec6:	ea4a 0a00 	orr.w	sl, sl, r0
 800deca:	fa23 fb01 	lsr.w	fp, r3, r1
 800dece:	f04f 0200 	mov.w	r2, #0
 800ded2:	f04f 0300 	mov.w	r3, #0
 800ded6:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800deda:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800dede:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800dee2:	b293      	uxth	r3, r2
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	83bb      	strh	r3, [r7, #28]
					break;
 800deea:	e01c      	b.n	800df26 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800deec:	7efb      	ldrb	r3, [r7, #27]
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800def2:	8bbb      	ldrh	r3, [r7, #28]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d104      	bne.n	800df02 <Insert_cal_parity+0x20e>
 800def8:	7efb      	ldrb	r3, [r7, #27]
 800defa:	f023 0301 	bic.w	r3, r3, #1
 800defe:	76fb      	strb	r3, [r7, #27]
 800df00:	e003      	b.n	800df0a <Insert_cal_parity+0x216>
 800df02:	7efb      	ldrb	r3, [r7, #27]
 800df04:	f043 0301 	orr.w	r3, r3, #1
 800df08:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800df0a:	8bfb      	ldrh	r3, [r7, #30]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <Insert_cal_parity+0x226>
 800df10:	7efb      	ldrb	r3, [r7, #27]
 800df12:	f023 0302 	bic.w	r3, r3, #2
 800df16:	76fb      	strb	r3, [r7, #27]
					break;
 800df18:	e005      	b.n	800df26 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800df1a:	7efb      	ldrb	r3, [r7, #27]
 800df1c:	f043 0302 	orr.w	r3, r3, #2
 800df20:	76fb      	strb	r3, [r7, #27]
					break;
 800df22:	e000      	b.n	800df26 <Insert_cal_parity+0x232>
					break;
 800df24:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800df26:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df2a:	7efb      	ldrb	r3, [r7, #27]
 800df2c:	4611      	mov	r1, r2
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff fe3e 	bl	800dbb0 <Calculate_Parity>
 800df34:	4603      	mov	r3, r0
 800df36:	2b01      	cmp	r3, #1
 800df38:	d116      	bne.n	800df68 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800df3a:	7ebb      	ldrb	r3, [r7, #26]
 800df3c:	f1c3 0302 	rsb	r3, r3, #2
 800df40:	68ba      	ldr	r2, [r7, #8]
 800df42:	4413      	add	r3, r2
 800df44:	7efa      	ldrb	r2, [r7, #27]
 800df46:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800df48:	7ebb      	ldrb	r3, [r7, #26]
 800df4a:	f1c3 0302 	rsb	r3, r3, #2
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	4413      	add	r3, r2
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	7ebb      	ldrb	r3, [r7, #26]
 800df56:	f1c3 0302 	rsb	r3, r3, #2
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	440b      	add	r3, r1
 800df5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800df62:	b2d2      	uxtb	r2, r2
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	e015      	b.n	800df94 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800df68:	7ebb      	ldrb	r3, [r7, #26]
 800df6a:	f1c3 0302 	rsb	r3, r3, #2
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	4413      	add	r3, r2
 800df72:	7efa      	ldrb	r2, [r7, #27]
 800df74:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800df76:	7ebb      	ldrb	r3, [r7, #26]
 800df78:	f1c3 0302 	rsb	r3, r3, #2
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	4413      	add	r3, r2
 800df80:	781a      	ldrb	r2, [r3, #0]
 800df82:	7ebb      	ldrb	r3, [r7, #26]
 800df84:	f1c3 0302 	rsb	r3, r3, #2
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	440b      	add	r3, r1
 800df8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800df90:	b2d2      	uxtb	r2, r2
 800df92:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800df94:	7ebb      	ldrb	r3, [r7, #26]
 800df96:	3301      	adds	r3, #1
 800df98:	76bb      	strb	r3, [r7, #26]
 800df9a:	7ebb      	ldrb	r3, [r7, #26]
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	f67f af0d 	bls.w	800ddbc <Insert_cal_parity+0xc8>
 800dfa2:	e003      	b.n	800dfac <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800dfa4:	4805      	ldr	r0, [pc, #20]	; (800dfbc <Insert_cal_parity+0x2c8>)
 800dfa6:	f014 f9e1 	bl	802236c <puts>
		return;
 800dfaa:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800dfac:	3724      	adds	r7, #36	; 0x24
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb4:	080262d0 	.word	0x080262d0
 800dfb8:	08026304 	.word	0x08026304
 800dfbc:	08026338 	.word	0x08026338

0800dfc0 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	807b      	strh	r3, [r7, #2]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800dfd8:	787b      	ldrb	r3, [r7, #1]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d133      	bne.n	800e046 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800dfde:	887b      	ldrh	r3, [r7, #2]
 800dfe0:	085b      	lsrs	r3, r3, #1
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3b02      	subs	r3, #2
 800dfe6:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	81fb      	strh	r3, [r7, #14]
 800dfec:	e025      	b.n	800e03a <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800dfee:	89fb      	ldrh	r3, [r7, #14]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	4413      	add	r3, r2
 800dff4:	781a      	ldrb	r2, [r3, #0]
 800dff6:	89f9      	ldrh	r1, [r7, #14]
 800dff8:	89bb      	ldrh	r3, [r7, #12]
 800dffa:	440b      	add	r3, r1
 800dffc:	3302      	adds	r3, #2
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	440b      	add	r3, r1
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	43db      	mvns	r3, r3
 800e006:	b2db      	uxtb	r3, r3
 800e008:	429a      	cmp	r2, r3
 800e00a:	d013      	beq.n	800e034 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800e00c:	89fb      	ldrh	r3, [r7, #14]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	4413      	add	r3, r2
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	4619      	mov	r1, r3
 800e016:	89fa      	ldrh	r2, [r7, #14]
 800e018:	89bb      	ldrh	r3, [r7, #12]
 800e01a:	4413      	add	r3, r2
 800e01c:	3302      	adds	r3, #2
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	4413      	add	r3, r2
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	43db      	mvns	r3, r3
 800e026:	b2db      	uxtb	r3, r3
 800e028:	461a      	mov	r2, r3
 800e02a:	481a      	ldr	r0, [pc, #104]	; (800e094 <Data_Compliment+0xd4>)
 800e02c:	f014 f902 	bl	8022234 <iprintf>
				return 0;
 800e030:	2300      	movs	r3, #0
 800e032:	e02b      	b.n	800e08c <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e034:	89fb      	ldrh	r3, [r7, #14]
 800e036:	3301      	adds	r3, #1
 800e038:	81fb      	strh	r3, [r7, #14]
 800e03a:	89fa      	ldrh	r2, [r7, #14]
 800e03c:	89bb      	ldrh	r3, [r7, #12]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d3d5      	bcc.n	800dfee <Data_Compliment+0x2e>
			}
		}
		return 1;
 800e042:	2301      	movs	r3, #1
 800e044:	e022      	b.n	800e08c <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800e046:	787b      	ldrb	r3, [r7, #1]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d11e      	bne.n	800e08a <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e04c:	2300      	movs	r3, #0
 800e04e:	81fb      	strh	r3, [r7, #14]
 800e050:	e010      	b.n	800e074 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800e052:	89fb      	ldrh	r3, [r7, #14]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	4413      	add	r3, r2
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	1c99      	adds	r1, r3, #2
 800e05e:	887b      	ldrh	r3, [r7, #2]
 800e060:	440b      	add	r3, r1
 800e062:	4619      	mov	r1, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	440b      	add	r3, r1
 800e068:	43d2      	mvns	r2, r2
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	3301      	adds	r3, #1
 800e072:	81fb      	strh	r3, [r7, #14]
 800e074:	89fa      	ldrh	r2, [r7, #14]
 800e076:	887b      	ldrh	r3, [r7, #2]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d3ea      	bcc.n	800e052 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800e07c:	89fa      	ldrh	r2, [r7, #14]
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	4413      	add	r3, r2
 800e082:	b29b      	uxth	r3, r3
 800e084:	3302      	adds	r3, #2
 800e086:	b29b      	uxth	r3, r3
 800e088:	e000      	b.n	800e08c <Data_Compliment+0xcc>
	}
	return 0;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	08026348 	.word	0x08026348

0800e098 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e0a2:	4b1a      	ldr	r3, [pc, #104]	; (800e10c <CheckToSendReplyorNot+0x74>)
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d104      	bne.n	800e0b4 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800e0aa:	79fb      	ldrb	r3, [r7, #7]
 800e0ac:	f043 0301 	orr.w	r3, r3, #1
 800e0b0:	71fb      	strb	r3, [r7, #7]
 800e0b2:	e003      	b.n	800e0bc <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	f023 0301 	bic.w	r3, r3, #1
 800e0ba:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e0bc:	4b14      	ldr	r3, [pc, #80]	; (800e110 <CheckToSendReplyorNot+0x78>)
 800e0be:	785b      	ldrb	r3, [r3, #1]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d104      	bne.n	800e0ce <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800e0c4:	79fb      	ldrb	r3, [r7, #7]
 800e0c6:	f043 0302 	orr.w	r3, r3, #2
 800e0ca:	71fb      	strb	r3, [r7, #7]
 800e0cc:	e003      	b.n	800e0d6 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	f023 0302 	bic.w	r3, r3, #2
 800e0d4:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800e0d6:	79fb      	ldrb	r3, [r7, #7]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	dc02      	bgt.n	800e0e2 <CheckToSendReplyorNot+0x4a>
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da03      	bge.n	800e0e8 <CheckToSendReplyorNot+0x50>
 800e0e0:	e00a      	b.n	800e0f8 <CheckToSendReplyorNot+0x60>
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d004      	beq.n	800e0f0 <CheckToSendReplyorNot+0x58>
 800e0e6:	e007      	b.n	800e0f8 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800e0e8:	4b0a      	ldr	r3, [pc, #40]	; (800e114 <CheckToSendReplyorNot+0x7c>)
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	701a      	strb	r2, [r3, #0]
		break;
 800e0ee:	e007      	b.n	800e100 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800e0f0:	4b08      	ldr	r3, [pc, #32]	; (800e114 <CheckToSendReplyorNot+0x7c>)
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800e0f6:	e003      	b.n	800e100 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <CheckToSendReplyorNot+0x7c>)
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	701a      	strb	r2, [r3, #0]
		break;
 800e0fe:	bf00      	nop
	}

}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20003508 	.word	0x20003508
 800e110:	2000350c 	.word	0x2000350c
 800e114:	20004c29 	.word	0x20004c29

0800e118 <PrintSignals>:



void PrintSignals(void)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e11e:	4b2d      	ldr	r3, [pc, #180]	; (800e1d4 <PrintSignals+0xbc>)
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	461a      	mov	r2, r3
 800e124:	492c      	ldr	r1, [pc, #176]	; (800e1d8 <PrintSignals+0xc0>)
 800e126:	482d      	ldr	r0, [pc, #180]	; (800e1dc <PrintSignals+0xc4>)
 800e128:	f013 ff74 	bl	8022014 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e12c:	2301      	movs	r3, #1
 800e12e:	80fb      	strh	r3, [r7, #6]
 800e130:	e045      	b.n	800e1be <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800e132:	4b2b      	ldr	r3, [pc, #172]	; (800e1e0 <PrintSignals+0xc8>)
 800e134:	881b      	ldrh	r3, [r3, #0]
 800e136:	88fa      	ldrh	r2, [r7, #6]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d83c      	bhi.n	800e1b6 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800e13c:	88fb      	ldrh	r3, [r7, #6]
 800e13e:	3b01      	subs	r3, #1
 800e140:	2b00      	cmp	r3, #0
 800e142:	da00      	bge.n	800e146 <PrintSignals+0x2e>
 800e144:	3307      	adds	r3, #7
 800e146:	10db      	asrs	r3, r3, #3
 800e148:	461a      	mov	r2, r3
 800e14a:	4b26      	ldr	r3, [pc, #152]	; (800e1e4 <PrintSignals+0xcc>)
 800e14c:	4413      	add	r3, r2
 800e14e:	789b      	ldrb	r3, [r3, #2]
 800e150:	4619      	mov	r1, r3
 800e152:	88fb      	ldrh	r3, [r7, #6]
 800e154:	3b01      	subs	r3, #1
 800e156:	425a      	negs	r2, r3
 800e158:	f003 0307 	and.w	r3, r3, #7
 800e15c:	f002 0207 	and.w	r2, r2, #7
 800e160:	bf58      	it	pl
 800e162:	4253      	negpl	r3, r2
 800e164:	2201      	movs	r2, #1
 800e166:	fa02 f303 	lsl.w	r3, r2, r3
 800e16a:	400b      	ands	r3, r1
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dd0c      	ble.n	800e18a <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800e170:	88fb      	ldrh	r3, [r7, #6]
 800e172:	1e5a      	subs	r2, r3, #1
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	4a1a      	ldr	r2, [pc, #104]	; (800e1e8 <PrintSignals+0xd0>)
 800e17e:	4413      	add	r3, r2
 800e180:	4619      	mov	r1, r3
 800e182:	481a      	ldr	r0, [pc, #104]	; (800e1ec <PrintSignals+0xd4>)
 800e184:	f014 f856 	bl	8022234 <iprintf>
 800e188:	e00b      	b.n	800e1a2 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	1e5a      	subs	r2, r3, #1
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	00db      	lsls	r3, r3, #3
 800e196:	4a14      	ldr	r2, [pc, #80]	; (800e1e8 <PrintSignals+0xd0>)
 800e198:	4413      	add	r3, r2
 800e19a:	4619      	mov	r1, r3
 800e19c:	4814      	ldr	r0, [pc, #80]	; (800e1f0 <PrintSignals+0xd8>)
 800e19e:	f014 f849 	bl	8022234 <iprintf>
		}

		if( (Traverser%2) == 0)
 800e1a2:	88fb      	ldrh	r3, [r7, #6]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d104      	bne.n	800e1b8 <PrintSignals+0xa0>
		{
			printf("\n");
 800e1ae:	200a      	movs	r0, #10
 800e1b0:	f014 f858 	bl	8022264 <putchar>
 800e1b4:	e000      	b.n	800e1b8 <PrintSignals+0xa0>
			continue;
 800e1b6:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e1b8:	88fb      	ldrh	r3, [r7, #6]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	80fb      	strh	r3, [r7, #6]
 800e1be:	88fa      	ldrh	r2, [r7, #6]
 800e1c0:	4b08      	ldr	r3, [pc, #32]	; (800e1e4 <PrintSignals+0xcc>)
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	ddb3      	ble.n	800e132 <PrintSignals+0x1a>
		}
	}
}
 800e1ca:	bf00      	nop
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20003734 	.word	0x20003734
 800e1d8:	20003738 	.word	0x20003738
 800e1dc:	20003532 	.word	0x20003532
 800e1e0:	2000483c 	.word	0x2000483c
 800e1e4:	20003530 	.word	0x20003530
 800e1e8:	20003d4c 	.word	0x20003d4c
 800e1ec:	08026380 	.word	0x08026380
 800e1f0:	08026390 	.word	0x08026390

0800e1f4 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	607b      	str	r3, [r7, #4]

	Get_time();
 800e206:	f7fd f9bf 	bl	800b588 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800e20a:	4b21      	ldr	r3, [pc, #132]	; (800e290 <GetTimeStamp+0x9c>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	461a      	mov	r2, r3
 800e210:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e214:	fb03 f202 	mul.w	r2, r3, r2
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <GetTimeStamp+0x9c>)
 800e21a:	785b      	ldrb	r3, [r3, #1]
 800e21c:	4619      	mov	r1, r3
 800e21e:	460b      	mov	r3, r1
 800e220:	011b      	lsls	r3, r3, #4
 800e222:	1a5b      	subs	r3, r3, r1
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	4a19      	ldr	r2, [pc, #100]	; (800e290 <GetTimeStamp+0x9c>)
 800e22a:	7892      	ldrb	r2, [r2, #2]
 800e22c:	4413      	add	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800e230:	4b18      	ldr	r3, [pc, #96]	; (800e294 <GetTimeStamp+0xa0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	429a      	cmp	r2, r3
 800e238:	d007      	beq.n	800e24a <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800e23a:	4a16      	ldr	r2, [pc, #88]	; (800e294 <GetTimeStamp+0xa0>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800e240:	f007 f8f6 	bl	8015430 <HAL_GetTick>
 800e244:	4603      	mov	r3, r0
 800e246:	4a14      	ldr	r2, [pc, #80]	; (800e298 <GetTimeStamp+0xa4>)
 800e248:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800e24a:	4b13      	ldr	r3, [pc, #76]	; (800e298 <GetTimeStamp+0xa4>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 fe12 	bl	800ee78 <HAL_Elaps_Ticks>
 800e254:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	4613      	mov	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	4619      	mov	r1, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a0d      	ldr	r2, [pc, #52]	; (800e29c <GetTimeStamp+0xa8>)
 800e266:	fba2 2303 	umull	r2, r3, r2, r3
 800e26a:	095b      	lsrs	r3, r3, #5
 800e26c:	440b      	add	r3, r1
 800e26e:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800e270:	4b0b      	ldr	r3, [pc, #44]	; (800e2a0 <GetTimeStamp+0xac>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	429a      	cmp	r2, r3
 800e278:	d005      	beq.n	800e286 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800e27a:	4a09      	ldr	r2, [pc, #36]	; (800e2a0 <GetTimeStamp+0xac>)
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800e280:	4a08      	ldr	r2, [pc, #32]	; (800e2a4 <GetTimeStamp+0xb0>)
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	20002870 	.word	0x20002870
 800e294:	20004c30 	.word	0x20004c30
 800e298:	20004c34 	.word	0x20004c34
 800e29c:	51eb851f 	.word	0x51eb851f
 800e2a0:	20004c38 	.word	0x20004c38
 800e2a4:	20003d48 	.word	0x20003d48

0800e2a8 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800e2a8:	b490      	push	{r4, r7}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800e2b2:	79fb      	ldrb	r3, [r7, #7]
 800e2b4:	1c5a      	adds	r2, r3, #1
 800e2b6:	71fa      	strb	r2, [r7, #7]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	4acd      	ldr	r2, [pc, #820]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e2c4:	4413      	add	r3, r2
 800e2c6:	4acd      	ldr	r2, [pc, #820]	; (800e5fc <UpdateSIGNALSNames+0x354>)
 800e2c8:	6810      	ldr	r0, [r2, #0]
 800e2ca:	6018      	str	r0, [r3, #0]
 800e2cc:	8892      	ldrh	r2, [r2, #4]
 800e2ce:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800e2d0:	79fb      	ldrb	r3, [r7, #7]
 800e2d2:	1c5a      	adds	r2, r3, #1
 800e2d4:	71fa      	strb	r2, [r7, #7]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	4ac5      	ldr	r2, [pc, #788]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e2e2:	4413      	add	r3, r2
 800e2e4:	4ac6      	ldr	r2, [pc, #792]	; (800e600 <UpdateSIGNALSNames+0x358>)
 800e2e6:	6810      	ldr	r0, [r2, #0]
 800e2e8:	6018      	str	r0, [r3, #0]
 800e2ea:	8892      	ldrh	r2, [r2, #4]
 800e2ec:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	71fa      	strb	r2, [r7, #7]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	4abe      	ldr	r2, [pc, #760]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e300:	4413      	add	r3, r2
 800e302:	4ac0      	ldr	r2, [pc, #768]	; (800e604 <UpdateSIGNALSNames+0x35c>)
 800e304:	6810      	ldr	r0, [r2, #0]
 800e306:	6018      	str	r0, [r3, #0]
 800e308:	8892      	ldrh	r2, [r2, #4]
 800e30a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800e30c:	79fb      	ldrb	r3, [r7, #7]
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	71fa      	strb	r2, [r7, #7]
 800e312:	461a      	mov	r2, r3
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	00db      	lsls	r3, r3, #3
 800e31c:	4ab6      	ldr	r2, [pc, #728]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e31e:	4413      	add	r3, r2
 800e320:	4ab9      	ldr	r2, [pc, #740]	; (800e608 <UpdateSIGNALSNames+0x360>)
 800e322:	6810      	ldr	r0, [r2, #0]
 800e324:	6018      	str	r0, [r3, #0]
 800e326:	8892      	ldrh	r2, [r2, #4]
 800e328:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	1c5a      	adds	r2, r3, #1
 800e32e:	71fa      	strb	r2, [r7, #7]
 800e330:	461a      	mov	r2, r3
 800e332:	4613      	mov	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	4aaf      	ldr	r2, [pc, #700]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e33c:	4413      	add	r3, r2
 800e33e:	4ab3      	ldr	r2, [pc, #716]	; (800e60c <UpdateSIGNALSNames+0x364>)
 800e340:	6810      	ldr	r0, [r2, #0]
 800e342:	6018      	str	r0, [r3, #0]
 800e344:	8892      	ldrh	r2, [r2, #4]
 800e346:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	71fa      	strb	r2, [r7, #7]
 800e34e:	461a      	mov	r2, r3
 800e350:	4613      	mov	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	4aa7      	ldr	r2, [pc, #668]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e35a:	4413      	add	r3, r2
 800e35c:	4aac      	ldr	r2, [pc, #688]	; (800e610 <UpdateSIGNALSNames+0x368>)
 800e35e:	6810      	ldr	r0, [r2, #0]
 800e360:	6018      	str	r0, [r3, #0]
 800e362:	8891      	ldrh	r1, [r2, #4]
 800e364:	7992      	ldrb	r2, [r2, #6]
 800e366:	8099      	strh	r1, [r3, #4]
 800e368:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	1c5a      	adds	r2, r3, #1
 800e36e:	71fa      	strb	r2, [r7, #7]
 800e370:	461a      	mov	r2, r3
 800e372:	4613      	mov	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4413      	add	r3, r2
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	4a9f      	ldr	r2, [pc, #636]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e37c:	4413      	add	r3, r2
 800e37e:	4aa5      	ldr	r2, [pc, #660]	; (800e614 <UpdateSIGNALSNames+0x36c>)
 800e380:	6810      	ldr	r0, [r2, #0]
 800e382:	6018      	str	r0, [r3, #0]
 800e384:	8891      	ldrh	r1, [r2, #4]
 800e386:	7992      	ldrb	r2, [r2, #6]
 800e388:	8099      	strh	r1, [r3, #4]
 800e38a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	71fa      	strb	r2, [r7, #7]
 800e392:	461a      	mov	r2, r3
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	4a96      	ldr	r2, [pc, #600]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e39e:	4413      	add	r3, r2
 800e3a0:	4a9d      	ldr	r2, [pc, #628]	; (800e618 <UpdateSIGNALSNames+0x370>)
 800e3a2:	6810      	ldr	r0, [r2, #0]
 800e3a4:	6018      	str	r0, [r3, #0]
 800e3a6:	7912      	ldrb	r2, [r2, #4]
 800e3a8:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	71fa      	strb	r2, [r7, #7]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	4a8f      	ldr	r2, [pc, #572]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e3bc:	4413      	add	r3, r2
 800e3be:	4997      	ldr	r1, [pc, #604]	; (800e61c <UpdateSIGNALSNames+0x374>)
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	cb03      	ldmia	r3!, {r0, r1}
 800e3c6:	6010      	str	r0, [r2, #0]
 800e3c8:	6051      	str	r1, [r2, #4]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	71fa      	strb	r2, [r7, #7]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	4a86      	ldr	r2, [pc, #536]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	4a8f      	ldr	r2, [pc, #572]	; (800e620 <UpdateSIGNALSNames+0x378>)
 800e3e4:	6810      	ldr	r0, [r2, #0]
 800e3e6:	6018      	str	r0, [r3, #0]
 800e3e8:	8892      	ldrh	r2, [r2, #4]
 800e3ea:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	1c5a      	adds	r2, r3, #1
 800e3f0:	71fa      	strb	r2, [r7, #7]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	4a7e      	ldr	r2, [pc, #504]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e3fe:	4413      	add	r3, r2
 800e400:	4988      	ldr	r1, [pc, #544]	; (800e624 <UpdateSIGNALSNames+0x37c>)
 800e402:	461a      	mov	r2, r3
 800e404:	460b      	mov	r3, r1
 800e406:	cb03      	ldmia	r3!, {r0, r1}
 800e408:	6010      	str	r0, [r2, #0]
 800e40a:	6051      	str	r1, [r2, #4]
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	71fa      	strb	r2, [r7, #7]
 800e416:	461a      	mov	r2, r3
 800e418:	4613      	mov	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	4a75      	ldr	r2, [pc, #468]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e422:	4413      	add	r3, r2
 800e424:	4980      	ldr	r1, [pc, #512]	; (800e628 <UpdateSIGNALSNames+0x380>)
 800e426:	461a      	mov	r2, r3
 800e428:	460b      	mov	r3, r1
 800e42a:	cb03      	ldmia	r3!, {r0, r1}
 800e42c:	6010      	str	r0, [r2, #0]
 800e42e:	6051      	str	r1, [r2, #4]
 800e430:	8819      	ldrh	r1, [r3, #0]
 800e432:	789b      	ldrb	r3, [r3, #2]
 800e434:	8111      	strh	r1, [r2, #8]
 800e436:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800e438:	79fb      	ldrb	r3, [r7, #7]
 800e43a:	1c5a      	adds	r2, r3, #1
 800e43c:	71fa      	strb	r2, [r7, #7]
 800e43e:	461a      	mov	r2, r3
 800e440:	4613      	mov	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4a6b      	ldr	r2, [pc, #428]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e44a:	4413      	add	r3, r2
 800e44c:	4977      	ldr	r1, [pc, #476]	; (800e62c <UpdateSIGNALSNames+0x384>)
 800e44e:	461a      	mov	r2, r3
 800e450:	460b      	mov	r3, r1
 800e452:	cb03      	ldmia	r3!, {r0, r1}
 800e454:	6010      	str	r0, [r2, #0]
 800e456:	6051      	str	r1, [r2, #4]
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	71fa      	strb	r2, [r7, #7]
 800e462:	461a      	mov	r2, r3
 800e464:	4613      	mov	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	00db      	lsls	r3, r3, #3
 800e46c:	4a62      	ldr	r2, [pc, #392]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e46e:	4413      	add	r3, r2
 800e470:	496f      	ldr	r1, [pc, #444]	; (800e630 <UpdateSIGNALSNames+0x388>)
 800e472:	461a      	mov	r2, r3
 800e474:	460b      	mov	r3, r1
 800e476:	cb03      	ldmia	r3!, {r0, r1}
 800e478:	6010      	str	r0, [r2, #0]
 800e47a:	6051      	str	r1, [r2, #4]
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e480:	79fb      	ldrb	r3, [r7, #7]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	71fa      	strb	r2, [r7, #7]
 800e486:	461a      	mov	r2, r3
 800e488:	4613      	mov	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4413      	add	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	4a59      	ldr	r2, [pc, #356]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e492:	4413      	add	r3, r2
 800e494:	4967      	ldr	r1, [pc, #412]	; (800e634 <UpdateSIGNALSNames+0x38c>)
 800e496:	461a      	mov	r2, r3
 800e498:	460b      	mov	r3, r1
 800e49a:	cb03      	ldmia	r3!, {r0, r1}
 800e49c:	6010      	str	r0, [r2, #0]
 800e49e:	6051      	str	r1, [r2, #4]
 800e4a0:	8819      	ldrh	r1, [r3, #0]
 800e4a2:	789b      	ldrb	r3, [r3, #2]
 800e4a4:	8111      	strh	r1, [r2, #8]
 800e4a6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	71fa      	strb	r2, [r7, #7]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	4a4f      	ldr	r2, [pc, #316]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e4ba:	4413      	add	r3, r2
 800e4bc:	495e      	ldr	r1, [pc, #376]	; (800e638 <UpdateSIGNALSNames+0x390>)
 800e4be:	461a      	mov	r2, r3
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	cb03      	ldmia	r3!, {r0, r1}
 800e4c4:	6010      	str	r0, [r2, #0]
 800e4c6:	6051      	str	r1, [r2, #4]
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	71fa      	strb	r2, [r7, #7]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	00db      	lsls	r3, r3, #3
 800e4dc:	4a46      	ldr	r2, [pc, #280]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e4de:	4413      	add	r3, r2
 800e4e0:	4a56      	ldr	r2, [pc, #344]	; (800e63c <UpdateSIGNALSNames+0x394>)
 800e4e2:	6810      	ldr	r0, [r2, #0]
 800e4e4:	6018      	str	r0, [r3, #0]
 800e4e6:	8891      	ldrh	r1, [r2, #4]
 800e4e8:	7992      	ldrb	r2, [r2, #6]
 800e4ea:	8099      	strh	r1, [r3, #4]
 800e4ec:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	71fa      	strb	r2, [r7, #7]
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	4a3e      	ldr	r2, [pc, #248]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e500:	4413      	add	r3, r2
 800e502:	4a4f      	ldr	r2, [pc, #316]	; (800e640 <UpdateSIGNALSNames+0x398>)
 800e504:	6810      	ldr	r0, [r2, #0]
 800e506:	6018      	str	r0, [r3, #0]
 800e508:	8891      	ldrh	r1, [r2, #4]
 800e50a:	7992      	ldrb	r2, [r2, #6]
 800e50c:	8099      	strh	r1, [r3, #4]
 800e50e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	1c5a      	adds	r2, r3, #1
 800e514:	71fa      	strb	r2, [r7, #7]
 800e516:	461a      	mov	r2, r3
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	00db      	lsls	r3, r3, #3
 800e520:	4a35      	ldr	r2, [pc, #212]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e522:	4413      	add	r3, r2
 800e524:	4a47      	ldr	r2, [pc, #284]	; (800e644 <UpdateSIGNALSNames+0x39c>)
 800e526:	6810      	ldr	r0, [r2, #0]
 800e528:	6018      	str	r0, [r3, #0]
 800e52a:	8891      	ldrh	r1, [r2, #4]
 800e52c:	7992      	ldrb	r2, [r2, #6]
 800e52e:	8099      	strh	r1, [r3, #4]
 800e530:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	71fa      	strb	r2, [r7, #7]
 800e538:	461a      	mov	r2, r3
 800e53a:	4613      	mov	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4413      	add	r3, r2
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	4a2d      	ldr	r2, [pc, #180]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e544:	4413      	add	r3, r2
 800e546:	4a40      	ldr	r2, [pc, #256]	; (800e648 <UpdateSIGNALSNames+0x3a0>)
 800e548:	6810      	ldr	r0, [r2, #0]
 800e54a:	6018      	str	r0, [r3, #0]
 800e54c:	8891      	ldrh	r1, [r2, #4]
 800e54e:	7992      	ldrb	r2, [r2, #6]
 800e550:	8099      	strh	r1, [r3, #4]
 800e552:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e554:	79fb      	ldrb	r3, [r7, #7]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	71fa      	strb	r2, [r7, #7]
 800e55a:	461a      	mov	r2, r3
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	00db      	lsls	r3, r3, #3
 800e564:	4a24      	ldr	r2, [pc, #144]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e566:	4413      	add	r3, r2
 800e568:	4938      	ldr	r1, [pc, #224]	; (800e64c <UpdateSIGNALSNames+0x3a4>)
 800e56a:	461a      	mov	r2, r3
 800e56c:	460b      	mov	r3, r1
 800e56e:	cb03      	ldmia	r3!, {r0, r1}
 800e570:	6010      	str	r0, [r2, #0]
 800e572:	6051      	str	r1, [r2, #4]
 800e574:	8819      	ldrh	r1, [r3, #0]
 800e576:	789b      	ldrb	r3, [r3, #2]
 800e578:	8111      	strh	r1, [r2, #8]
 800e57a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e57c:	79fb      	ldrb	r3, [r7, #7]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	71fa      	strb	r2, [r7, #7]
 800e582:	461a      	mov	r2, r3
 800e584:	4613      	mov	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	4a1a      	ldr	r2, [pc, #104]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e58e:	4413      	add	r3, r2
 800e590:	4a2f      	ldr	r2, [pc, #188]	; (800e650 <UpdateSIGNALSNames+0x3a8>)
 800e592:	6810      	ldr	r0, [r2, #0]
 800e594:	6018      	str	r0, [r3, #0]
 800e596:	8891      	ldrh	r1, [r2, #4]
 800e598:	7992      	ldrb	r2, [r2, #6]
 800e59a:	8099      	strh	r1, [r3, #4]
 800e59c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	1c5a      	adds	r2, r3, #1
 800e5a2:	71fa      	strb	r2, [r7, #7]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	00db      	lsls	r3, r3, #3
 800e5ae:	4a12      	ldr	r2, [pc, #72]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e5b0:	4413      	add	r3, r2
 800e5b2:	4a28      	ldr	r2, [pc, #160]	; (800e654 <UpdateSIGNALSNames+0x3ac>)
 800e5b4:	6810      	ldr	r0, [r2, #0]
 800e5b6:	6018      	str	r0, [r3, #0]
 800e5b8:	8891      	ldrh	r1, [r2, #4]
 800e5ba:	7992      	ldrb	r2, [r2, #6]
 800e5bc:	8099      	strh	r1, [r3, #4]
 800e5be:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	71fa      	strb	r2, [r7, #7]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	4a09      	ldr	r2, [pc, #36]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	4a20      	ldr	r2, [pc, #128]	; (800e658 <UpdateSIGNALSNames+0x3b0>)
 800e5d6:	6810      	ldr	r0, [r2, #0]
 800e5d8:	6018      	str	r0, [r3, #0]
 800e5da:	8891      	ldrh	r1, [r2, #4]
 800e5dc:	7992      	ldrb	r2, [r2, #6]
 800e5de:	8099      	strh	r1, [r3, #4]
 800e5e0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	71fa      	strb	r2, [r7, #7]
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	4a01      	ldr	r2, [pc, #4]	; (800e5f8 <UpdateSIGNALSNames+0x350>)
 800e5f4:	4413      	add	r3, r2
 800e5f6:	e031      	b.n	800e65c <UpdateSIGNALSNames+0x3b4>
 800e5f8:	20003d4c 	.word	0x20003d4c
 800e5fc:	080263a0 	.word	0x080263a0
 800e600:	080263a8 	.word	0x080263a8
 800e604:	080263b0 	.word	0x080263b0
 800e608:	080263b8 	.word	0x080263b8
 800e60c:	080263c0 	.word	0x080263c0
 800e610:	080263c8 	.word	0x080263c8
 800e614:	080263d0 	.word	0x080263d0
 800e618:	080263d8 	.word	0x080263d8
 800e61c:	080263e0 	.word	0x080263e0
 800e620:	080263ec 	.word	0x080263ec
 800e624:	080263f4 	.word	0x080263f4
 800e628:	08026400 	.word	0x08026400
 800e62c:	0802640c 	.word	0x0802640c
 800e630:	08026418 	.word	0x08026418
 800e634:	08026424 	.word	0x08026424
 800e638:	08026430 	.word	0x08026430
 800e63c:	0802643c 	.word	0x0802643c
 800e640:	08026444 	.word	0x08026444
 800e644:	0802644c 	.word	0x0802644c
 800e648:	08026454 	.word	0x08026454
 800e64c:	0802645c 	.word	0x0802645c
 800e650:	08026468 	.word	0x08026468
 800e654:	08026470 	.word	0x08026470
 800e658:	08026478 	.word	0x08026478
 800e65c:	4acd      	ldr	r2, [pc, #820]	; (800e994 <UpdateSIGNALSNames+0x6ec>)
 800e65e:	6810      	ldr	r0, [r2, #0]
 800e660:	6018      	str	r0, [r3, #0]
 800e662:	8891      	ldrh	r1, [r2, #4]
 800e664:	7992      	ldrb	r2, [r2, #6]
 800e666:	8099      	strh	r1, [r3, #4]
 800e668:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e66a:	79fb      	ldrb	r3, [r7, #7]
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	71fa      	strb	r2, [r7, #7]
 800e670:	461a      	mov	r2, r3
 800e672:	4613      	mov	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	00db      	lsls	r3, r3, #3
 800e67a:	4ac7      	ldr	r2, [pc, #796]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e67c:	4413      	add	r3, r2
 800e67e:	4ac7      	ldr	r2, [pc, #796]	; (800e99c <UpdateSIGNALSNames+0x6f4>)
 800e680:	6810      	ldr	r0, [r2, #0]
 800e682:	6018      	str	r0, [r3, #0]
 800e684:	8891      	ldrh	r1, [r2, #4]
 800e686:	7992      	ldrb	r2, [r2, #6]
 800e688:	8099      	strh	r1, [r3, #4]
 800e68a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	71fa      	strb	r2, [r7, #7]
 800e692:	461a      	mov	r2, r3
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	4abe      	ldr	r2, [pc, #760]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e69e:	4413      	add	r3, r2
 800e6a0:	4abf      	ldr	r2, [pc, #764]	; (800e9a0 <UpdateSIGNALSNames+0x6f8>)
 800e6a2:	6810      	ldr	r0, [r2, #0]
 800e6a4:	6018      	str	r0, [r3, #0]
 800e6a6:	8891      	ldrh	r1, [r2, #4]
 800e6a8:	7992      	ldrb	r2, [r2, #6]
 800e6aa:	8099      	strh	r1, [r3, #4]
 800e6ac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e6ae:	79fb      	ldrb	r3, [r7, #7]
 800e6b0:	1c5a      	adds	r2, r3, #1
 800e6b2:	71fa      	strb	r2, [r7, #7]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4413      	add	r3, r2
 800e6bc:	00db      	lsls	r3, r3, #3
 800e6be:	4ab6      	ldr	r2, [pc, #728]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e6c0:	4413      	add	r3, r2
 800e6c2:	4ab8      	ldr	r2, [pc, #736]	; (800e9a4 <UpdateSIGNALSNames+0x6fc>)
 800e6c4:	6810      	ldr	r0, [r2, #0]
 800e6c6:	6018      	str	r0, [r3, #0]
 800e6c8:	8891      	ldrh	r1, [r2, #4]
 800e6ca:	7992      	ldrb	r2, [r2, #6]
 800e6cc:	8099      	strh	r1, [r3, #4]
 800e6ce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e6d0:	79fb      	ldrb	r3, [r7, #7]
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	71fa      	strb	r2, [r7, #7]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	4613      	mov	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	4413      	add	r3, r2
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	4aad      	ldr	r2, [pc, #692]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e6e2:	4413      	add	r3, r2
 800e6e4:	49b0      	ldr	r1, [pc, #704]	; (800e9a8 <UpdateSIGNALSNames+0x700>)
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	cb03      	ldmia	r3!, {r0, r1}
 800e6ec:	6010      	str	r0, [r2, #0]
 800e6ee:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	1c5a      	adds	r2, r3, #1
 800e6f4:	71fa      	strb	r2, [r7, #7]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	4aa5      	ldr	r2, [pc, #660]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e702:	4413      	add	r3, r2
 800e704:	49a9      	ldr	r1, [pc, #676]	; (800e9ac <UpdateSIGNALSNames+0x704>)
 800e706:	461a      	mov	r2, r3
 800e708:	460b      	mov	r3, r1
 800e70a:	cb03      	ldmia	r3!, {r0, r1}
 800e70c:	6010      	str	r0, [r2, #0]
 800e70e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	71fa      	strb	r2, [r7, #7]
 800e716:	461a      	mov	r2, r3
 800e718:	4613      	mov	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	4413      	add	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	4a9d      	ldr	r2, [pc, #628]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e722:	4413      	add	r3, r2
 800e724:	49a2      	ldr	r1, [pc, #648]	; (800e9b0 <UpdateSIGNALSNames+0x708>)
 800e726:	461a      	mov	r2, r3
 800e728:	460b      	mov	r3, r1
 800e72a:	cb03      	ldmia	r3!, {r0, r1}
 800e72c:	6010      	str	r0, [r2, #0]
 800e72e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e730:	79fb      	ldrb	r3, [r7, #7]
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	71fa      	strb	r2, [r7, #7]
 800e736:	461a      	mov	r2, r3
 800e738:	4613      	mov	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4413      	add	r3, r2
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	4a95      	ldr	r2, [pc, #596]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e742:	4413      	add	r3, r2
 800e744:	499b      	ldr	r1, [pc, #620]	; (800e9b4 <UpdateSIGNALSNames+0x70c>)
 800e746:	461a      	mov	r2, r3
 800e748:	460b      	mov	r3, r1
 800e74a:	cb03      	ldmia	r3!, {r0, r1}
 800e74c:	6010      	str	r0, [r2, #0]
 800e74e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	1c5a      	adds	r2, r3, #1
 800e754:	71fa      	strb	r2, [r7, #7]
 800e756:	461a      	mov	r2, r3
 800e758:	4613      	mov	r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4413      	add	r3, r2
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	4a8d      	ldr	r2, [pc, #564]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e762:	4413      	add	r3, r2
 800e764:	4994      	ldr	r1, [pc, #592]	; (800e9b8 <UpdateSIGNALSNames+0x710>)
 800e766:	461a      	mov	r2, r3
 800e768:	460b      	mov	r3, r1
 800e76a:	cb03      	ldmia	r3!, {r0, r1}
 800e76c:	6010      	str	r0, [r2, #0]
 800e76e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	1c5a      	adds	r2, r3, #1
 800e774:	71fa      	strb	r2, [r7, #7]
 800e776:	461a      	mov	r2, r3
 800e778:	4613      	mov	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4413      	add	r3, r2
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	4a85      	ldr	r2, [pc, #532]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e782:	4413      	add	r3, r2
 800e784:	498d      	ldr	r1, [pc, #564]	; (800e9bc <UpdateSIGNALSNames+0x714>)
 800e786:	461a      	mov	r2, r3
 800e788:	460b      	mov	r3, r1
 800e78a:	cb03      	ldmia	r3!, {r0, r1}
 800e78c:	6010      	str	r0, [r2, #0]
 800e78e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e790:	79fb      	ldrb	r3, [r7, #7]
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	71fa      	strb	r2, [r7, #7]
 800e796:	461a      	mov	r2, r3
 800e798:	4613      	mov	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	4413      	add	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	4a7d      	ldr	r2, [pc, #500]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e7a2:	4413      	add	r3, r2
 800e7a4:	4986      	ldr	r1, [pc, #536]	; (800e9c0 <UpdateSIGNALSNames+0x718>)
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	cb03      	ldmia	r3!, {r0, r1}
 800e7ac:	6010      	str	r0, [r2, #0]
 800e7ae:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	71fa      	strb	r2, [r7, #7]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4413      	add	r3, r2
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	4a75      	ldr	r2, [pc, #468]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e7c2:	4413      	add	r3, r2
 800e7c4:	497f      	ldr	r1, [pc, #508]	; (800e9c4 <UpdateSIGNALSNames+0x71c>)
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	cb03      	ldmia	r3!, {r0, r1}
 800e7cc:	6010      	str	r0, [r2, #0]
 800e7ce:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	71fa      	strb	r2, [r7, #7]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	4613      	mov	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	00db      	lsls	r3, r3, #3
 800e7e0:	4a6d      	ldr	r2, [pc, #436]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e7e2:	4413      	add	r3, r2
 800e7e4:	4978      	ldr	r1, [pc, #480]	; (800e9c8 <UpdateSIGNALSNames+0x720>)
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	cb03      	ldmia	r3!, {r0, r1}
 800e7ec:	6010      	str	r0, [r2, #0]
 800e7ee:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	71fa      	strb	r2, [r7, #7]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	4a65      	ldr	r2, [pc, #404]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e802:	4413      	add	r3, r2
 800e804:	4971      	ldr	r1, [pc, #452]	; (800e9cc <UpdateSIGNALSNames+0x724>)
 800e806:	461a      	mov	r2, r3
 800e808:	460b      	mov	r3, r1
 800e80a:	cb03      	ldmia	r3!, {r0, r1}
 800e80c:	6010      	str	r0, [r2, #0]
 800e80e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e810:	79fb      	ldrb	r3, [r7, #7]
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	71fa      	strb	r2, [r7, #7]
 800e816:	461a      	mov	r2, r3
 800e818:	4613      	mov	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	4a5d      	ldr	r2, [pc, #372]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e822:	4413      	add	r3, r2
 800e824:	496a      	ldr	r1, [pc, #424]	; (800e9d0 <UpdateSIGNALSNames+0x728>)
 800e826:	461a      	mov	r2, r3
 800e828:	460b      	mov	r3, r1
 800e82a:	cb03      	ldmia	r3!, {r0, r1}
 800e82c:	6010      	str	r0, [r2, #0]
 800e82e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	71fa      	strb	r2, [r7, #7]
 800e836:	461a      	mov	r2, r3
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	4a55      	ldr	r2, [pc, #340]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e842:	4413      	add	r3, r2
 800e844:	4963      	ldr	r1, [pc, #396]	; (800e9d4 <UpdateSIGNALSNames+0x72c>)
 800e846:	461a      	mov	r2, r3
 800e848:	460b      	mov	r3, r1
 800e84a:	cb03      	ldmia	r3!, {r0, r1}
 800e84c:	6010      	str	r0, [r2, #0]
 800e84e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	1c5a      	adds	r2, r3, #1
 800e854:	71fa      	strb	r2, [r7, #7]
 800e856:	461a      	mov	r2, r3
 800e858:	4613      	mov	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	4a4d      	ldr	r2, [pc, #308]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e862:	4413      	add	r3, r2
 800e864:	495c      	ldr	r1, [pc, #368]	; (800e9d8 <UpdateSIGNALSNames+0x730>)
 800e866:	461a      	mov	r2, r3
 800e868:	460b      	mov	r3, r1
 800e86a:	cb03      	ldmia	r3!, {r0, r1}
 800e86c:	6010      	str	r0, [r2, #0]
 800e86e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e870:	79fb      	ldrb	r3, [r7, #7]
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	71fa      	strb	r2, [r7, #7]
 800e876:	461a      	mov	r2, r3
 800e878:	4613      	mov	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4413      	add	r3, r2
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	4a45      	ldr	r2, [pc, #276]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e882:	4413      	add	r3, r2
 800e884:	4a55      	ldr	r2, [pc, #340]	; (800e9dc <UpdateSIGNALSNames+0x734>)
 800e886:	461c      	mov	r4, r3
 800e888:	4613      	mov	r3, r2
 800e88a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e88c:	6020      	str	r0, [r4, #0]
 800e88e:	6061      	str	r1, [r4, #4]
 800e890:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	71fa      	strb	r2, [r7, #7]
 800e898:	461a      	mov	r2, r3
 800e89a:	4613      	mov	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	4a3d      	ldr	r2, [pc, #244]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e8a4:	4413      	add	r3, r2
 800e8a6:	494e      	ldr	r1, [pc, #312]	; (800e9e0 <UpdateSIGNALSNames+0x738>)
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	cb03      	ldmia	r3!, {r0, r1}
 800e8ae:	6010      	str	r0, [r2, #0]
 800e8b0:	6051      	str	r1, [r2, #4]
 800e8b2:	8819      	ldrh	r1, [r3, #0]
 800e8b4:	789b      	ldrb	r3, [r3, #2]
 800e8b6:	8111      	strh	r1, [r2, #8]
 800e8b8:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	71fa      	strb	r2, [r7, #7]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	4a33      	ldr	r2, [pc, #204]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e8cc:	4413      	add	r3, r2
 800e8ce:	4a45      	ldr	r2, [pc, #276]	; (800e9e4 <UpdateSIGNALSNames+0x73c>)
 800e8d0:	461c      	mov	r4, r3
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	6061      	str	r1, [r4, #4]
 800e8da:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	71fa      	strb	r2, [r7, #7]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	4a2a      	ldr	r2, [pc, #168]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e8ee:	4413      	add	r3, r2
 800e8f0:	493d      	ldr	r1, [pc, #244]	; (800e9e8 <UpdateSIGNALSNames+0x740>)
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	cb03      	ldmia	r3!, {r0, r1}
 800e8f8:	6010      	str	r0, [r2, #0]
 800e8fa:	6051      	str	r1, [r2, #4]
 800e8fc:	8819      	ldrh	r1, [r3, #0]
 800e8fe:	789b      	ldrb	r3, [r3, #2]
 800e900:	8111      	strh	r1, [r2, #8]
 800e902:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	71fa      	strb	r2, [r7, #7]
 800e90a:	461a      	mov	r2, r3
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	4a20      	ldr	r2, [pc, #128]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e916:	4413      	add	r3, r2
 800e918:	4934      	ldr	r1, [pc, #208]	; (800e9ec <UpdateSIGNALSNames+0x744>)
 800e91a:	461a      	mov	r2, r3
 800e91c:	460b      	mov	r3, r1
 800e91e:	cb03      	ldmia	r3!, {r0, r1}
 800e920:	6010      	str	r0, [r2, #0]
 800e922:	6051      	str	r1, [r2, #4]
 800e924:	8819      	ldrh	r1, [r3, #0]
 800e926:	789b      	ldrb	r3, [r3, #2]
 800e928:	8111      	strh	r1, [r2, #8]
 800e92a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	71fa      	strb	r2, [r7, #7]
 800e932:	461a      	mov	r2, r3
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	4a16      	ldr	r2, [pc, #88]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e93e:	4413      	add	r3, r2
 800e940:	4a2b      	ldr	r2, [pc, #172]	; (800e9f0 <UpdateSIGNALSNames+0x748>)
 800e942:	461c      	mov	r4, r3
 800e944:	4613      	mov	r3, r2
 800e946:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e948:	6020      	str	r0, [r4, #0]
 800e94a:	6061      	str	r1, [r4, #4]
 800e94c:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	71fa      	strb	r2, [r7, #7]
 800e954:	461a      	mov	r2, r3
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	4a0e      	ldr	r2, [pc, #56]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e960:	4413      	add	r3, r2
 800e962:	4924      	ldr	r1, [pc, #144]	; (800e9f4 <UpdateSIGNALSNames+0x74c>)
 800e964:	461a      	mov	r2, r3
 800e966:	460b      	mov	r3, r1
 800e968:	cb03      	ldmia	r3!, {r0, r1}
 800e96a:	6010      	str	r0, [r2, #0]
 800e96c:	6051      	str	r1, [r2, #4]
 800e96e:	8819      	ldrh	r1, [r3, #0]
 800e970:	789b      	ldrb	r3, [r3, #2]
 800e972:	8111      	strh	r1, [r2, #8]
 800e974:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	1c5a      	adds	r2, r3, #1
 800e97a:	71fa      	strb	r2, [r7, #7]
 800e97c:	461a      	mov	r2, r3
 800e97e:	4613      	mov	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	00db      	lsls	r3, r3, #3
 800e986:	4a04      	ldr	r2, [pc, #16]	; (800e998 <UpdateSIGNALSNames+0x6f0>)
 800e988:	4413      	add	r3, r2
 800e98a:	4a1b      	ldr	r2, [pc, #108]	; (800e9f8 <UpdateSIGNALSNames+0x750>)
 800e98c:	6810      	ldr	r0, [r2, #0]
 800e98e:	6018      	str	r0, [r3, #0]
 800e990:	e034      	b.n	800e9fc <UpdateSIGNALSNames+0x754>
 800e992:	bf00      	nop
 800e994:	08026480 	.word	0x08026480
 800e998:	20003d4c 	.word	0x20003d4c
 800e99c:	08026488 	.word	0x08026488
 800e9a0:	08026490 	.word	0x08026490
 800e9a4:	08026498 	.word	0x08026498
 800e9a8:	080264a0 	.word	0x080264a0
 800e9ac:	080264a8 	.word	0x080264a8
 800e9b0:	080264b0 	.word	0x080264b0
 800e9b4:	080264b8 	.word	0x080264b8
 800e9b8:	080264c0 	.word	0x080264c0
 800e9bc:	080264c8 	.word	0x080264c8
 800e9c0:	080264d0 	.word	0x080264d0
 800e9c4:	080264d8 	.word	0x080264d8
 800e9c8:	080264e0 	.word	0x080264e0
 800e9cc:	080264e8 	.word	0x080264e8
 800e9d0:	080264f0 	.word	0x080264f0
 800e9d4:	080264f8 	.word	0x080264f8
 800e9d8:	08026500 	.word	0x08026500
 800e9dc:	08026508 	.word	0x08026508
 800e9e0:	08026514 	.word	0x08026514
 800e9e4:	08026520 	.word	0x08026520
 800e9e8:	0802652c 	.word	0x0802652c
 800e9ec:	08026538 	.word	0x08026538
 800e9f0:	08026544 	.word	0x08026544
 800e9f4:	08026550 	.word	0x08026550
 800e9f8:	0802655c 	.word	0x0802655c
 800e9fc:	8891      	ldrh	r1, [r2, #4]
 800e9fe:	7992      	ldrb	r2, [r2, #6]
 800ea00:	8099      	strh	r1, [r3, #4]
 800ea02:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800ea04:	79fb      	ldrb	r3, [r7, #7]
 800ea06:	1c5a      	adds	r2, r3, #1
 800ea08:	71fa      	strb	r2, [r7, #7]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	4a82      	ldr	r2, [pc, #520]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ea16:	4413      	add	r3, r2
 800ea18:	4a82      	ldr	r2, [pc, #520]	; (800ec24 <UpdateSIGNALSNames+0x97c>)
 800ea1a:	6810      	ldr	r0, [r2, #0]
 800ea1c:	6018      	str	r0, [r3, #0]
 800ea1e:	8891      	ldrh	r1, [r2, #4]
 800ea20:	7992      	ldrb	r2, [r2, #6]
 800ea22:	8099      	strh	r1, [r3, #4]
 800ea24:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800ea26:	79fb      	ldrb	r3, [r7, #7]
 800ea28:	1c5a      	adds	r2, r3, #1
 800ea2a:	71fa      	strb	r2, [r7, #7]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	4613      	mov	r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	00db      	lsls	r3, r3, #3
 800ea36:	4a7a      	ldr	r2, [pc, #488]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	4a7b      	ldr	r2, [pc, #492]	; (800ec28 <UpdateSIGNALSNames+0x980>)
 800ea3c:	6810      	ldr	r0, [r2, #0]
 800ea3e:	6018      	str	r0, [r3, #0]
 800ea40:	8891      	ldrh	r1, [r2, #4]
 800ea42:	7992      	ldrb	r2, [r2, #6]
 800ea44:	8099      	strh	r1, [r3, #4]
 800ea46:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	71fa      	strb	r2, [r7, #7]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	4613      	mov	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	4a71      	ldr	r2, [pc, #452]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ea5a:	4413      	add	r3, r2
 800ea5c:	4a73      	ldr	r2, [pc, #460]	; (800ec2c <UpdateSIGNALSNames+0x984>)
 800ea5e:	6810      	ldr	r0, [r2, #0]
 800ea60:	6018      	str	r0, [r3, #0]
 800ea62:	8891      	ldrh	r1, [r2, #4]
 800ea64:	7992      	ldrb	r2, [r2, #6]
 800ea66:	8099      	strh	r1, [r3, #4]
 800ea68:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	71fa      	strb	r2, [r7, #7]
 800ea70:	461a      	mov	r2, r3
 800ea72:	4613      	mov	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	4a69      	ldr	r2, [pc, #420]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ea7c:	4413      	add	r3, r2
 800ea7e:	4a6c      	ldr	r2, [pc, #432]	; (800ec30 <UpdateSIGNALSNames+0x988>)
 800ea80:	6810      	ldr	r0, [r2, #0]
 800ea82:	6018      	str	r0, [r3, #0]
 800ea84:	8891      	ldrh	r1, [r2, #4]
 800ea86:	7992      	ldrb	r2, [r2, #6]
 800ea88:	8099      	strh	r1, [r3, #4]
 800ea8a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	71fa      	strb	r2, [r7, #7]
 800ea92:	461a      	mov	r2, r3
 800ea94:	4613      	mov	r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4413      	add	r3, r2
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	4a60      	ldr	r2, [pc, #384]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ea9e:	4413      	add	r3, r2
 800eaa0:	4a64      	ldr	r2, [pc, #400]	; (800ec34 <UpdateSIGNALSNames+0x98c>)
 800eaa2:	6810      	ldr	r0, [r2, #0]
 800eaa4:	6018      	str	r0, [r3, #0]
 800eaa6:	8891      	ldrh	r1, [r2, #4]
 800eaa8:	7992      	ldrb	r2, [r2, #6]
 800eaaa:	8099      	strh	r1, [r3, #4]
 800eaac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	71fa      	strb	r2, [r7, #7]
 800eab4:	461a      	mov	r2, r3
 800eab6:	4613      	mov	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4413      	add	r3, r2
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	4a58      	ldr	r2, [pc, #352]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eac0:	4413      	add	r3, r2
 800eac2:	4a5d      	ldr	r2, [pc, #372]	; (800ec38 <UpdateSIGNALSNames+0x990>)
 800eac4:	6810      	ldr	r0, [r2, #0]
 800eac6:	6018      	str	r0, [r3, #0]
 800eac8:	8891      	ldrh	r1, [r2, #4]
 800eaca:	7992      	ldrb	r2, [r2, #6]
 800eacc:	8099      	strh	r1, [r3, #4]
 800eace:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800ead0:	79fb      	ldrb	r3, [r7, #7]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	71fa      	strb	r2, [r7, #7]
 800ead6:	461a      	mov	r2, r3
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	4a4f      	ldr	r2, [pc, #316]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eae2:	4413      	add	r3, r2
 800eae4:	4a55      	ldr	r2, [pc, #340]	; (800ec3c <UpdateSIGNALSNames+0x994>)
 800eae6:	6810      	ldr	r0, [r2, #0]
 800eae8:	6018      	str	r0, [r3, #0]
 800eaea:	8891      	ldrh	r1, [r2, #4]
 800eaec:	7992      	ldrb	r2, [r2, #6]
 800eaee:	8099      	strh	r1, [r3, #4]
 800eaf0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800eaf2:	79fb      	ldrb	r3, [r7, #7]
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	71fa      	strb	r2, [r7, #7]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4613      	mov	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4413      	add	r3, r2
 800eb00:	00db      	lsls	r3, r3, #3
 800eb02:	4a47      	ldr	r2, [pc, #284]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eb04:	4413      	add	r3, r2
 800eb06:	4a4e      	ldr	r2, [pc, #312]	; (800ec40 <UpdateSIGNALSNames+0x998>)
 800eb08:	6810      	ldr	r0, [r2, #0]
 800eb0a:	6018      	str	r0, [r3, #0]
 800eb0c:	8891      	ldrh	r1, [r2, #4]
 800eb0e:	7992      	ldrb	r2, [r2, #6]
 800eb10:	8099      	strh	r1, [r3, #4]
 800eb12:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	71fa      	strb	r2, [r7, #7]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	4a3e      	ldr	r2, [pc, #248]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eb26:	4413      	add	r3, r2
 800eb28:	4a46      	ldr	r2, [pc, #280]	; (800ec44 <UpdateSIGNALSNames+0x99c>)
 800eb2a:	6810      	ldr	r0, [r2, #0]
 800eb2c:	6018      	str	r0, [r3, #0]
 800eb2e:	8891      	ldrh	r1, [r2, #4]
 800eb30:	7992      	ldrb	r2, [r2, #6]
 800eb32:	8099      	strh	r1, [r3, #4]
 800eb34:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	71fa      	strb	r2, [r7, #7]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	4613      	mov	r3, r2
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	4413      	add	r3, r2
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	4a36      	ldr	r2, [pc, #216]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eb48:	4413      	add	r3, r2
 800eb4a:	4a3f      	ldr	r2, [pc, #252]	; (800ec48 <UpdateSIGNALSNames+0x9a0>)
 800eb4c:	6810      	ldr	r0, [r2, #0]
 800eb4e:	6018      	str	r0, [r3, #0]
 800eb50:	8891      	ldrh	r1, [r2, #4]
 800eb52:	7992      	ldrb	r2, [r2, #6]
 800eb54:	8099      	strh	r1, [r3, #4]
 800eb56:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	71fa      	strb	r2, [r7, #7]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	4613      	mov	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	4413      	add	r3, r2
 800eb66:	00db      	lsls	r3, r3, #3
 800eb68:	4a2d      	ldr	r2, [pc, #180]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eb6a:	4413      	add	r3, r2
 800eb6c:	4a37      	ldr	r2, [pc, #220]	; (800ec4c <UpdateSIGNALSNames+0x9a4>)
 800eb6e:	6810      	ldr	r0, [r2, #0]
 800eb70:	6018      	str	r0, [r3, #0]
 800eb72:	8891      	ldrh	r1, [r2, #4]
 800eb74:	7992      	ldrb	r2, [r2, #6]
 800eb76:	8099      	strh	r1, [r3, #4]
 800eb78:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800eb7a:	79fb      	ldrb	r3, [r7, #7]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	71fa      	strb	r2, [r7, #7]
 800eb80:	461a      	mov	r2, r3
 800eb82:	4613      	mov	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4413      	add	r3, r2
 800eb88:	00db      	lsls	r3, r3, #3
 800eb8a:	4a25      	ldr	r2, [pc, #148]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4930      	ldr	r1, [pc, #192]	; (800ec50 <UpdateSIGNALSNames+0x9a8>)
 800eb90:	461a      	mov	r2, r3
 800eb92:	460b      	mov	r3, r1
 800eb94:	cb03      	ldmia	r3!, {r0, r1}
 800eb96:	6010      	str	r0, [r2, #0]
 800eb98:	6051      	str	r1, [r2, #4]
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	1c5a      	adds	r2, r3, #1
 800eba2:	71fa      	strb	r2, [r7, #7]
 800eba4:	461a      	mov	r2, r3
 800eba6:	4613      	mov	r3, r2
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	4413      	add	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	4a1c      	ldr	r2, [pc, #112]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ebb0:	4413      	add	r3, r2
 800ebb2:	4a28      	ldr	r2, [pc, #160]	; (800ec54 <UpdateSIGNALSNames+0x9ac>)
 800ebb4:	6810      	ldr	r0, [r2, #0]
 800ebb6:	6018      	str	r0, [r3, #0]
 800ebb8:	8891      	ldrh	r1, [r2, #4]
 800ebba:	7992      	ldrb	r2, [r2, #6]
 800ebbc:	8099      	strh	r1, [r3, #4]
 800ebbe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	1c5a      	adds	r2, r3, #1
 800ebc4:	71fa      	strb	r2, [r7, #7]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	4a13      	ldr	r2, [pc, #76]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ebd2:	4413      	add	r3, r2
 800ebd4:	4a20      	ldr	r2, [pc, #128]	; (800ec58 <UpdateSIGNALSNames+0x9b0>)
 800ebd6:	461c      	mov	r4, r3
 800ebd8:	4613      	mov	r3, r2
 800ebda:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebdc:	6020      	str	r0, [r4, #0]
 800ebde:	6061      	str	r1, [r4, #4]
 800ebe0:	60a2      	str	r2, [r4, #8]
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800ebe6:	79fb      	ldrb	r3, [r7, #7]
 800ebe8:	1c5a      	adds	r2, r3, #1
 800ebea:	71fa      	strb	r2, [r7, #7]
 800ebec:	461a      	mov	r2, r3
 800ebee:	4613      	mov	r3, r2
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	4413      	add	r3, r2
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	4a0a      	ldr	r2, [pc, #40]	; (800ec20 <UpdateSIGNALSNames+0x978>)
 800ebf8:	4413      	add	r3, r2
 800ebfa:	4a18      	ldr	r2, [pc, #96]	; (800ec5c <UpdateSIGNALSNames+0x9b4>)
 800ebfc:	461c      	mov	r4, r3
 800ebfe:	4613      	mov	r3, r2
 800ec00:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec02:	6020      	str	r0, [r4, #0]
 800ec04:	6061      	str	r1, [r4, #4]
 800ec06:	60a2      	str	r2, [r4, #8]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800ec0c:	79fb      	ldrb	r3, [r7, #7]
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	4b13      	ldr	r3, [pc, #76]	; (800ec60 <UpdateSIGNALSNames+0x9b8>)
 800ec12:	801a      	strh	r2, [r3, #0]


}
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bc90      	pop	{r4, r7}
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20003d4c 	.word	0x20003d4c
 800ec24:	08026564 	.word	0x08026564
 800ec28:	0802656c 	.word	0x0802656c
 800ec2c:	08026574 	.word	0x08026574
 800ec30:	0802657c 	.word	0x0802657c
 800ec34:	08026584 	.word	0x08026584
 800ec38:	0802658c 	.word	0x0802658c
 800ec3c:	08026594 	.word	0x08026594
 800ec40:	0802659c 	.word	0x0802659c
 800ec44:	080265a4 	.word	0x080265a4
 800ec48:	080265ac 	.word	0x080265ac
 800ec4c:	080265b4 	.word	0x080265b4
 800ec50:	080265bc 	.word	0x080265bc
 800ec54:	080265c8 	.word	0x080265c8
 800ec58:	080265d0 	.word	0x080265d0
 800ec5c:	080265e0 	.word	0x080265e0
 800ec60:	2000483c 	.word	0x2000483c

0800ec64 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800ec64:	b5b0      	push	{r4, r5, r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800ec6a:	496f      	ldr	r1, [pc, #444]	; (800ee28 <print_self_DetailsSiemens+0x1c4>)
 800ec6c:	486f      	ldr	r0, [pc, #444]	; (800ee2c <print_self_DetailsSiemens+0x1c8>)
 800ec6e:	f013 fae1 	bl	8022234 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800ec72:	4b6f      	ldr	r3, [pc, #444]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ec74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec78:	4619      	mov	r1, r3
 800ec7a:	486e      	ldr	r0, [pc, #440]	; (800ee34 <print_self_DetailsSiemens+0x1d0>)
 800ec7c:	f013 fada 	bl	8022234 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800ec80:	4b6b      	ldr	r3, [pc, #428]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ec82:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ec86:	4619      	mov	r1, r3
 800ec88:	4b69      	ldr	r3, [pc, #420]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ec8a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ec8e:	461a      	mov	r2, r3
 800ec90:	4b67      	ldr	r3, [pc, #412]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ec92:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ec96:	4618      	mov	r0, r3
 800ec98:	4b65      	ldr	r3, [pc, #404]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ec9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	4603      	mov	r3, r0
 800eca2:	4865      	ldr	r0, [pc, #404]	; (800ee38 <print_self_DetailsSiemens+0x1d4>)
 800eca4:	f013 fac6 	bl	8022234 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800eca8:	4b61      	ldr	r3, [pc, #388]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecaa:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800ecae:	4618      	mov	r0, r3
 800ecb0:	4b5f      	ldr	r3, [pc, #380]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecb2:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800ecb6:	461c      	mov	r4, r3
 800ecb8:	4b5d      	ldr	r3, [pc, #372]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecba:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800ecbe:	461d      	mov	r5, r3
 800ecc0:	4b5b      	ldr	r3, [pc, #364]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecc2:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	4b59      	ldr	r3, [pc, #356]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecca:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4b57      	ldr	r3, [pc, #348]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecd2:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800ecd6:	9302      	str	r3, [sp, #8]
 800ecd8:	9101      	str	r1, [sp, #4]
 800ecda:	9200      	str	r2, [sp, #0]
 800ecdc:	462b      	mov	r3, r5
 800ecde:	4622      	mov	r2, r4
 800ece0:	4601      	mov	r1, r0
 800ece2:	4856      	ldr	r0, [pc, #344]	; (800ee3c <print_self_DetailsSiemens+0x1d8>)
 800ece4:	f013 faa6 	bl	8022234 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800ece8:	4b51      	ldr	r3, [pc, #324]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ecea:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4853      	ldr	r0, [pc, #332]	; (800ee40 <print_self_DetailsSiemens+0x1dc>)
 800ecf2:	f013 fa9f 	bl	8022234 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	71fb      	strb	r3, [r7, #7]
 800ecfa:	e037      	b.n	800ed6c <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	1c59      	adds	r1, r3, #1
 800ed00:	79fb      	ldrb	r3, [r7, #7]
 800ed02:	4a4b      	ldr	r2, [pc, #300]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed04:	33ae      	adds	r3, #174	; 0xae
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	785b      	ldrb	r3, [r3, #1]
 800ed0c:	461c      	mov	r4, r3
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	4a47      	ldr	r2, [pc, #284]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800ed1a:	461d      	mov	r5, r3
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	4a44      	ldr	r2, [pc, #272]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800ed28:	4618      	mov	r0, r3
 800ed2a:	79fb      	ldrb	r3, [r7, #7]
 800ed2c:	4a40      	ldr	r2, [pc, #256]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	9000      	str	r0, [sp, #0]
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	4841      	ldr	r0, [pc, #260]	; (800ee44 <print_self_DetailsSiemens+0x1e0>)
 800ed40:	f013 fa78 	bl	8022234 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800ed44:	79fb      	ldrb	r3, [r7, #7]
 800ed46:	4a3a      	ldr	r2, [pc, #232]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed48:	33b6      	adds	r3, #182	; 0xb6
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	88db      	ldrh	r3, [r3, #6]
 800ed50:	4619      	mov	r1, r3
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	4a36      	ldr	r2, [pc, #216]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4413      	add	r3, r2
 800ed5a:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800ed5e:	461a      	mov	r2, r3
 800ed60:	4839      	ldr	r0, [pc, #228]	; (800ee48 <print_self_DetailsSiemens+0x1e4>)
 800ed62:	f013 fa67 	bl	8022234 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ed66:	79fb      	ldrb	r3, [r7, #7]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	4b30      	ldr	r3, [pc, #192]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed72:	79fa      	ldrb	r2, [r7, #7]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d3c1      	bcc.n	800ecfc <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800ed78:	4b2d      	ldr	r3, [pc, #180]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed7a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ed7e:	4619      	mov	r1, r3
 800ed80:	4832      	ldr	r0, [pc, #200]	; (800ee4c <print_self_DetailsSiemens+0x1e8>)
 800ed82:	f013 fa57 	bl	8022234 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800ed86:	4b2a      	ldr	r3, [pc, #168]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed88:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4830      	ldr	r0, [pc, #192]	; (800ee50 <print_self_DetailsSiemens+0x1ec>)
 800ed90:	f013 fa50 	bl	8022234 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800ed94:	4b26      	ldr	r3, [pc, #152]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ed96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	482d      	ldr	r0, [pc, #180]	; (800ee54 <print_self_DetailsSiemens+0x1f0>)
 800ed9e:	f013 fa49 	bl	8022234 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800eda2:	4b23      	ldr	r3, [pc, #140]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800eda4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800eda8:	4619      	mov	r1, r3
 800edaa:	482a      	ldr	r0, [pc, #168]	; (800ee54 <print_self_DetailsSiemens+0x1f0>)
 800edac:	f013 fa42 	bl	8022234 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800edb0:	4b1f      	ldr	r3, [pc, #124]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800edb2:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800edb6:	4619      	mov	r1, r3
 800edb8:	4827      	ldr	r0, [pc, #156]	; (800ee58 <print_self_DetailsSiemens+0x1f4>)
 800edba:	f013 fa3b 	bl	8022234 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800edbe:	4b1c      	ldr	r3, [pc, #112]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800edc0:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800edc4:	4619      	mov	r1, r3
 800edc6:	4825      	ldr	r0, [pc, #148]	; (800ee5c <print_self_DetailsSiemens+0x1f8>)
 800edc8:	f013 fa34 	bl	8022234 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800edcc:	4b18      	ldr	r3, [pc, #96]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800edce:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800edd2:	4619      	mov	r1, r3
 800edd4:	4822      	ldr	r0, [pc, #136]	; (800ee60 <print_self_DetailsSiemens+0x1fc>)
 800edd6:	f013 fa2d 	bl	8022234 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800edda:	4b15      	ldr	r3, [pc, #84]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800eddc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ede0:	4619      	mov	r1, r3
 800ede2:	4820      	ldr	r0, [pc, #128]	; (800ee64 <print_self_DetailsSiemens+0x200>)
 800ede4:	f013 fa26 	bl	8022234 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800ede8:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800edea:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800edee:	4619      	mov	r1, r3
 800edf0:	481d      	ldr	r0, [pc, #116]	; (800ee68 <print_self_DetailsSiemens+0x204>)
 800edf2:	f013 fa1f 	bl	8022234 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800edf6:	4b0e      	ldr	r3, [pc, #56]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800edf8:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800edfc:	4619      	mov	r1, r3
 800edfe:	481b      	ldr	r0, [pc, #108]	; (800ee6c <print_self_DetailsSiemens+0x208>)
 800ee00:	f013 fa18 	bl	8022234 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800ee04:	4b0a      	ldr	r3, [pc, #40]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ee06:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4818      	ldr	r0, [pc, #96]	; (800ee70 <print_self_DetailsSiemens+0x20c>)
 800ee0e:	f013 fa11 	bl	8022234 <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800ee12:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <print_self_DetailsSiemens+0x1cc>)
 800ee14:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4816      	ldr	r0, [pc, #88]	; (800ee74 <print_self_DetailsSiemens+0x210>)
 800ee1c:	f013 fa0a 	bl	8022234 <iprintf>

}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bdb0      	pop	{r4, r5, r7, pc}
 800ee28:	20000305 	.word	0x20000305
 800ee2c:	080265f0 	.word	0x080265f0
 800ee30:	20000304 	.word	0x20000304
 800ee34:	08026604 	.word	0x08026604
 800ee38:	08026614 	.word	0x08026614
 800ee3c:	0802662c 	.word	0x0802662c
 800ee40:	08026654 	.word	0x08026654
 800ee44:	0802666c 	.word	0x0802666c
 800ee48:	08026680 	.word	0x08026680
 800ee4c:	08026698 	.word	0x08026698
 800ee50:	080266a8 	.word	0x080266a8
 800ee54:	080266bc 	.word	0x080266bc
 800ee58:	080266d0 	.word	0x080266d0
 800ee5c:	080266e0 	.word	0x080266e0
 800ee60:	080266f0 	.word	0x080266f0
 800ee64:	08026704 	.word	0x08026704
 800ee68:	0802671c 	.word	0x0802671c
 800ee6c:	08026734 	.word	0x08026734
 800ee70:	08026750 	.word	0x08026750
 800ee74:	0802676c 	.word	0x0802676c

0800ee78 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ee80:	f006 fad6 	bl	8015430 <HAL_GetTick>
 800ee84:	4602      	mov	r2, r0
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	bfb8      	it	lt
 800ee8e:	425b      	neglt	r3, r3
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ee9e:	23f3      	movs	r3, #243	; 0xf3
 800eea0:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800eea2:	f010 fcd1 	bl	801f848 <udp_new>
 800eea6:	4603      	mov	r3, r0
 800eea8:	4a7a      	ldr	r2, [pc, #488]	; (800f094 <udpServer_init+0x1fc>)
 800eeaa:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800eeac:	4b7a      	ldr	r3, [pc, #488]	; (800f098 <udpServer_init+0x200>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d002      	beq.n	800eeba <udpServer_init+0x22>
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d074      	beq.n	800efa2 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800eeb8:	e0e9      	b.n	800f08e <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800eeba:	4b77      	ldr	r3, [pc, #476]	; (800f098 <udpServer_init+0x200>)
 800eebc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eec0:	061a      	lsls	r2, r3, #24
 800eec2:	4b75      	ldr	r3, [pc, #468]	; (800f098 <udpServer_init+0x200>)
 800eec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eec8:	041b      	lsls	r3, r3, #16
 800eeca:	431a      	orrs	r2, r3
 800eecc:	4b72      	ldr	r3, [pc, #456]	; (800f098 <udpServer_init+0x200>)
 800eece:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eed2:	021b      	lsls	r3, r3, #8
 800eed4:	4313      	orrs	r3, r2
 800eed6:	4a70      	ldr	r2, [pc, #448]	; (800f098 <udpServer_init+0x200>)
 800eed8:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800eedc:	4313      	orrs	r3, r2
 800eede:	061a      	lsls	r2, r3, #24
 800eee0:	4b6d      	ldr	r3, [pc, #436]	; (800f098 <udpServer_init+0x200>)
 800eee2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eee6:	0619      	lsls	r1, r3, #24
 800eee8:	4b6b      	ldr	r3, [pc, #428]	; (800f098 <udpServer_init+0x200>)
 800eeea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eeee:	041b      	lsls	r3, r3, #16
 800eef0:	4319      	orrs	r1, r3
 800eef2:	4b69      	ldr	r3, [pc, #420]	; (800f098 <udpServer_init+0x200>)
 800eef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eef8:	021b      	lsls	r3, r3, #8
 800eefa:	430b      	orrs	r3, r1
 800eefc:	4966      	ldr	r1, [pc, #408]	; (800f098 <udpServer_init+0x200>)
 800eefe:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef02:	430b      	orrs	r3, r1
 800ef04:	021b      	lsls	r3, r3, #8
 800ef06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef0a:	431a      	orrs	r2, r3
 800ef0c:	4b62      	ldr	r3, [pc, #392]	; (800f098 <udpServer_init+0x200>)
 800ef0e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef12:	0619      	lsls	r1, r3, #24
 800ef14:	4b60      	ldr	r3, [pc, #384]	; (800f098 <udpServer_init+0x200>)
 800ef16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef1a:	041b      	lsls	r3, r3, #16
 800ef1c:	4319      	orrs	r1, r3
 800ef1e:	4b5e      	ldr	r3, [pc, #376]	; (800f098 <udpServer_init+0x200>)
 800ef20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef24:	021b      	lsls	r3, r3, #8
 800ef26:	430b      	orrs	r3, r1
 800ef28:	495b      	ldr	r1, [pc, #364]	; (800f098 <udpServer_init+0x200>)
 800ef2a:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef2e:	430b      	orrs	r3, r1
 800ef30:	0a1b      	lsrs	r3, r3, #8
 800ef32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef36:	431a      	orrs	r2, r3
 800ef38:	4b57      	ldr	r3, [pc, #348]	; (800f098 <udpServer_init+0x200>)
 800ef3a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef3e:	0619      	lsls	r1, r3, #24
 800ef40:	4b55      	ldr	r3, [pc, #340]	; (800f098 <udpServer_init+0x200>)
 800ef42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef46:	041b      	lsls	r3, r3, #16
 800ef48:	4319      	orrs	r1, r3
 800ef4a:	4b53      	ldr	r3, [pc, #332]	; (800f098 <udpServer_init+0x200>)
 800ef4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	430b      	orrs	r3, r1
 800ef54:	4950      	ldr	r1, [pc, #320]	; (800f098 <udpServer_init+0x200>)
 800ef56:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef5a:	430b      	orrs	r3, r1
 800ef5c:	0e1b      	lsrs	r3, r3, #24
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800ef62:	4b4c      	ldr	r3, [pc, #304]	; (800f094 <udpServer_init+0x1fc>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a4c      	ldr	r2, [pc, #304]	; (800f098 <udpServer_init+0x200>)
 800ef68:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f010 fb80 	bl	801f674 <udp_bind>
 800ef74:	4603      	mov	r3, r0
 800ef76:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800ef78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d107      	bne.n	800ef90 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800ef80:	4b44      	ldr	r3, [pc, #272]	; (800f094 <udpServer_init+0x1fc>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2200      	movs	r2, #0
 800ef86:	4945      	ldr	r1, [pc, #276]	; (800f09c <udpServer_init+0x204>)
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f010 fbfb 	bl	801f784 <udp_recv>
		break;
 800ef8e:	e07c      	b.n	800f08a <udpServer_init+0x1f2>
			printf("N-OK\n");
 800ef90:	4843      	ldr	r0, [pc, #268]	; (800f0a0 <udpServer_init+0x208>)
 800ef92:	f013 f9eb 	bl	802236c <puts>
			udp_remove(upcb);
 800ef96:	4b3f      	ldr	r3, [pc, #252]	; (800f094 <udpServer_init+0x1fc>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f010 fc12 	bl	801f7c4 <udp_remove>
		break;
 800efa0:	e073      	b.n	800f08a <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800efa2:	4b3d      	ldr	r3, [pc, #244]	; (800f098 <udpServer_init+0x200>)
 800efa4:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800efa8:	061a      	lsls	r2, r3, #24
 800efaa:	4b3b      	ldr	r3, [pc, #236]	; (800f098 <udpServer_init+0x200>)
 800efac:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800efb0:	041b      	lsls	r3, r3, #16
 800efb2:	431a      	orrs	r2, r3
 800efb4:	4b38      	ldr	r3, [pc, #224]	; (800f098 <udpServer_init+0x200>)
 800efb6:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800efba:	021b      	lsls	r3, r3, #8
 800efbc:	4313      	orrs	r3, r2
 800efbe:	4a36      	ldr	r2, [pc, #216]	; (800f098 <udpServer_init+0x200>)
 800efc0:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800efc4:	4313      	orrs	r3, r2
 800efc6:	061a      	lsls	r2, r3, #24
 800efc8:	4b33      	ldr	r3, [pc, #204]	; (800f098 <udpServer_init+0x200>)
 800efca:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800efce:	0619      	lsls	r1, r3, #24
 800efd0:	4b31      	ldr	r3, [pc, #196]	; (800f098 <udpServer_init+0x200>)
 800efd2:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800efd6:	041b      	lsls	r3, r3, #16
 800efd8:	4319      	orrs	r1, r3
 800efda:	4b2f      	ldr	r3, [pc, #188]	; (800f098 <udpServer_init+0x200>)
 800efdc:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800efe0:	021b      	lsls	r3, r3, #8
 800efe2:	430b      	orrs	r3, r1
 800efe4:	492c      	ldr	r1, [pc, #176]	; (800f098 <udpServer_init+0x200>)
 800efe6:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800efea:	430b      	orrs	r3, r1
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eff2:	431a      	orrs	r2, r3
 800eff4:	4b28      	ldr	r3, [pc, #160]	; (800f098 <udpServer_init+0x200>)
 800eff6:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800effa:	0619      	lsls	r1, r3, #24
 800effc:	4b26      	ldr	r3, [pc, #152]	; (800f098 <udpServer_init+0x200>)
 800effe:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f002:	041b      	lsls	r3, r3, #16
 800f004:	4319      	orrs	r1, r3
 800f006:	4b24      	ldr	r3, [pc, #144]	; (800f098 <udpServer_init+0x200>)
 800f008:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f00c:	021b      	lsls	r3, r3, #8
 800f00e:	430b      	orrs	r3, r1
 800f010:	4921      	ldr	r1, [pc, #132]	; (800f098 <udpServer_init+0x200>)
 800f012:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f016:	430b      	orrs	r3, r1
 800f018:	0a1b      	lsrs	r3, r3, #8
 800f01a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f01e:	431a      	orrs	r2, r3
 800f020:	4b1d      	ldr	r3, [pc, #116]	; (800f098 <udpServer_init+0x200>)
 800f022:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f026:	0619      	lsls	r1, r3, #24
 800f028:	4b1b      	ldr	r3, [pc, #108]	; (800f098 <udpServer_init+0x200>)
 800f02a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f02e:	041b      	lsls	r3, r3, #16
 800f030:	4319      	orrs	r1, r3
 800f032:	4b19      	ldr	r3, [pc, #100]	; (800f098 <udpServer_init+0x200>)
 800f034:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f038:	021b      	lsls	r3, r3, #8
 800f03a:	430b      	orrs	r3, r1
 800f03c:	4916      	ldr	r1, [pc, #88]	; (800f098 <udpServer_init+0x200>)
 800f03e:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f042:	430b      	orrs	r3, r1
 800f044:	0e1b      	lsrs	r3, r3, #24
 800f046:	4313      	orrs	r3, r2
 800f048:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800f04a:	4b12      	ldr	r3, [pc, #72]	; (800f094 <udpServer_init+0x1fc>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a12      	ldr	r2, [pc, #72]	; (800f098 <udpServer_init+0x200>)
 800f050:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800f054:	4639      	mov	r1, r7
 800f056:	4618      	mov	r0, r3
 800f058:	f010 fb0c 	bl	801f674 <udp_bind>
 800f05c:	4603      	mov	r3, r0
 800f05e:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d107      	bne.n	800f078 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f068:	4b0a      	ldr	r3, [pc, #40]	; (800f094 <udpServer_init+0x1fc>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2200      	movs	r2, #0
 800f06e:	490b      	ldr	r1, [pc, #44]	; (800f09c <udpServer_init+0x204>)
 800f070:	4618      	mov	r0, r3
 800f072:	f010 fb87 	bl	801f784 <udp_recv>
		break;
 800f076:	e007      	b.n	800f088 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800f078:	4809      	ldr	r0, [pc, #36]	; (800f0a0 <udpServer_init+0x208>)
 800f07a:	f013 f977 	bl	802236c <puts>
			udp_remove(upcb);
 800f07e:	4b05      	ldr	r3, [pc, #20]	; (800f094 <udpServer_init+0x1fc>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	f010 fb9e 	bl	801f7c4 <udp_remove>
		break;
 800f088:	bf00      	nop
	}

	udpClient_connect();
 800f08a:	f000 f939 	bl	800f300 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	200052e8 	.word	0x200052e8
 800f098:	20000304 	.word	0x20000304
 800f09c:	0800f0a5 	.word	0x0800f0a5
 800f0a0:	0802678c 	.word	0x0802678c

0800f0a4 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
 800f0b0:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	77fb      	strb	r3, [r7, #31]
	uint16_t Length = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	83bb      	strh	r3, [r7, #28]
	uint8_t IpMatched = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	77bb      	strb	r3, [r7, #30]



	char *SendingIP = ipaddr_ntoa(addr);
 800f0be:	6838      	ldr	r0, [r7, #0]
 800f0c0:	f011 ffc0 	bl	8021044 <ip4addr_ntoa>
 800f0c4:	61b8      	str	r0, [r7, #24]

	printf("\nFROM IP:%s\n",SendingIP);
 800f0c6:	69b9      	ldr	r1, [r7, #24]
 800f0c8:	487d      	ldr	r0, [pc, #500]	; (800f2c0 <UDP_Receive_Callback+0x21c>)
 800f0ca:	f013 f8b3 	bl	8022234 <iprintf>
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800f0ce:	4a7d      	ldr	r2, [pc, #500]	; (800f2c4 <UDP_Receive_Callback+0x220>)
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	895b      	ldrh	r3, [r3, #10]
 800f0da:	83bb      	strh	r3, [r7, #28]
	switch(EI_data.ProtocolType)
 800f0dc:	4b7a      	ldr	r3, [pc, #488]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d02e      	beq.n	800f142 <UDP_Receive_Callback+0x9e>
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d05c      	beq.n	800f1a2 <UDP_Receive_Callback+0xfe>
 800f0e8:	e080      	b.n	800f1ec <UDP_Receive_Callback+0x148>
		//			printf("%c\n",(char *)p->payload + i);
		//
		//		}
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f0ea:	4b76      	ldr	r3, [pc, #472]	; (800f2c4 <UDP_Receive_Callback+0x220>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	7ffb      	ldrb	r3, [r7, #31]
 800f0f0:	4976      	ldr	r1, [pc, #472]	; (800f2cc <UDP_Receive_Callback+0x228>)
 800f0f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d120      	bne.n	800f13c <UDP_Receive_Callback+0x98>
			{
				if(IpMatched == 0)
 800f0fa:	7fbb      	ldrb	r3, [r7, #30]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <UDP_Receive_Callback+0x70>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800f100:	6838      	ldr	r0, [r7, #0]
 800f102:	f011 ff9f 	bl	8021044 <ip4addr_ntoa>
 800f106:	4603      	mov	r3, r0
 800f108:	4619      	mov	r1, r3
 800f10a:	4871      	ldr	r0, [pc, #452]	; (800f2d0 <UDP_Receive_Callback+0x22c>)
 800f10c:	f013 f892 	bl	8022234 <iprintf>
					IpMatched = 1;
 800f110:	2301      	movs	r3, #1
 800f112:	77bb      	strb	r3, [r7, #30]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800f114:	7ffb      	ldrb	r3, [r7, #31]
 800f116:	085b      	lsrs	r3, r3, #1
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	4619      	mov	r1, r3
 800f11c:	4a6d      	ldr	r2, [pc, #436]	; (800f2d4 <UDP_Receive_Callback+0x230>)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800f126:	7ffb      	ldrb	r3, [r7, #31]
 800f128:	f003 0301 	and.w	r3, r3, #1
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	7ffa      	ldrb	r2, [r7, #31]
 800f130:	0852      	lsrs	r2, r2, #1
 800f132:	b2d2      	uxtb	r2, r2
 800f134:	3301      	adds	r3, #1
 800f136:	b2d9      	uxtb	r1, r3
 800f138:	4b67      	ldr	r3, [pc, #412]	; (800f2d8 <UDP_Receive_Callback+0x234>)
 800f13a:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f13c:	7ffb      	ldrb	r3, [r7, #31]
 800f13e:	3301      	adds	r3, #1
 800f140:	77fb      	strb	r3, [r7, #31]
 800f142:	4b61      	ldr	r3, [pc, #388]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f148:	7ffa      	ldrb	r2, [r7, #31]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d3cd      	bcc.n	800f0ea <UDP_Receive_Callback+0x46>
				//break;
			}
		}
		if(Traverser>=EI_data.Hitachi_st.No_of_IP_s)
 800f14e:	4b5e      	ldr	r3, [pc, #376]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f154:	7ffa      	ldrb	r2, [r7, #31]
 800f156:	429a      	cmp	r2, r3
 800f158:	d34c      	bcc.n	800f1f4 <UDP_Receive_Callback+0x150>
		{
			memcpy(DatRequestArray,((char *)p->payload),p->len);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6859      	ldr	r1, [r3, #4]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	895b      	ldrh	r3, [r3, #10]
 800f162:	461a      	mov	r2, r3
 800f164:	485d      	ldr	r0, [pc, #372]	; (800f2dc <UDP_Receive_Callback+0x238>)
 800f166:	f012 ff55 	bl	8022014 <memcpy>
			DatRequestLength = p->len;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	895b      	ldrh	r3, [r3, #10]
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	4b5b      	ldr	r3, [pc, #364]	; (800f2e0 <UDP_Receive_Callback+0x23c>)
 800f172:	701a      	strb	r2, [r3, #0]
			DatSourceIP = *addr;
 800f174:	4a5b      	ldr	r2, [pc, #364]	; (800f2e4 <UDP_Receive_Callback+0x240>)
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6013      	str	r3, [r2, #0]
			DatSourcePort = port;
 800f17c:	4a5a      	ldr	r2, [pc, #360]	; (800f2e8 <UDP_Receive_Callback+0x244>)
 800f17e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f180:	8013      	strh	r3, [r2, #0]
			printf("Here\n");
 800f182:	485a      	ldr	r0, [pc, #360]	; (800f2ec <UDP_Receive_Callback+0x248>)
 800f184:	f013 f8f2 	bl	802236c <puts>


			pbuf_free(p);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f00f fb1b 	bl	801e7c4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800f18e:	6838      	ldr	r0, [r7, #0]
 800f190:	f011 ff58 	bl	8021044 <ip4addr_ntoa>
 800f194:	4601      	mov	r1, r0
 800f196:	7ffb      	ldrb	r3, [r7, #31]
 800f198:	461a      	mov	r2, r3
 800f19a:	4855      	ldr	r0, [pc, #340]	; (800f2f0 <UDP_Receive_Callback+0x24c>)
 800f19c:	f013 f84a 	bl	8022234 <iprintf>
			return;
 800f1a0:	e08a      	b.n	800f2b8 <UDP_Receive_Callback+0x214>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	77fb      	strb	r3, [r7, #31]
 800f1a6:	e00a      	b.n	800f1be <UDP_Receive_Callback+0x11a>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f1a8:	4b46      	ldr	r3, [pc, #280]	; (800f2c4 <UDP_Receive_Callback+0x220>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	7ffb      	ldrb	r3, [r7, #31]
 800f1ae:	4947      	ldr	r1, [pc, #284]	; (800f2cc <UDP_Receive_Callback+0x228>)
 800f1b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d009      	beq.n	800f1cc <UDP_Receive_Callback+0x128>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f1b8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	77fb      	strb	r3, [r7, #31]
 800f1be:	4b42      	ldr	r3, [pc, #264]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f1c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f1c4:	7ffa      	ldrb	r2, [r7, #31]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d3ee      	bcc.n	800f1a8 <UDP_Receive_Callback+0x104>
 800f1ca:	e000      	b.n	800f1ce <UDP_Receive_Callback+0x12a>
			{
				break;
 800f1cc:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800f1ce:	4b3e      	ldr	r3, [pc, #248]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f1d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f1d4:	7ffa      	ldrb	r2, [r7, #31]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d90e      	bls.n	800f1f8 <UDP_Receive_Callback+0x154>
		{
			pbuf_free(p);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f00f faf2 	bl	801e7c4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800f1e0:	7ffb      	ldrb	r3, [r7, #31]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4843      	ldr	r0, [pc, #268]	; (800f2f4 <UDP_Receive_Callback+0x250>)
 800f1e6:	f013 f825 	bl	8022234 <iprintf>
			return;
 800f1ea:	e065      	b.n	800f2b8 <UDP_Receive_Callback+0x214>
		}
		break;
	default:
		pbuf_free(p);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f00f fae9 	bl	801e7c4 <pbuf_free>
		return;
 800f1f2:	e061      	b.n	800f2b8 <UDP_Receive_Callback+0x214>
		break;
 800f1f4:	bf00      	nop
 800f1f6:	e000      	b.n	800f1fa <UDP_Receive_Callback+0x156>
		break;
 800f1f8:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800f1fa:	4b33      	ldr	r3, [pc, #204]	; (800f2c8 <UDP_Receive_Callback+0x224>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d002      	beq.n	800f208 <UDP_Receive_Callback+0x164>
 800f202:	2b02      	cmp	r3, #2
 800f204:	d049      	beq.n	800f29a <UDP_Receive_Callback+0x1f6>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800f206:	e054      	b.n	800f2b2 <UDP_Receive_Callback+0x20e>
		Interrupt_clock = HAL_GetTick();
 800f208:	f006 f912 	bl	8015430 <HAL_GetTick>
 800f20c:	4603      	mov	r3, r0
 800f20e:	4a3a      	ldr	r2, [pc, #232]	; (800f2f8 <UDP_Receive_Callback+0x254>)
 800f210:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800f212:	4b3a      	ldr	r3, [pc, #232]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f214:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f218:	461a      	mov	r2, r3
 800f21a:	8bbb      	ldrh	r3, [r7, #28]
 800f21c:	4413      	add	r3, r2
 800f21e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f222:	dd24      	ble.n	800f26e <UDP_Receive_Callback+0x1ca>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800f224:	4b35      	ldr	r3, [pc, #212]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f226:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f22a:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800f22e:	82fb      	strh	r3, [r7, #22]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800f230:	4b32      	ldr	r3, [pc, #200]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f232:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f236:	461a      	mov	r2, r3
 800f238:	4b30      	ldr	r3, [pc, #192]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f23a:	18d0      	adds	r0, r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	8afa      	ldrh	r2, [r7, #22]
 800f242:	4619      	mov	r1, r3
 800f244:	f012 fee6 	bl	8022014 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	8afb      	ldrh	r3, [r7, #22]
 800f24e:	18d1      	adds	r1, r2, r3
 800f250:	8bba      	ldrh	r2, [r7, #28]
 800f252:	8afb      	ldrh	r3, [r7, #22]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	461a      	mov	r2, r3
 800f258:	4828      	ldr	r0, [pc, #160]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f25a:	f012 fedb 	bl	8022014 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800f25e:	8bba      	ldrh	r2, [r7, #28]
 800f260:	8afb      	ldrh	r3, [r7, #22]
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	b29a      	uxth	r2, r3
 800f266:	4b25      	ldr	r3, [pc, #148]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f268:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f26c:	e021      	b.n	800f2b2 <UDP_Receive_Callback+0x20e>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800f26e:	4b23      	ldr	r3, [pc, #140]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f270:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f274:	461a      	mov	r2, r3
 800f276:	4b21      	ldr	r3, [pc, #132]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f278:	18d0      	adds	r0, r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	8bba      	ldrh	r2, [r7, #28]
 800f280:	4619      	mov	r1, r3
 800f282:	f012 fec7 	bl	8022014 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800f286:	4b1d      	ldr	r3, [pc, #116]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f288:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800f28c:	8bbb      	ldrh	r3, [r7, #28]
 800f28e:	4413      	add	r3, r2
 800f290:	b29a      	uxth	r2, r3
 800f292:	4b1a      	ldr	r3, [pc, #104]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f294:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f298:	e00b      	b.n	800f2b2 <UDP_Receive_Callback+0x20e>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	8bba      	ldrh	r2, [r7, #28]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4816      	ldr	r0, [pc, #88]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f2a4:	f012 feb6 	bl	8022014 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800f2a8:	4a14      	ldr	r2, [pc, #80]	; (800f2fc <UDP_Receive_Callback+0x258>)
 800f2aa:	8bbb      	ldrh	r3, [r7, #28]
 800f2ac:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800f2b0:	bf00      	nop
	}


	pbuf_free(p);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f00f fa86 	bl	801e7c4 <pbuf_free>
}
 800f2b8:	3720      	adds	r7, #32
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	08026794 	.word	0x08026794
 800f2c4:	20005290 	.word	0x20005290
 800f2c8:	20000304 	.word	0x20000304
 800f2cc:	20005240 	.word	0x20005240
 800f2d0:	080267a4 	.word	0x080267a4
 800f2d4:	20001058 	.word	0x20001058
 800f2d8:	20001080 	.word	0x20001080
 800f2dc:	200052bc 	.word	0x200052bc
 800f2e0:	200052dc 	.word	0x200052dc
 800f2e4:	200052e0 	.word	0x200052e0
 800f2e8:	200052e4 	.word	0x200052e4
 800f2ec:	080267b0 	.word	0x080267b0
 800f2f0:	080267b8 	.word	0x080267b8
 800f2f4:	080267e4 	.word	0x080267e4
 800f2f8:	20000e3c 	.word	0x20000e3c
 800f2fc:	20004c3c 	.word	0x20004c3c

0800f300 <udpClient_connect>:
void udpClient_connect(void)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800f30a:	4ba6      	ldr	r3, [pc, #664]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d003      	beq.n	800f31a <udpClient_connect+0x1a>
 800f312:	2b02      	cmp	r3, #2
 800f314:	f000 80a1 	beq.w	800f45a <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800f318:	e13f      	b.n	800f59a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f31a:	2300      	movs	r3, #0
 800f31c:	71fb      	strb	r3, [r7, #7]
 800f31e:	e094      	b.n	800f44a <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f320:	79fb      	ldrb	r3, [r7, #7]
 800f322:	4aa0      	ldr	r2, [pc, #640]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f324:	3312      	adds	r3, #18
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	78db      	ldrb	r3, [r3, #3]
 800f32c:	061a      	lsls	r2, r3, #24
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	499c      	ldr	r1, [pc, #624]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	440b      	add	r3, r1
 800f336:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f33a:	041b      	lsls	r3, r3, #16
 800f33c:	431a      	orrs	r2, r3
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	4998      	ldr	r1, [pc, #608]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	440b      	add	r3, r1
 800f346:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	431a      	orrs	r2, r3
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	4994      	ldr	r1, [pc, #592]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	440b      	add	r3, r1
 800f356:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f35a:	4313      	orrs	r3, r2
 800f35c:	061a      	lsls	r2, r3, #24
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	4990      	ldr	r1, [pc, #576]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f362:	3312      	adds	r3, #18
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	440b      	add	r3, r1
 800f368:	78db      	ldrb	r3, [r3, #3]
 800f36a:	0619      	lsls	r1, r3, #24
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	488d      	ldr	r0, [pc, #564]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4403      	add	r3, r0
 800f374:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f378:	041b      	lsls	r3, r3, #16
 800f37a:	4319      	orrs	r1, r3
 800f37c:	79fb      	ldrb	r3, [r7, #7]
 800f37e:	4889      	ldr	r0, [pc, #548]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	4403      	add	r3, r0
 800f384:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f388:	021b      	lsls	r3, r3, #8
 800f38a:	4319      	orrs	r1, r3
 800f38c:	79fb      	ldrb	r3, [r7, #7]
 800f38e:	4885      	ldr	r0, [pc, #532]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4403      	add	r3, r0
 800f394:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f398:	430b      	orrs	r3, r1
 800f39a:	021b      	lsls	r3, r3, #8
 800f39c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3a0:	431a      	orrs	r2, r3
 800f3a2:	79fb      	ldrb	r3, [r7, #7]
 800f3a4:	497f      	ldr	r1, [pc, #508]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3a6:	3312      	adds	r3, #18
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	440b      	add	r3, r1
 800f3ac:	78db      	ldrb	r3, [r3, #3]
 800f3ae:	0619      	lsls	r1, r3, #24
 800f3b0:	79fb      	ldrb	r3, [r7, #7]
 800f3b2:	487c      	ldr	r0, [pc, #496]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	4403      	add	r3, r0
 800f3b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f3bc:	041b      	lsls	r3, r3, #16
 800f3be:	4319      	orrs	r1, r3
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	4878      	ldr	r0, [pc, #480]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	4403      	add	r3, r0
 800f3c8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	4319      	orrs	r1, r3
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	4874      	ldr	r0, [pc, #464]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4403      	add	r3, r0
 800f3d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f3dc:	430b      	orrs	r3, r1
 800f3de:	0a1b      	lsrs	r3, r3, #8
 800f3e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3e4:	ea42 0103 	orr.w	r1, r2, r3
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	4a6e      	ldr	r2, [pc, #440]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3ec:	3312      	adds	r3, #18
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	78db      	ldrb	r3, [r3, #3]
 800f3f4:	061a      	lsls	r2, r3, #24
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	486a      	ldr	r0, [pc, #424]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4403      	add	r3, r0
 800f3fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f402:	041b      	lsls	r3, r3, #16
 800f404:	431a      	orrs	r2, r3
 800f406:	79fb      	ldrb	r3, [r7, #7]
 800f408:	4866      	ldr	r0, [pc, #408]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4403      	add	r3, r0
 800f40e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f412:	021b      	lsls	r3, r3, #8
 800f414:	431a      	orrs	r2, r3
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	4862      	ldr	r0, [pc, #392]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4403      	add	r3, r0
 800f41e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f422:	4313      	orrs	r3, r2
 800f424:	0e1a      	lsrs	r2, r3, #24
 800f426:	79fb      	ldrb	r3, [r7, #7]
 800f428:	430a      	orrs	r2, r1
 800f42a:	495f      	ldr	r1, [pc, #380]	; (800f5a8 <udpClient_connect+0x2a8>)
 800f42c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	79fa      	ldrb	r2, [r7, #7]
 800f434:	495b      	ldr	r1, [pc, #364]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	440b      	add	r3, r1
 800f43a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800f43e:	4b5b      	ldr	r3, [pc, #364]	; (800f5ac <udpClient_connect+0x2ac>)
 800f440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f444:	79fb      	ldrb	r3, [r7, #7]
 800f446:	3301      	adds	r3, #1
 800f448:	71fb      	strb	r3, [r7, #7]
 800f44a:	4b56      	ldr	r3, [pc, #344]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f44c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f450:	79fa      	ldrb	r2, [r7, #7]
 800f452:	429a      	cmp	r2, r3
 800f454:	f4ff af64 	bcc.w	800f320 <udpClient_connect+0x20>
		break;
 800f458:	e09f      	b.n	800f59a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f45a:	2300      	movs	r3, #0
 800f45c:	71fb      	strb	r3, [r7, #7]
 800f45e:	e094      	b.n	800f58a <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	4a50      	ldr	r2, [pc, #320]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f464:	33ae      	adds	r3, #174	; 0xae
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	785b      	ldrb	r3, [r3, #1]
 800f46c:	061a      	lsls	r2, r3, #24
 800f46e:	79fb      	ldrb	r3, [r7, #7]
 800f470:	494c      	ldr	r1, [pc, #304]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	440b      	add	r3, r1
 800f476:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f47a:	041b      	lsls	r3, r3, #16
 800f47c:	431a      	orrs	r2, r3
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	4948      	ldr	r1, [pc, #288]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	440b      	add	r3, r1
 800f486:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f48a:	021b      	lsls	r3, r3, #8
 800f48c:	431a      	orrs	r2, r3
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	4944      	ldr	r1, [pc, #272]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	440b      	add	r3, r1
 800f496:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f49a:	4313      	orrs	r3, r2
 800f49c:	061a      	lsls	r2, r3, #24
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	4940      	ldr	r1, [pc, #256]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4a2:	33ae      	adds	r3, #174	; 0xae
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	785b      	ldrb	r3, [r3, #1]
 800f4aa:	0619      	lsls	r1, r3, #24
 800f4ac:	79fb      	ldrb	r3, [r7, #7]
 800f4ae:	483d      	ldr	r0, [pc, #244]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4403      	add	r3, r0
 800f4b4:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f4b8:	041b      	lsls	r3, r3, #16
 800f4ba:	4319      	orrs	r1, r3
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	4839      	ldr	r0, [pc, #228]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4403      	add	r3, r0
 800f4c4:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f4c8:	021b      	lsls	r3, r3, #8
 800f4ca:	4319      	orrs	r1, r3
 800f4cc:	79fb      	ldrb	r3, [r7, #7]
 800f4ce:	4835      	ldr	r0, [pc, #212]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4403      	add	r3, r0
 800f4d4:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f4d8:	430b      	orrs	r3, r1
 800f4da:	021b      	lsls	r3, r3, #8
 800f4dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4e0:	431a      	orrs	r2, r3
 800f4e2:	79fb      	ldrb	r3, [r7, #7]
 800f4e4:	492f      	ldr	r1, [pc, #188]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4e6:	33ae      	adds	r3, #174	; 0xae
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	440b      	add	r3, r1
 800f4ec:	785b      	ldrb	r3, [r3, #1]
 800f4ee:	0619      	lsls	r1, r3, #24
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	482c      	ldr	r0, [pc, #176]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4403      	add	r3, r0
 800f4f8:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f4fc:	041b      	lsls	r3, r3, #16
 800f4fe:	4319      	orrs	r1, r3
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	4828      	ldr	r0, [pc, #160]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4403      	add	r3, r0
 800f508:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f50c:	021b      	lsls	r3, r3, #8
 800f50e:	4319      	orrs	r1, r3
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	4824      	ldr	r0, [pc, #144]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4403      	add	r3, r0
 800f518:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f51c:	430b      	orrs	r3, r1
 800f51e:	0a1b      	lsrs	r3, r3, #8
 800f520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f524:	ea42 0103 	orr.w	r1, r2, r3
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	4a1e      	ldr	r2, [pc, #120]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f52c:	33ae      	adds	r3, #174	; 0xae
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	785b      	ldrb	r3, [r3, #1]
 800f534:	061a      	lsls	r2, r3, #24
 800f536:	79fb      	ldrb	r3, [r7, #7]
 800f538:	481a      	ldr	r0, [pc, #104]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4403      	add	r3, r0
 800f53e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f542:	041b      	lsls	r3, r3, #16
 800f544:	431a      	orrs	r2, r3
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	4816      	ldr	r0, [pc, #88]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	4403      	add	r3, r0
 800f54e:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f552:	021b      	lsls	r3, r3, #8
 800f554:	431a      	orrs	r2, r3
 800f556:	79fb      	ldrb	r3, [r7, #7]
 800f558:	4812      	ldr	r0, [pc, #72]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	4403      	add	r3, r0
 800f55e:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f562:	4313      	orrs	r3, r2
 800f564:	0e1a      	lsrs	r2, r3, #24
 800f566:	79fb      	ldrb	r3, [r7, #7]
 800f568:	430a      	orrs	r2, r1
 800f56a:	490f      	ldr	r1, [pc, #60]	; (800f5a8 <udpClient_connect+0x2a8>)
 800f56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	79fa      	ldrb	r2, [r7, #7]
 800f574:	490b      	ldr	r1, [pc, #44]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	440b      	add	r3, r1
 800f57a:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800f57e:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <udpClient_connect+0x2ac>)
 800f580:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	3301      	adds	r3, #1
 800f588:	71fb      	strb	r3, [r7, #7]
 800f58a:	4b06      	ldr	r3, [pc, #24]	; (800f5a4 <udpClient_connect+0x2a4>)
 800f58c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f590:	79fa      	ldrb	r2, [r7, #7]
 800f592:	429a      	cmp	r2, r3
 800f594:	f4ff af64 	bcc.w	800f460 <udpClient_connect+0x160>
		break;
 800f598:	bf00      	nop
	}
}
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr
 800f5a4:	20000304 	.word	0x20000304
 800f5a8:	20005240 	.word	0x20005240
 800f5ac:	20005294 	.word	0x20005294

0800f5b0 <udpClient_send>:
void udpClient_send(uint8_t *data,uint16_t len,const ip_addr_t IP_addr)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	607a      	str	r2, [r7, #4]
 800f5bc:	817b      	strh	r3, [r7, #10]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f5c2:	897b      	ldrh	r3, [r7, #10]
 800f5c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	2036      	movs	r0, #54	; 0x36
 800f5cc:	f00e fe18 	bl	801e200 <pbuf_alloc>
 800f5d0:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d01c      	beq.n	800f612 <udpClient_send+0x62>
	{
		pbuf_take(txBuf, data, len);
 800f5d8:	897b      	ldrh	r3, [r7, #10]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	68f9      	ldr	r1, [r7, #12]
 800f5de:	6938      	ldr	r0, [r7, #16]
 800f5e0:	f00f faea 	bl	801ebb8 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f5e4:	4b0d      	ldr	r3, [pc, #52]	; (800f61c <udpClient_send+0x6c>)
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	4b0d      	ldr	r3, [pc, #52]	; (800f620 <udpClient_send+0x70>)
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	1d3a      	adds	r2, r7, #4
 800f5ee:	6939      	ldr	r1, [r7, #16]
 800f5f0:	f00f fe8a 	bl	801f308 <udp_sendto>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f5f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d005      	beq.n	800f60c <udpClient_send+0x5c>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f604:	4619      	mov	r1, r3
 800f606:	4807      	ldr	r0, [pc, #28]	; (800f624 <udpClient_send+0x74>)
 800f608:	f012 fe14 	bl	8022234 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f60c:	6938      	ldr	r0, [r7, #16]
 800f60e:	f00f f8d9 	bl	801e7c4 <pbuf_free>
	}
}
 800f612:	bf00      	nop
 800f614:	3718      	adds	r7, #24
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	200052e8 	.word	0x200052e8
 800f620:	20005294 	.word	0x20005294
 800f624:	0802680c 	.word	0x0802680c

0800f628 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f62c:	4b07      	ldr	r3, [pc, #28]	; (800f64c <Is_There_EI_Data+0x24>)
 800f62e:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f632:	4b06      	ldr	r3, [pc, #24]	; (800f64c <Is_There_EI_Data+0x24>)
 800f634:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f638:	429a      	cmp	r2, r3
 800f63a:	d001      	beq.n	800f640 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f63c:	2301      	movs	r3, #1
 800f63e:	e000      	b.n	800f642 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f640:	2300      	movs	r3, #0
	}
}
 800f642:	4618      	mov	r0, r3
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	20004c3c 	.word	0x20004c3c

0800f650 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f656:	4b15      	ldr	r3, [pc, #84]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f658:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f65c:	1c5a      	adds	r2, r3, #1
 800f65e:	b291      	uxth	r1, r2
 800f660:	4a12      	ldr	r2, [pc, #72]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f662:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f666:	461a      	mov	r2, r3
 800f668:	4b10      	ldr	r3, [pc, #64]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f66a:	5c9b      	ldrb	r3, [r3, r2]
 800f66c:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f66e:	4b0f      	ldr	r3, [pc, #60]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f670:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f678:	d313      	bcc.n	800f6a2 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f67a:	4b0c      	ldr	r3, [pc, #48]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f682:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f684:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f688:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f68c:	d109      	bne.n	800f6a2 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f68e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f692:	2100      	movs	r1, #0
 800f694:	4805      	ldr	r0, [pc, #20]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f696:	f012 fce5 	bl	8022064 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f69a:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <Get_Eth_Byte+0x5c>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	20004c3c 	.word	0x20004c3c

0800f6b0 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	607a      	str	r2, [r7, #4]
 800f6bc:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f6c2:	7afb      	ldrb	r3, [r7, #11]
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	2036      	movs	r0, #54	; 0x36
 800f6ce:	f00e fd97 	bl	801e200 <pbuf_alloc>
 800f6d2:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d01a      	beq.n	800f710 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800f6da:	7afb      	ldrb	r3, [r7, #11]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	461a      	mov	r2, r3
 800f6e0:	68f9      	ldr	r1, [r7, #12]
 800f6e2:	6938      	ldr	r0, [r7, #16]
 800f6e4:	f00f fa68 	bl	801ebb8 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800f6e8:	4b0b      	ldr	r3, [pc, #44]	; (800f718 <Udp_Send_SigInfo+0x68>)
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	1d3a      	adds	r2, r7, #4
 800f6ee:	f243 0339 	movw	r3, #12345	; 0x3039
 800f6f2:	6939      	ldr	r1, [r7, #16]
 800f6f4:	f00f fe08 	bl	801f308 <udp_sendto>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f6fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d002      	beq.n	800f70a <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800f704:	4805      	ldr	r0, [pc, #20]	; (800f71c <Udp_Send_SigInfo+0x6c>)
 800f706:	f012 fe31 	bl	802236c <puts>
		}
		pbuf_free(txBuf);
 800f70a:	6938      	ldr	r0, [r7, #16]
 800f70c:	f00f f85a 	bl	801e7c4 <pbuf_free>
	}
}
 800f710:	bf00      	nop
 800f712:	3718      	adds	r7, #24
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	200052e8 	.word	0x200052e8
 800f71c:	08026834 	.word	0x08026834

0800f720 <CheckDatRequest>:

void CheckDatRequest(void)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	af00      	add	r7, sp, #0
	if(DatRequestLength > 0)
 800f724:	4b0b      	ldr	r3, [pc, #44]	; (800f754 <CheckDatRequest+0x34>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d010      	beq.n	800f74e <CheckDatRequest+0x2e>
	{
		if(strstr((char *)DatRequestArray,"DOWNLOAD_DAT"))
 800f72c:	490a      	ldr	r1, [pc, #40]	; (800f758 <CheckDatRequest+0x38>)
 800f72e:	480b      	ldr	r0, [pc, #44]	; (800f75c <CheckDatRequest+0x3c>)
 800f730:	f012 ff58 	bl	80225e4 <strstr>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d006      	beq.n	800f748 <CheckDatRequest+0x28>
		{
			udpClient_send(Config_Buff+4, sizeof(EI_t), DatSourceIP);
 800f73a:	4809      	ldr	r0, [pc, #36]	; (800f760 <CheckDatRequest+0x40>)
 800f73c:	4b09      	ldr	r3, [pc, #36]	; (800f764 <CheckDatRequest+0x44>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	f44f 7150 	mov.w	r1, #832	; 0x340
 800f744:	f7ff ff34 	bl	800f5b0 <udpClient_send>
		}
		DatRequestLength = 0;
 800f748:	4b02      	ldr	r3, [pc, #8]	; (800f754 <CheckDatRequest+0x34>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	701a      	strb	r2, [r3, #0]
	}
}
 800f74e:	bf00      	nop
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	200052dc 	.word	0x200052dc
 800f758:	08026848 	.word	0x08026848
 800f75c:	200052bc 	.word	0x200052bc
 800f760:	2000064c 	.word	0x2000064c
 800f764:	200052e0 	.word	0x200052e0

0800f768 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b094      	sub	sp, #80	; 0x50
 800f76c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f76e:	4b38      	ldr	r3, [pc, #224]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f770:	4a38      	ldr	r2, [pc, #224]	; (800f854 <MX_CAN2_Init+0xec>)
 800f772:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f774:	4b36      	ldr	r3, [pc, #216]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f776:	2212      	movs	r2, #18
 800f778:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f77a:	4b35      	ldr	r3, [pc, #212]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f77c:	2200      	movs	r2, #0
 800f77e:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f780:	4b33      	ldr	r3, [pc, #204]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f782:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f786:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f788:	4b31      	ldr	r3, [pc, #196]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f78a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f78e:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f790:	4b2f      	ldr	r3, [pc, #188]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f792:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f796:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f798:	4b2d      	ldr	r3, [pc, #180]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f79e:	4b2c      	ldr	r3, [pc, #176]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f7a4:	4b2a      	ldr	r3, [pc, #168]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f7aa:	4b29      	ldr	r3, [pc, #164]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f7b0:	4b27      	ldr	r3, [pc, #156]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f7bc:	4824      	ldr	r0, [pc, #144]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f7be:	f005 fe67 	bl	8015490 <HAL_CAN_Init>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f7c8:	f004 f8a6 	bl	8013918 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f7d0:	2304      	movs	r3, #4
 800f7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f7d8:	f242 0360 	movw	r3, #8288	; 0x2060
 800f7dc:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f7e2:	f242 0360 	movw	r3, #8288	; 0x2060
 800f7e6:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f7f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4814      	ldr	r0, [pc, #80]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f800:	f005 ff8c 	bl	801571c <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f804:	2301      	movs	r3, #1
 800f806:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f808:	2305      	movs	r3, #5
 800f80a:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f810:	f242 1320 	movw	r3, #8480	; 0x2120
 800f814:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f816:	2300      	movs	r3, #0
 800f818:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f81a:	f242 1320 	movw	r3, #8480	; 0x2120
 800f81e:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f820:	2300      	movs	r3, #0
 800f822:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f824:	2301      	movs	r3, #1
 800f826:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f828:	2301      	movs	r3, #1
 800f82a:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f82c:	2302      	movs	r3, #2
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f830:	463b      	mov	r3, r7
 800f832:	4619      	mov	r1, r3
 800f834:	4806      	ldr	r0, [pc, #24]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f836:	f005 ff71 	bl	801571c <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f83a:	4805      	ldr	r0, [pc, #20]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f83c:	f006 f85a 	bl	80158f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f840:	2110      	movs	r1, #16
 800f842:	4803      	ldr	r0, [pc, #12]	; (800f850 <MX_CAN2_Init+0xe8>)
 800f844:	f006 f9ac 	bl	8015ba0 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f848:	bf00      	nop
 800f84a:	3750      	adds	r7, #80	; 0x50
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	20009b60 	.word	0x20009b60
 800f854:	40006800 	.word	0x40006800

0800f858 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08a      	sub	sp, #40	; 0x28
 800f85c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f85e:	4b34      	ldr	r3, [pc, #208]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f860:	4a34      	ldr	r2, [pc, #208]	; (800f934 <MX_CAN3_Init+0xdc>)
 800f862:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f864:	4b32      	ldr	r3, [pc, #200]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f866:	2205      	movs	r2, #5
 800f868:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f86a:	4b31      	ldr	r3, [pc, #196]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f870:	4b2f      	ldr	r3, [pc, #188]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f872:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f876:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f878:	4b2d      	ldr	r3, [pc, #180]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f87a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f87e:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f880:	4b2b      	ldr	r3, [pc, #172]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f882:	2200      	movs	r2, #0
 800f884:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f886:	4b2a      	ldr	r3, [pc, #168]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f888:	4a2a      	ldr	r2, [pc, #168]	; (800f934 <MX_CAN3_Init+0xdc>)
 800f88a:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f88c:	4b28      	ldr	r3, [pc, #160]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f88e:	2212      	movs	r2, #18
 800f890:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f892:	4b27      	ldr	r3, [pc, #156]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f894:	2200      	movs	r2, #0
 800f896:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f898:	4b25      	ldr	r3, [pc, #148]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f89a:	2200      	movs	r2, #0
 800f89c:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f89e:	4b24      	ldr	r3, [pc, #144]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f8a4:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f8a6:	4b22      	ldr	r3, [pc, #136]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f8ac:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f8ae:	4b20      	ldr	r3, [pc, #128]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f8b4:	4b1e      	ldr	r3, [pc, #120]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f8ba:	4b1d      	ldr	r3, [pc, #116]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f8c0:	4b1b      	ldr	r3, [pc, #108]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f8c6:	4b1a      	ldr	r3, [pc, #104]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f8cc:	4b18      	ldr	r3, [pc, #96]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f8d2:	4817      	ldr	r0, [pc, #92]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f8d4:	f005 fddc 	bl	8015490 <HAL_CAN_Init>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f8de:	f004 f81b 	bl	8013918 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f8ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8f2:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f8f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8fc:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f8fe:	2300      	movs	r3, #0
 800f900:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f902:	2300      	movs	r3, #0
 800f904:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f906:	2301      	movs	r3, #1
 800f908:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f90a:	2306      	movs	r3, #6
 800f90c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f90e:	463b      	mov	r3, r7
 800f910:	4619      	mov	r1, r3
 800f912:	4807      	ldr	r0, [pc, #28]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f914:	f005 ff02 	bl	801571c <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f918:	4805      	ldr	r0, [pc, #20]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f91a:	f005 ffeb 	bl	80158f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f91e:	2102      	movs	r1, #2
 800f920:	4803      	ldr	r0, [pc, #12]	; (800f930 <MX_CAN3_Init+0xd8>)
 800f922:	f006 f93d 	bl	8015ba0 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f926:	bf00      	nop
 800f928:	3728      	adds	r7, #40	; 0x28
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20009bc4 	.word	0x20009bc4
 800f934:	40003400 	.word	0x40003400

0800f938 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b08c      	sub	sp, #48	; 0x30
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f940:	f107 031c 	add.w	r3, r7, #28
 800f944:	2200      	movs	r2, #0
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	605a      	str	r2, [r3, #4]
 800f94a:	609a      	str	r2, [r3, #8]
 800f94c:	60da      	str	r2, [r3, #12]
 800f94e:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a44      	ldr	r2, [pc, #272]	; (800fa68 <HAL_CAN_MspInit+0x130>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d144      	bne.n	800f9e4 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f95a:	4b44      	ldr	r3, [pc, #272]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95e:	4a43      	ldr	r2, [pc, #268]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f964:	6413      	str	r3, [r2, #64]	; 0x40
 800f966:	4b41      	ldr	r3, [pc, #260]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f96e:	61bb      	str	r3, [r7, #24]
 800f970:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f972:	4b3e      	ldr	r3, [pc, #248]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f976:	4a3d      	ldr	r2, [pc, #244]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f97c:	6413      	str	r3, [r2, #64]	; 0x40
 800f97e:	4b3b      	ldr	r3, [pc, #236]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f986:	617b      	str	r3, [r7, #20]
 800f988:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f98a:	4b38      	ldr	r3, [pc, #224]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98e:	4a37      	ldr	r2, [pc, #220]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f990:	f043 0302 	orr.w	r3, r3, #2
 800f994:	6313      	str	r3, [r2, #48]	; 0x30
 800f996:	4b35      	ldr	r3, [pc, #212]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f99a:	f003 0302 	and.w	r3, r3, #2
 800f99e:	613b      	str	r3, [r7, #16]
 800f9a0:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f9a2:	2360      	movs	r3, #96	; 0x60
 800f9a4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f9b2:	2309      	movs	r3, #9
 800f9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9b6:	f107 031c 	add.w	r3, r7, #28
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	482c      	ldr	r0, [pc, #176]	; (800fa70 <HAL_CAN_MspInit+0x138>)
 800f9be:	f007 ff4f 	bl	8017860 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	2104      	movs	r1, #4
 800f9c6:	2040      	movs	r0, #64	; 0x40
 800f9c8:	f006 fc1f 	bl	801620a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f9cc:	2040      	movs	r0, #64	; 0x40
 800f9ce:	f006 fc38 	bl	8016242 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	2104      	movs	r1, #4
 800f9d6:	2041      	movs	r0, #65	; 0x41
 800f9d8:	f006 fc17 	bl	801620a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f9dc:	2041      	movs	r0, #65	; 0x41
 800f9de:	f006 fc30 	bl	8016242 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f9e2:	e03d      	b.n	800fa60 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a22      	ldr	r2, [pc, #136]	; (800fa74 <HAL_CAN_MspInit+0x13c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d138      	bne.n	800fa60 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f9ee:	4b1f      	ldr	r3, [pc, #124]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	4a1e      	ldr	r2, [pc, #120]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f9f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f9f8:	6413      	str	r3, [r2, #64]	; 0x40
 800f9fa:	4b1c      	ldr	r3, [pc, #112]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800f9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800fa06:	4b19      	ldr	r3, [pc, #100]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800fa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa0a:	4a18      	ldr	r2, [pc, #96]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800fa0c:	f043 0301 	orr.w	r3, r3, #1
 800fa10:	6313      	str	r3, [r2, #48]	; 0x30
 800fa12:	4b16      	ldr	r3, [pc, #88]	; (800fa6c <HAL_CAN_MspInit+0x134>)
 800fa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	60bb      	str	r3, [r7, #8]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800fa1e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800fa22:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa24:	2302      	movs	r3, #2
 800fa26:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800fa30:	230b      	movs	r3, #11
 800fa32:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa34:	f107 031c 	add.w	r3, r7, #28
 800fa38:	4619      	mov	r1, r3
 800fa3a:	480f      	ldr	r0, [pc, #60]	; (800fa78 <HAL_CAN_MspInit+0x140>)
 800fa3c:	f007 ff10 	bl	8017860 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800fa40:	2200      	movs	r2, #0
 800fa42:	2100      	movs	r1, #0
 800fa44:	2069      	movs	r0, #105	; 0x69
 800fa46:	f006 fbe0 	bl	801620a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800fa4a:	2069      	movs	r0, #105	; 0x69
 800fa4c:	f006 fbf9 	bl	8016242 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800fa50:	2200      	movs	r2, #0
 800fa52:	2100      	movs	r1, #0
 800fa54:	206a      	movs	r0, #106	; 0x6a
 800fa56:	f006 fbd8 	bl	801620a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800fa5a:	206a      	movs	r0, #106	; 0x6a
 800fa5c:	f006 fbf1 	bl	8016242 <HAL_NVIC_EnableIRQ>
}
 800fa60:	bf00      	nop
 800fa62:	3730      	adds	r7, #48	; 0x30
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	40006800 	.word	0x40006800
 800fa6c:	40023800 	.word	0x40023800
 800fa70:	40020400 	.word	0x40020400
 800fa74:	40003400 	.word	0x40003400
 800fa78:	40020000 	.word	0x40020000

0800fa7c <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	4603      	mov	r3, r0
 800fa84:	80fb      	strh	r3, [r7, #6]

#warning "CAN SENDING COMMENTED"
	return;
 800fa86:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
	...

0800fa94 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a3e      	ldr	r2, [pc, #248]	; (800fb9c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d175      	bne.n	800fb92 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800faa6:	4b3e      	ldr	r3, [pc, #248]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800faa8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faac:	881b      	ldrh	r3, [r3, #0]
 800faae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fab2:	d104      	bne.n	800fabe <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800fab4:	4b3a      	ldr	r3, [pc, #232]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fab6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faba:	2200      	movs	r2, #0
 800fabc:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800fabe:	4b39      	ldr	r3, [pc, #228]	; (800fba4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fac0:	4a39      	ldr	r2, [pc, #228]	; (800fba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fac2:	2100      	movs	r1, #0
 800fac4:	4839      	ldr	r0, [pc, #228]	; (800fbac <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800fac6:	f005 ff59 	bl	801597c <HAL_CAN_GetRxMessage>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800fad0:	f003 ff22 	bl	8013918 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800fad4:	4b32      	ldr	r3, [pc, #200]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fad6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	4a30      	ldr	r2, [pc, #192]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fade:	011b      	lsls	r3, r3, #4
 800fae0:	4413      	add	r3, r2
 800fae2:	330f      	adds	r3, #15
 800fae4:	2203      	movs	r2, #3
 800fae6:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800fae8:	4b2f      	ldr	r3, [pc, #188]	; (800fba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800faea:	691a      	ldr	r2, [r3, #16]
 800faec:	4b2c      	ldr	r3, [pc, #176]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800faee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	b2d1      	uxtb	r1, r2
 800faf6:	4a2a      	ldr	r2, [pc, #168]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800faf8:	011b      	lsls	r3, r3, #4
 800fafa:	4413      	add	r3, r2
 800fafc:	330c      	adds	r3, #12
 800fafe:	460a      	mov	r2, r1
 800fb00:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800fb02:	4b29      	ldr	r3, [pc, #164]	; (800fba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb04:	689a      	ldr	r2, [r3, #8]
 800fb06:	4b26      	ldr	r3, [pc, #152]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	b2d1      	uxtb	r1, r2
 800fb10:	4a23      	ldr	r2, [pc, #140]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb12:	011b      	lsls	r3, r3, #4
 800fb14:	4413      	add	r3, r2
 800fb16:	330d      	adds	r3, #13
 800fb18:	460a      	mov	r2, r1
 800fb1a:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800fb1c:	4b22      	ldr	r3, [pc, #136]	; (800fba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	4b1f      	ldr	r3, [pc, #124]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	b2d1      	uxtb	r1, r2
 800fb2a:	4a1d      	ldr	r2, [pc, #116]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb2c:	011b      	lsls	r3, r3, #4
 800fb2e:	4413      	add	r3, r2
 800fb30:	330e      	adds	r3, #14
 800fb32:	460a      	mov	r2, r1
 800fb34:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800fb36:	4b1a      	ldr	r3, [pc, #104]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb3c:	881b      	ldrh	r3, [r3, #0]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	4916      	ldr	r1, [pc, #88]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb46:	0103      	lsls	r3, r0, #4
 800fb48:	440b      	add	r3, r1
 800fb4a:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800fb4c:	4b14      	ldr	r3, [pc, #80]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	4a12      	ldr	r2, [pc, #72]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb56:	011b      	lsls	r3, r3, #4
 800fb58:	4413      	add	r3, r2
 800fb5a:	330e      	adds	r3, #14
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d117      	bne.n	800fb92 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800fb62:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	4a0c      	ldr	r2, [pc, #48]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb6e:	4413      	add	r3, r2
 800fb70:	3304      	adds	r3, #4
 800fb72:	490c      	ldr	r1, [pc, #48]	; (800fba4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fb74:	461a      	mov	r2, r3
 800fb76:	460b      	mov	r3, r1
 800fb78:	cb03      	ldmia	r3!, {r0, r1}
 800fb7a:	6010      	str	r0, [r2, #0]
 800fb7c:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800fb7e:	4b08      	ldr	r3, [pc, #32]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	3301      	adds	r3, #1
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb90:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	40003400 	.word	0x40003400
 800fba0:	20005b10 	.word	0x20005b10
 800fba4:	20009b54 	.word	0x20009b54
 800fba8:	20009b30 	.word	0x20009b30
 800fbac:	20009bc4 	.word	0x20009bc4

0800fbb0 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800fbb8:	4b42      	ldr	r3, [pc, #264]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fbba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbc4:	d104      	bne.n	800fbd0 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800fbc6:	4b3f      	ldr	r3, [pc, #252]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fbc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbcc:	2200      	movs	r2, #0
 800fbce:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800fbd0:	4b3d      	ldr	r3, [pc, #244]	; (800fcc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fbd2:	4a3e      	ldr	r2, [pc, #248]	; (800fccc <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	483e      	ldr	r0, [pc, #248]	; (800fcd0 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800fbd8:	f005 fed0 	bl	801597c <HAL_CAN_GetRxMessage>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	461a      	mov	r2, r3
 800fbe0:	4b3c      	ldr	r3, [pc, #240]	; (800fcd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fbe2:	701a      	strb	r2, [r3, #0]
 800fbe4:	4b3b      	ldr	r3, [pc, #236]	; (800fcd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d007      	beq.n	800fbfc <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800fbec:	4b39      	ldr	r3, [pc, #228]	; (800fcd4 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	4839      	ldr	r0, [pc, #228]	; (800fcd8 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800fbf4:	f012 fb1e 	bl	8022234 <iprintf>
		Error_Handler();
 800fbf8:	f003 fe8e 	bl	8013918 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800fbfc:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fbfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	4a2f      	ldr	r2, [pc, #188]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc06:	011b      	lsls	r3, r3, #4
 800fc08:	4413      	add	r3, r2
 800fc0a:	330f      	adds	r3, #15
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800fc10:	4b2e      	ldr	r3, [pc, #184]	; (800fccc <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc12:	691a      	ldr	r2, [r3, #16]
 800fc14:	4b2b      	ldr	r3, [pc, #172]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	b2d1      	uxtb	r1, r2
 800fc1e:	4a29      	ldr	r2, [pc, #164]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc20:	011b      	lsls	r3, r3, #4
 800fc22:	4413      	add	r3, r2
 800fc24:	330c      	adds	r3, #12
 800fc26:	460a      	mov	r2, r1
 800fc28:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 800fc2a:	4b28      	ldr	r3, [pc, #160]	; (800fccc <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc2c:	689a      	ldr	r2, [r3, #8]
 800fc2e:	4b25      	ldr	r3, [pc, #148]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	b2d1      	uxtb	r1, r2
 800fc38:	4a22      	ldr	r2, [pc, #136]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc3a:	011b      	lsls	r3, r3, #4
 800fc3c:	4413      	add	r3, r2
 800fc3e:	330d      	adds	r3, #13
 800fc40:	460a      	mov	r2, r1
 800fc42:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 800fc44:	4b21      	ldr	r3, [pc, #132]	; (800fccc <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc46:	68da      	ldr	r2, [r3, #12]
 800fc48:	4b1e      	ldr	r3, [pc, #120]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	b2d1      	uxtb	r1, r2
 800fc52:	4a1c      	ldr	r2, [pc, #112]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc54:	011b      	lsls	r3, r3, #4
 800fc56:	4413      	add	r3, r2
 800fc58:	330e      	adds	r3, #14
 800fc5a:	460a      	mov	r2, r1
 800fc5c:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 800fc5e:	4b19      	ldr	r3, [pc, #100]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	4618      	mov	r0, r3
 800fc68:	4b18      	ldr	r3, [pc, #96]	; (800fccc <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	4915      	ldr	r1, [pc, #84]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc6e:	0103      	lsls	r3, r0, #4
 800fc70:	440b      	add	r3, r1
 800fc72:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 800fc74:	4b13      	ldr	r3, [pc, #76]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	4a11      	ldr	r2, [pc, #68]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc7e:	011b      	lsls	r3, r3, #4
 800fc80:	4413      	add	r3, r2
 800fc82:	330e      	adds	r3, #14
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d117      	bne.n	800fcba <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 800fc8a:	4b0e      	ldr	r3, [pc, #56]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	011b      	lsls	r3, r3, #4
 800fc94:	4a0b      	ldr	r2, [pc, #44]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc96:	4413      	add	r3, r2
 800fc98:	3304      	adds	r3, #4
 800fc9a:	490b      	ldr	r1, [pc, #44]	; (800fcc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	460b      	mov	r3, r1
 800fca0:	cb03      	ldmia	r3!, {r0, r1}
 800fca2:	6010      	str	r0, [r2, #0]
 800fca4:	6051      	str	r1, [r2, #4]
		canRead.In++;
 800fca6:	4b07      	ldr	r3, [pc, #28]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fca8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	4b04      	ldr	r3, [pc, #16]	; (800fcc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcb8:	801a      	strh	r2, [r3, #0]
	}
}
 800fcba:	bf00      	nop
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20005b10 	.word	0x20005b10
 800fcc8:	20009b4c 	.word	0x20009b4c
 800fccc:	20009b14 	.word	0x20009b14
 800fcd0:	20009b60 	.word	0x20009b60
 800fcd4:	20009b5c 	.word	0x20009b5c
 800fcd8:	08026884 	.word	0x08026884

0800fcdc <canDataReady>:


unsigned char canDataReady()
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 800fce6:	4b27      	ldr	r3, [pc, #156]	; (800fd84 <canDataReady+0xa8>)
 800fce8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcec:	881a      	ldrh	r2, [r3, #0]
 800fcee:	4b25      	ldr	r3, [pc, #148]	; (800fd84 <canDataReady+0xa8>)
 800fcf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcf4:	885b      	ldrh	r3, [r3, #2]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d101      	bne.n	800fcfe <canDataReady+0x22>
	{
		return 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e03e      	b.n	800fd7c <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fcfe:	4b21      	ldr	r3, [pc, #132]	; (800fd84 <canDataReady+0xa8>)
 800fd00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd04:	885b      	ldrh	r3, [r3, #2]
 800fd06:	3301      	adds	r3, #1
 800fd08:	607b      	str	r3, [r7, #4]
 800fd0a:	e02e      	b.n	800fd6a <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 800fd0c:	4b1d      	ldr	r3, [pc, #116]	; (800fd84 <canDataReady+0xa8>)
 800fd0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd12:	885b      	ldrh	r3, [r3, #2]
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	4a1b      	ldr	r2, [pc, #108]	; (800fd84 <canDataReady+0xa8>)
 800fd18:	1898      	adds	r0, r3, r2
 800fd1a:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <canDataReady+0xa8>)
 800fd1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	011b      	lsls	r3, r3, #4
 800fd24:	4a17      	ldr	r2, [pc, #92]	; (800fd84 <canDataReady+0xa8>)
 800fd26:	4413      	add	r3, r2
 800fd28:	2210      	movs	r2, #16
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	f012 f962 	bl	8021ff4 <memcmp>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d116      	bne.n	800fd64 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800fd36:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <canDataReady+0xa8>)
 800fd38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd3c:	885b      	ldrh	r3, [r3, #2]
 800fd3e:	011b      	lsls	r3, r3, #4
 800fd40:	4a10      	ldr	r2, [pc, #64]	; (800fd84 <canDataReady+0xa8>)
 800fd42:	4413      	add	r3, r2
 800fd44:	2210      	movs	r2, #16
 800fd46:	2100      	movs	r1, #0
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f012 f98b 	bl	8022064 <memset>
			canRead.Out++;
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	; (800fd84 <canDataReady+0xa8>)
 800fd50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd54:	885b      	ldrh	r3, [r3, #2]
 800fd56:	3301      	adds	r3, #1
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <canDataReady+0xa8>)
 800fd5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd60:	805a      	strh	r2, [r3, #2]
			break;
 800fd62:	e00a      	b.n	800fd7a <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3301      	adds	r3, #1
 800fd68:	607b      	str	r3, [r7, #4]
 800fd6a:	4b06      	ldr	r3, [pc, #24]	; (800fd84 <canDataReady+0xa8>)
 800fd6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d3c8      	bcc.n	800fd0c <canDataReady+0x30>
		}
	}
	return 1;
 800fd7a:	2301      	movs	r3, #1
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20005b10 	.word	0x20005b10

0800fd88 <readCanToStructs>:

void readCanToStructs(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08e      	sub	sp, #56	; 0x38
 800fd8c:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd94:	2300      	movs	r3, #0
 800fd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 800fda0:	2300      	movs	r3, #0
 800fda2:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 800fda4:	4bc0      	ldr	r3, [pc, #768]	; (80100a8 <readCanToStructs+0x320>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b03      	cmp	r3, #3
 800fdaa:	f002 8640 	beq.w	8012a2e <readCanToStructs+0x2ca6>
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	f302 8644 	bgt.w	8012a3c <readCanToStructs+0x2cb4>
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d004      	beq.n	800fdc2 <readCanToStructs+0x3a>
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	f001 87f4 	beq.w	8011da6 <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 800fdbe:	f002 be3d 	b.w	8012a3c <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800fdc2:	4bba      	ldr	r3, [pc, #744]	; (80100ac <readCanToStructs+0x324>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	09db      	lsrs	r3, r3, #7
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f042 8637 	bne.w	8012a40 <readCanToStructs+0x2cb8>
		while(canDataReady())
 800fdd2:	f001 b92f 	b.w	8011034 <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800fdd6:	4bb6      	ldr	r3, [pc, #728]	; (80100b0 <readCanToStructs+0x328>)
 800fdd8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fddc:	885b      	ldrh	r3, [r3, #2]
 800fdde:	4ab4      	ldr	r2, [pc, #720]	; (80100b0 <readCanToStructs+0x328>)
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	4413      	add	r3, r2
 800fde4:	330f      	adds	r3, #15
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	3b01      	subs	r3, #1
 800fdea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800fdee:	4bb0      	ldr	r3, [pc, #704]	; (80100b0 <readCanToStructs+0x328>)
 800fdf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdf4:	885b      	ldrh	r3, [r3, #2]
 800fdf6:	4aae      	ldr	r2, [pc, #696]	; (80100b0 <readCanToStructs+0x328>)
 800fdf8:	011b      	lsls	r3, r3, #4
 800fdfa:	4413      	add	r3, r2
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fe02:	f201 80f4 	bhi.w	8010fee <readCanToStructs+0x1266>
 800fe06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe0a:	d80a      	bhi.n	800fe22 <readCanToStructs+0x9a>
 800fe0c:	f240 1203 	movw	r2, #259	; 0x103
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d01f      	beq.n	800fe54 <readCanToStructs+0xcc>
 800fe14:	f240 1209 	movw	r2, #265	; 0x109
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	f000 80f1 	beq.w	8010000 <readCanToStructs+0x278>
				break;
 800fe1e:	f001 b8e6 	b.w	8010fee <readCanToStructs+0x1266>
 800fe22:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fe26:	2b07      	cmp	r3, #7
 800fe28:	f201 80e1 	bhi.w	8010fee <readCanToStructs+0x1266>
 800fe2c:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <readCanToStructs+0xac>)
 800fe2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe32:	bf00      	nop
 800fe34:	080101d5 	.word	0x080101d5
 800fe38:	080103dd 	.word	0x080103dd
 800fe3c:	080105b5 	.word	0x080105b5
 800fe40:	080107cf 	.word	0x080107cf
 800fe44:	080109e5 	.word	0x080109e5
 800fe48:	08010fef 	.word	0x08010fef
 800fe4c:	08010b79 	.word	0x08010b79
 800fe50:	08010db3 	.word	0x08010db3
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800fe54:	4b97      	ldr	r3, [pc, #604]	; (80100b4 <readCanToStructs+0x32c>)
 800fe56:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fe58:	4b95      	ldr	r3, [pc, #596]	; (80100b0 <readCanToStructs+0x328>)
 800fe5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe5e:	885b      	ldrh	r3, [r3, #2]
 800fe60:	4a93      	ldr	r2, [pc, #588]	; (80100b0 <readCanToStructs+0x328>)
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	4413      	add	r3, r2
 800fe66:	3304      	adds	r3, #4
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800fe6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d110      	bne.n	800fe98 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fe76:	2206      	movs	r2, #6
 800fe78:	2100      	movs	r1, #0
 800fe7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe7c:	f012 f8f2 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fe80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe84:	4a8c      	ldr	r2, [pc, #560]	; (80100b8 <readCanToStructs+0x330>)
 800fe86:	f240 4112 	movw	r1, #1042	; 0x412
 800fe8a:	fb01 f303 	mul.w	r3, r1, r3
 800fe8e:	4413      	add	r3, r2
 800fe90:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fe94:	2200      	movs	r2, #0
 800fe96:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800fe98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe9c:	4a86      	ldr	r2, [pc, #536]	; (80100b8 <readCanToStructs+0x330>)
 800fe9e:	f240 4112 	movw	r1, #1042	; 0x412
 800fea2:	fb01 f303 	mul.w	r3, r1, r3
 800fea6:	4413      	add	r3, r2
 800fea8:	f203 2307 	addw	r3, r3, #519	; 0x207
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d015      	beq.n	800fee2 <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 800feb6:	4881      	ldr	r0, [pc, #516]	; (80100bc <readCanToStructs+0x334>)
 800feb8:	f012 fa58 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800febc:	2206      	movs	r2, #6
 800febe:	2100      	movs	r1, #0
 800fec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fec2:	f012 f8cf 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feca:	4a7b      	ldr	r2, [pc, #492]	; (80100b8 <readCanToStructs+0x330>)
 800fecc:	f240 4112 	movw	r1, #1042	; 0x412
 800fed0:	fb01 f303 	mul.w	r3, r1, r3
 800fed4:	4413      	add	r3, r2
 800fed6:	f203 2307 	addw	r3, r3, #519	; 0x207
 800feda:	2200      	movs	r2, #0
 800fedc:	701a      	strb	r2, [r3, #0]
					break;
 800fede:	f001 b887 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fee2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fee6:	4613      	mov	r3, r2
 800fee8:	00db      	lsls	r3, r3, #3
 800feea:	1a9b      	subs	r3, r3, r2
 800feec:	461a      	mov	r2, r3
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	4413      	add	r3, r2
 800fef2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fef4:	2301      	movs	r3, #1
 800fef6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fefa:	e016      	b.n	800ff2a <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800fefc:	4b6c      	ldr	r3, [pc, #432]	; (80100b0 <readCanToStructs+0x328>)
 800fefe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff02:	885b      	ldrh	r3, [r3, #2]
 800ff04:	461a      	mov	r2, r3
 800ff06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff0a:	4969      	ldr	r1, [pc, #420]	; (80100b0 <readCanToStructs+0x328>)
 800ff0c:	0112      	lsls	r2, r2, #4
 800ff0e:	440a      	add	r2, r1
 800ff10:	4413      	add	r3, r2
 800ff12:	3304      	adds	r3, #4
 800ff14:	781a      	ldrb	r2, [r3, #0]
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff24:	3301      	adds	r3, #1
 800ff26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff2a:	4b61      	ldr	r3, [pc, #388]	; (80100b0 <readCanToStructs+0x328>)
 800ff2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff30:	885b      	ldrh	r3, [r3, #2]
 800ff32:	4a5f      	ldr	r2, [pc, #380]	; (80100b0 <readCanToStructs+0x328>)
 800ff34:	011b      	lsls	r3, r3, #4
 800ff36:	4413      	add	r3, r2
 800ff38:	330c      	adds	r3, #12
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d3db      	bcc.n	800fefc <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800ff44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff48:	4a5b      	ldr	r2, [pc, #364]	; (80100b8 <readCanToStructs+0x330>)
 800ff4a:	f240 4112 	movw	r1, #1042	; 0x412
 800ff4e:	fb01 f303 	mul.w	r3, r1, r3
 800ff52:	4413      	add	r3, r2
 800ff54:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800ff62:	4b53      	ldr	r3, [pc, #332]	; (80100b0 <readCanToStructs+0x328>)
 800ff64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff68:	885b      	ldrh	r3, [r3, #2]
 800ff6a:	4951      	ldr	r1, [pc, #324]	; (80100b0 <readCanToStructs+0x328>)
 800ff6c:	011b      	lsls	r3, r3, #4
 800ff6e:	440b      	add	r3, r1
 800ff70:	330c      	adds	r3, #12
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	3b01      	subs	r3, #1
 800ff76:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800ff78:	2b05      	cmp	r3, #5
 800ff7a:	d91c      	bls.n	800ffb6 <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800ff7c:	4b50      	ldr	r3, [pc, #320]	; (80100c0 <readCanToStructs+0x338>)
 800ff7e:	4a4d      	ldr	r2, [pc, #308]	; (80100b4 <readCanToStructs+0x32c>)
 800ff80:	6811      	ldr	r1, [r2, #0]
 800ff82:	6019      	str	r1, [r3, #0]
 800ff84:	8892      	ldrh	r2, [r2, #4]
 800ff86:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800ff88:	4b4e      	ldr	r3, [pc, #312]	; (80100c4 <readCanToStructs+0x33c>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d102      	bne.n	800ff96 <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 800ff90:	484d      	ldr	r0, [pc, #308]	; (80100c8 <readCanToStructs+0x340>)
 800ff92:	f012 f9eb 	bl	802236c <puts>
					Write_RTC();
 800ff96:	f7fb fa55 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ff9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff9e:	4a46      	ldr	r2, [pc, #280]	; (80100b8 <readCanToStructs+0x330>)
 800ffa0:	f240 4112 	movw	r1, #1042	; 0x412
 800ffa4:	fb01 f303 	mul.w	r3, r1, r3
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ffae:	2200      	movs	r2, #0
 800ffb0:	701a      	strb	r2, [r3, #0]
				break;
 800ffb2:	f001 b81d 	b.w	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800ffb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffba:	4a3f      	ldr	r2, [pc, #252]	; (80100b8 <readCanToStructs+0x330>)
 800ffbc:	f240 4112 	movw	r1, #1042	; 0x412
 800ffc0:	fb01 f303 	mul.w	r3, r1, r3
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ffca:	2201      	movs	r2, #1
 800ffcc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 800ffce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffd2:	4939      	ldr	r1, [pc, #228]	; (80100b8 <readCanToStructs+0x330>)
 800ffd4:	f240 4212 	movw	r2, #1042	; 0x412
 800ffd8:	fb03 f202 	mul.w	r2, r3, r2
 800ffdc:	440a      	add	r2, r1
 800ffde:	f202 2207 	addw	r2, r2, #519	; 0x207
 800ffe2:	7812      	ldrb	r2, [r2, #0]
 800ffe4:	3201      	adds	r2, #1
 800ffe6:	b2d0      	uxtb	r0, r2
 800ffe8:	4a33      	ldr	r2, [pc, #204]	; (80100b8 <readCanToStructs+0x330>)
 800ffea:	f240 4112 	movw	r1, #1042	; 0x412
 800ffee:	fb01 f303 	mul.w	r3, r1, r3
 800fff2:	4413      	add	r3, r2
 800fff4:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fff8:	4602      	mov	r2, r0
 800fffa:	701a      	strb	r2, [r3, #0]
				break;
 800fffc:	f000 bff8 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010000:	4b2c      	ldr	r3, [pc, #176]	; (80100b4 <readCanToStructs+0x32c>)
 8010002:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010004:	4b2a      	ldr	r3, [pc, #168]	; (80100b0 <readCanToStructs+0x328>)
 8010006:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801000a:	885b      	ldrh	r3, [r3, #2]
 801000c:	4a28      	ldr	r2, [pc, #160]	; (80100b0 <readCanToStructs+0x328>)
 801000e:	011b      	lsls	r3, r3, #4
 8010010:	4413      	add	r3, r2
 8010012:	3304      	adds	r3, #4
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801001a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801001e:	2b00      	cmp	r3, #0
 8010020:	d110      	bne.n	8010044 <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010022:	2206      	movs	r2, #6
 8010024:	2100      	movs	r1, #0
 8010026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010028:	f012 f81c 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801002c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010030:	4a21      	ldr	r2, [pc, #132]	; (80100b8 <readCanToStructs+0x330>)
 8010032:	f240 4112 	movw	r1, #1042	; 0x412
 8010036:	fb01 f303 	mul.w	r3, r1, r3
 801003a:	4413      	add	r3, r2
 801003c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010040:	2200      	movs	r2, #0
 8010042:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8010044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010048:	4a1b      	ldr	r2, [pc, #108]	; (80100b8 <readCanToStructs+0x330>)
 801004a:	f240 4112 	movw	r1, #1042	; 0x412
 801004e:	fb01 f303 	mul.w	r3, r1, r3
 8010052:	4413      	add	r3, r2
 8010054:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801005e:	429a      	cmp	r2, r3
 8010060:	d015      	beq.n	801008e <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 8010062:	481a      	ldr	r0, [pc, #104]	; (80100cc <readCanToStructs+0x344>)
 8010064:	f012 f982 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010068:	2206      	movs	r2, #6
 801006a:	2100      	movs	r1, #0
 801006c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801006e:	f011 fff9 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010076:	4a10      	ldr	r2, [pc, #64]	; (80100b8 <readCanToStructs+0x330>)
 8010078:	f240 4112 	movw	r1, #1042	; 0x412
 801007c:	fb01 f303 	mul.w	r3, r1, r3
 8010080:	4413      	add	r3, r2
 8010082:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010086:	2200      	movs	r2, #0
 8010088:	701a      	strb	r2, [r3, #0]
					break;
 801008a:	f000 bfb1 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801008e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010092:	4613      	mov	r3, r2
 8010094:	00db      	lsls	r3, r3, #3
 8010096:	1a9b      	subs	r3, r3, r2
 8010098:	461a      	mov	r2, r3
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	4413      	add	r3, r2
 801009e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80100a0:	2301      	movs	r3, #1
 80100a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100a6:	e02a      	b.n	80100fe <readCanToStructs+0x376>
 80100a8:	20000304 	.word	0x20000304
 80100ac:	2000195c 	.word	0x2000195c
 80100b0:	20005b10 	.word	0x20005b10
 80100b4:	20002868 	.word	0x20002868
 80100b8:	200052ec 	.word	0x200052ec
 80100bc:	080268ac 	.word	0x080268ac
 80100c0:	20002860 	.word	0x20002860
 80100c4:	20000645 	.word	0x20000645
 80100c8:	080268c8 	.word	0x080268c8
 80100cc:	080268dc 	.word	0x080268dc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80100d0:	4bb6      	ldr	r3, [pc, #728]	; (80103ac <readCanToStructs+0x624>)
 80100d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100d6:	885b      	ldrh	r3, [r3, #2]
 80100d8:	461a      	mov	r2, r3
 80100da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100de:	49b3      	ldr	r1, [pc, #716]	; (80103ac <readCanToStructs+0x624>)
 80100e0:	0112      	lsls	r2, r2, #4
 80100e2:	440a      	add	r2, r1
 80100e4:	4413      	add	r3, r2
 80100e6:	3304      	adds	r3, #4
 80100e8:	781a      	ldrb	r2, [r3, #0]
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	3301      	adds	r3, #1
 80100f2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80100f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100f8:	3301      	adds	r3, #1
 80100fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100fe:	4bab      	ldr	r3, [pc, #684]	; (80103ac <readCanToStructs+0x624>)
 8010100:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010104:	885b      	ldrh	r3, [r3, #2]
 8010106:	4aa9      	ldr	r2, [pc, #676]	; (80103ac <readCanToStructs+0x624>)
 8010108:	011b      	lsls	r3, r3, #4
 801010a:	4413      	add	r3, r2
 801010c:	330c      	adds	r3, #12
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010114:	429a      	cmp	r2, r3
 8010116:	d3db      	bcc.n	80100d0 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801011c:	4aa4      	ldr	r2, [pc, #656]	; (80103b0 <readCanToStructs+0x628>)
 801011e:	f240 4112 	movw	r1, #1042	; 0x412
 8010122:	fb01 f303 	mul.w	r3, r1, r3
 8010126:	4413      	add	r3, r2
 8010128:	f203 2313 	addw	r3, r3, #531	; 0x213
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	461a      	mov	r2, r3
 8010130:	4613      	mov	r3, r2
 8010132:	00db      	lsls	r3, r3, #3
 8010134:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010136:	4b9d      	ldr	r3, [pc, #628]	; (80103ac <readCanToStructs+0x624>)
 8010138:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801013c:	885b      	ldrh	r3, [r3, #2]
 801013e:	499b      	ldr	r1, [pc, #620]	; (80103ac <readCanToStructs+0x624>)
 8010140:	011b      	lsls	r3, r3, #4
 8010142:	440b      	add	r3, r1
 8010144:	330c      	adds	r3, #12
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	3b01      	subs	r3, #1
 801014a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801014c:	2b05      	cmp	r3, #5
 801014e:	d91c      	bls.n	801018a <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010150:	4b98      	ldr	r3, [pc, #608]	; (80103b4 <readCanToStructs+0x62c>)
 8010152:	4a99      	ldr	r2, [pc, #612]	; (80103b8 <readCanToStructs+0x630>)
 8010154:	6811      	ldr	r1, [r2, #0]
 8010156:	6019      	str	r1, [r3, #0]
 8010158:	8892      	ldrh	r2, [r2, #4]
 801015a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801015c:	4b97      	ldr	r3, [pc, #604]	; (80103bc <readCanToStructs+0x634>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d102      	bne.n	801016a <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 8010164:	4896      	ldr	r0, [pc, #600]	; (80103c0 <readCanToStructs+0x638>)
 8010166:	f012 f901 	bl	802236c <puts>
					Write_RTC();
 801016a:	f7fb f96b 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801016e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010172:	4a8f      	ldr	r2, [pc, #572]	; (80103b0 <readCanToStructs+0x628>)
 8010174:	f240 4112 	movw	r1, #1042	; 0x412
 8010178:	fb01 f303 	mul.w	r3, r1, r3
 801017c:	4413      	add	r3, r2
 801017e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010182:	2200      	movs	r2, #0
 8010184:	701a      	strb	r2, [r3, #0]
				break;
 8010186:	f000 bf33 	b.w	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801018a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801018e:	4a88      	ldr	r2, [pc, #544]	; (80103b0 <readCanToStructs+0x628>)
 8010190:	f240 4112 	movw	r1, #1042	; 0x412
 8010194:	fb01 f303 	mul.w	r3, r1, r3
 8010198:	4413      	add	r3, r2
 801019a:	f203 2312 	addw	r3, r3, #530	; 0x212
 801019e:	2201      	movs	r2, #1
 80101a0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80101a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101a6:	4982      	ldr	r1, [pc, #520]	; (80103b0 <readCanToStructs+0x628>)
 80101a8:	f240 4212 	movw	r2, #1042	; 0x412
 80101ac:	fb03 f202 	mul.w	r2, r3, r2
 80101b0:	440a      	add	r2, r1
 80101b2:	f202 2213 	addw	r2, r2, #531	; 0x213
 80101b6:	7812      	ldrb	r2, [r2, #0]
 80101b8:	3201      	adds	r2, #1
 80101ba:	b2d0      	uxtb	r0, r2
 80101bc:	4a7c      	ldr	r2, [pc, #496]	; (80103b0 <readCanToStructs+0x628>)
 80101be:	f240 4112 	movw	r1, #1042	; 0x412
 80101c2:	fb01 f303 	mul.w	r3, r1, r3
 80101c6:	4413      	add	r3, r2
 80101c8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80101cc:	4602      	mov	r2, r0
 80101ce:	701a      	strb	r2, [r3, #0]
				break;
 80101d0:	f000 bf0e 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80101d4:	4b7b      	ldr	r3, [pc, #492]	; (80103c4 <readCanToStructs+0x63c>)
 80101d6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80101d8:	4b74      	ldr	r3, [pc, #464]	; (80103ac <readCanToStructs+0x624>)
 80101da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101de:	885b      	ldrh	r3, [r3, #2]
 80101e0:	4a72      	ldr	r2, [pc, #456]	; (80103ac <readCanToStructs+0x624>)
 80101e2:	011b      	lsls	r3, r3, #4
 80101e4:	4413      	add	r3, r2
 80101e6:	3304      	adds	r3, #4
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80101ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d110      	bne.n	8010218 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80101f6:	2218      	movs	r2, #24
 80101f8:	2100      	movs	r1, #0
 80101fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101fc:	f011 ff32 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010204:	4a6a      	ldr	r2, [pc, #424]	; (80103b0 <readCanToStructs+0x628>)
 8010206:	f240 4112 	movw	r1, #1042	; 0x412
 801020a:	fb01 f303 	mul.w	r3, r1, r3
 801020e:	4413      	add	r3, r2
 8010210:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010214:	2200      	movs	r2, #0
 8010216:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801021c:	4a64      	ldr	r2, [pc, #400]	; (80103b0 <readCanToStructs+0x628>)
 801021e:	f240 4112 	movw	r1, #1042	; 0x412
 8010222:	fb01 f303 	mul.w	r3, r1, r3
 8010226:	4413      	add	r3, r2
 8010228:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010232:	429a      	cmp	r2, r3
 8010234:	d015      	beq.n	8010262 <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8010236:	4864      	ldr	r0, [pc, #400]	; (80103c8 <readCanToStructs+0x640>)
 8010238:	f012 f898 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801023c:	2218      	movs	r2, #24
 801023e:	2100      	movs	r1, #0
 8010240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010242:	f011 ff0f 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801024a:	4a59      	ldr	r2, [pc, #356]	; (80103b0 <readCanToStructs+0x628>)
 801024c:	f240 4112 	movw	r1, #1042	; 0x412
 8010250:	fb01 f303 	mul.w	r3, r1, r3
 8010254:	4413      	add	r3, r2
 8010256:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801025a:	2200      	movs	r2, #0
 801025c:	701a      	strb	r2, [r3, #0]
					break;
 801025e:	f000 bec7 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010262:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010266:	4613      	mov	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	461a      	mov	r2, r3
 801026e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010270:	4413      	add	r3, r2
 8010272:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010274:	2301      	movs	r3, #1
 8010276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801027a:	e016      	b.n	80102aa <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801027c:	4b4b      	ldr	r3, [pc, #300]	; (80103ac <readCanToStructs+0x624>)
 801027e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010282:	885b      	ldrh	r3, [r3, #2]
 8010284:	461a      	mov	r2, r3
 8010286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801028a:	4948      	ldr	r1, [pc, #288]	; (80103ac <readCanToStructs+0x624>)
 801028c:	0112      	lsls	r2, r2, #4
 801028e:	440a      	add	r2, r1
 8010290:	4413      	add	r3, r2
 8010292:	3304      	adds	r3, #4
 8010294:	781a      	ldrb	r2, [r3, #0]
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029c:	3301      	adds	r3, #1
 801029e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102a4:	3301      	adds	r3, #1
 80102a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102aa:	4b40      	ldr	r3, [pc, #256]	; (80103ac <readCanToStructs+0x624>)
 80102ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102b0:	885b      	ldrh	r3, [r3, #2]
 80102b2:	4a3e      	ldr	r2, [pc, #248]	; (80103ac <readCanToStructs+0x624>)
 80102b4:	011b      	lsls	r3, r3, #4
 80102b6:	4413      	add	r3, r2
 80102b8:	330c      	adds	r3, #12
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d3db      	bcc.n	801027c <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80102c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102c8:	4a39      	ldr	r2, [pc, #228]	; (80103b0 <readCanToStructs+0x628>)
 80102ca:	f240 4112 	movw	r1, #1042	; 0x412
 80102ce:	fb01 f303 	mul.w	r3, r1, r3
 80102d2:	4413      	add	r3, r2
 80102d4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	4613      	mov	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80102e2:	4b32      	ldr	r3, [pc, #200]	; (80103ac <readCanToStructs+0x624>)
 80102e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	4930      	ldr	r1, [pc, #192]	; (80103ac <readCanToStructs+0x624>)
 80102ec:	011b      	lsls	r3, r3, #4
 80102ee:	440b      	add	r3, r1
 80102f0:	330c      	adds	r3, #12
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	3b01      	subs	r3, #1
 80102f6:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80102f8:	2b17      	cmp	r3, #23
 80102fa:	d932      	bls.n	8010362 <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 80102fc:	4b31      	ldr	r3, [pc, #196]	; (80103c4 <readCanToStructs+0x63c>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	461a      	mov	r2, r3
 8010302:	4613      	mov	r3, r2
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	4413      	add	r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	4a30      	ldr	r2, [pc, #192]	; (80103cc <readCanToStructs+0x644>)
 801030c:	4413      	add	r3, r2
 801030e:	2218      	movs	r2, #24
 8010310:	492c      	ldr	r1, [pc, #176]	; (80103c4 <readCanToStructs+0x63c>)
 8010312:	4618      	mov	r0, r3
 8010314:	f011 fe7e 	bl	8022014 <memcpy>
					if(Debug_flag == 1)
 8010318:	4b28      	ldr	r3, [pc, #160]	; (80103bc <readCanToStructs+0x634>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d105      	bne.n	801032c <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010320:	4b28      	ldr	r3, [pc, #160]	; (80103c4 <readCanToStructs+0x63c>)
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	4619      	mov	r1, r3
 8010326:	482a      	ldr	r0, [pc, #168]	; (80103d0 <readCanToStructs+0x648>)
 8010328:	f011 ff84 	bl	8022234 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801032c:	4b29      	ldr	r3, [pc, #164]	; (80103d4 <readCanToStructs+0x64c>)
 801032e:	2201      	movs	r2, #1
 8010330:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010332:	f005 f87d 	bl	8015430 <HAL_GetTick>
 8010336:	4603      	mov	r3, r0
 8010338:	4a27      	ldr	r2, [pc, #156]	; (80103d8 <readCanToStructs+0x650>)
 801033a:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801033c:	4b21      	ldr	r3, [pc, #132]	; (80103c4 <readCanToStructs+0x63c>)
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	4618      	mov	r0, r3
 8010342:	f7f7 fce1 	bl	8007d08 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801034a:	4a19      	ldr	r2, [pc, #100]	; (80103b0 <readCanToStructs+0x628>)
 801034c:	f240 4112 	movw	r1, #1042	; 0x412
 8010350:	fb01 f303 	mul.w	r3, r1, r3
 8010354:	4413      	add	r3, r2
 8010356:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801035a:	2200      	movs	r2, #0
 801035c:	701a      	strb	r2, [r3, #0]
				break;
 801035e:	f000 be47 	b.w	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8010362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010366:	4a12      	ldr	r2, [pc, #72]	; (80103b0 <readCanToStructs+0x628>)
 8010368:	f240 4112 	movw	r1, #1042	; 0x412
 801036c:	fb01 f303 	mul.w	r3, r1, r3
 8010370:	4413      	add	r3, r2
 8010372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010376:	2201      	movs	r2, #1
 8010378:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 801037a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801037e:	490c      	ldr	r1, [pc, #48]	; (80103b0 <readCanToStructs+0x628>)
 8010380:	f240 4212 	movw	r2, #1042	; 0x412
 8010384:	fb03 f202 	mul.w	r2, r3, r2
 8010388:	440a      	add	r2, r1
 801038a:	f202 4203 	addw	r2, r2, #1027	; 0x403
 801038e:	7812      	ldrb	r2, [r2, #0]
 8010390:	3201      	adds	r2, #1
 8010392:	b2d0      	uxtb	r0, r2
 8010394:	4a06      	ldr	r2, [pc, #24]	; (80103b0 <readCanToStructs+0x628>)
 8010396:	f240 4112 	movw	r1, #1042	; 0x412
 801039a:	fb01 f303 	mul.w	r3, r1, r3
 801039e:	4413      	add	r3, r2
 80103a0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80103a4:	4602      	mov	r2, r0
 80103a6:	701a      	strb	r2, [r3, #0]
				break;
 80103a8:	f000 be22 	b.w	8010ff0 <readCanToStructs+0x1268>
 80103ac:	20005b10 	.word	0x20005b10
 80103b0:	200052ec 	.word	0x200052ec
 80103b4:	20002860 	.word	0x20002860
 80103b8:	20002868 	.word	0x20002868
 80103bc:	20000645 	.word	0x20000645
 80103c0:	080268f8 	.word	0x080268f8
 80103c4:	2000186c 	.word	0x2000186c
 80103c8:	08026910 	.word	0x08026910
 80103cc:	20001764 	.word	0x20001764
 80103d0:	08026934 	.word	0x08026934
 80103d4:	20000108 	.word	0x20000108
 80103d8:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80103dc:	4b9f      	ldr	r3, [pc, #636]	; (801065c <readCanToStructs+0x8d4>)
 80103de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80103e0:	4b9f      	ldr	r3, [pc, #636]	; (8010660 <readCanToStructs+0x8d8>)
 80103e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103e6:	885b      	ldrh	r3, [r3, #2]
 80103e8:	4a9d      	ldr	r2, [pc, #628]	; (8010660 <readCanToStructs+0x8d8>)
 80103ea:	011b      	lsls	r3, r3, #4
 80103ec:	4413      	add	r3, r2
 80103ee:	3304      	adds	r3, #4
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80103f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d110      	bne.n	8010420 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80103fe:	2218      	movs	r2, #24
 8010400:	2100      	movs	r1, #0
 8010402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010404:	f011 fe2e 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801040c:	4a95      	ldr	r2, [pc, #596]	; (8010664 <readCanToStructs+0x8dc>)
 801040e:	f240 4112 	movw	r1, #1042	; 0x412
 8010412:	fb01 f303 	mul.w	r3, r1, r3
 8010416:	4413      	add	r3, r2
 8010418:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801041c:	2200      	movs	r2, #0
 801041e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010424:	4a8f      	ldr	r2, [pc, #572]	; (8010664 <readCanToStructs+0x8dc>)
 8010426:	f240 4112 	movw	r1, #1042	; 0x412
 801042a:	fb01 f303 	mul.w	r3, r1, r3
 801042e:	4413      	add	r3, r2
 8010430:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801043a:	429a      	cmp	r2, r3
 801043c:	d015      	beq.n	801046a <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801043e:	488a      	ldr	r0, [pc, #552]	; (8010668 <readCanToStructs+0x8e0>)
 8010440:	f011 ff94 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010444:	2218      	movs	r2, #24
 8010446:	2100      	movs	r1, #0
 8010448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801044a:	f011 fe0b 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801044e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010452:	4a84      	ldr	r2, [pc, #528]	; (8010664 <readCanToStructs+0x8dc>)
 8010454:	f240 4112 	movw	r1, #1042	; 0x412
 8010458:	fb01 f303 	mul.w	r3, r1, r3
 801045c:	4413      	add	r3, r2
 801045e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010462:	2200      	movs	r2, #0
 8010464:	701a      	strb	r2, [r3, #0]
					break;
 8010466:	f000 bdc3 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801046a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801046e:	4613      	mov	r3, r2
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	1a9b      	subs	r3, r3, r2
 8010474:	461a      	mov	r2, r3
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	4413      	add	r3, r2
 801047a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801047c:	2301      	movs	r3, #1
 801047e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010482:	e016      	b.n	80104b2 <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010484:	4b76      	ldr	r3, [pc, #472]	; (8010660 <readCanToStructs+0x8d8>)
 8010486:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801048a:	885b      	ldrh	r3, [r3, #2]
 801048c:	461a      	mov	r2, r3
 801048e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010492:	4973      	ldr	r1, [pc, #460]	; (8010660 <readCanToStructs+0x8d8>)
 8010494:	0112      	lsls	r2, r2, #4
 8010496:	440a      	add	r2, r1
 8010498:	4413      	add	r3, r2
 801049a:	3304      	adds	r3, #4
 801049c:	781a      	ldrb	r2, [r3, #0]
 801049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	3301      	adds	r3, #1
 80104a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80104a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ac:	3301      	adds	r3, #1
 80104ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104b2:	4b6b      	ldr	r3, [pc, #428]	; (8010660 <readCanToStructs+0x8d8>)
 80104b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104b8:	885b      	ldrh	r3, [r3, #2]
 80104ba:	4a69      	ldr	r2, [pc, #420]	; (8010660 <readCanToStructs+0x8d8>)
 80104bc:	011b      	lsls	r3, r3, #4
 80104be:	4413      	add	r3, r2
 80104c0:	330c      	adds	r3, #12
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d3db      	bcc.n	8010484 <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80104cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104d0:	4a64      	ldr	r2, [pc, #400]	; (8010664 <readCanToStructs+0x8dc>)
 80104d2:	f240 4112 	movw	r1, #1042	; 0x412
 80104d6:	fb01 f303 	mul.w	r3, r1, r3
 80104da:	4413      	add	r3, r2
 80104dc:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	461a      	mov	r2, r3
 80104e4:	4613      	mov	r3, r2
 80104e6:	00db      	lsls	r3, r3, #3
 80104e8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80104ea:	4b5d      	ldr	r3, [pc, #372]	; (8010660 <readCanToStructs+0x8d8>)
 80104ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104f0:	885b      	ldrh	r3, [r3, #2]
 80104f2:	495b      	ldr	r1, [pc, #364]	; (8010660 <readCanToStructs+0x8d8>)
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	440b      	add	r3, r1
 80104f8:	330c      	adds	r3, #12
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010500:	2b17      	cmp	r3, #23
 8010502:	d932      	bls.n	801056a <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010504:	4b55      	ldr	r3, [pc, #340]	; (801065c <readCanToStructs+0x8d4>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	4a56      	ldr	r2, [pc, #344]	; (801066c <readCanToStructs+0x8e4>)
 8010514:	4413      	add	r3, r2
 8010516:	2218      	movs	r2, #24
 8010518:	4950      	ldr	r1, [pc, #320]	; (801065c <readCanToStructs+0x8d4>)
 801051a:	4618      	mov	r0, r3
 801051c:	f011 fd7a 	bl	8022014 <memcpy>
					if(Debug_flag == 1)
 8010520:	4b53      	ldr	r3, [pc, #332]	; (8010670 <readCanToStructs+0x8e8>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d105      	bne.n	8010534 <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010528:	4b4c      	ldr	r3, [pc, #304]	; (801065c <readCanToStructs+0x8d4>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	4619      	mov	r1, r3
 801052e:	4851      	ldr	r0, [pc, #324]	; (8010674 <readCanToStructs+0x8ec>)
 8010530:	f011 fe80 	bl	8022234 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010534:	f004 ff7c 	bl	8015430 <HAL_GetTick>
 8010538:	4603      	mov	r3, r0
 801053a:	4a4f      	ldr	r2, [pc, #316]	; (8010678 <readCanToStructs+0x8f0>)
 801053c:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801053e:	4b4f      	ldr	r3, [pc, #316]	; (801067c <readCanToStructs+0x8f4>)
 8010540:	2201      	movs	r2, #1
 8010542:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010544:	4b45      	ldr	r3, [pc, #276]	; (801065c <readCanToStructs+0x8d4>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	4618      	mov	r0, r3
 801054a:	f7f7 fbdd 	bl	8007d08 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801054e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010552:	4a44      	ldr	r2, [pc, #272]	; (8010664 <readCanToStructs+0x8dc>)
 8010554:	f240 4112 	movw	r1, #1042	; 0x412
 8010558:	fb01 f303 	mul.w	r3, r1, r3
 801055c:	4413      	add	r3, r2
 801055e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010562:	2200      	movs	r2, #0
 8010564:	701a      	strb	r2, [r3, #0]
				break;
 8010566:	f000 bd43 	b.w	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 801056a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801056e:	4a3d      	ldr	r2, [pc, #244]	; (8010664 <readCanToStructs+0x8dc>)
 8010570:	f240 4112 	movw	r1, #1042	; 0x412
 8010574:	fb01 f303 	mul.w	r3, r1, r3
 8010578:	4413      	add	r3, r2
 801057a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801057e:	2201      	movs	r2, #1
 8010580:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8010582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010586:	4937      	ldr	r1, [pc, #220]	; (8010664 <readCanToStructs+0x8dc>)
 8010588:	f240 4212 	movw	r2, #1042	; 0x412
 801058c:	fb03 f202 	mul.w	r2, r3, r2
 8010590:	440a      	add	r2, r1
 8010592:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8010596:	7812      	ldrb	r2, [r2, #0]
 8010598:	3201      	adds	r2, #1
 801059a:	b2d0      	uxtb	r0, r2
 801059c:	4a31      	ldr	r2, [pc, #196]	; (8010664 <readCanToStructs+0x8dc>)
 801059e:	f240 4112 	movw	r1, #1042	; 0x412
 80105a2:	fb01 f303 	mul.w	r3, r1, r3
 80105a6:	4413      	add	r3, r2
 80105a8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80105ac:	4602      	mov	r2, r0
 80105ae:	701a      	strb	r2, [r3, #0]
				break;
 80105b0:	f000 bd1e 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80105b4:	4b32      	ldr	r3, [pc, #200]	; (8010680 <readCanToStructs+0x8f8>)
 80105b6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80105b8:	4b29      	ldr	r3, [pc, #164]	; (8010660 <readCanToStructs+0x8d8>)
 80105ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105be:	885b      	ldrh	r3, [r3, #2]
 80105c0:	4a27      	ldr	r2, [pc, #156]	; (8010660 <readCanToStructs+0x8d8>)
 80105c2:	011b      	lsls	r3, r3, #4
 80105c4:	4413      	add	r3, r2
 80105c6:	3304      	adds	r3, #4
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80105ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d110      	bne.n	80105f8 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80105d6:	2246      	movs	r2, #70	; 0x46
 80105d8:	2100      	movs	r1, #0
 80105da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105dc:	f011 fd42 	bl	8022064 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80105e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105e4:	4a1f      	ldr	r2, [pc, #124]	; (8010664 <readCanToStructs+0x8dc>)
 80105e6:	f240 4112 	movw	r1, #1042	; 0x412
 80105ea:	fb01 f303 	mul.w	r3, r1, r3
 80105ee:	4413      	add	r3, r2
 80105f0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80105f4:	2200      	movs	r2, #0
 80105f6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 80105f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105fc:	4a19      	ldr	r2, [pc, #100]	; (8010664 <readCanToStructs+0x8dc>)
 80105fe:	f240 4112 	movw	r1, #1042	; 0x412
 8010602:	fb01 f303 	mul.w	r3, r1, r3
 8010606:	4413      	add	r3, r2
 8010608:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010612:	429a      	cmp	r2, r3
 8010614:	d015      	beq.n	8010642 <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010616:	481b      	ldr	r0, [pc, #108]	; (8010684 <readCanToStructs+0x8fc>)
 8010618:	f011 fea8 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801061c:	2246      	movs	r2, #70	; 0x46
 801061e:	2100      	movs	r1, #0
 8010620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010622:	f011 fd1f 	bl	8022064 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801062a:	4a0e      	ldr	r2, [pc, #56]	; (8010664 <readCanToStructs+0x8dc>)
 801062c:	f240 4112 	movw	r1, #1042	; 0x412
 8010630:	fb01 f303 	mul.w	r3, r1, r3
 8010634:	4413      	add	r3, r2
 8010636:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801063a:	2200      	movs	r2, #0
 801063c:	701a      	strb	r2, [r3, #0]
					break;
 801063e:	f000 bcd7 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010642:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010646:	4613      	mov	r3, r2
 8010648:	00db      	lsls	r3, r3, #3
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	461a      	mov	r2, r3
 801064e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010650:	4413      	add	r3, r2
 8010652:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010654:	2301      	movs	r3, #1
 8010656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801065a:	e02c      	b.n	80106b6 <readCanToStructs+0x92e>
 801065c:	2000186c 	.word	0x2000186c
 8010660:	20005b10 	.word	0x20005b10
 8010664:	200052ec 	.word	0x200052ec
 8010668:	08026944 	.word	0x08026944
 801066c:	20001764 	.word	0x20001764
 8010670:	20000645 	.word	0x20000645
 8010674:	08026968 	.word	0x08026968
 8010678:	20000e40 	.word	0x20000e40
 801067c:	20000108 	.word	0x20000108
 8010680:	20001914 	.word	0x20001914
 8010684:	08026978 	.word	0x08026978
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010688:	4bb9      	ldr	r3, [pc, #740]	; (8010970 <readCanToStructs+0xbe8>)
 801068a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801068e:	885b      	ldrh	r3, [r3, #2]
 8010690:	461a      	mov	r2, r3
 8010692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010696:	49b6      	ldr	r1, [pc, #728]	; (8010970 <readCanToStructs+0xbe8>)
 8010698:	0112      	lsls	r2, r2, #4
 801069a:	440a      	add	r2, r1
 801069c:	4413      	add	r3, r2
 801069e:	3304      	adds	r3, #4
 80106a0:	781a      	ldrb	r2, [r3, #0]
 80106a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80106a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a8:	3301      	adds	r3, #1
 80106aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80106ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106b0:	3301      	adds	r3, #1
 80106b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80106b6:	4bae      	ldr	r3, [pc, #696]	; (8010970 <readCanToStructs+0xbe8>)
 80106b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106bc:	885b      	ldrh	r3, [r3, #2]
 80106be:	4aac      	ldr	r2, [pc, #688]	; (8010970 <readCanToStructs+0xbe8>)
 80106c0:	011b      	lsls	r3, r3, #4
 80106c2:	4413      	add	r3, r2
 80106c4:	330c      	adds	r3, #12
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d3db      	bcc.n	8010688 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 80106d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106d4:	4aa7      	ldr	r2, [pc, #668]	; (8010974 <readCanToStructs+0xbec>)
 80106d6:	f240 4112 	movw	r1, #1042	; 0x412
 80106da:	fb01 f303 	mul.w	r3, r1, r3
 80106de:	4413      	add	r3, r2
 80106e0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	4613      	mov	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 80106ee:	4ba0      	ldr	r3, [pc, #640]	; (8010970 <readCanToStructs+0xbe8>)
 80106f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106f4:	885b      	ldrh	r3, [r3, #2]
 80106f6:	499e      	ldr	r1, [pc, #632]	; (8010970 <readCanToStructs+0xbe8>)
 80106f8:	011b      	lsls	r3, r3, #4
 80106fa:	440b      	add	r3, r1
 80106fc:	330c      	adds	r3, #12
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	3b01      	subs	r3, #1
 8010702:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010704:	2b45      	cmp	r3, #69	; 0x45
 8010706:	d93d      	bls.n	8010784 <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010708:	4b9b      	ldr	r3, [pc, #620]	; (8010978 <readCanToStructs+0xbf0>)
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d102      	bne.n	8010716 <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010710:	489a      	ldr	r0, [pc, #616]	; (801097c <readCanToStructs+0xbf4>)
 8010712:	f011 fe2b 	bl	802236c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010716:	2246      	movs	r2, #70	; 0x46
 8010718:	2100      	movs	r1, #0
 801071a:	4899      	ldr	r0, [pc, #612]	; (8010980 <readCanToStructs+0xbf8>)
 801071c:	f011 fca2 	bl	8022064 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010720:	4a97      	ldr	r2, [pc, #604]	; (8010980 <readCanToStructs+0xbf8>)
 8010722:	4b98      	ldr	r3, [pc, #608]	; (8010984 <readCanToStructs+0xbfc>)
 8010724:	4610      	mov	r0, r2
 8010726:	4619      	mov	r1, r3
 8010728:	2346      	movs	r3, #70	; 0x46
 801072a:	461a      	mov	r2, r3
 801072c:	f011 fc72 	bl	8022014 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010730:	4b95      	ldr	r3, [pc, #596]	; (8010988 <readCanToStructs+0xc00>)
 8010732:	2201      	movs	r2, #1
 8010734:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010736:	4b92      	ldr	r3, [pc, #584]	; (8010980 <readCanToStructs+0xbf8>)
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	4619      	mov	r1, r3
 801073c:	4a93      	ldr	r2, [pc, #588]	; (801098c <readCanToStructs+0xc04>)
 801073e:	460b      	mov	r3, r1
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	440b      	add	r3, r1
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4413      	add	r3, r2
 8010748:	3304      	adds	r3, #4
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b01      	cmp	r3, #1
 801074e:	d00b      	beq.n	8010768 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010750:	4b8b      	ldr	r3, [pc, #556]	; (8010980 <readCanToStructs+0xbf8>)
 8010752:	889b      	ldrh	r3, [r3, #4]
 8010754:	b2d9      	uxtb	r1, r3
 8010756:	4b8a      	ldr	r3, [pc, #552]	; (8010980 <readCanToStructs+0xbf8>)
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	b2da      	uxtb	r2, r3
 801075c:	4b88      	ldr	r3, [pc, #544]	; (8010980 <readCanToStructs+0xbf8>)
 801075e:	885b      	ldrh	r3, [r3, #2]
 8010760:	b2db      	uxtb	r3, r3
 8010762:	488b      	ldr	r0, [pc, #556]	; (8010990 <readCanToStructs+0xc08>)
 8010764:	f7f3 ff72 	bl	800464c <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801076c:	4a81      	ldr	r2, [pc, #516]	; (8010974 <readCanToStructs+0xbec>)
 801076e:	f240 4112 	movw	r1, #1042	; 0x412
 8010772:	fb01 f303 	mul.w	r3, r1, r3
 8010776:	4413      	add	r3, r2
 8010778:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801077c:	2200      	movs	r2, #0
 801077e:	701a      	strb	r2, [r3, #0]
				break;
 8010780:	f000 bc36 	b.w	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8010784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010788:	4a7a      	ldr	r2, [pc, #488]	; (8010974 <readCanToStructs+0xbec>)
 801078a:	f240 4112 	movw	r1, #1042	; 0x412
 801078e:	fb01 f303 	mul.w	r3, r1, r3
 8010792:	4413      	add	r3, r2
 8010794:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010798:	2201      	movs	r2, #1
 801079a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 801079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107a0:	4974      	ldr	r1, [pc, #464]	; (8010974 <readCanToStructs+0xbec>)
 80107a2:	f240 4212 	movw	r2, #1042	; 0x412
 80107a6:	fb03 f202 	mul.w	r2, r3, r2
 80107aa:	440a      	add	r2, r1
 80107ac:	f202 4207 	addw	r2, r2, #1031	; 0x407
 80107b0:	7812      	ldrb	r2, [r2, #0]
 80107b2:	3201      	adds	r2, #1
 80107b4:	b2d0      	uxtb	r0, r2
 80107b6:	4a6f      	ldr	r2, [pc, #444]	; (8010974 <readCanToStructs+0xbec>)
 80107b8:	f240 4112 	movw	r1, #1042	; 0x412
 80107bc:	fb01 f303 	mul.w	r3, r1, r3
 80107c0:	4413      	add	r3, r2
 80107c2:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80107c6:	4602      	mov	r2, r0
 80107c8:	701a      	strb	r2, [r3, #0]
				break;
 80107ca:	f000 bc11 	b.w	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80107ce:	4b6d      	ldr	r3, [pc, #436]	; (8010984 <readCanToStructs+0xbfc>)
 80107d0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80107d2:	4b67      	ldr	r3, [pc, #412]	; (8010970 <readCanToStructs+0xbe8>)
 80107d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107d8:	885b      	ldrh	r3, [r3, #2]
 80107da:	4a65      	ldr	r2, [pc, #404]	; (8010970 <readCanToStructs+0xbe8>)
 80107dc:	011b      	lsls	r3, r3, #4
 80107de:	4413      	add	r3, r2
 80107e0:	3304      	adds	r3, #4
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80107e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d110      	bne.n	8010812 <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80107f0:	2246      	movs	r2, #70	; 0x46
 80107f2:	2100      	movs	r1, #0
 80107f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f6:	f011 fc35 	bl	8022064 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80107fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107fe:	4a5d      	ldr	r2, [pc, #372]	; (8010974 <readCanToStructs+0xbec>)
 8010800:	f240 4112 	movw	r1, #1042	; 0x412
 8010804:	fb01 f303 	mul.w	r3, r1, r3
 8010808:	4413      	add	r3, r2
 801080a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010816:	4a57      	ldr	r2, [pc, #348]	; (8010974 <readCanToStructs+0xbec>)
 8010818:	f240 4112 	movw	r1, #1042	; 0x412
 801081c:	fb01 f303 	mul.w	r3, r1, r3
 8010820:	4413      	add	r3, r2
 8010822:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801082c:	429a      	cmp	r2, r3
 801082e:	d014      	beq.n	801085a <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010830:	4858      	ldr	r0, [pc, #352]	; (8010994 <readCanToStructs+0xc0c>)
 8010832:	f011 fd9b 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010836:	2246      	movs	r2, #70	; 0x46
 8010838:	2100      	movs	r1, #0
 801083a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801083c:	f011 fc12 	bl	8022064 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010844:	4a4b      	ldr	r2, [pc, #300]	; (8010974 <readCanToStructs+0xbec>)
 8010846:	f240 4112 	movw	r1, #1042	; 0x412
 801084a:	fb01 f303 	mul.w	r3, r1, r3
 801084e:	4413      	add	r3, r2
 8010850:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
					break;
 8010858:	e3ca      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801085a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801085e:	4613      	mov	r3, r2
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	1a9b      	subs	r3, r3, r2
 8010864:	461a      	mov	r2, r3
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	4413      	add	r3, r2
 801086a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801086c:	2301      	movs	r3, #1
 801086e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010872:	e016      	b.n	80108a2 <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010874:	4b3e      	ldr	r3, [pc, #248]	; (8010970 <readCanToStructs+0xbe8>)
 8010876:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801087a:	885b      	ldrh	r3, [r3, #2]
 801087c:	461a      	mov	r2, r3
 801087e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010882:	493b      	ldr	r1, [pc, #236]	; (8010970 <readCanToStructs+0xbe8>)
 8010884:	0112      	lsls	r2, r2, #4
 8010886:	440a      	add	r2, r1
 8010888:	4413      	add	r3, r2
 801088a:	3304      	adds	r3, #4
 801088c:	781a      	ldrb	r2, [r3, #0]
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	3301      	adds	r3, #1
 8010896:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801089c:	3301      	adds	r3, #1
 801089e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80108a2:	4b33      	ldr	r3, [pc, #204]	; (8010970 <readCanToStructs+0xbe8>)
 80108a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108a8:	885b      	ldrh	r3, [r3, #2]
 80108aa:	4a31      	ldr	r2, [pc, #196]	; (8010970 <readCanToStructs+0xbe8>)
 80108ac:	011b      	lsls	r3, r3, #4
 80108ae:	4413      	add	r3, r2
 80108b0:	330c      	adds	r3, #12
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d3db      	bcc.n	8010874 <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80108bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108c0:	4a2c      	ldr	r2, [pc, #176]	; (8010974 <readCanToStructs+0xbec>)
 80108c2:	f240 4112 	movw	r1, #1042	; 0x412
 80108c6:	fb01 f303 	mul.w	r3, r1, r3
 80108ca:	4413      	add	r3, r2
 80108cc:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4613      	mov	r3, r2
 80108d6:	00db      	lsls	r3, r3, #3
 80108d8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 80108da:	4b25      	ldr	r3, [pc, #148]	; (8010970 <readCanToStructs+0xbe8>)
 80108dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108e0:	885b      	ldrh	r3, [r3, #2]
 80108e2:	4923      	ldr	r1, [pc, #140]	; (8010970 <readCanToStructs+0xbe8>)
 80108e4:	011b      	lsls	r3, r3, #4
 80108e6:	440b      	add	r3, r1
 80108e8:	330c      	adds	r3, #12
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80108f0:	2b45      	cmp	r3, #69	; 0x45
 80108f2:	d953      	bls.n	801099c <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 80108f4:	4b20      	ldr	r3, [pc, #128]	; (8010978 <readCanToStructs+0xbf0>)
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d102      	bne.n	8010902 <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 80108fc:	4826      	ldr	r0, [pc, #152]	; (8010998 <readCanToStructs+0xc10>)
 80108fe:	f011 fd35 	bl	802236c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010902:	2246      	movs	r2, #70	; 0x46
 8010904:	2100      	movs	r1, #0
 8010906:	481e      	ldr	r0, [pc, #120]	; (8010980 <readCanToStructs+0xbf8>)
 8010908:	f011 fbac 	bl	8022064 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801090c:	4a1c      	ldr	r2, [pc, #112]	; (8010980 <readCanToStructs+0xbf8>)
 801090e:	4b1d      	ldr	r3, [pc, #116]	; (8010984 <readCanToStructs+0xbfc>)
 8010910:	4610      	mov	r0, r2
 8010912:	4619      	mov	r1, r3
 8010914:	2346      	movs	r3, #70	; 0x46
 8010916:	461a      	mov	r2, r3
 8010918:	f011 fb7c 	bl	8022014 <memcpy>
					Is_CAN_Exchange_happening = YES;
 801091c:	4b1a      	ldr	r3, [pc, #104]	; (8010988 <readCanToStructs+0xc00>)
 801091e:	2201      	movs	r2, #1
 8010920:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010922:	4b17      	ldr	r3, [pc, #92]	; (8010980 <readCanToStructs+0xbf8>)
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	4619      	mov	r1, r3
 8010928:	4a18      	ldr	r2, [pc, #96]	; (801098c <readCanToStructs+0xc04>)
 801092a:	460b      	mov	r3, r1
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	440b      	add	r3, r1
 8010930:	00db      	lsls	r3, r3, #3
 8010932:	4413      	add	r3, r2
 8010934:	3303      	adds	r3, #3
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d00b      	beq.n	8010954 <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 801093c:	4b10      	ldr	r3, [pc, #64]	; (8010980 <readCanToStructs+0xbf8>)
 801093e:	889b      	ldrh	r3, [r3, #4]
 8010940:	b2d9      	uxtb	r1, r3
 8010942:	4b0f      	ldr	r3, [pc, #60]	; (8010980 <readCanToStructs+0xbf8>)
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	b2da      	uxtb	r2, r3
 8010948:	4b0d      	ldr	r3, [pc, #52]	; (8010980 <readCanToStructs+0xbf8>)
 801094a:	885b      	ldrh	r3, [r3, #2]
 801094c:	b2db      	uxtb	r3, r3
 801094e:	4810      	ldr	r0, [pc, #64]	; (8010990 <readCanToStructs+0xc08>)
 8010950:	f7f3 fe7c 	bl	800464c <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010958:	4a06      	ldr	r2, [pc, #24]	; (8010974 <readCanToStructs+0xbec>)
 801095a:	f240 4112 	movw	r1, #1042	; 0x412
 801095e:	fb01 f303 	mul.w	r3, r1, r3
 8010962:	4413      	add	r3, r2
 8010964:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010968:	2200      	movs	r2, #0
 801096a:	701a      	strb	r2, [r3, #0]
				break;
 801096c:	e340      	b.n	8010ff0 <readCanToStructs+0x1268>
 801096e:	bf00      	nop
 8010970:	20005b10 	.word	0x20005b10
 8010974:	200052ec 	.word	0x200052ec
 8010978:	20000645 	.word	0x20000645
 801097c:	0802699c 	.word	0x0802699c
 8010980:	200018cc 	.word	0x200018cc
 8010984:	20001914 	.word	0x20001914
 8010988:	20000108 	.word	0x20000108
 801098c:	20001674 	.word	0x20001674
 8010990:	200018d2 	.word	0x200018d2
 8010994:	080269ac 	.word	0x080269ac
 8010998:	080269d0 	.word	0x080269d0
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 801099c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109a0:	4a9f      	ldr	r2, [pc, #636]	; (8010c20 <readCanToStructs+0xe98>)
 80109a2:	f240 4112 	movw	r1, #1042	; 0x412
 80109a6:	fb01 f303 	mul.w	r3, r1, r3
 80109aa:	4413      	add	r3, r2
 80109ac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80109b0:	2201      	movs	r2, #1
 80109b2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 80109b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109b8:	4999      	ldr	r1, [pc, #612]	; (8010c20 <readCanToStructs+0xe98>)
 80109ba:	f240 4212 	movw	r2, #1042	; 0x412
 80109be:	fb03 f202 	mul.w	r2, r3, r2
 80109c2:	440a      	add	r2, r1
 80109c4:	f202 4209 	addw	r2, r2, #1033	; 0x409
 80109c8:	7812      	ldrb	r2, [r2, #0]
 80109ca:	3201      	adds	r2, #1
 80109cc:	b2d0      	uxtb	r0, r2
 80109ce:	4a94      	ldr	r2, [pc, #592]	; (8010c20 <readCanToStructs+0xe98>)
 80109d0:	f240 4112 	movw	r1, #1042	; 0x412
 80109d4:	fb01 f303 	mul.w	r3, r1, r3
 80109d8:	4413      	add	r3, r2
 80109da:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80109de:	4602      	mov	r2, r0
 80109e0:	701a      	strb	r2, [r3, #0]
				break;
 80109e2:	e305      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 80109e4:	4b8f      	ldr	r3, [pc, #572]	; (8010c24 <readCanToStructs+0xe9c>)
 80109e6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80109e8:	4b8f      	ldr	r3, [pc, #572]	; (8010c28 <readCanToStructs+0xea0>)
 80109ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109ee:	885b      	ldrh	r3, [r3, #2]
 80109f0:	4a8d      	ldr	r2, [pc, #564]	; (8010c28 <readCanToStructs+0xea0>)
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	4413      	add	r3, r2
 80109f6:	3304      	adds	r3, #4
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80109fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d110      	bne.n	8010a28 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010a06:	2208      	movs	r2, #8
 8010a08:	2100      	movs	r1, #0
 8010a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a0c:	f011 fb2a 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a14:	4a82      	ldr	r2, [pc, #520]	; (8010c20 <readCanToStructs+0xe98>)
 8010a16:	f240 4112 	movw	r1, #1042	; 0x412
 8010a1a:	fb01 f303 	mul.w	r3, r1, r3
 8010a1e:	4413      	add	r3, r2
 8010a20:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010a24:	2200      	movs	r2, #0
 8010a26:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a2c:	4a7c      	ldr	r2, [pc, #496]	; (8010c20 <readCanToStructs+0xe98>)
 8010a2e:	f240 4112 	movw	r1, #1042	; 0x412
 8010a32:	fb01 f303 	mul.w	r3, r1, r3
 8010a36:	4413      	add	r3, r2
 8010a38:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d014      	beq.n	8010a70 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8010a46:	4879      	ldr	r0, [pc, #484]	; (8010c2c <readCanToStructs+0xea4>)
 8010a48:	f011 fc90 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010a4c:	2208      	movs	r2, #8
 8010a4e:	2100      	movs	r1, #0
 8010a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a52:	f011 fb07 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a5a:	4a71      	ldr	r2, [pc, #452]	; (8010c20 <readCanToStructs+0xe98>)
 8010a5c:	f240 4112 	movw	r1, #1042	; 0x412
 8010a60:	fb01 f303 	mul.w	r3, r1, r3
 8010a64:	4413      	add	r3, r2
 8010a66:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	701a      	strb	r2, [r3, #0]
					break;
 8010a6e:	e2bf      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010a70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a74:	4613      	mov	r3, r2
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	1a9b      	subs	r3, r3, r2
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7e:	4413      	add	r3, r2
 8010a80:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010a82:	2301      	movs	r3, #1
 8010a84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a88:	e016      	b.n	8010ab8 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010a8a:	4b67      	ldr	r3, [pc, #412]	; (8010c28 <readCanToStructs+0xea0>)
 8010a8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a90:	885b      	ldrh	r3, [r3, #2]
 8010a92:	461a      	mov	r2, r3
 8010a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a98:	4963      	ldr	r1, [pc, #396]	; (8010c28 <readCanToStructs+0xea0>)
 8010a9a:	0112      	lsls	r2, r2, #4
 8010a9c:	440a      	add	r2, r1
 8010a9e:	4413      	add	r3, r2
 8010aa0:	3304      	adds	r3, #4
 8010aa2:	781a      	ldrb	r2, [r3, #0]
 8010aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	3301      	adds	r3, #1
 8010aac:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010aae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ab8:	4b5b      	ldr	r3, [pc, #364]	; (8010c28 <readCanToStructs+0xea0>)
 8010aba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010abe:	885b      	ldrh	r3, [r3, #2]
 8010ac0:	4a59      	ldr	r2, [pc, #356]	; (8010c28 <readCanToStructs+0xea0>)
 8010ac2:	011b      	lsls	r3, r3, #4
 8010ac4:	4413      	add	r3, r2
 8010ac6:	330c      	adds	r3, #12
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d3db      	bcc.n	8010a8a <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8010ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ad6:	4a52      	ldr	r2, [pc, #328]	; (8010c20 <readCanToStructs+0xe98>)
 8010ad8:	f240 4112 	movw	r1, #1042	; 0x412
 8010adc:	fb01 f303 	mul.w	r3, r1, r3
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	4613      	mov	r3, r2
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	1a9a      	subs	r2, r3, r2
 8010af0:	4b4d      	ldr	r3, [pc, #308]	; (8010c28 <readCanToStructs+0xea0>)
 8010af2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010af6:	885b      	ldrh	r3, [r3, #2]
 8010af8:	494b      	ldr	r1, [pc, #300]	; (8010c28 <readCanToStructs+0xea0>)
 8010afa:	011b      	lsls	r3, r3, #4
 8010afc:	440b      	add	r3, r1
 8010afe:	330c      	adds	r3, #12
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	3b01      	subs	r3, #1
 8010b04:	4413      	add	r3, r2
 8010b06:	2b07      	cmp	r3, #7
 8010b08:	d912      	bls.n	8010b30 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 8010b0a:	4849      	ldr	r0, [pc, #292]	; (8010c30 <readCanToStructs+0xea8>)
 8010b0c:	f011 fc2e 	bl	802236c <puts>
					Is_CAN_Exchange_happening = YES;
 8010b10:	4b48      	ldr	r3, [pc, #288]	; (8010c34 <readCanToStructs+0xeac>)
 8010b12:	2201      	movs	r2, #1
 8010b14:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b1a:	4a41      	ldr	r2, [pc, #260]	; (8010c20 <readCanToStructs+0xe98>)
 8010b1c:	f240 4112 	movw	r1, #1042	; 0x412
 8010b20:	fb01 f303 	mul.w	r3, r1, r3
 8010b24:	4413      	add	r3, r2
 8010b26:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	701a      	strb	r2, [r3, #0]
				break;
 8010b2e:	e25f      	b.n	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8010b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b34:	4a3a      	ldr	r2, [pc, #232]	; (8010c20 <readCanToStructs+0xe98>)
 8010b36:	f240 4112 	movw	r1, #1042	; 0x412
 8010b3a:	fb01 f303 	mul.w	r3, r1, r3
 8010b3e:	4413      	add	r3, r2
 8010b40:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8010b44:	2201      	movs	r2, #1
 8010b46:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8010b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b4c:	4934      	ldr	r1, [pc, #208]	; (8010c20 <readCanToStructs+0xe98>)
 8010b4e:	f240 4212 	movw	r2, #1042	; 0x412
 8010b52:	fb03 f202 	mul.w	r2, r3, r2
 8010b56:	440a      	add	r2, r1
 8010b58:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8010b5c:	7812      	ldrb	r2, [r2, #0]
 8010b5e:	3201      	adds	r2, #1
 8010b60:	b2d0      	uxtb	r0, r2
 8010b62:	4a2f      	ldr	r2, [pc, #188]	; (8010c20 <readCanToStructs+0xe98>)
 8010b64:	f240 4112 	movw	r1, #1042	; 0x412
 8010b68:	fb01 f303 	mul.w	r3, r1, r3
 8010b6c:	4413      	add	r3, r2
 8010b6e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b72:	4602      	mov	r2, r0
 8010b74:	701a      	strb	r2, [r3, #0]
				break;
 8010b76:	e23b      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010b78:	4b2f      	ldr	r3, [pc, #188]	; (8010c38 <readCanToStructs+0xeb0>)
 8010b7a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010b7c:	4b2a      	ldr	r3, [pc, #168]	; (8010c28 <readCanToStructs+0xea0>)
 8010b7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b82:	885b      	ldrh	r3, [r3, #2]
 8010b84:	4a28      	ldr	r2, [pc, #160]	; (8010c28 <readCanToStructs+0xea0>)
 8010b86:	011b      	lsls	r3, r3, #4
 8010b88:	4413      	add	r3, r2
 8010b8a:	3304      	adds	r3, #4
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010b92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d110      	bne.n	8010bbc <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010b9a:	2214      	movs	r2, #20
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ba0:	f011 fa60 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ba8:	4a1d      	ldr	r2, [pc, #116]	; (8010c20 <readCanToStructs+0xe98>)
 8010baa:	f240 4112 	movw	r1, #1042	; 0x412
 8010bae:	fb01 f303 	mul.w	r3, r1, r3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010bb8:	2200      	movs	r2, #0
 8010bba:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8010bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bc0:	4a17      	ldr	r2, [pc, #92]	; (8010c20 <readCanToStructs+0xe98>)
 8010bc2:	f240 4112 	movw	r1, #1042	; 0x412
 8010bc6:	fb01 f303 	mul.w	r3, r1, r3
 8010bca:	4413      	add	r3, r2
 8010bcc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d014      	beq.n	8010c04 <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8010bda:	4818      	ldr	r0, [pc, #96]	; (8010c3c <readCanToStructs+0xeb4>)
 8010bdc:	f011 fbc6 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010be0:	2214      	movs	r2, #20
 8010be2:	2100      	movs	r1, #0
 8010be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010be6:	f011 fa3d 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bee:	4a0c      	ldr	r2, [pc, #48]	; (8010c20 <readCanToStructs+0xe98>)
 8010bf0:	f240 4112 	movw	r1, #1042	; 0x412
 8010bf4:	fb01 f303 	mul.w	r3, r1, r3
 8010bf8:	4413      	add	r3, r2
 8010bfa:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]
					break;
 8010c02:	e1f5      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010c04:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c08:	4613      	mov	r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	1a9b      	subs	r3, r3, r2
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	4413      	add	r3, r2
 8010c14:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c16:	2301      	movs	r3, #1
 8010c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c1c:	e027      	b.n	8010c6e <readCanToStructs+0xee6>
 8010c1e:	bf00      	nop
 8010c20:	200052ec 	.word	0x200052ec
 8010c24:	2000195c 	.word	0x2000195c
 8010c28:	20005b10 	.word	0x20005b10
 8010c2c:	080269e0 	.word	0x080269e0
 8010c30:	08026a00 	.word	0x08026a00
 8010c34:	20000108 	.word	0x20000108
 8010c38:	2000200c 	.word	0x2000200c
 8010c3c:	08026a20 	.word	0x08026a20
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010c40:	4bb9      	ldr	r3, [pc, #740]	; (8010f28 <readCanToStructs+0x11a0>)
 8010c42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c46:	885b      	ldrh	r3, [r3, #2]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c4e:	49b6      	ldr	r1, [pc, #728]	; (8010f28 <readCanToStructs+0x11a0>)
 8010c50:	0112      	lsls	r2, r2, #4
 8010c52:	440a      	add	r2, r1
 8010c54:	4413      	add	r3, r2
 8010c56:	3304      	adds	r3, #4
 8010c58:	781a      	ldrb	r2, [r3, #0]
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	3301      	adds	r3, #1
 8010c62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c68:	3301      	adds	r3, #1
 8010c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c6e:	4bae      	ldr	r3, [pc, #696]	; (8010f28 <readCanToStructs+0x11a0>)
 8010c70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c74:	885b      	ldrh	r3, [r3, #2]
 8010c76:	4aac      	ldr	r2, [pc, #688]	; (8010f28 <readCanToStructs+0x11a0>)
 8010c78:	011b      	lsls	r3, r3, #4
 8010c7a:	4413      	add	r3, r2
 8010c7c:	330c      	adds	r3, #12
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d3db      	bcc.n	8010c40 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c8c:	4aa7      	ldr	r2, [pc, #668]	; (8010f2c <readCanToStructs+0x11a4>)
 8010c8e:	f240 4112 	movw	r1, #1042	; 0x412
 8010c92:	fb01 f303 	mul.w	r3, r1, r3
 8010c96:	4413      	add	r3, r2
 8010c98:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	00db      	lsls	r3, r3, #3
 8010ca4:	1a9a      	subs	r2, r3, r2
 8010ca6:	4ba0      	ldr	r3, [pc, #640]	; (8010f28 <readCanToStructs+0x11a0>)
 8010ca8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cac:	885b      	ldrh	r3, [r3, #2]
 8010cae:	499e      	ldr	r1, [pc, #632]	; (8010f28 <readCanToStructs+0x11a0>)
 8010cb0:	011b      	lsls	r3, r3, #4
 8010cb2:	440b      	add	r3, r1
 8010cb4:	330c      	adds	r3, #12
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	4413      	add	r3, r2
 8010cbc:	2b13      	cmp	r3, #19
 8010cbe:	d954      	bls.n	8010d6a <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	603b      	str	r3, [r7, #0]
 8010cc8:	1d3b      	adds	r3, r7, #4
 8010cca:	2224      	movs	r2, #36	; 0x24
 8010ccc:	2100      	movs	r1, #0
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f011 f9c8 	bl	8022064 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010cd4:	463b      	mov	r3, r7
 8010cd6:	2214      	movs	r2, #20
 8010cd8:	4995      	ldr	r1, [pc, #596]	; (8010f30 <readCanToStructs+0x11a8>)
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f011 f99a 	bl	8022014 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	2214      	movs	r2, #20
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	f001 ff10 	bl	8012b0c <GetCRC16>
 8010cec:	4603      	mov	r3, r0
 8010cee:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8010cf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10c      	bne.n	8010d10 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cfa:	4a8c      	ldr	r2, [pc, #560]	; (8010f2c <readCanToStructs+0x11a4>)
 8010cfc:	f240 4112 	movw	r1, #1042	; 0x412
 8010d00:	fb01 f303 	mul.w	r3, r1, r3
 8010d04:	4413      	add	r3, r2
 8010d06:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	701a      	strb	r2, [r3, #0]
				break;
 8010d0e:	e16f      	b.n	8010ff0 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 8010d10:	4b88      	ldr	r3, [pc, #544]	; (8010f34 <readCanToStructs+0x11ac>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d10a      	bne.n	8010d2e <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010d18:	4b85      	ldr	r3, [pc, #532]	; (8010f30 <readCanToStructs+0x11a8>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	4a86      	ldr	r2, [pc, #536]	; (8010f38 <readCanToStructs+0x11b0>)
 8010d1e:	3366      	adds	r3, #102	; 0x66
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4413      	add	r3, r2
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	4619      	mov	r1, r3
 8010d28:	4884      	ldr	r0, [pc, #528]	; (8010f3c <readCanToStructs+0x11b4>)
 8010d2a:	f011 fa83 	bl	8022234 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010d2e:	4b80      	ldr	r3, [pc, #512]	; (8010f30 <readCanToStructs+0x11a8>)
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	461a      	mov	r2, r3
 8010d34:	4613      	mov	r3, r2
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	4413      	add	r3, r2
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	4a80      	ldr	r2, [pc, #512]	; (8010f40 <readCanToStructs+0x11b8>)
 8010d3e:	4413      	add	r3, r2
 8010d40:	2214      	movs	r2, #20
 8010d42:	497b      	ldr	r1, [pc, #492]	; (8010f30 <readCanToStructs+0x11a8>)
 8010d44:	4618      	mov	r0, r3
 8010d46:	f011 f965 	bl	8022014 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010d4a:	4b7e      	ldr	r3, [pc, #504]	; (8010f44 <readCanToStructs+0x11bc>)
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d54:	4a75      	ldr	r2, [pc, #468]	; (8010f2c <readCanToStructs+0x11a4>)
 8010d56:	f240 4112 	movw	r1, #1042	; 0x412
 8010d5a:	fb01 f303 	mul.w	r3, r1, r3
 8010d5e:	4413      	add	r3, r2
 8010d60:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d64:	2200      	movs	r2, #0
 8010d66:	701a      	strb	r2, [r3, #0]
				break;
 8010d68:	e142      	b.n	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8010d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d6e:	4a6f      	ldr	r2, [pc, #444]	; (8010f2c <readCanToStructs+0x11a4>)
 8010d70:	f240 4112 	movw	r1, #1042	; 0x412
 8010d74:	fb01 f303 	mul.w	r3, r1, r3
 8010d78:	4413      	add	r3, r2
 8010d7a:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8010d7e:	2201      	movs	r2, #1
 8010d80:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8010d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d86:	4969      	ldr	r1, [pc, #420]	; (8010f2c <readCanToStructs+0x11a4>)
 8010d88:	f240 4212 	movw	r2, #1042	; 0x412
 8010d8c:	fb03 f202 	mul.w	r2, r3, r2
 8010d90:	440a      	add	r2, r1
 8010d92:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8010d96:	7812      	ldrb	r2, [r2, #0]
 8010d98:	3201      	adds	r2, #1
 8010d9a:	b2d0      	uxtb	r0, r2
 8010d9c:	4a63      	ldr	r2, [pc, #396]	; (8010f2c <readCanToStructs+0x11a4>)
 8010d9e:	f240 4112 	movw	r1, #1042	; 0x412
 8010da2:	fb01 f303 	mul.w	r3, r1, r3
 8010da6:	4413      	add	r3, r2
 8010da8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010dac:	4602      	mov	r2, r0
 8010dae:	701a      	strb	r2, [r3, #0]
				break;
 8010db0:	e11e      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010db2:	4b5f      	ldr	r3, [pc, #380]	; (8010f30 <readCanToStructs+0x11a8>)
 8010db4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010db6:	4b5c      	ldr	r3, [pc, #368]	; (8010f28 <readCanToStructs+0x11a0>)
 8010db8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dbc:	885b      	ldrh	r3, [r3, #2]
 8010dbe:	4a5a      	ldr	r2, [pc, #360]	; (8010f28 <readCanToStructs+0x11a0>)
 8010dc0:	011b      	lsls	r3, r3, #4
 8010dc2:	4413      	add	r3, r2
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d110      	bne.n	8010df6 <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010dd4:	2214      	movs	r2, #20
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dda:	f011 f943 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010de2:	4a52      	ldr	r2, [pc, #328]	; (8010f2c <readCanToStructs+0x11a4>)
 8010de4:	f240 4112 	movw	r1, #1042	; 0x412
 8010de8:	fb01 f303 	mul.w	r3, r1, r3
 8010dec:	4413      	add	r3, r2
 8010dee:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010df2:	2200      	movs	r2, #0
 8010df4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8010df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dfa:	4a4c      	ldr	r2, [pc, #304]	; (8010f2c <readCanToStructs+0x11a4>)
 8010dfc:	f240 4112 	movw	r1, #1042	; 0x412
 8010e00:	fb01 f303 	mul.w	r3, r1, r3
 8010e04:	4413      	add	r3, r2
 8010e06:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d014      	beq.n	8010e3e <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8010e14:	484c      	ldr	r0, [pc, #304]	; (8010f48 <readCanToStructs+0x11c0>)
 8010e16:	f011 faa9 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010e1a:	2214      	movs	r2, #20
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e20:	f011 f920 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e28:	4a40      	ldr	r2, [pc, #256]	; (8010f2c <readCanToStructs+0x11a4>)
 8010e2a:	f240 4112 	movw	r1, #1042	; 0x412
 8010e2e:	fb01 f303 	mul.w	r3, r1, r3
 8010e32:	4413      	add	r3, r2
 8010e34:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e38:	2200      	movs	r2, #0
 8010e3a:	701a      	strb	r2, [r3, #0]
					break;
 8010e3c:	e0d8      	b.n	8010ff0 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010e3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e42:	4613      	mov	r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	1a9b      	subs	r3, r3, r2
 8010e48:	461a      	mov	r2, r3
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	4413      	add	r3, r2
 8010e4e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010e50:	2301      	movs	r3, #1
 8010e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e56:	e016      	b.n	8010e86 <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010e58:	4b33      	ldr	r3, [pc, #204]	; (8010f28 <readCanToStructs+0x11a0>)
 8010e5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e5e:	885b      	ldrh	r3, [r3, #2]
 8010e60:	461a      	mov	r2, r3
 8010e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e66:	4930      	ldr	r1, [pc, #192]	; (8010f28 <readCanToStructs+0x11a0>)
 8010e68:	0112      	lsls	r2, r2, #4
 8010e6a:	440a      	add	r2, r1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	3304      	adds	r3, #4
 8010e70:	781a      	ldrb	r2, [r3, #0]
 8010e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e74:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	3301      	adds	r3, #1
 8010e7a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e80:	3301      	adds	r3, #1
 8010e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e86:	4b28      	ldr	r3, [pc, #160]	; (8010f28 <readCanToStructs+0x11a0>)
 8010e88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e8c:	885b      	ldrh	r3, [r3, #2]
 8010e8e:	4a26      	ldr	r2, [pc, #152]	; (8010f28 <readCanToStructs+0x11a0>)
 8010e90:	011b      	lsls	r3, r3, #4
 8010e92:	4413      	add	r3, r2
 8010e94:	330c      	adds	r3, #12
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d3db      	bcc.n	8010e58 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ea4:	4a21      	ldr	r2, [pc, #132]	; (8010f2c <readCanToStructs+0x11a4>)
 8010ea6:	f240 4112 	movw	r1, #1042	; 0x412
 8010eaa:	fb01 f303 	mul.w	r3, r1, r3
 8010eae:	4413      	add	r3, r2
 8010eb0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4613      	mov	r3, r2
 8010eba:	00db      	lsls	r3, r3, #3
 8010ebc:	1a9a      	subs	r2, r3, r2
 8010ebe:	4b1a      	ldr	r3, [pc, #104]	; (8010f28 <readCanToStructs+0x11a0>)
 8010ec0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ec4:	885b      	ldrh	r3, [r3, #2]
 8010ec6:	4918      	ldr	r1, [pc, #96]	; (8010f28 <readCanToStructs+0x11a0>)
 8010ec8:	011b      	lsls	r3, r3, #4
 8010eca:	440b      	add	r3, r1
 8010ecc:	330c      	adds	r3, #12
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	4413      	add	r3, r2
 8010ed4:	2b13      	cmp	r3, #19
 8010ed6:	d966      	bls.n	8010fa6 <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8010edc:	2300      	movs	r3, #0
 8010ede:	603b      	str	r3, [r7, #0]
 8010ee0:	1d3b      	adds	r3, r7, #4
 8010ee2:	2224      	movs	r2, #36	; 0x24
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f011 f8bc 	bl	8022064 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010eec:	463b      	mov	r3, r7
 8010eee:	2214      	movs	r2, #20
 8010ef0:	490f      	ldr	r1, [pc, #60]	; (8010f30 <readCanToStructs+0x11a8>)
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f011 f88e 	bl	8022014 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010ef8:	463b      	mov	r3, r7
 8010efa:	2214      	movs	r2, #20
 8010efc:	4619      	mov	r1, r3
 8010efe:	2000      	movs	r0, #0
 8010f00:	f001 fe04 	bl	8012b0c <GetCRC16>
 8010f04:	4603      	mov	r3, r0
 8010f06:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8010f08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d11e      	bne.n	8010f4c <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f12:	4a06      	ldr	r2, [pc, #24]	; (8010f2c <readCanToStructs+0x11a4>)
 8010f14:	f240 4112 	movw	r1, #1042	; 0x412
 8010f18:	fb01 f303 	mul.w	r3, r1, r3
 8010f1c:	4413      	add	r3, r2
 8010f1e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010f22:	2200      	movs	r2, #0
 8010f24:	701a      	strb	r2, [r3, #0]
				break;
 8010f26:	e063      	b.n	8010ff0 <readCanToStructs+0x1268>
 8010f28:	20005b10 	.word	0x20005b10
 8010f2c:	200052ec 	.word	0x200052ec
 8010f30:	2000200c 	.word	0x2000200c
 8010f34:	20000645 	.word	0x20000645
 8010f38:	20000304 	.word	0x20000304
 8010f3c:	08026a3c 	.word	0x08026a3c
 8010f40:	20001f30 	.word	0x20001f30
 8010f44:	20000108 	.word	0x20000108
 8010f48:	08026a50 	.word	0x08026a50
						if(Debug_flag == 1)
 8010f4c:	4bc7      	ldr	r3, [pc, #796]	; (801126c <readCanToStructs+0x14e4>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d10a      	bne.n	8010f6a <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010f54:	4bc6      	ldr	r3, [pc, #792]	; (8011270 <readCanToStructs+0x14e8>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	4ac6      	ldr	r2, [pc, #792]	; (8011274 <readCanToStructs+0x14ec>)
 8010f5a:	3366      	adds	r3, #102	; 0x66
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	4413      	add	r3, r2
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	4619      	mov	r1, r3
 8010f64:	48c4      	ldr	r0, [pc, #784]	; (8011278 <readCanToStructs+0x14f0>)
 8010f66:	f011 f965 	bl	8022234 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010f6a:	4bc1      	ldr	r3, [pc, #772]	; (8011270 <readCanToStructs+0x14e8>)
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	461a      	mov	r2, r3
 8010f70:	4613      	mov	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	4ac0      	ldr	r2, [pc, #768]	; (801127c <readCanToStructs+0x14f4>)
 8010f7a:	4413      	add	r3, r2
 8010f7c:	2214      	movs	r2, #20
 8010f7e:	49bc      	ldr	r1, [pc, #752]	; (8011270 <readCanToStructs+0x14e8>)
 8010f80:	4618      	mov	r0, r3
 8010f82:	f011 f847 	bl	8022014 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010f86:	4bbe      	ldr	r3, [pc, #760]	; (8011280 <readCanToStructs+0x14f8>)
 8010f88:	2201      	movs	r2, #1
 8010f8a:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f90:	4abc      	ldr	r2, [pc, #752]	; (8011284 <readCanToStructs+0x14fc>)
 8010f92:	f240 4112 	movw	r1, #1042	; 0x412
 8010f96:	fb01 f303 	mul.w	r3, r1, r3
 8010f9a:	4413      	add	r3, r2
 8010f9c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
				break;
 8010fa4:	e024      	b.n	8010ff0 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8010fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010faa:	4ab6      	ldr	r2, [pc, #728]	; (8011284 <readCanToStructs+0x14fc>)
 8010fac:	f240 4112 	movw	r1, #1042	; 0x412
 8010fb0:	fb01 f303 	mul.w	r3, r1, r3
 8010fb4:	4413      	add	r3, r2
 8010fb6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010fba:	2201      	movs	r2, #1
 8010fbc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8010fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fc2:	49b0      	ldr	r1, [pc, #704]	; (8011284 <readCanToStructs+0x14fc>)
 8010fc4:	f240 4212 	movw	r2, #1042	; 0x412
 8010fc8:	fb03 f202 	mul.w	r2, r3, r2
 8010fcc:	440a      	add	r2, r1
 8010fce:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	3201      	adds	r2, #1
 8010fd6:	b2d0      	uxtb	r0, r2
 8010fd8:	4aaa      	ldr	r2, [pc, #680]	; (8011284 <readCanToStructs+0x14fc>)
 8010fda:	f240 4112 	movw	r1, #1042	; 0x412
 8010fde:	fb01 f303 	mul.w	r3, r1, r3
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010fe8:	4602      	mov	r2, r0
 8010fea:	701a      	strb	r2, [r3, #0]
				break;
 8010fec:	e000      	b.n	8010ff0 <readCanToStructs+0x1268>
				break;
 8010fee:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010ff0:	4ba5      	ldr	r3, [pc, #660]	; (8011288 <readCanToStructs+0x1500>)
 8010ff2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ff6:	885b      	ldrh	r3, [r3, #2]
 8010ff8:	011b      	lsls	r3, r3, #4
 8010ffa:	4aa3      	ldr	r2, [pc, #652]	; (8011288 <readCanToStructs+0x1500>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	2210      	movs	r2, #16
 8011000:	2100      	movs	r1, #0
 8011002:	4618      	mov	r0, r3
 8011004:	f011 f82e 	bl	8022064 <memset>
			canRead.Out++;
 8011008:	4b9f      	ldr	r3, [pc, #636]	; (8011288 <readCanToStructs+0x1500>)
 801100a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801100e:	885b      	ldrh	r3, [r3, #2]
 8011010:	3301      	adds	r3, #1
 8011012:	b29a      	uxth	r2, r3
 8011014:	4b9c      	ldr	r3, [pc, #624]	; (8011288 <readCanToStructs+0x1500>)
 8011016:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801101a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801101c:	4b9a      	ldr	r3, [pc, #616]	; (8011288 <readCanToStructs+0x1500>)
 801101e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011022:	885b      	ldrh	r3, [r3, #2]
 8011024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011028:	d104      	bne.n	8011034 <readCanToStructs+0x12ac>
				canRead.Out = 0;
 801102a:	4b97      	ldr	r3, [pc, #604]	; (8011288 <readCanToStructs+0x1500>)
 801102c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011030:	2200      	movs	r2, #0
 8011032:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011034:	f7fe fe52 	bl	800fcdc <canDataReady>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	f47e aecb 	bne.w	800fdd6 <readCanToStructs+0x4e>
	break;
 8011040:	f001 bcff 	b.w	8012a42 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011044:	4b90      	ldr	r3, [pc, #576]	; (8011288 <readCanToStructs+0x1500>)
 8011046:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801104a:	885b      	ldrh	r3, [r3, #2]
 801104c:	4a8e      	ldr	r2, [pc, #568]	; (8011288 <readCanToStructs+0x1500>)
 801104e:	011b      	lsls	r3, r3, #4
 8011050:	4413      	add	r3, r2
 8011052:	330f      	adds	r3, #15
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	3b01      	subs	r3, #1
 8011058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801105c:	4b8a      	ldr	r3, [pc, #552]	; (8011288 <readCanToStructs+0x1500>)
 801105e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011062:	885b      	ldrh	r3, [r3, #2]
 8011064:	4a88      	ldr	r2, [pc, #544]	; (8011288 <readCanToStructs+0x1500>)
 8011066:	011b      	lsls	r3, r3, #4
 8011068:	4413      	add	r3, r2
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011070:	f200 8672 	bhi.w	8011d58 <readCanToStructs+0x1fd0>
 8011074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011078:	d80a      	bhi.n	8011090 <readCanToStructs+0x1308>
 801107a:	f240 1203 	movw	r2, #259	; 0x103
 801107e:	4293      	cmp	r3, r2
 8011080:	d01e      	beq.n	80110c0 <readCanToStructs+0x1338>
 8011082:	f240 1209 	movw	r2, #265	; 0x109
 8011086:	4293      	cmp	r3, r2
 8011088:	f000 8108 	beq.w	801129c <readCanToStructs+0x1514>
				break;
 801108c:	f000 be64 	b.w	8011d58 <readCanToStructs+0x1fd0>
 8011090:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011094:	2b07      	cmp	r3, #7
 8011096:	f200 865f 	bhi.w	8011d58 <readCanToStructs+0x1fd0>
 801109a:	a201      	add	r2, pc, #4	; (adr r2, 80110a0 <readCanToStructs+0x1318>)
 801109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a0:	08011449 	.word	0x08011449
 80110a4:	0801162d 	.word	0x0801162d
 80110a8:	08011d59 	.word	0x08011d59
 80110ac:	08011d59 	.word	0x08011d59
 80110b0:	08011bbb 	.word	0x08011bbb
 80110b4:	08011d59 	.word	0x08011d59
 80110b8:	080117dd 	.word	0x080117dd
 80110bc:	080119cf 	.word	0x080119cf
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80110c0:	4b72      	ldr	r3, [pc, #456]	; (801128c <readCanToStructs+0x1504>)
 80110c2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80110c4:	4b70      	ldr	r3, [pc, #448]	; (8011288 <readCanToStructs+0x1500>)
 80110c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110ca:	885b      	ldrh	r3, [r3, #2]
 80110cc:	4a6e      	ldr	r2, [pc, #440]	; (8011288 <readCanToStructs+0x1500>)
 80110ce:	011b      	lsls	r3, r3, #4
 80110d0:	4413      	add	r3, r2
 80110d2:	3304      	adds	r3, #4
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80110da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d110      	bne.n	8011104 <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80110e2:	2206      	movs	r2, #6
 80110e4:	2100      	movs	r1, #0
 80110e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110e8:	f010 ffbc 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80110ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110f0:	4a64      	ldr	r2, [pc, #400]	; (8011284 <readCanToStructs+0x14fc>)
 80110f2:	f240 4112 	movw	r1, #1042	; 0x412
 80110f6:	fb01 f303 	mul.w	r3, r1, r3
 80110fa:	4413      	add	r3, r2
 80110fc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011100:	2200      	movs	r2, #0
 8011102:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011108:	4a5e      	ldr	r2, [pc, #376]	; (8011284 <readCanToStructs+0x14fc>)
 801110a:	f240 4112 	movw	r1, #1042	; 0x412
 801110e:	fb01 f303 	mul.w	r3, r1, r3
 8011112:	4413      	add	r3, r2
 8011114:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801111e:	429a      	cmp	r2, r3
 8011120:	d015      	beq.n	801114e <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 8011122:	485b      	ldr	r0, [pc, #364]	; (8011290 <readCanToStructs+0x1508>)
 8011124:	f011 f922 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011128:	2206      	movs	r2, #6
 801112a:	2100      	movs	r1, #0
 801112c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801112e:	f010 ff99 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011136:	4a53      	ldr	r2, [pc, #332]	; (8011284 <readCanToStructs+0x14fc>)
 8011138:	f240 4112 	movw	r1, #1042	; 0x412
 801113c:	fb01 f303 	mul.w	r3, r1, r3
 8011140:	4413      	add	r3, r2
 8011142:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011146:	2200      	movs	r2, #0
 8011148:	701a      	strb	r2, [r3, #0]
					break;
 801114a:	f000 be0a 	b.w	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801114e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011152:	4613      	mov	r3, r2
 8011154:	00db      	lsls	r3, r3, #3
 8011156:	1a9b      	subs	r3, r3, r2
 8011158:	461a      	mov	r2, r3
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	4413      	add	r3, r2
 801115e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011160:	2301      	movs	r3, #1
 8011162:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011166:	e016      	b.n	8011196 <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011168:	4b47      	ldr	r3, [pc, #284]	; (8011288 <readCanToStructs+0x1500>)
 801116a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801116e:	885b      	ldrh	r3, [r3, #2]
 8011170:	461a      	mov	r2, r3
 8011172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011176:	4944      	ldr	r1, [pc, #272]	; (8011288 <readCanToStructs+0x1500>)
 8011178:	0112      	lsls	r2, r2, #4
 801117a:	440a      	add	r2, r1
 801117c:	4413      	add	r3, r2
 801117e:	3304      	adds	r3, #4
 8011180:	781a      	ldrb	r2, [r3, #0]
 8011182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011184:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011188:	3301      	adds	r3, #1
 801118a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801118c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011190:	3301      	adds	r3, #1
 8011192:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011196:	4b3c      	ldr	r3, [pc, #240]	; (8011288 <readCanToStructs+0x1500>)
 8011198:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801119c:	885b      	ldrh	r3, [r3, #2]
 801119e:	4a3a      	ldr	r2, [pc, #232]	; (8011288 <readCanToStructs+0x1500>)
 80111a0:	011b      	lsls	r3, r3, #4
 80111a2:	4413      	add	r3, r2
 80111a4:	330c      	adds	r3, #12
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d3db      	bcc.n	8011168 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80111b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111b4:	4a33      	ldr	r2, [pc, #204]	; (8011284 <readCanToStructs+0x14fc>)
 80111b6:	f240 4112 	movw	r1, #1042	; 0x412
 80111ba:	fb01 f303 	mul.w	r3, r1, r3
 80111be:	4413      	add	r3, r2
 80111c0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	461a      	mov	r2, r3
 80111c8:	4613      	mov	r3, r2
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80111ce:	4b2e      	ldr	r3, [pc, #184]	; (8011288 <readCanToStructs+0x1500>)
 80111d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111d4:	885b      	ldrh	r3, [r3, #2]
 80111d6:	492c      	ldr	r1, [pc, #176]	; (8011288 <readCanToStructs+0x1500>)
 80111d8:	011b      	lsls	r3, r3, #4
 80111da:	440b      	add	r3, r1
 80111dc:	330c      	adds	r3, #12
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	3b01      	subs	r3, #1
 80111e2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80111e4:	2b05      	cmp	r3, #5
 80111e6:	d91c      	bls.n	8011222 <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80111e8:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <readCanToStructs+0x150c>)
 80111ea:	4a28      	ldr	r2, [pc, #160]	; (801128c <readCanToStructs+0x1504>)
 80111ec:	6811      	ldr	r1, [r2, #0]
 80111ee:	6019      	str	r1, [r3, #0]
 80111f0:	8892      	ldrh	r2, [r2, #4]
 80111f2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80111f4:	4b1d      	ldr	r3, [pc, #116]	; (801126c <readCanToStructs+0x14e4>)
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d102      	bne.n	8011202 <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 80111fc:	4826      	ldr	r0, [pc, #152]	; (8011298 <readCanToStructs+0x1510>)
 80111fe:	f011 f8b5 	bl	802236c <puts>
					Write_RTC();
 8011202:	f7fa f91f 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801120a:	4a1e      	ldr	r2, [pc, #120]	; (8011284 <readCanToStructs+0x14fc>)
 801120c:	f240 4112 	movw	r1, #1042	; 0x412
 8011210:	fb01 f303 	mul.w	r3, r1, r3
 8011214:	4413      	add	r3, r2
 8011216:	f203 2307 	addw	r3, r3, #519	; 0x207
 801121a:	2200      	movs	r2, #0
 801121c:	701a      	strb	r2, [r3, #0]
				break;
 801121e:	f000 bda0 	b.w	8011d62 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011226:	4a17      	ldr	r2, [pc, #92]	; (8011284 <readCanToStructs+0x14fc>)
 8011228:	f240 4112 	movw	r1, #1042	; 0x412
 801122c:	fb01 f303 	mul.w	r3, r1, r3
 8011230:	4413      	add	r3, r2
 8011232:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011236:	2201      	movs	r2, #1
 8011238:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801123a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801123e:	4911      	ldr	r1, [pc, #68]	; (8011284 <readCanToStructs+0x14fc>)
 8011240:	f240 4212 	movw	r2, #1042	; 0x412
 8011244:	fb03 f202 	mul.w	r2, r3, r2
 8011248:	440a      	add	r2, r1
 801124a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801124e:	7812      	ldrb	r2, [r2, #0]
 8011250:	3201      	adds	r2, #1
 8011252:	b2d0      	uxtb	r0, r2
 8011254:	4a0b      	ldr	r2, [pc, #44]	; (8011284 <readCanToStructs+0x14fc>)
 8011256:	f240 4112 	movw	r1, #1042	; 0x412
 801125a:	fb01 f303 	mul.w	r3, r1, r3
 801125e:	4413      	add	r3, r2
 8011260:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011264:	4602      	mov	r2, r0
 8011266:	701a      	strb	r2, [r3, #0]
				break;
 8011268:	f000 bd7b 	b.w	8011d62 <readCanToStructs+0x1fda>
 801126c:	20000645 	.word	0x20000645
 8011270:	2000200c 	.word	0x2000200c
 8011274:	20000304 	.word	0x20000304
 8011278:	08026a70 	.word	0x08026a70
 801127c:	20001f30 	.word	0x20001f30
 8011280:	20000108 	.word	0x20000108
 8011284:	200052ec 	.word	0x200052ec
 8011288:	20005b10 	.word	0x20005b10
 801128c:	20002868 	.word	0x20002868
 8011290:	080268ac 	.word	0x080268ac
 8011294:	20002860 	.word	0x20002860
 8011298:	080268c8 	.word	0x080268c8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801129c:	4bc5      	ldr	r3, [pc, #788]	; (80115b4 <readCanToStructs+0x182c>)
 801129e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80112a0:	4bc5      	ldr	r3, [pc, #788]	; (80115b8 <readCanToStructs+0x1830>)
 80112a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112a6:	885b      	ldrh	r3, [r3, #2]
 80112a8:	4ac3      	ldr	r2, [pc, #780]	; (80115b8 <readCanToStructs+0x1830>)
 80112aa:	011b      	lsls	r3, r3, #4
 80112ac:	4413      	add	r3, r2
 80112ae:	3304      	adds	r3, #4
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80112b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d110      	bne.n	80112e0 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80112be:	2206      	movs	r2, #6
 80112c0:	2100      	movs	r1, #0
 80112c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c4:	f010 fece 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80112c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112cc:	4abb      	ldr	r2, [pc, #748]	; (80115bc <readCanToStructs+0x1834>)
 80112ce:	f240 4112 	movw	r1, #1042	; 0x412
 80112d2:	fb01 f303 	mul.w	r3, r1, r3
 80112d6:	4413      	add	r3, r2
 80112d8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80112dc:	2200      	movs	r2, #0
 80112de:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80112e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112e4:	4ab5      	ldr	r2, [pc, #724]	; (80115bc <readCanToStructs+0x1834>)
 80112e6:	f240 4112 	movw	r1, #1042	; 0x412
 80112ea:	fb01 f303 	mul.w	r3, r1, r3
 80112ee:	4413      	add	r3, r2
 80112f0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d015      	beq.n	801132a <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 80112fe:	48b0      	ldr	r0, [pc, #704]	; (80115c0 <readCanToStructs+0x1838>)
 8011300:	f011 f834 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011304:	2206      	movs	r2, #6
 8011306:	2100      	movs	r1, #0
 8011308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801130a:	f010 feab 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801130e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011312:	4aaa      	ldr	r2, [pc, #680]	; (80115bc <readCanToStructs+0x1834>)
 8011314:	f240 4112 	movw	r1, #1042	; 0x412
 8011318:	fb01 f303 	mul.w	r3, r1, r3
 801131c:	4413      	add	r3, r2
 801131e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011322:	2200      	movs	r2, #0
 8011324:	701a      	strb	r2, [r3, #0]
					break;
 8011326:	f000 bd1c 	b.w	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801132a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801132e:	4613      	mov	r3, r2
 8011330:	00db      	lsls	r3, r3, #3
 8011332:	1a9b      	subs	r3, r3, r2
 8011334:	461a      	mov	r2, r3
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	4413      	add	r3, r2
 801133a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801133c:	2301      	movs	r3, #1
 801133e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011342:	e016      	b.n	8011372 <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011344:	4b9c      	ldr	r3, [pc, #624]	; (80115b8 <readCanToStructs+0x1830>)
 8011346:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801134a:	885b      	ldrh	r3, [r3, #2]
 801134c:	461a      	mov	r2, r3
 801134e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011352:	4999      	ldr	r1, [pc, #612]	; (80115b8 <readCanToStructs+0x1830>)
 8011354:	0112      	lsls	r2, r2, #4
 8011356:	440a      	add	r2, r1
 8011358:	4413      	add	r3, r2
 801135a:	3304      	adds	r3, #4
 801135c:	781a      	ldrb	r2, [r3, #0]
 801135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011360:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011364:	3301      	adds	r3, #1
 8011366:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011368:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801136c:	3301      	adds	r3, #1
 801136e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011372:	4b91      	ldr	r3, [pc, #580]	; (80115b8 <readCanToStructs+0x1830>)
 8011374:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011378:	885b      	ldrh	r3, [r3, #2]
 801137a:	4a8f      	ldr	r2, [pc, #572]	; (80115b8 <readCanToStructs+0x1830>)
 801137c:	011b      	lsls	r3, r3, #4
 801137e:	4413      	add	r3, r2
 8011380:	330c      	adds	r3, #12
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011388:	429a      	cmp	r2, r3
 801138a:	d3db      	bcc.n	8011344 <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801138c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011390:	4a8a      	ldr	r2, [pc, #552]	; (80115bc <readCanToStructs+0x1834>)
 8011392:	f240 4112 	movw	r1, #1042	; 0x412
 8011396:	fb01 f303 	mul.w	r3, r1, r3
 801139a:	4413      	add	r3, r2
 801139c:	f203 2313 	addw	r3, r3, #531	; 0x213
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	461a      	mov	r2, r3
 80113a4:	4613      	mov	r3, r2
 80113a6:	00db      	lsls	r3, r3, #3
 80113a8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80113aa:	4b83      	ldr	r3, [pc, #524]	; (80115b8 <readCanToStructs+0x1830>)
 80113ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113b0:	885b      	ldrh	r3, [r3, #2]
 80113b2:	4981      	ldr	r1, [pc, #516]	; (80115b8 <readCanToStructs+0x1830>)
 80113b4:	011b      	lsls	r3, r3, #4
 80113b6:	440b      	add	r3, r1
 80113b8:	330c      	adds	r3, #12
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	3b01      	subs	r3, #1
 80113be:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80113c0:	2b05      	cmp	r3, #5
 80113c2:	d91c      	bls.n	80113fe <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80113c4:	4b7f      	ldr	r3, [pc, #508]	; (80115c4 <readCanToStructs+0x183c>)
 80113c6:	4a7b      	ldr	r2, [pc, #492]	; (80115b4 <readCanToStructs+0x182c>)
 80113c8:	6811      	ldr	r1, [r2, #0]
 80113ca:	6019      	str	r1, [r3, #0]
 80113cc:	8892      	ldrh	r2, [r2, #4]
 80113ce:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80113d0:	4b7d      	ldr	r3, [pc, #500]	; (80115c8 <readCanToStructs+0x1840>)
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d102      	bne.n	80113de <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 80113d8:	487c      	ldr	r0, [pc, #496]	; (80115cc <readCanToStructs+0x1844>)
 80113da:	f010 ffc7 	bl	802236c <puts>
					Write_RTC();
 80113de:	f7fa f831 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80113e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113e6:	4a75      	ldr	r2, [pc, #468]	; (80115bc <readCanToStructs+0x1834>)
 80113e8:	f240 4112 	movw	r1, #1042	; 0x412
 80113ec:	fb01 f303 	mul.w	r3, r1, r3
 80113f0:	4413      	add	r3, r2
 80113f2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80113f6:	2200      	movs	r2, #0
 80113f8:	701a      	strb	r2, [r3, #0]
				break;
 80113fa:	f000 bcb2 	b.w	8011d62 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80113fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011402:	4a6e      	ldr	r2, [pc, #440]	; (80115bc <readCanToStructs+0x1834>)
 8011404:	f240 4112 	movw	r1, #1042	; 0x412
 8011408:	fb01 f303 	mul.w	r3, r1, r3
 801140c:	4413      	add	r3, r2
 801140e:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011412:	2201      	movs	r2, #1
 8011414:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801141a:	4968      	ldr	r1, [pc, #416]	; (80115bc <readCanToStructs+0x1834>)
 801141c:	f240 4212 	movw	r2, #1042	; 0x412
 8011420:	fb03 f202 	mul.w	r2, r3, r2
 8011424:	440a      	add	r2, r1
 8011426:	f202 2213 	addw	r2, r2, #531	; 0x213
 801142a:	7812      	ldrb	r2, [r2, #0]
 801142c:	3201      	adds	r2, #1
 801142e:	b2d0      	uxtb	r0, r2
 8011430:	4a62      	ldr	r2, [pc, #392]	; (80115bc <readCanToStructs+0x1834>)
 8011432:	f240 4112 	movw	r1, #1042	; 0x412
 8011436:	fb01 f303 	mul.w	r3, r1, r3
 801143a:	4413      	add	r3, r2
 801143c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011440:	4602      	mov	r2, r0
 8011442:	701a      	strb	r2, [r3, #0]
				break;
 8011444:	f000 bc8d 	b.w	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011448:	4b61      	ldr	r3, [pc, #388]	; (80115d0 <readCanToStructs+0x1848>)
 801144a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801144c:	4b5a      	ldr	r3, [pc, #360]	; (80115b8 <readCanToStructs+0x1830>)
 801144e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011452:	885b      	ldrh	r3, [r3, #2]
 8011454:	4a58      	ldr	r2, [pc, #352]	; (80115b8 <readCanToStructs+0x1830>)
 8011456:	011b      	lsls	r3, r3, #4
 8011458:	4413      	add	r3, r2
 801145a:	3304      	adds	r3, #4
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011466:	2b00      	cmp	r3, #0
 8011468:	d110      	bne.n	801148c <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801146a:	2204      	movs	r2, #4
 801146c:	2100      	movs	r1, #0
 801146e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011470:	f010 fdf8 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011478:	4a50      	ldr	r2, [pc, #320]	; (80115bc <readCanToStructs+0x1834>)
 801147a:	f240 4112 	movw	r1, #1042	; 0x412
 801147e:	fb01 f303 	mul.w	r3, r1, r3
 8011482:	4413      	add	r3, r2
 8011484:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011488:	2200      	movs	r2, #0
 801148a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 801148c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011490:	4a4a      	ldr	r2, [pc, #296]	; (80115bc <readCanToStructs+0x1834>)
 8011492:	f240 4112 	movw	r1, #1042	; 0x412
 8011496:	fb01 f303 	mul.w	r3, r1, r3
 801149a:	4413      	add	r3, r2
 801149c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d015      	beq.n	80114d6 <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80114aa:	484a      	ldr	r0, [pc, #296]	; (80115d4 <readCanToStructs+0x184c>)
 80114ac:	f010 ff5e 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80114b0:	2204      	movs	r2, #4
 80114b2:	2100      	movs	r1, #0
 80114b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114b6:	f010 fdd5 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80114ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114be:	4a3f      	ldr	r2, [pc, #252]	; (80115bc <readCanToStructs+0x1834>)
 80114c0:	f240 4112 	movw	r1, #1042	; 0x412
 80114c4:	fb01 f303 	mul.w	r3, r1, r3
 80114c8:	4413      	add	r3, r2
 80114ca:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80114ce:	2200      	movs	r2, #0
 80114d0:	701a      	strb	r2, [r3, #0]
					break;
 80114d2:	f000 bc46 	b.w	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80114d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114da:	4613      	mov	r3, r2
 80114dc:	00db      	lsls	r3, r3, #3
 80114de:	1a9b      	subs	r3, r3, r2
 80114e0:	461a      	mov	r2, r3
 80114e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e4:	4413      	add	r3, r2
 80114e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80114e8:	2301      	movs	r3, #1
 80114ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80114ee:	e016      	b.n	801151e <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80114f0:	4b31      	ldr	r3, [pc, #196]	; (80115b8 <readCanToStructs+0x1830>)
 80114f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114f6:	885b      	ldrh	r3, [r3, #2]
 80114f8:	461a      	mov	r2, r3
 80114fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114fe:	492e      	ldr	r1, [pc, #184]	; (80115b8 <readCanToStructs+0x1830>)
 8011500:	0112      	lsls	r2, r2, #4
 8011502:	440a      	add	r2, r1
 8011504:	4413      	add	r3, r2
 8011506:	3304      	adds	r3, #4
 8011508:	781a      	ldrb	r2, [r3, #0]
 801150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	3301      	adds	r3, #1
 8011512:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011518:	3301      	adds	r3, #1
 801151a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801151e:	4b26      	ldr	r3, [pc, #152]	; (80115b8 <readCanToStructs+0x1830>)
 8011520:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011524:	885b      	ldrh	r3, [r3, #2]
 8011526:	4a24      	ldr	r2, [pc, #144]	; (80115b8 <readCanToStructs+0x1830>)
 8011528:	011b      	lsls	r3, r3, #4
 801152a:	4413      	add	r3, r2
 801152c:	330c      	adds	r3, #12
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011534:	429a      	cmp	r2, r3
 8011536:	d3db      	bcc.n	80114f0 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801153c:	4a1f      	ldr	r2, [pc, #124]	; (80115bc <readCanToStructs+0x1834>)
 801153e:	f240 4112 	movw	r1, #1042	; 0x412
 8011542:	fb01 f303 	mul.w	r3, r1, r3
 8011546:	4413      	add	r3, r2
 8011548:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	461a      	mov	r2, r3
 8011550:	4613      	mov	r3, r2
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011556:	4b18      	ldr	r3, [pc, #96]	; (80115b8 <readCanToStructs+0x1830>)
 8011558:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801155c:	885b      	ldrh	r3, [r3, #2]
 801155e:	4916      	ldr	r1, [pc, #88]	; (80115b8 <readCanToStructs+0x1830>)
 8011560:	011b      	lsls	r3, r3, #4
 8011562:	440b      	add	r3, r1
 8011564:	330c      	adds	r3, #12
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	3b01      	subs	r3, #1
 801156a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801156c:	2b03      	cmp	r3, #3
 801156e:	d939      	bls.n	80115e4 <readCanToStructs+0x185c>
 8011570:	4b17      	ldr	r3, [pc, #92]	; (80115d0 <readCanToStructs+0x1848>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011576:	4b18      	ldr	r3, [pc, #96]	; (80115d8 <readCanToStructs+0x1850>)
 8011578:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801157a:	4b13      	ldr	r3, [pc, #76]	; (80115c8 <readCanToStructs+0x1840>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	2b01      	cmp	r3, #1
 8011580:	d102      	bne.n	8011588 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 8011582:	4816      	ldr	r0, [pc, #88]	; (80115dc <readCanToStructs+0x1854>)
 8011584:	f010 fef2 	bl	802236c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011588:	4b15      	ldr	r3, [pc, #84]	; (80115e0 <readCanToStructs+0x1858>)
 801158a:	2201      	movs	r2, #1
 801158c:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801158e:	f003 ff4f 	bl	8015430 <HAL_GetTick>
 8011592:	4603      	mov	r3, r0
 8011594:	4a12      	ldr	r2, [pc, #72]	; (80115e0 <readCanToStructs+0x1858>)
 8011596:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801159c:	4a07      	ldr	r2, [pc, #28]	; (80115bc <readCanToStructs+0x1834>)
 801159e:	f240 4112 	movw	r1, #1042	; 0x412
 80115a2:	fb01 f303 	mul.w	r3, r1, r3
 80115a6:	4413      	add	r3, r2
 80115a8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80115ac:	2200      	movs	r2, #0
 80115ae:	701a      	strb	r2, [r3, #0]
				break;
 80115b0:	e3d7      	b.n	8011d62 <readCanToStructs+0x1fda>
 80115b2:	bf00      	nop
 80115b4:	20002868 	.word	0x20002868
 80115b8:	20005b10 	.word	0x20005b10
 80115bc:	200052ec 	.word	0x200052ec
 80115c0:	080268dc 	.word	0x080268dc
 80115c4:	20002860 	.word	0x20002860
 80115c8:	20000645 	.word	0x20000645
 80115cc:	080268f8 	.word	0x080268f8
 80115d0:	20003510 	.word	0x20003510
 80115d4:	08026910 	.word	0x08026910
 80115d8:	2000350c 	.word	0x2000350c
 80115dc:	08026a84 	.word	0x08026a84
 80115e0:	20003514 	.word	0x20003514
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80115e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115e8:	4a98      	ldr	r2, [pc, #608]	; (801184c <readCanToStructs+0x1ac4>)
 80115ea:	f240 4112 	movw	r1, #1042	; 0x412
 80115ee:	fb01 f303 	mul.w	r3, r1, r3
 80115f2:	4413      	add	r3, r2
 80115f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80115f8:	2201      	movs	r2, #1
 80115fa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80115fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011600:	4992      	ldr	r1, [pc, #584]	; (801184c <readCanToStructs+0x1ac4>)
 8011602:	f240 4212 	movw	r2, #1042	; 0x412
 8011606:	fb03 f202 	mul.w	r2, r3, r2
 801160a:	440a      	add	r2, r1
 801160c:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011610:	7812      	ldrb	r2, [r2, #0]
 8011612:	3201      	adds	r2, #1
 8011614:	b2d0      	uxtb	r0, r2
 8011616:	4a8d      	ldr	r2, [pc, #564]	; (801184c <readCanToStructs+0x1ac4>)
 8011618:	f240 4112 	movw	r1, #1042	; 0x412
 801161c:	fb01 f303 	mul.w	r3, r1, r3
 8011620:	4413      	add	r3, r2
 8011622:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011626:	4602      	mov	r2, r0
 8011628:	701a      	strb	r2, [r3, #0]
				break;
 801162a:	e39a      	b.n	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801162c:	4b88      	ldr	r3, [pc, #544]	; (8011850 <readCanToStructs+0x1ac8>)
 801162e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011630:	4b88      	ldr	r3, [pc, #544]	; (8011854 <readCanToStructs+0x1acc>)
 8011632:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011636:	885b      	ldrh	r3, [r3, #2]
 8011638:	4a86      	ldr	r2, [pc, #536]	; (8011854 <readCanToStructs+0x1acc>)
 801163a:	011b      	lsls	r3, r3, #4
 801163c:	4413      	add	r3, r2
 801163e:	3304      	adds	r3, #4
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011646:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801164a:	2b00      	cmp	r3, #0
 801164c:	d110      	bne.n	8011670 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801164e:	2204      	movs	r2, #4
 8011650:	2100      	movs	r1, #0
 8011652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011654:	f010 fd06 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801165c:	4a7b      	ldr	r2, [pc, #492]	; (801184c <readCanToStructs+0x1ac4>)
 801165e:	f240 4112 	movw	r1, #1042	; 0x412
 8011662:	fb01 f303 	mul.w	r3, r1, r3
 8011666:	4413      	add	r3, r2
 8011668:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801166c:	2200      	movs	r2, #0
 801166e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011674:	4a75      	ldr	r2, [pc, #468]	; (801184c <readCanToStructs+0x1ac4>)
 8011676:	f240 4112 	movw	r1, #1042	; 0x412
 801167a:	fb01 f303 	mul.w	r3, r1, r3
 801167e:	4413      	add	r3, r2
 8011680:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801168a:	429a      	cmp	r2, r3
 801168c:	d014      	beq.n	80116b8 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801168e:	4872      	ldr	r0, [pc, #456]	; (8011858 <readCanToStructs+0x1ad0>)
 8011690:	f010 fe6c 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011694:	2204      	movs	r2, #4
 8011696:	2100      	movs	r1, #0
 8011698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801169a:	f010 fce3 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801169e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116a2:	4a6a      	ldr	r2, [pc, #424]	; (801184c <readCanToStructs+0x1ac4>)
 80116a4:	f240 4112 	movw	r1, #1042	; 0x412
 80116a8:	fb01 f303 	mul.w	r3, r1, r3
 80116ac:	4413      	add	r3, r2
 80116ae:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80116b2:	2200      	movs	r2, #0
 80116b4:	701a      	strb	r2, [r3, #0]
					break;
 80116b6:	e354      	b.n	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80116b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116bc:	4613      	mov	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	1a9b      	subs	r3, r3, r2
 80116c2:	461a      	mov	r2, r3
 80116c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c6:	4413      	add	r3, r2
 80116c8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116ca:	2301      	movs	r3, #1
 80116cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80116d0:	e016      	b.n	8011700 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80116d2:	4b60      	ldr	r3, [pc, #384]	; (8011854 <readCanToStructs+0x1acc>)
 80116d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116d8:	885b      	ldrh	r3, [r3, #2]
 80116da:	461a      	mov	r2, r3
 80116dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116e0:	495c      	ldr	r1, [pc, #368]	; (8011854 <readCanToStructs+0x1acc>)
 80116e2:	0112      	lsls	r2, r2, #4
 80116e4:	440a      	add	r2, r1
 80116e6:	4413      	add	r3, r2
 80116e8:	3304      	adds	r3, #4
 80116ea:	781a      	ldrb	r2, [r3, #0]
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	3301      	adds	r3, #1
 80116f4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116fa:	3301      	adds	r3, #1
 80116fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011700:	4b54      	ldr	r3, [pc, #336]	; (8011854 <readCanToStructs+0x1acc>)
 8011702:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011706:	885b      	ldrh	r3, [r3, #2]
 8011708:	4a52      	ldr	r2, [pc, #328]	; (8011854 <readCanToStructs+0x1acc>)
 801170a:	011b      	lsls	r3, r3, #4
 801170c:	4413      	add	r3, r2
 801170e:	330c      	adds	r3, #12
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011716:	429a      	cmp	r2, r3
 8011718:	d3db      	bcc.n	80116d2 <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801171a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801171e:	4a4b      	ldr	r2, [pc, #300]	; (801184c <readCanToStructs+0x1ac4>)
 8011720:	f240 4112 	movw	r1, #1042	; 0x412
 8011724:	fb01 f303 	mul.w	r3, r1, r3
 8011728:	4413      	add	r3, r2
 801172a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	461a      	mov	r2, r3
 8011732:	4613      	mov	r3, r2
 8011734:	00db      	lsls	r3, r3, #3
 8011736:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011738:	4b46      	ldr	r3, [pc, #280]	; (8011854 <readCanToStructs+0x1acc>)
 801173a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801173e:	885b      	ldrh	r3, [r3, #2]
 8011740:	4944      	ldr	r1, [pc, #272]	; (8011854 <readCanToStructs+0x1acc>)
 8011742:	011b      	lsls	r3, r3, #4
 8011744:	440b      	add	r3, r1
 8011746:	330c      	adds	r3, #12
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	3b01      	subs	r3, #1
 801174c:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801174e:	2b03      	cmp	r3, #3
 8011750:	d920      	bls.n	8011794 <readCanToStructs+0x1a0c>
 8011752:	4b3f      	ldr	r3, [pc, #252]	; (8011850 <readCanToStructs+0x1ac8>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011758:	4b40      	ldr	r3, [pc, #256]	; (801185c <readCanToStructs+0x1ad4>)
 801175a:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801175c:	4b40      	ldr	r3, [pc, #256]	; (8011860 <readCanToStructs+0x1ad8>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d102      	bne.n	801176a <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 8011764:	483f      	ldr	r0, [pc, #252]	; (8011864 <readCanToStructs+0x1adc>)
 8011766:	f010 fe01 	bl	802236c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801176a:	4b3f      	ldr	r3, [pc, #252]	; (8011868 <readCanToStructs+0x1ae0>)
 801176c:	2201      	movs	r2, #1
 801176e:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011770:	f003 fe5e 	bl	8015430 <HAL_GetTick>
 8011774:	4603      	mov	r3, r0
 8011776:	4a3c      	ldr	r2, [pc, #240]	; (8011868 <readCanToStructs+0x1ae0>)
 8011778:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801177a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801177e:	4a33      	ldr	r2, [pc, #204]	; (801184c <readCanToStructs+0x1ac4>)
 8011780:	f240 4112 	movw	r1, #1042	; 0x412
 8011784:	fb01 f303 	mul.w	r3, r1, r3
 8011788:	4413      	add	r3, r2
 801178a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801178e:	2200      	movs	r2, #0
 8011790:	701a      	strb	r2, [r3, #0]
				break;
 8011792:	e2e6      	b.n	8011d62 <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011798:	4a2c      	ldr	r2, [pc, #176]	; (801184c <readCanToStructs+0x1ac4>)
 801179a:	f240 4112 	movw	r1, #1042	; 0x412
 801179e:	fb01 f303 	mul.w	r3, r1, r3
 80117a2:	4413      	add	r3, r2
 80117a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80117a8:	2201      	movs	r2, #1
 80117aa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80117ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117b0:	4926      	ldr	r1, [pc, #152]	; (801184c <readCanToStructs+0x1ac4>)
 80117b2:	f240 4212 	movw	r2, #1042	; 0x412
 80117b6:	fb03 f202 	mul.w	r2, r3, r2
 80117ba:	440a      	add	r2, r1
 80117bc:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80117c0:	7812      	ldrb	r2, [r2, #0]
 80117c2:	3201      	adds	r2, #1
 80117c4:	b2d0      	uxtb	r0, r2
 80117c6:	4a21      	ldr	r2, [pc, #132]	; (801184c <readCanToStructs+0x1ac4>)
 80117c8:	f240 4112 	movw	r1, #1042	; 0x412
 80117cc:	fb01 f303 	mul.w	r3, r1, r3
 80117d0:	4413      	add	r3, r2
 80117d2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80117d6:	4602      	mov	r2, r0
 80117d8:	701a      	strb	r2, [r3, #0]
				break;
 80117da:	e2c2      	b.n	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 80117dc:	4b23      	ldr	r3, [pc, #140]	; (801186c <readCanToStructs+0x1ae4>)
 80117de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80117e0:	4b1c      	ldr	r3, [pc, #112]	; (8011854 <readCanToStructs+0x1acc>)
 80117e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117e6:	885b      	ldrh	r3, [r3, #2]
 80117e8:	4a1a      	ldr	r2, [pc, #104]	; (8011854 <readCanToStructs+0x1acc>)
 80117ea:	011b      	lsls	r3, r3, #4
 80117ec:	4413      	add	r3, r2
 80117ee:	3304      	adds	r3, #4
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 80117f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d005      	beq.n	801180a <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 80117fe:	4b1c      	ldr	r3, [pc, #112]	; (8011870 <readCanToStructs+0x1ae8>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	461a      	mov	r2, r3
 8011804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011806:	4413      	add	r3, r2
 8011808:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801180a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801180e:	2b00      	cmp	r3, #0
 8011810:	d117      	bne.n	8011842 <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011812:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011816:	2100      	movs	r1, #0
 8011818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801181a:	f010 fc23 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801181e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011822:	4a0a      	ldr	r2, [pc, #40]	; (801184c <readCanToStructs+0x1ac4>)
 8011824:	f240 4112 	movw	r1, #1042	; 0x412
 8011828:	fb01 f303 	mul.w	r3, r1, r3
 801182c:	4413      	add	r3, r2
 801182e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011832:	2200      	movs	r2, #0
 8011834:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011836:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <readCanToStructs+0x1ae8>)
 8011838:	2200      	movs	r2, #0
 801183a:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801183c:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <readCanToStructs+0x1aec>)
 801183e:	2200      	movs	r2, #0
 8011840:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011842:	2301      	movs	r3, #1
 8011844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011848:	e033      	b.n	80118b2 <readCanToStructs+0x1b2a>
 801184a:	bf00      	nop
 801184c:	200052ec 	.word	0x200052ec
 8011850:	20003510 	.word	0x20003510
 8011854:	20005b10 	.word	0x20005b10
 8011858:	08026944 	.word	0x08026944
 801185c:	2000350c 	.word	0x2000350c
 8011860:	20000645 	.word	0x20000645
 8011864:	08026a90 	.word	0x08026a90
 8011868:	20003514 	.word	0x20003514
 801186c:	20003b3c 	.word	0x20003b3c
 8011870:	20009c28 	.word	0x20009c28
 8011874:	20009c2a 	.word	0x20009c2a
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011878:	4ba0      	ldr	r3, [pc, #640]	; (8011afc <readCanToStructs+0x1d74>)
 801187a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801187e:	885b      	ldrh	r3, [r3, #2]
 8011880:	461a      	mov	r2, r3
 8011882:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011886:	499d      	ldr	r1, [pc, #628]	; (8011afc <readCanToStructs+0x1d74>)
 8011888:	0112      	lsls	r2, r2, #4
 801188a:	440a      	add	r2, r1
 801188c:	4413      	add	r3, r2
 801188e:	3304      	adds	r3, #4
 8011890:	781a      	ldrb	r2, [r3, #0]
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011898:	3301      	adds	r3, #1
 801189a:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 801189c:	4b98      	ldr	r3, [pc, #608]	; (8011b00 <readCanToStructs+0x1d78>)
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	3301      	adds	r3, #1
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	4b96      	ldr	r3, [pc, #600]	; (8011b00 <readCanToStructs+0x1d78>)
 80118a6:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118ac:	3301      	adds	r3, #1
 80118ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118b2:	4b92      	ldr	r3, [pc, #584]	; (8011afc <readCanToStructs+0x1d74>)
 80118b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118b8:	885b      	ldrh	r3, [r3, #2]
 80118ba:	4a90      	ldr	r2, [pc, #576]	; (8011afc <readCanToStructs+0x1d74>)
 80118bc:	011b      	lsls	r3, r3, #4
 80118be:	4413      	add	r3, r2
 80118c0:	330c      	adds	r3, #12
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d3d5      	bcc.n	8011878 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80118cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118d0:	4a8c      	ldr	r2, [pc, #560]	; (8011b04 <readCanToStructs+0x1d7c>)
 80118d2:	f240 4112 	movw	r1, #1042	; 0x412
 80118d6:	fb01 f303 	mul.w	r3, r1, r3
 80118da:	4413      	add	r3, r2
 80118dc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d026      	beq.n	8011938 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 80118ea:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80118ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118f2:	4a84      	ldr	r2, [pc, #528]	; (8011b04 <readCanToStructs+0x1d7c>)
 80118f4:	f240 4012 	movw	r0, #1042	; 0x412
 80118f8:	fb00 f303 	mul.w	r3, r0, r3
 80118fc:	4413      	add	r3, r2
 80118fe:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	4880      	ldr	r0, [pc, #512]	; (8011b08 <readCanToStructs+0x1d80>)
 8011908:	f010 fc94 	bl	8022234 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 801190c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011910:	2100      	movs	r1, #0
 8011912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011914:	f010 fba6 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011918:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801191c:	4a79      	ldr	r2, [pc, #484]	; (8011b04 <readCanToStructs+0x1d7c>)
 801191e:	f240 4112 	movw	r1, #1042	; 0x412
 8011922:	fb01 f303 	mul.w	r3, r1, r3
 8011926:	4413      	add	r3, r2
 8011928:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801192c:	2200      	movs	r2, #0
 801192e:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011930:	4b73      	ldr	r3, [pc, #460]	; (8011b00 <readCanToStructs+0x1d78>)
 8011932:	2200      	movs	r2, #0
 8011934:	801a      	strh	r2, [r3, #0]
					break;
 8011936:	e214      	b.n	8011d62 <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801193c:	4971      	ldr	r1, [pc, #452]	; (8011b04 <readCanToStructs+0x1d7c>)
 801193e:	f240 4212 	movw	r2, #1042	; 0x412
 8011942:	fb03 f202 	mul.w	r2, r3, r2
 8011946:	440a      	add	r2, r1
 8011948:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801194c:	7812      	ldrb	r2, [r2, #0]
 801194e:	3201      	adds	r2, #1
 8011950:	b2d0      	uxtb	r0, r2
 8011952:	4a6c      	ldr	r2, [pc, #432]	; (8011b04 <readCanToStructs+0x1d7c>)
 8011954:	f240 4112 	movw	r1, #1042	; 0x412
 8011958:	fb01 f303 	mul.w	r3, r1, r3
 801195c:	4413      	add	r3, r2
 801195e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011962:	4602      	mov	r2, r0
 8011964:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011966:	4b69      	ldr	r3, [pc, #420]	; (8011b0c <readCanToStructs+0x1d84>)
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	3304      	adds	r3, #4
 801196c:	b29a      	uxth	r2, r3
 801196e:	4b68      	ldr	r3, [pc, #416]	; (8011b10 <readCanToStructs+0x1d88>)
 8011970:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011972:	4b63      	ldr	r3, [pc, #396]	; (8011b00 <readCanToStructs+0x1d78>)
 8011974:	881a      	ldrh	r2, [r3, #0]
 8011976:	4b66      	ldr	r3, [pc, #408]	; (8011b10 <readCanToStructs+0x1d88>)
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	429a      	cmp	r2, r3
 801197c:	f0c0 81ee 	bcc.w	8011d5c <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 8011980:	4864      	ldr	r0, [pc, #400]	; (8011b14 <readCanToStructs+0x1d8c>)
 8011982:	f010 fcf3 	bl	802236c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011986:	4a64      	ldr	r2, [pc, #400]	; (8011b18 <readCanToStructs+0x1d90>)
 8011988:	4b60      	ldr	r3, [pc, #384]	; (8011b0c <readCanToStructs+0x1d84>)
 801198a:	4610      	mov	r0, r2
 801198c:	4619      	mov	r1, r3
 801198e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011992:	461a      	mov	r2, r3
 8011994:	f010 fb3e 	bl	8022014 <memcpy>
					DataTraverser = 0;
 8011998:	4b59      	ldr	r3, [pc, #356]	; (8011b00 <readCanToStructs+0x1d78>)
 801199a:	2200      	movs	r2, #0
 801199c:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 801199e:	4b5c      	ldr	r3, [pc, #368]	; (8011b10 <readCanToStructs+0x1d88>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80119a4:	4b5d      	ldr	r3, [pc, #372]	; (8011b1c <readCanToStructs+0x1d94>)
 80119a6:	2201      	movs	r2, #1
 80119a8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80119aa:	f003 fd41 	bl	8015430 <HAL_GetTick>
 80119ae:	4603      	mov	r3, r0
 80119b0:	4a5a      	ldr	r2, [pc, #360]	; (8011b1c <readCanToStructs+0x1d94>)
 80119b2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80119b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119b8:	4a52      	ldr	r2, [pc, #328]	; (8011b04 <readCanToStructs+0x1d7c>)
 80119ba:	f240 4112 	movw	r1, #1042	; 0x412
 80119be:	fb01 f303 	mul.w	r3, r1, r3
 80119c2:	4413      	add	r3, r2
 80119c4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80119c8:	2200      	movs	r2, #0
 80119ca:	701a      	strb	r2, [r3, #0]
				break;
 80119cc:	e1c6      	b.n	8011d5c <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 80119ce:	4b4f      	ldr	r3, [pc, #316]	; (8011b0c <readCanToStructs+0x1d84>)
 80119d0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80119d2:	4b4a      	ldr	r3, [pc, #296]	; (8011afc <readCanToStructs+0x1d74>)
 80119d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119d8:	885b      	ldrh	r3, [r3, #2]
 80119da:	4a48      	ldr	r2, [pc, #288]	; (8011afc <readCanToStructs+0x1d74>)
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	4413      	add	r3, r2
 80119e0:	3304      	adds	r3, #4
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 80119e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d005      	beq.n	80119fc <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 80119f0:	4b43      	ldr	r3, [pc, #268]	; (8011b00 <readCanToStructs+0x1d78>)
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	461a      	mov	r2, r3
 80119f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f8:	4413      	add	r3, r2
 80119fa:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 80119fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d117      	bne.n	8011a34 <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011a04:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011a08:	2100      	movs	r1, #0
 8011a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a0c:	f010 fb2a 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a14:	4a3b      	ldr	r2, [pc, #236]	; (8011b04 <readCanToStructs+0x1d7c>)
 8011a16:	f240 4112 	movw	r1, #1042	; 0x412
 8011a1a:	fb01 f303 	mul.w	r3, r1, r3
 8011a1e:	4413      	add	r3, r2
 8011a20:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011a24:	2200      	movs	r2, #0
 8011a26:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011a28:	4b35      	ldr	r3, [pc, #212]	; (8011b00 <readCanToStructs+0x1d78>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011a2e:	4b38      	ldr	r3, [pc, #224]	; (8011b10 <readCanToStructs+0x1d88>)
 8011a30:	2200      	movs	r2, #0
 8011a32:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a34:	2301      	movs	r3, #1
 8011a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a3a:	e01c      	b.n	8011a76 <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011a3c:	4b2f      	ldr	r3, [pc, #188]	; (8011afc <readCanToStructs+0x1d74>)
 8011a3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a42:	885b      	ldrh	r3, [r3, #2]
 8011a44:	461a      	mov	r2, r3
 8011a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a4a:	492c      	ldr	r1, [pc, #176]	; (8011afc <readCanToStructs+0x1d74>)
 8011a4c:	0112      	lsls	r2, r2, #4
 8011a4e:	440a      	add	r2, r1
 8011a50:	4413      	add	r3, r2
 8011a52:	3304      	adds	r3, #4
 8011a54:	781a      	ldrb	r2, [r3, #0]
 8011a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a58:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011a60:	4b27      	ldr	r3, [pc, #156]	; (8011b00 <readCanToStructs+0x1d78>)
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	3301      	adds	r3, #1
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	4b25      	ldr	r3, [pc, #148]	; (8011b00 <readCanToStructs+0x1d78>)
 8011a6a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a70:	3301      	adds	r3, #1
 8011a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a76:	4b21      	ldr	r3, [pc, #132]	; (8011afc <readCanToStructs+0x1d74>)
 8011a78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a7c:	885b      	ldrh	r3, [r3, #2]
 8011a7e:	4a1f      	ldr	r2, [pc, #124]	; (8011afc <readCanToStructs+0x1d74>)
 8011a80:	011b      	lsls	r3, r3, #4
 8011a82:	4413      	add	r3, r2
 8011a84:	330c      	adds	r3, #12
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d3d5      	bcc.n	8011a3c <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a94:	4a1b      	ldr	r2, [pc, #108]	; (8011b04 <readCanToStructs+0x1d7c>)
 8011a96:	f240 4112 	movw	r1, #1042	; 0x412
 8011a9a:	fb01 f303 	mul.w	r3, r1, r3
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d03a      	beq.n	8011b24 <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011aae:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ab6:	4a13      	ldr	r2, [pc, #76]	; (8011b04 <readCanToStructs+0x1d7c>)
 8011ab8:	f240 4012 	movw	r0, #1042	; 0x412
 8011abc:	fb00 f303 	mul.w	r3, r0, r3
 8011ac0:	4413      	add	r3, r2
 8011ac2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4815      	ldr	r0, [pc, #84]	; (8011b20 <readCanToStructs+0x1d98>)
 8011acc:	f010 fbb2 	bl	8022234 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011ad0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ad8:	f010 fac4 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ae0:	4a08      	ldr	r2, [pc, #32]	; (8011b04 <readCanToStructs+0x1d7c>)
 8011ae2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ae6:	fb01 f303 	mul.w	r3, r1, r3
 8011aea:	4413      	add	r3, r2
 8011aec:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011af0:	2200      	movs	r2, #0
 8011af2:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011af4:	4b02      	ldr	r3, [pc, #8]	; (8011b00 <readCanToStructs+0x1d78>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	801a      	strh	r2, [r3, #0]
					break;
 8011afa:	e132      	b.n	8011d62 <readCanToStructs+0x1fda>
 8011afc:	20005b10 	.word	0x20005b10
 8011b00:	20009c28 	.word	0x20009c28
 8011b04:	200052ec 	.word	0x200052ec
 8011b08:	08026a9c 	.word	0x08026a9c
 8011b0c:	20003b3c 	.word	0x20003b3c
 8011b10:	20009c2a 	.word	0x20009c2a
 8011b14:	08026ac8 	.word	0x08026ac8
 8011b18:	20003938 	.word	0x20003938
 8011b1c:	20003514 	.word	0x20003514
 8011b20:	08026ae0 	.word	0x08026ae0
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b28:	49c2      	ldr	r1, [pc, #776]	; (8011e34 <readCanToStructs+0x20ac>)
 8011b2a:	f240 4212 	movw	r2, #1042	; 0x412
 8011b2e:	fb03 f202 	mul.w	r2, r3, r2
 8011b32:	440a      	add	r2, r1
 8011b34:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011b38:	7812      	ldrb	r2, [r2, #0]
 8011b3a:	3201      	adds	r2, #1
 8011b3c:	b2d0      	uxtb	r0, r2
 8011b3e:	4abd      	ldr	r2, [pc, #756]	; (8011e34 <readCanToStructs+0x20ac>)
 8011b40:	f240 4112 	movw	r1, #1042	; 0x412
 8011b44:	fb01 f303 	mul.w	r3, r1, r3
 8011b48:	4413      	add	r3, r2
 8011b4a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011b4e:	4602      	mov	r2, r0
 8011b50:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011b52:	4bb9      	ldr	r3, [pc, #740]	; (8011e38 <readCanToStructs+0x20b0>)
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	3304      	adds	r3, #4
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	4bb8      	ldr	r3, [pc, #736]	; (8011e3c <readCanToStructs+0x20b4>)
 8011b5c:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011b5e:	4bb8      	ldr	r3, [pc, #736]	; (8011e40 <readCanToStructs+0x20b8>)
 8011b60:	881a      	ldrh	r2, [r3, #0]
 8011b62:	4bb6      	ldr	r3, [pc, #728]	; (8011e3c <readCanToStructs+0x20b4>)
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	f0c0 80fa 	bcc.w	8011d60 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 8011b6c:	48b5      	ldr	r0, [pc, #724]	; (8011e44 <readCanToStructs+0x20bc>)
 8011b6e:	f010 fbfd 	bl	802236c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011b72:	4ab5      	ldr	r2, [pc, #724]	; (8011e48 <readCanToStructs+0x20c0>)
 8011b74:	4bb0      	ldr	r3, [pc, #704]	; (8011e38 <readCanToStructs+0x20b0>)
 8011b76:	4610      	mov	r0, r2
 8011b78:	4619      	mov	r1, r3
 8011b7a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011b7e:	461a      	mov	r2, r3
 8011b80:	f010 fa48 	bl	8022014 <memcpy>
					DataTraverser = 0;
 8011b84:	4bae      	ldr	r3, [pc, #696]	; (8011e40 <readCanToStructs+0x20b8>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011b8a:	4bac      	ldr	r3, [pc, #688]	; (8011e3c <readCanToStructs+0x20b4>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011b90:	4bae      	ldr	r3, [pc, #696]	; (8011e4c <readCanToStructs+0x20c4>)
 8011b92:	2201      	movs	r2, #1
 8011b94:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011b96:	f003 fc4b 	bl	8015430 <HAL_GetTick>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	4aab      	ldr	r2, [pc, #684]	; (8011e4c <readCanToStructs+0x20c4>)
 8011b9e:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ba4:	4aa3      	ldr	r2, [pc, #652]	; (8011e34 <readCanToStructs+0x20ac>)
 8011ba6:	f240 4112 	movw	r1, #1042	; 0x412
 8011baa:	fb01 f303 	mul.w	r3, r1, r3
 8011bae:	4413      	add	r3, r2
 8011bb0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	701a      	strb	r2, [r3, #0]
				break;
 8011bb8:	e0d2      	b.n	8011d60 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8011bba:	4ba5      	ldr	r3, [pc, #660]	; (8011e50 <readCanToStructs+0x20c8>)
 8011bbc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bbe:	4ba5      	ldr	r3, [pc, #660]	; (8011e54 <readCanToStructs+0x20cc>)
 8011bc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bc4:	885b      	ldrh	r3, [r3, #2]
 8011bc6:	4aa3      	ldr	r2, [pc, #652]	; (8011e54 <readCanToStructs+0x20cc>)
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	4413      	add	r3, r2
 8011bcc:	3304      	adds	r3, #4
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d110      	bne.n	8011bfe <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011bdc:	2208      	movs	r2, #8
 8011bde:	2100      	movs	r1, #0
 8011be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011be2:	f010 fa3f 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bea:	4a92      	ldr	r2, [pc, #584]	; (8011e34 <readCanToStructs+0x20ac>)
 8011bec:	f240 4112 	movw	r1, #1042	; 0x412
 8011bf0:	fb01 f303 	mul.w	r3, r1, r3
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c02:	4a8c      	ldr	r2, [pc, #560]	; (8011e34 <readCanToStructs+0x20ac>)
 8011c04:	f240 4112 	movw	r1, #1042	; 0x412
 8011c08:	fb01 f303 	mul.w	r3, r1, r3
 8011c0c:	4413      	add	r3, r2
 8011c0e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d014      	beq.n	8011c46 <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011c1c:	488e      	ldr	r0, [pc, #568]	; (8011e58 <readCanToStructs+0x20d0>)
 8011c1e:	f010 fba5 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011c22:	2208      	movs	r2, #8
 8011c24:	2100      	movs	r1, #0
 8011c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c28:	f010 fa1c 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c30:	4a80      	ldr	r2, [pc, #512]	; (8011e34 <readCanToStructs+0x20ac>)
 8011c32:	f240 4112 	movw	r1, #1042	; 0x412
 8011c36:	fb01 f303 	mul.w	r3, r1, r3
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011c40:	2200      	movs	r2, #0
 8011c42:	701a      	strb	r2, [r3, #0]
					break;
 8011c44:	e08d      	b.n	8011d62 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011c46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	00db      	lsls	r3, r3, #3
 8011c4e:	1a9b      	subs	r3, r3, r2
 8011c50:	461a      	mov	r2, r3
 8011c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c54:	4413      	add	r3, r2
 8011c56:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c58:	2301      	movs	r3, #1
 8011c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c5e:	e016      	b.n	8011c8e <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c60:	4b7c      	ldr	r3, [pc, #496]	; (8011e54 <readCanToStructs+0x20cc>)
 8011c62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c66:	885b      	ldrh	r3, [r3, #2]
 8011c68:	461a      	mov	r2, r3
 8011c6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c6e:	4979      	ldr	r1, [pc, #484]	; (8011e54 <readCanToStructs+0x20cc>)
 8011c70:	0112      	lsls	r2, r2, #4
 8011c72:	440a      	add	r2, r1
 8011c74:	4413      	add	r3, r2
 8011c76:	3304      	adds	r3, #4
 8011c78:	781a      	ldrb	r2, [r3, #0]
 8011c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c80:	3301      	adds	r3, #1
 8011c82:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c88:	3301      	adds	r3, #1
 8011c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c8e:	4b71      	ldr	r3, [pc, #452]	; (8011e54 <readCanToStructs+0x20cc>)
 8011c90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c94:	885b      	ldrh	r3, [r3, #2]
 8011c96:	4a6f      	ldr	r2, [pc, #444]	; (8011e54 <readCanToStructs+0x20cc>)
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	4413      	add	r3, r2
 8011c9c:	330c      	adds	r3, #12
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d3db      	bcc.n	8011c60 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8011ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cac:	4a61      	ldr	r2, [pc, #388]	; (8011e34 <readCanToStructs+0x20ac>)
 8011cae:	f240 4112 	movw	r1, #1042	; 0x412
 8011cb2:	fb01 f303 	mul.w	r3, r1, r3
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	1a9a      	subs	r2, r3, r2
 8011cc6:	4b63      	ldr	r3, [pc, #396]	; (8011e54 <readCanToStructs+0x20cc>)
 8011cc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ccc:	885b      	ldrh	r3, [r3, #2]
 8011cce:	4961      	ldr	r1, [pc, #388]	; (8011e54 <readCanToStructs+0x20cc>)
 8011cd0:	011b      	lsls	r3, r3, #4
 8011cd2:	440b      	add	r3, r1
 8011cd4:	330c      	adds	r3, #12
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	4413      	add	r3, r2
 8011cdc:	2b07      	cmp	r3, #7
 8011cde:	d917      	bls.n	8011d10 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8011ce0:	485e      	ldr	r0, [pc, #376]	; (8011e5c <readCanToStructs+0x20d4>)
 8011ce2:	f010 fb43 	bl	802236c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011ce6:	4b59      	ldr	r3, [pc, #356]	; (8011e4c <readCanToStructs+0x20c4>)
 8011ce8:	2201      	movs	r2, #1
 8011cea:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011cec:	f003 fba0 	bl	8015430 <HAL_GetTick>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	4a56      	ldr	r2, [pc, #344]	; (8011e4c <readCanToStructs+0x20c4>)
 8011cf4:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cfa:	4a4e      	ldr	r2, [pc, #312]	; (8011e34 <readCanToStructs+0x20ac>)
 8011cfc:	f240 4112 	movw	r1, #1042	; 0x412
 8011d00:	fb01 f303 	mul.w	r3, r1, r3
 8011d04:	4413      	add	r3, r2
 8011d06:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	701a      	strb	r2, [r3, #0]
				break;
 8011d0e:	e028      	b.n	8011d62 <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d14:	4a47      	ldr	r2, [pc, #284]	; (8011e34 <readCanToStructs+0x20ac>)
 8011d16:	f240 4112 	movw	r1, #1042	; 0x412
 8011d1a:	fb01 f303 	mul.w	r3, r1, r3
 8011d1e:	4413      	add	r3, r2
 8011d20:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011d24:	2201      	movs	r2, #1
 8011d26:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d2c:	4941      	ldr	r1, [pc, #260]	; (8011e34 <readCanToStructs+0x20ac>)
 8011d2e:	f240 4212 	movw	r2, #1042	; 0x412
 8011d32:	fb03 f202 	mul.w	r2, r3, r2
 8011d36:	440a      	add	r2, r1
 8011d38:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011d3c:	7812      	ldrb	r2, [r2, #0]
 8011d3e:	3201      	adds	r2, #1
 8011d40:	b2d0      	uxtb	r0, r2
 8011d42:	4a3c      	ldr	r2, [pc, #240]	; (8011e34 <readCanToStructs+0x20ac>)
 8011d44:	f240 4112 	movw	r1, #1042	; 0x412
 8011d48:	fb01 f303 	mul.w	r3, r1, r3
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d52:	4602      	mov	r2, r0
 8011d54:	701a      	strb	r2, [r3, #0]
				break;
 8011d56:	e004      	b.n	8011d62 <readCanToStructs+0x1fda>
				break;
 8011d58:	bf00      	nop
 8011d5a:	e002      	b.n	8011d62 <readCanToStructs+0x1fda>
				break;
 8011d5c:	bf00      	nop
 8011d5e:	e000      	b.n	8011d62 <readCanToStructs+0x1fda>
				break;
 8011d60:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011d62:	4b3c      	ldr	r3, [pc, #240]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d68:	885b      	ldrh	r3, [r3, #2]
 8011d6a:	011b      	lsls	r3, r3, #4
 8011d6c:	4a39      	ldr	r2, [pc, #228]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d6e:	4413      	add	r3, r2
 8011d70:	2210      	movs	r2, #16
 8011d72:	2100      	movs	r1, #0
 8011d74:	4618      	mov	r0, r3
 8011d76:	f010 f975 	bl	8022064 <memset>
			canRead.Out++;
 8011d7a:	4b36      	ldr	r3, [pc, #216]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d80:	885b      	ldrh	r3, [r3, #2]
 8011d82:	3301      	adds	r3, #1
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	4b33      	ldr	r3, [pc, #204]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d8c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011d8e:	4b31      	ldr	r3, [pc, #196]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d94:	885b      	ldrh	r3, [r3, #2]
 8011d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d9a:	d104      	bne.n	8011da6 <readCanToStructs+0x201e>
				canRead.Out = 0;
 8011d9c:	4b2d      	ldr	r3, [pc, #180]	; (8011e54 <readCanToStructs+0x20cc>)
 8011d9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011da2:	2200      	movs	r2, #0
 8011da4:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011da6:	f7fd ff99 	bl	800fcdc <canDataReady>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f47f a949 	bne.w	8011044 <readCanToStructs+0x12bc>
	break;
 8011db2:	f000 be46 	b.w	8012a42 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011db6:	4b27      	ldr	r3, [pc, #156]	; (8011e54 <readCanToStructs+0x20cc>)
 8011db8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dbc:	885b      	ldrh	r3, [r3, #2]
 8011dbe:	4a25      	ldr	r2, [pc, #148]	; (8011e54 <readCanToStructs+0x20cc>)
 8011dc0:	011b      	lsls	r3, r3, #4
 8011dc2:	4413      	add	r3, r2
 8011dc4:	330f      	adds	r3, #15
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	3b01      	subs	r3, #1
 8011dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011dce:	4b21      	ldr	r3, [pc, #132]	; (8011e54 <readCanToStructs+0x20cc>)
 8011dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dd4:	885b      	ldrh	r3, [r3, #2]
 8011dd6:	4a1f      	ldr	r2, [pc, #124]	; (8011e54 <readCanToStructs+0x20cc>)
 8011dd8:	011b      	lsls	r3, r3, #4
 8011dda:	4413      	add	r3, r2
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011de2:	f200 8624 	bhi.w	8012a2e <readCanToStructs+0x2ca6>
 8011de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dea:	d80a      	bhi.n	8011e02 <readCanToStructs+0x207a>
 8011dec:	f240 1203 	movw	r2, #259	; 0x103
 8011df0:	4293      	cmp	r3, r2
 8011df2:	d035      	beq.n	8011e60 <readCanToStructs+0x20d8>
 8011df4:	f240 1209 	movw	r2, #265	; 0x109
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	f000 8107 	beq.w	801200c <readCanToStructs+0x2284>
 8011dfe:	f000 be16 	b.w	8012a2e <readCanToStructs+0x2ca6>
 8011e02:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011e06:	2b07      	cmp	r3, #7
 8011e08:	f200 8611 	bhi.w	8012a2e <readCanToStructs+0x2ca6>
 8011e0c:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <readCanToStructs+0x208c>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	080121df 	.word	0x080121df
 8011e18:	08012389 	.word	0x08012389
 8011e1c:	08012a2f 	.word	0x08012a2f
 8011e20:	08012a2f 	.word	0x08012a2f
 8011e24:	08012555 	.word	0x08012555
 8011e28:	08012a2f 	.word	0x08012a2f
 8011e2c:	080126dd 	.word	0x080126dd
 8011e30:	0801289b 	.word	0x0801289b
 8011e34:	200052ec 	.word	0x200052ec
 8011e38:	20003b3c 	.word	0x20003b3c
 8011e3c:	20009c2a 	.word	0x20009c2a
 8011e40:	20009c28 	.word	0x20009c28
 8011e44:	08026b0c 	.word	0x08026b0c
 8011e48:	20003938 	.word	0x20003938
 8011e4c:	20003514 	.word	0x20003514
 8011e50:	20003500 	.word	0x20003500
 8011e54:	20005b10 	.word	0x20005b10
 8011e58:	080269e0 	.word	0x080269e0
 8011e5c:	08026a00 	.word	0x08026a00
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011e60:	4bc3      	ldr	r3, [pc, #780]	; (8012170 <readCanToStructs+0x23e8>)
 8011e62:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011e64:	4bc3      	ldr	r3, [pc, #780]	; (8012174 <readCanToStructs+0x23ec>)
 8011e66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e6a:	885b      	ldrh	r3, [r3, #2]
 8011e6c:	4ac1      	ldr	r2, [pc, #772]	; (8012174 <readCanToStructs+0x23ec>)
 8011e6e:	011b      	lsls	r3, r3, #4
 8011e70:	4413      	add	r3, r2
 8011e72:	3304      	adds	r3, #4
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d110      	bne.n	8011ea4 <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011e82:	2206      	movs	r2, #6
 8011e84:	2100      	movs	r1, #0
 8011e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e88:	f010 f8ec 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e90:	4ab9      	ldr	r2, [pc, #740]	; (8012178 <readCanToStructs+0x23f0>)
 8011e92:	f240 4112 	movw	r1, #1042	; 0x412
 8011e96:	fb01 f303 	mul.w	r3, r1, r3
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ea8:	4ab3      	ldr	r2, [pc, #716]	; (8012178 <readCanToStructs+0x23f0>)
 8011eaa:	f240 4112 	movw	r1, #1042	; 0x412
 8011eae:	fb01 f303 	mul.w	r3, r1, r3
 8011eb2:	4413      	add	r3, r2
 8011eb4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d015      	beq.n	8011eee <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 8011ec2:	48ae      	ldr	r0, [pc, #696]	; (801217c <readCanToStructs+0x23f4>)
 8011ec4:	f010 fa52 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011ec8:	2206      	movs	r2, #6
 8011eca:	2100      	movs	r1, #0
 8011ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ece:	f010 f8c9 	bl	8022064 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed6:	4aa8      	ldr	r2, [pc, #672]	; (8012178 <readCanToStructs+0x23f0>)
 8011ed8:	f240 4112 	movw	r1, #1042	; 0x412
 8011edc:	fb01 f303 	mul.w	r3, r1, r3
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	701a      	strb	r2, [r3, #0]
					break;
 8011eea:	f000 bda0 	b.w	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011eee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	00db      	lsls	r3, r3, #3
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	461a      	mov	r2, r3
 8011efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efc:	4413      	add	r3, r2
 8011efe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f00:	2301      	movs	r3, #1
 8011f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f06:	e016      	b.n	8011f36 <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f08:	4b9a      	ldr	r3, [pc, #616]	; (8012174 <readCanToStructs+0x23ec>)
 8011f0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f0e:	885b      	ldrh	r3, [r3, #2]
 8011f10:	461a      	mov	r2, r3
 8011f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f16:	4997      	ldr	r1, [pc, #604]	; (8012174 <readCanToStructs+0x23ec>)
 8011f18:	0112      	lsls	r2, r2, #4
 8011f1a:	440a      	add	r2, r1
 8011f1c:	4413      	add	r3, r2
 8011f1e:	3304      	adds	r3, #4
 8011f20:	781a      	ldrb	r2, [r3, #0]
 8011f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f24:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f28:	3301      	adds	r3, #1
 8011f2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f30:	3301      	adds	r3, #1
 8011f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f36:	4b8f      	ldr	r3, [pc, #572]	; (8012174 <readCanToStructs+0x23ec>)
 8011f38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f3c:	885b      	ldrh	r3, [r3, #2]
 8011f3e:	4a8d      	ldr	r2, [pc, #564]	; (8012174 <readCanToStructs+0x23ec>)
 8011f40:	011b      	lsls	r3, r3, #4
 8011f42:	4413      	add	r3, r2
 8011f44:	330c      	adds	r3, #12
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d3db      	bcc.n	8011f08 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f54:	4a88      	ldr	r2, [pc, #544]	; (8012178 <readCanToStructs+0x23f0>)
 8011f56:	f240 4112 	movw	r1, #1042	; 0x412
 8011f5a:	fb01 f303 	mul.w	r3, r1, r3
 8011f5e:	4413      	add	r3, r2
 8011f60:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	461a      	mov	r2, r3
 8011f68:	4613      	mov	r3, r2
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011f6e:	4b81      	ldr	r3, [pc, #516]	; (8012174 <readCanToStructs+0x23ec>)
 8011f70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f74:	885b      	ldrh	r3, [r3, #2]
 8011f76:	497f      	ldr	r1, [pc, #508]	; (8012174 <readCanToStructs+0x23ec>)
 8011f78:	011b      	lsls	r3, r3, #4
 8011f7a:	440b      	add	r3, r1
 8011f7c:	330c      	adds	r3, #12
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011f84:	2b05      	cmp	r3, #5
 8011f86:	d91c      	bls.n	8011fc2 <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011f88:	4b7d      	ldr	r3, [pc, #500]	; (8012180 <readCanToStructs+0x23f8>)
 8011f8a:	4a79      	ldr	r2, [pc, #484]	; (8012170 <readCanToStructs+0x23e8>)
 8011f8c:	6811      	ldr	r1, [r2, #0]
 8011f8e:	6019      	str	r1, [r3, #0]
 8011f90:	8892      	ldrh	r2, [r2, #4]
 8011f92:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011f94:	4b7b      	ldr	r3, [pc, #492]	; (8012184 <readCanToStructs+0x23fc>)
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d102      	bne.n	8011fa2 <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 8011f9c:	487a      	ldr	r0, [pc, #488]	; (8012188 <readCanToStructs+0x2400>)
 8011f9e:	f010 f9e5 	bl	802236c <puts>
					Write_RTC();
 8011fa2:	f7f9 fa4f 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011faa:	4a73      	ldr	r2, [pc, #460]	; (8012178 <readCanToStructs+0x23f0>)
 8011fac:	f240 4112 	movw	r1, #1042	; 0x412
 8011fb0:	fb01 f303 	mul.w	r3, r1, r3
 8011fb4:	4413      	add	r3, r2
 8011fb6:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011fba:	2200      	movs	r2, #0
 8011fbc:	701a      	strb	r2, [r3, #0]
 8011fbe:	f000 bd36 	b.w	8012a2e <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fc6:	4a6c      	ldr	r2, [pc, #432]	; (8012178 <readCanToStructs+0x23f0>)
 8011fc8:	f240 4112 	movw	r1, #1042	; 0x412
 8011fcc:	fb01 f303 	mul.w	r3, r1, r3
 8011fd0:	4413      	add	r3, r2
 8011fd2:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fde:	4966      	ldr	r1, [pc, #408]	; (8012178 <readCanToStructs+0x23f0>)
 8011fe0:	f240 4212 	movw	r2, #1042	; 0x412
 8011fe4:	fb03 f202 	mul.w	r2, r3, r2
 8011fe8:	440a      	add	r2, r1
 8011fea:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011fee:	7812      	ldrb	r2, [r2, #0]
 8011ff0:	3201      	adds	r2, #1
 8011ff2:	b2d0      	uxtb	r0, r2
 8011ff4:	4a60      	ldr	r2, [pc, #384]	; (8012178 <readCanToStructs+0x23f0>)
 8011ff6:	f240 4112 	movw	r1, #1042	; 0x412
 8011ffa:	fb01 f303 	mul.w	r3, r1, r3
 8011ffe:	4413      	add	r3, r2
 8012000:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012004:	4602      	mov	r2, r0
 8012006:	701a      	strb	r2, [r3, #0]
				break;
 8012008:	f000 bd11 	b.w	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801200c:	4b58      	ldr	r3, [pc, #352]	; (8012170 <readCanToStructs+0x23e8>)
 801200e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012010:	4b58      	ldr	r3, [pc, #352]	; (8012174 <readCanToStructs+0x23ec>)
 8012012:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012016:	885b      	ldrh	r3, [r3, #2]
 8012018:	4a56      	ldr	r2, [pc, #344]	; (8012174 <readCanToStructs+0x23ec>)
 801201a:	011b      	lsls	r3, r3, #4
 801201c:	4413      	add	r3, r2
 801201e:	3304      	adds	r3, #4
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012026:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801202a:	2b00      	cmp	r3, #0
 801202c:	d110      	bne.n	8012050 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801202e:	2206      	movs	r2, #6
 8012030:	2100      	movs	r1, #0
 8012032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012034:	f010 f816 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801203c:	4a4e      	ldr	r2, [pc, #312]	; (8012178 <readCanToStructs+0x23f0>)
 801203e:	f240 4112 	movw	r1, #1042	; 0x412
 8012042:	fb01 f303 	mul.w	r3, r1, r3
 8012046:	4413      	add	r3, r2
 8012048:	f203 2313 	addw	r3, r3, #531	; 0x213
 801204c:	2200      	movs	r2, #0
 801204e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012054:	4a48      	ldr	r2, [pc, #288]	; (8012178 <readCanToStructs+0x23f0>)
 8012056:	f240 4112 	movw	r1, #1042	; 0x412
 801205a:	fb01 f303 	mul.w	r3, r1, r3
 801205e:	4413      	add	r3, r2
 8012060:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801206a:	429a      	cmp	r2, r3
 801206c:	d015      	beq.n	801209a <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 801206e:	4847      	ldr	r0, [pc, #284]	; (801218c <readCanToStructs+0x2404>)
 8012070:	f010 f97c 	bl	802236c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012074:	2206      	movs	r2, #6
 8012076:	2100      	movs	r1, #0
 8012078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801207a:	f00f fff3 	bl	8022064 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801207e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012082:	4a3d      	ldr	r2, [pc, #244]	; (8012178 <readCanToStructs+0x23f0>)
 8012084:	f240 4112 	movw	r1, #1042	; 0x412
 8012088:	fb01 f303 	mul.w	r3, r1, r3
 801208c:	4413      	add	r3, r2
 801208e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012092:	2200      	movs	r2, #0
 8012094:	701a      	strb	r2, [r3, #0]
					break;
 8012096:	f000 bcca 	b.w	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801209a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801209e:	4613      	mov	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	461a      	mov	r2, r3
 80120a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a8:	4413      	add	r3, r2
 80120aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120ac:	2301      	movs	r3, #1
 80120ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120b2:	e016      	b.n	80120e2 <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80120b4:	4b2f      	ldr	r3, [pc, #188]	; (8012174 <readCanToStructs+0x23ec>)
 80120b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120ba:	885b      	ldrh	r3, [r3, #2]
 80120bc:	461a      	mov	r2, r3
 80120be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120c2:	492c      	ldr	r1, [pc, #176]	; (8012174 <readCanToStructs+0x23ec>)
 80120c4:	0112      	lsls	r2, r2, #4
 80120c6:	440a      	add	r2, r1
 80120c8:	4413      	add	r3, r2
 80120ca:	3304      	adds	r3, #4
 80120cc:	781a      	ldrb	r2, [r3, #0]
 80120ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80120d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d4:	3301      	adds	r3, #1
 80120d6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120dc:	3301      	adds	r3, #1
 80120de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120e2:	4b24      	ldr	r3, [pc, #144]	; (8012174 <readCanToStructs+0x23ec>)
 80120e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120e8:	885b      	ldrh	r3, [r3, #2]
 80120ea:	4a22      	ldr	r2, [pc, #136]	; (8012174 <readCanToStructs+0x23ec>)
 80120ec:	011b      	lsls	r3, r3, #4
 80120ee:	4413      	add	r3, r2
 80120f0:	330c      	adds	r3, #12
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d3db      	bcc.n	80120b4 <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80120fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012100:	4a1d      	ldr	r2, [pc, #116]	; (8012178 <readCanToStructs+0x23f0>)
 8012102:	f240 4112 	movw	r1, #1042	; 0x412
 8012106:	fb01 f303 	mul.w	r3, r1, r3
 801210a:	4413      	add	r3, r2
 801210c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	461a      	mov	r2, r3
 8012114:	4613      	mov	r3, r2
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801211a:	4b16      	ldr	r3, [pc, #88]	; (8012174 <readCanToStructs+0x23ec>)
 801211c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012120:	885b      	ldrh	r3, [r3, #2]
 8012122:	4914      	ldr	r1, [pc, #80]	; (8012174 <readCanToStructs+0x23ec>)
 8012124:	011b      	lsls	r3, r3, #4
 8012126:	440b      	add	r3, r1
 8012128:	330c      	adds	r3, #12
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	3b01      	subs	r3, #1
 801212e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012130:	2b05      	cmp	r3, #5
 8012132:	d92f      	bls.n	8012194 <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012134:	4b12      	ldr	r3, [pc, #72]	; (8012180 <readCanToStructs+0x23f8>)
 8012136:	4a0e      	ldr	r2, [pc, #56]	; (8012170 <readCanToStructs+0x23e8>)
 8012138:	6811      	ldr	r1, [r2, #0]
 801213a:	6019      	str	r1, [r3, #0]
 801213c:	8892      	ldrh	r2, [r2, #4]
 801213e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012140:	4b10      	ldr	r3, [pc, #64]	; (8012184 <readCanToStructs+0x23fc>)
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	2b01      	cmp	r3, #1
 8012146:	d102      	bne.n	801214e <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 8012148:	4811      	ldr	r0, [pc, #68]	; (8012190 <readCanToStructs+0x2408>)
 801214a:	f010 f90f 	bl	802236c <puts>
					Write_RTC();
 801214e:	f7f9 f979 	bl	800b444 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012156:	4a08      	ldr	r2, [pc, #32]	; (8012178 <readCanToStructs+0x23f0>)
 8012158:	f240 4112 	movw	r1, #1042	; 0x412
 801215c:	fb01 f303 	mul.w	r3, r1, r3
 8012160:	4413      	add	r3, r2
 8012162:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012166:	2200      	movs	r2, #0
 8012168:	701a      	strb	r2, [r3, #0]
 801216a:	f000 bc60 	b.w	8012a2e <readCanToStructs+0x2ca6>
 801216e:	bf00      	nop
 8012170:	20002868 	.word	0x20002868
 8012174:	20005b10 	.word	0x20005b10
 8012178:	200052ec 	.word	0x200052ec
 801217c:	080268ac 	.word	0x080268ac
 8012180:	20002860 	.word	0x20002860
 8012184:	20000645 	.word	0x20000645
 8012188:	080268c8 	.word	0x080268c8
 801218c:	080268dc 	.word	0x080268dc
 8012190:	080268f8 	.word	0x080268f8
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8012194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012198:	4aa5      	ldr	r2, [pc, #660]	; (8012430 <readCanToStructs+0x26a8>)
 801219a:	f240 4112 	movw	r1, #1042	; 0x412
 801219e:	fb01 f303 	mul.w	r3, r1, r3
 80121a2:	4413      	add	r3, r2
 80121a4:	f203 2312 	addw	r3, r3, #530	; 0x212
 80121a8:	2201      	movs	r2, #1
 80121aa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80121ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121b0:	499f      	ldr	r1, [pc, #636]	; (8012430 <readCanToStructs+0x26a8>)
 80121b2:	f240 4212 	movw	r2, #1042	; 0x412
 80121b6:	fb03 f202 	mul.w	r2, r3, r2
 80121ba:	440a      	add	r2, r1
 80121bc:	f202 2213 	addw	r2, r2, #531	; 0x213
 80121c0:	7812      	ldrb	r2, [r2, #0]
 80121c2:	3201      	adds	r2, #1
 80121c4:	b2d0      	uxtb	r0, r2
 80121c6:	4a9a      	ldr	r2, [pc, #616]	; (8012430 <readCanToStructs+0x26a8>)
 80121c8:	f240 4112 	movw	r1, #1042	; 0x412
 80121cc:	fb01 f303 	mul.w	r3, r1, r3
 80121d0:	4413      	add	r3, r2
 80121d2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80121d6:	4602      	mov	r2, r0
 80121d8:	701a      	strb	r2, [r3, #0]
				break;
 80121da:	f000 bc28 	b.w	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80121de:	4b95      	ldr	r3, [pc, #596]	; (8012434 <readCanToStructs+0x26ac>)
 80121e0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80121e2:	4b95      	ldr	r3, [pc, #596]	; (8012438 <readCanToStructs+0x26b0>)
 80121e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121e8:	885b      	ldrh	r3, [r3, #2]
 80121ea:	4a93      	ldr	r2, [pc, #588]	; (8012438 <readCanToStructs+0x26b0>)
 80121ec:	011b      	lsls	r3, r3, #4
 80121ee:	4413      	add	r3, r2
 80121f0:	3304      	adds	r3, #4
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80121f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d110      	bne.n	8012222 <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012200:	2208      	movs	r2, #8
 8012202:	2100      	movs	r1, #0
 8012204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012206:	f00f ff2d 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801220a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801220e:	4a88      	ldr	r2, [pc, #544]	; (8012430 <readCanToStructs+0x26a8>)
 8012210:	f240 4112 	movw	r1, #1042	; 0x412
 8012214:	fb01 f303 	mul.w	r3, r1, r3
 8012218:	4413      	add	r3, r2
 801221a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801221e:	2200      	movs	r2, #0
 8012220:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012226:	4a82      	ldr	r2, [pc, #520]	; (8012430 <readCanToStructs+0x26a8>)
 8012228:	f240 4112 	movw	r1, #1042	; 0x412
 801222c:	fb01 f303 	mul.w	r3, r1, r3
 8012230:	4413      	add	r3, r2
 8012232:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801223c:	429a      	cmp	r2, r3
 801223e:	d014      	beq.n	801226a <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012240:	487e      	ldr	r0, [pc, #504]	; (801243c <readCanToStructs+0x26b4>)
 8012242:	f010 f893 	bl	802236c <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012246:	2208      	movs	r2, #8
 8012248:	2100      	movs	r1, #0
 801224a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801224c:	f00f ff0a 	bl	8022064 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012254:	4a76      	ldr	r2, [pc, #472]	; (8012430 <readCanToStructs+0x26a8>)
 8012256:	f240 4112 	movw	r1, #1042	; 0x412
 801225a:	fb01 f303 	mul.w	r3, r1, r3
 801225e:	4413      	add	r3, r2
 8012260:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012264:	2200      	movs	r2, #0
 8012266:	701a      	strb	r2, [r3, #0]
					break;
 8012268:	e3e1      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801226a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801226e:	4613      	mov	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	1a9b      	subs	r3, r3, r2
 8012274:	461a      	mov	r2, r3
 8012276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012278:	4413      	add	r3, r2
 801227a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801227c:	2301      	movs	r3, #1
 801227e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012282:	e016      	b.n	80122b2 <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012284:	4b6c      	ldr	r3, [pc, #432]	; (8012438 <readCanToStructs+0x26b0>)
 8012286:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801228a:	885b      	ldrh	r3, [r3, #2]
 801228c:	461a      	mov	r2, r3
 801228e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012292:	4969      	ldr	r1, [pc, #420]	; (8012438 <readCanToStructs+0x26b0>)
 8012294:	0112      	lsls	r2, r2, #4
 8012296:	440a      	add	r2, r1
 8012298:	4413      	add	r3, r2
 801229a:	3304      	adds	r3, #4
 801229c:	781a      	ldrb	r2, [r3, #0]
 801229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	3301      	adds	r3, #1
 80122a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80122a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122ac:	3301      	adds	r3, #1
 80122ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122b2:	4b61      	ldr	r3, [pc, #388]	; (8012438 <readCanToStructs+0x26b0>)
 80122b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122b8:	885b      	ldrh	r3, [r3, #2]
 80122ba:	4a5f      	ldr	r2, [pc, #380]	; (8012438 <readCanToStructs+0x26b0>)
 80122bc:	011b      	lsls	r3, r3, #4
 80122be:	4413      	add	r3, r2
 80122c0:	330c      	adds	r3, #12
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d3db      	bcc.n	8012284 <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80122cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122d0:	4a57      	ldr	r2, [pc, #348]	; (8012430 <readCanToStructs+0x26a8>)
 80122d2:	f240 4112 	movw	r1, #1042	; 0x412
 80122d6:	fb01 f303 	mul.w	r3, r1, r3
 80122da:	4413      	add	r3, r2
 80122dc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	461a      	mov	r2, r3
 80122e4:	4613      	mov	r3, r2
 80122e6:	00db      	lsls	r3, r3, #3
 80122e8:	1a9a      	subs	r2, r3, r2
 80122ea:	4b53      	ldr	r3, [pc, #332]	; (8012438 <readCanToStructs+0x26b0>)
 80122ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122f0:	885b      	ldrh	r3, [r3, #2]
 80122f2:	4951      	ldr	r1, [pc, #324]	; (8012438 <readCanToStructs+0x26b0>)
 80122f4:	011b      	lsls	r3, r3, #4
 80122f6:	440b      	add	r3, r1
 80122f8:	330c      	adds	r3, #12
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	4413      	add	r3, r2
 8012300:	2b07      	cmp	r3, #7
 8012302:	d91d      	bls.n	8012340 <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 8012304:	484e      	ldr	r0, [pc, #312]	; (8012440 <readCanToStructs+0x26b8>)
 8012306:	f010 f831 	bl	802236c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 801230a:	4b4e      	ldr	r3, [pc, #312]	; (8012444 <readCanToStructs+0x26bc>)
 801230c:	4a49      	ldr	r2, [pc, #292]	; (8012434 <readCanToStructs+0x26ac>)
 801230e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012312:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012316:	4b4c      	ldr	r3, [pc, #304]	; (8012448 <readCanToStructs+0x26c0>)
 8012318:	2201      	movs	r2, #1
 801231a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801231c:	f003 f888 	bl	8015430 <HAL_GetTick>
 8012320:	4603      	mov	r3, r0
 8012322:	4a4a      	ldr	r2, [pc, #296]	; (801244c <readCanToStructs+0x26c4>)
 8012324:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801232a:	4a41      	ldr	r2, [pc, #260]	; (8012430 <readCanToStructs+0x26a8>)
 801232c:	f240 4112 	movw	r1, #1042	; 0x412
 8012330:	fb01 f303 	mul.w	r3, r1, r3
 8012334:	4413      	add	r3, r2
 8012336:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801233a:	2200      	movs	r2, #0
 801233c:	701a      	strb	r2, [r3, #0]
 801233e:	e376      	b.n	8012a2e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8012340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012344:	4a3a      	ldr	r2, [pc, #232]	; (8012430 <readCanToStructs+0x26a8>)
 8012346:	f240 4112 	movw	r1, #1042	; 0x412
 801234a:	fb01 f303 	mul.w	r3, r1, r3
 801234e:	4413      	add	r3, r2
 8012350:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012354:	2201      	movs	r2, #1
 8012356:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801235c:	4934      	ldr	r1, [pc, #208]	; (8012430 <readCanToStructs+0x26a8>)
 801235e:	f240 4212 	movw	r2, #1042	; 0x412
 8012362:	fb03 f202 	mul.w	r2, r3, r2
 8012366:	440a      	add	r2, r1
 8012368:	f202 4203 	addw	r2, r2, #1027	; 0x403
 801236c:	7812      	ldrb	r2, [r2, #0]
 801236e:	3201      	adds	r2, #1
 8012370:	b2d0      	uxtb	r0, r2
 8012372:	4a2f      	ldr	r2, [pc, #188]	; (8012430 <readCanToStructs+0x26a8>)
 8012374:	f240 4112 	movw	r1, #1042	; 0x412
 8012378:	fb01 f303 	mul.w	r3, r1, r3
 801237c:	4413      	add	r3, r2
 801237e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012382:	4602      	mov	r2, r0
 8012384:	701a      	strb	r2, [r3, #0]
				break;
 8012386:	e352      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012388:	4b2a      	ldr	r3, [pc, #168]	; (8012434 <readCanToStructs+0x26ac>)
 801238a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801238c:	4b2a      	ldr	r3, [pc, #168]	; (8012438 <readCanToStructs+0x26b0>)
 801238e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012392:	885b      	ldrh	r3, [r3, #2]
 8012394:	4a28      	ldr	r2, [pc, #160]	; (8012438 <readCanToStructs+0x26b0>)
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	4413      	add	r3, r2
 801239a:	3304      	adds	r3, #4
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80123a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d110      	bne.n	80123cc <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80123aa:	2208      	movs	r2, #8
 80123ac:	2100      	movs	r1, #0
 80123ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b0:	f00f fe58 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80123b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b8:	4a1d      	ldr	r2, [pc, #116]	; (8012430 <readCanToStructs+0x26a8>)
 80123ba:	f240 4112 	movw	r1, #1042	; 0x412
 80123be:	fb01 f303 	mul.w	r3, r1, r3
 80123c2:	4413      	add	r3, r2
 80123c4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80123c8:	2200      	movs	r2, #0
 80123ca:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80123cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123d0:	4a17      	ldr	r2, [pc, #92]	; (8012430 <readCanToStructs+0x26a8>)
 80123d2:	f240 4112 	movw	r1, #1042	; 0x412
 80123d6:	fb01 f303 	mul.w	r3, r1, r3
 80123da:	4413      	add	r3, r2
 80123dc:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d014      	beq.n	8012414 <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80123ea:	4814      	ldr	r0, [pc, #80]	; (801243c <readCanToStructs+0x26b4>)
 80123ec:	f00f ffbe 	bl	802236c <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80123f0:	2208      	movs	r2, #8
 80123f2:	2100      	movs	r1, #0
 80123f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f6:	f00f fe35 	bl	8022064 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80123fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123fe:	4a0c      	ldr	r2, [pc, #48]	; (8012430 <readCanToStructs+0x26a8>)
 8012400:	f240 4112 	movw	r1, #1042	; 0x412
 8012404:	fb01 f303 	mul.w	r3, r1, r3
 8012408:	4413      	add	r3, r2
 801240a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801240e:	2200      	movs	r2, #0
 8012410:	701a      	strb	r2, [r3, #0]
					break;
 8012412:	e30c      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012414:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012418:	4613      	mov	r3, r2
 801241a:	00db      	lsls	r3, r3, #3
 801241c:	1a9b      	subs	r3, r3, r2
 801241e:	461a      	mov	r2, r3
 8012420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012422:	4413      	add	r3, r2
 8012424:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012426:	2301      	movs	r3, #1
 8012428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801242c:	e027      	b.n	801247e <readCanToStructs+0x26f6>
 801242e:	bf00      	nop
 8012430:	200052ec 	.word	0x200052ec
 8012434:	200026a8 	.word	0x200026a8
 8012438:	20005b10 	.word	0x20005b10
 801243c:	08026b24 	.word	0x08026b24
 8012440:	08026b4c 	.word	0x08026b4c
 8012444:	200026a0 	.word	0x200026a0
 8012448:	20002140 	.word	0x20002140
 801244c:	20002144 	.word	0x20002144
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012450:	4bc4      	ldr	r3, [pc, #784]	; (8012764 <readCanToStructs+0x29dc>)
 8012452:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012456:	885b      	ldrh	r3, [r3, #2]
 8012458:	461a      	mov	r2, r3
 801245a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801245e:	49c1      	ldr	r1, [pc, #772]	; (8012764 <readCanToStructs+0x29dc>)
 8012460:	0112      	lsls	r2, r2, #4
 8012462:	440a      	add	r2, r1
 8012464:	4413      	add	r3, r2
 8012466:	3304      	adds	r3, #4
 8012468:	781a      	ldrb	r2, [r3, #0]
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	3301      	adds	r3, #1
 8012472:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012478:	3301      	adds	r3, #1
 801247a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801247e:	4bb9      	ldr	r3, [pc, #740]	; (8012764 <readCanToStructs+0x29dc>)
 8012480:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012484:	885b      	ldrh	r3, [r3, #2]
 8012486:	4ab7      	ldr	r2, [pc, #732]	; (8012764 <readCanToStructs+0x29dc>)
 8012488:	011b      	lsls	r3, r3, #4
 801248a:	4413      	add	r3, r2
 801248c:	330c      	adds	r3, #12
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012494:	429a      	cmp	r2, r3
 8012496:	d3db      	bcc.n	8012450 <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801249c:	4ab2      	ldr	r2, [pc, #712]	; (8012768 <readCanToStructs+0x29e0>)
 801249e:	f240 4112 	movw	r1, #1042	; 0x412
 80124a2:	fb01 f303 	mul.w	r3, r1, r3
 80124a6:	4413      	add	r3, r2
 80124a8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	461a      	mov	r2, r3
 80124b0:	4613      	mov	r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	1a9a      	subs	r2, r3, r2
 80124b6:	4bab      	ldr	r3, [pc, #684]	; (8012764 <readCanToStructs+0x29dc>)
 80124b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124bc:	885b      	ldrh	r3, [r3, #2]
 80124be:	49a9      	ldr	r1, [pc, #676]	; (8012764 <readCanToStructs+0x29dc>)
 80124c0:	011b      	lsls	r3, r3, #4
 80124c2:	440b      	add	r3, r1
 80124c4:	330c      	adds	r3, #12
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	3b01      	subs	r3, #1
 80124ca:	4413      	add	r3, r2
 80124cc:	2b07      	cmp	r3, #7
 80124ce:	d91d      	bls.n	801250c <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 80124d0:	48a6      	ldr	r0, [pc, #664]	; (801276c <readCanToStructs+0x29e4>)
 80124d2:	f00f ff4b 	bl	802236c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80124d6:	4ba6      	ldr	r3, [pc, #664]	; (8012770 <readCanToStructs+0x29e8>)
 80124d8:	4aa6      	ldr	r2, [pc, #664]	; (8012774 <readCanToStructs+0x29ec>)
 80124da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124de:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 80124e2:	4ba5      	ldr	r3, [pc, #660]	; (8012778 <readCanToStructs+0x29f0>)
 80124e4:	2201      	movs	r2, #1
 80124e6:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80124e8:	f002 ffa2 	bl	8015430 <HAL_GetTick>
 80124ec:	4603      	mov	r3, r0
 80124ee:	4aa3      	ldr	r2, [pc, #652]	; (801277c <readCanToStructs+0x29f4>)
 80124f0:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80124f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124f6:	4a9c      	ldr	r2, [pc, #624]	; (8012768 <readCanToStructs+0x29e0>)
 80124f8:	f240 4112 	movw	r1, #1042	; 0x412
 80124fc:	fb01 f303 	mul.w	r3, r1, r3
 8012500:	4413      	add	r3, r2
 8012502:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012506:	2200      	movs	r2, #0
 8012508:	701a      	strb	r2, [r3, #0]
 801250a:	e290      	b.n	8012a2e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 801250c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012510:	4a95      	ldr	r2, [pc, #596]	; (8012768 <readCanToStructs+0x29e0>)
 8012512:	f240 4112 	movw	r1, #1042	; 0x412
 8012516:	fb01 f303 	mul.w	r3, r1, r3
 801251a:	4413      	add	r3, r2
 801251c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012520:	2201      	movs	r2, #1
 8012522:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012528:	498f      	ldr	r1, [pc, #572]	; (8012768 <readCanToStructs+0x29e0>)
 801252a:	f240 4212 	movw	r2, #1042	; 0x412
 801252e:	fb03 f202 	mul.w	r2, r3, r2
 8012532:	440a      	add	r2, r1
 8012534:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012538:	7812      	ldrb	r2, [r2, #0]
 801253a:	3201      	adds	r2, #1
 801253c:	b2d0      	uxtb	r0, r2
 801253e:	4a8a      	ldr	r2, [pc, #552]	; (8012768 <readCanToStructs+0x29e0>)
 8012540:	f240 4112 	movw	r1, #1042	; 0x412
 8012544:	fb01 f303 	mul.w	r3, r1, r3
 8012548:	4413      	add	r3, r2
 801254a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801254e:	4602      	mov	r2, r0
 8012550:	701a      	strb	r2, [r3, #0]
				break;
 8012552:	e26c      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8012554:	4b8a      	ldr	r3, [pc, #552]	; (8012780 <readCanToStructs+0x29f8>)
 8012556:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012558:	4b82      	ldr	r3, [pc, #520]	; (8012764 <readCanToStructs+0x29dc>)
 801255a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801255e:	885b      	ldrh	r3, [r3, #2]
 8012560:	4a80      	ldr	r2, [pc, #512]	; (8012764 <readCanToStructs+0x29dc>)
 8012562:	011b      	lsls	r3, r3, #4
 8012564:	4413      	add	r3, r2
 8012566:	3304      	adds	r3, #4
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801256e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012572:	2b00      	cmp	r3, #0
 8012574:	d110      	bne.n	8012598 <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012576:	2204      	movs	r2, #4
 8012578:	2100      	movs	r1, #0
 801257a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801257c:	f00f fd72 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012584:	4a78      	ldr	r2, [pc, #480]	; (8012768 <readCanToStructs+0x29e0>)
 8012586:	f240 4112 	movw	r1, #1042	; 0x412
 801258a:	fb01 f303 	mul.w	r3, r1, r3
 801258e:	4413      	add	r3, r2
 8012590:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012594:	2200      	movs	r2, #0
 8012596:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801259c:	4a72      	ldr	r2, [pc, #456]	; (8012768 <readCanToStructs+0x29e0>)
 801259e:	f240 4112 	movw	r1, #1042	; 0x412
 80125a2:	fb01 f303 	mul.w	r3, r1, r3
 80125a6:	4413      	add	r3, r2
 80125a8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d011      	beq.n	80125da <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80125b6:	2204      	movs	r2, #4
 80125b8:	2100      	movs	r1, #0
 80125ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125bc:	f00f fd52 	bl	8022064 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80125c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125c4:	4a68      	ldr	r2, [pc, #416]	; (8012768 <readCanToStructs+0x29e0>)
 80125c6:	f240 4112 	movw	r1, #1042	; 0x412
 80125ca:	fb01 f303 	mul.w	r3, r1, r3
 80125ce:	4413      	add	r3, r2
 80125d0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80125d4:	2200      	movs	r2, #0
 80125d6:	701a      	strb	r2, [r3, #0]
					break;
 80125d8:	e229      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80125da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125de:	4613      	mov	r3, r2
 80125e0:	00db      	lsls	r3, r3, #3
 80125e2:	1a9b      	subs	r3, r3, r2
 80125e4:	461a      	mov	r2, r3
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	4413      	add	r3, r2
 80125ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125ec:	2301      	movs	r3, #1
 80125ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125f2:	e016      	b.n	8012622 <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80125f4:	4b5b      	ldr	r3, [pc, #364]	; (8012764 <readCanToStructs+0x29dc>)
 80125f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125fa:	885b      	ldrh	r3, [r3, #2]
 80125fc:	461a      	mov	r2, r3
 80125fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012602:	4958      	ldr	r1, [pc, #352]	; (8012764 <readCanToStructs+0x29dc>)
 8012604:	0112      	lsls	r2, r2, #4
 8012606:	440a      	add	r2, r1
 8012608:	4413      	add	r3, r2
 801260a:	3304      	adds	r3, #4
 801260c:	781a      	ldrb	r2, [r3, #0]
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012614:	3301      	adds	r3, #1
 8012616:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801261c:	3301      	adds	r3, #1
 801261e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012622:	4b50      	ldr	r3, [pc, #320]	; (8012764 <readCanToStructs+0x29dc>)
 8012624:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012628:	885b      	ldrh	r3, [r3, #2]
 801262a:	4a4e      	ldr	r2, [pc, #312]	; (8012764 <readCanToStructs+0x29dc>)
 801262c:	011b      	lsls	r3, r3, #4
 801262e:	4413      	add	r3, r2
 8012630:	330c      	adds	r3, #12
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012638:	429a      	cmp	r2, r3
 801263a:	d3db      	bcc.n	80125f4 <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 801263c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012640:	4a49      	ldr	r2, [pc, #292]	; (8012768 <readCanToStructs+0x29e0>)
 8012642:	f240 4112 	movw	r1, #1042	; 0x412
 8012646:	fb01 f303 	mul.w	r3, r1, r3
 801264a:	4413      	add	r3, r2
 801264c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	461a      	mov	r2, r3
 8012654:	4613      	mov	r3, r2
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	1a9a      	subs	r2, r3, r2
 801265a:	4b42      	ldr	r3, [pc, #264]	; (8012764 <readCanToStructs+0x29dc>)
 801265c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012660:	885b      	ldrh	r3, [r3, #2]
 8012662:	4940      	ldr	r1, [pc, #256]	; (8012764 <readCanToStructs+0x29dc>)
 8012664:	011b      	lsls	r3, r3, #4
 8012666:	440b      	add	r3, r1
 8012668:	330c      	adds	r3, #12
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	3b01      	subs	r3, #1
 801266e:	4413      	add	r3, r2
 8012670:	2b03      	cmp	r3, #3
 8012672:	d90f      	bls.n	8012694 <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 8012674:	4843      	ldr	r0, [pc, #268]	; (8012784 <readCanToStructs+0x29fc>)
 8012676:	f00f fe79 	bl	802236c <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801267a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801267e:	4a3a      	ldr	r2, [pc, #232]	; (8012768 <readCanToStructs+0x29e0>)
 8012680:	f240 4112 	movw	r1, #1042	; 0x412
 8012684:	fb01 f303 	mul.w	r3, r1, r3
 8012688:	4413      	add	r3, r2
 801268a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801268e:	2200      	movs	r2, #0
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	e1cc      	b.n	8012a2e <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012698:	4a33      	ldr	r2, [pc, #204]	; (8012768 <readCanToStructs+0x29e0>)
 801269a:	f240 4112 	movw	r1, #1042	; 0x412
 801269e:	fb01 f303 	mul.w	r3, r1, r3
 80126a2:	4413      	add	r3, r2
 80126a4:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80126a8:	2201      	movs	r2, #1
 80126aa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80126ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126b0:	492d      	ldr	r1, [pc, #180]	; (8012768 <readCanToStructs+0x29e0>)
 80126b2:	f240 4212 	movw	r2, #1042	; 0x412
 80126b6:	fb03 f202 	mul.w	r2, r3, r2
 80126ba:	440a      	add	r2, r1
 80126bc:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80126c0:	7812      	ldrb	r2, [r2, #0]
 80126c2:	3201      	adds	r2, #1
 80126c4:	b2d0      	uxtb	r0, r2
 80126c6:	4a28      	ldr	r2, [pc, #160]	; (8012768 <readCanToStructs+0x29e0>)
 80126c8:	f240 4112 	movw	r1, #1042	; 0x412
 80126cc:	fb01 f303 	mul.w	r3, r1, r3
 80126d0:	4413      	add	r3, r2
 80126d2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80126d6:	4602      	mov	r2, r0
 80126d8:	701a      	strb	r2, [r3, #0]
				break;
 80126da:	e1a8      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 80126dc:	4b2a      	ldr	r3, [pc, #168]	; (8012788 <readCanToStructs+0x2a00>)
 80126de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80126e0:	4b20      	ldr	r3, [pc, #128]	; (8012764 <readCanToStructs+0x29dc>)
 80126e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126e6:	885b      	ldrh	r3, [r3, #2]
 80126e8:	4a1e      	ldr	r2, [pc, #120]	; (8012764 <readCanToStructs+0x29dc>)
 80126ea:	011b      	lsls	r3, r3, #4
 80126ec:	4413      	add	r3, r2
 80126ee:	3304      	adds	r3, #4
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80126f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d110      	bne.n	8012720 <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80126fe:	2284      	movs	r2, #132	; 0x84
 8012700:	2100      	movs	r1, #0
 8012702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012704:	f00f fcae 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801270c:	4a16      	ldr	r2, [pc, #88]	; (8012768 <readCanToStructs+0x29e0>)
 801270e:	f240 4112 	movw	r1, #1042	; 0x412
 8012712:	fb01 f303 	mul.w	r3, r1, r3
 8012716:	4413      	add	r3, r2
 8012718:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801271c:	2200      	movs	r2, #0
 801271e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012724:	4a10      	ldr	r2, [pc, #64]	; (8012768 <readCanToStructs+0x29e0>)
 8012726:	f240 4112 	movw	r1, #1042	; 0x412
 801272a:	fb01 f303 	mul.w	r3, r1, r3
 801272e:	4413      	add	r3, r2
 8012730:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801273a:	429a      	cmp	r2, r3
 801273c:	d026      	beq.n	801278c <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801273e:	2284      	movs	r2, #132	; 0x84
 8012740:	2100      	movs	r1, #0
 8012742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012744:	f00f fc8e 	bl	8022064 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801274c:	4a06      	ldr	r2, [pc, #24]	; (8012768 <readCanToStructs+0x29e0>)
 801274e:	f240 4112 	movw	r1, #1042	; 0x412
 8012752:	fb01 f303 	mul.w	r3, r1, r3
 8012756:	4413      	add	r3, r2
 8012758:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801275c:	2200      	movs	r2, #0
 801275e:	701a      	strb	r2, [r3, #0]
					break;
 8012760:	e165      	b.n	8012a2e <readCanToStructs+0x2ca6>
 8012762:	bf00      	nop
 8012764:	20005b10 	.word	0x20005b10
 8012768:	200052ec 	.word	0x200052ec
 801276c:	08026b5c 	.word	0x08026b5c
 8012770:	200026a0 	.word	0x200026a0
 8012774:	200026a8 	.word	0x200026a8
 8012778:	20002140 	.word	0x20002140
 801277c:	20002144 	.word	0x20002144
 8012780:	20002694 	.word	0x20002694
 8012784:	08026b6c 	.word	0x08026b6c
 8012788:	20002734 	.word	0x20002734
				uc_pp_charPtr += (7 * uc_seqNo);
 801278c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012790:	4613      	mov	r3, r2
 8012792:	00db      	lsls	r3, r3, #3
 8012794:	1a9b      	subs	r3, r3, r2
 8012796:	461a      	mov	r2, r3
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	4413      	add	r3, r2
 801279c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801279e:	2301      	movs	r3, #1
 80127a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127a4:	e016      	b.n	80127d4 <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80127a6:	4ba8      	ldr	r3, [pc, #672]	; (8012a48 <readCanToStructs+0x2cc0>)
 80127a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127ac:	885b      	ldrh	r3, [r3, #2]
 80127ae:	461a      	mov	r2, r3
 80127b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127b4:	49a4      	ldr	r1, [pc, #656]	; (8012a48 <readCanToStructs+0x2cc0>)
 80127b6:	0112      	lsls	r2, r2, #4
 80127b8:	440a      	add	r2, r1
 80127ba:	4413      	add	r3, r2
 80127bc:	3304      	adds	r3, #4
 80127be:	781a      	ldrb	r2, [r3, #0]
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80127c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c6:	3301      	adds	r3, #1
 80127c8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127ce:	3301      	adds	r3, #1
 80127d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127d4:	4b9c      	ldr	r3, [pc, #624]	; (8012a48 <readCanToStructs+0x2cc0>)
 80127d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127da:	885b      	ldrh	r3, [r3, #2]
 80127dc:	4a9a      	ldr	r2, [pc, #616]	; (8012a48 <readCanToStructs+0x2cc0>)
 80127de:	011b      	lsls	r3, r3, #4
 80127e0:	4413      	add	r3, r2
 80127e2:	330c      	adds	r3, #12
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d3db      	bcc.n	80127a6 <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 80127ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127f2:	4a96      	ldr	r2, [pc, #600]	; (8012a4c <readCanToStructs+0x2cc4>)
 80127f4:	f240 4112 	movw	r1, #1042	; 0x412
 80127f8:	fb01 f303 	mul.w	r3, r1, r3
 80127fc:	4413      	add	r3, r2
 80127fe:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	461a      	mov	r2, r3
 8012806:	4613      	mov	r3, r2
 8012808:	00db      	lsls	r3, r3, #3
 801280a:	1a9a      	subs	r2, r3, r2
 801280c:	4b8e      	ldr	r3, [pc, #568]	; (8012a48 <readCanToStructs+0x2cc0>)
 801280e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012812:	885b      	ldrh	r3, [r3, #2]
 8012814:	498c      	ldr	r1, [pc, #560]	; (8012a48 <readCanToStructs+0x2cc0>)
 8012816:	011b      	lsls	r3, r3, #4
 8012818:	440b      	add	r3, r1
 801281a:	330c      	adds	r3, #12
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	3b01      	subs	r3, #1
 8012820:	4413      	add	r3, r2
 8012822:	2b83      	cmp	r3, #131	; 0x83
 8012824:	d915      	bls.n	8012852 <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8012826:	488a      	ldr	r0, [pc, #552]	; (8012a50 <readCanToStructs+0x2cc8>)
 8012828:	f00f fda0 	bl	802236c <puts>
					Received_CAN_Relay_Status = YES;
 801282c:	4b89      	ldr	r3, [pc, #548]	; (8012a54 <readCanToStructs+0x2ccc>)
 801282e:	2201      	movs	r2, #1
 8012830:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 8012832:	4b89      	ldr	r3, [pc, #548]	; (8012a58 <readCanToStructs+0x2cd0>)
 8012834:	2201      	movs	r2, #1
 8012836:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801283c:	4a83      	ldr	r2, [pc, #524]	; (8012a4c <readCanToStructs+0x2cc4>)
 801283e:	f240 4112 	movw	r1, #1042	; 0x412
 8012842:	fb01 f303 	mul.w	r3, r1, r3
 8012846:	4413      	add	r3, r2
 8012848:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801284c:	2200      	movs	r2, #0
 801284e:	701a      	strb	r2, [r3, #0]
 8012850:	e0ed      	b.n	8012a2e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012856:	4a7d      	ldr	r2, [pc, #500]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012858:	f240 4112 	movw	r1, #1042	; 0x412
 801285c:	fb01 f303 	mul.w	r3, r1, r3
 8012860:	4413      	add	r3, r2
 8012862:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012866:	2201      	movs	r2, #1
 8012868:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801286a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801286e:	4977      	ldr	r1, [pc, #476]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012870:	f240 4212 	movw	r2, #1042	; 0x412
 8012874:	fb03 f202 	mul.w	r2, r3, r2
 8012878:	440a      	add	r2, r1
 801287a:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801287e:	7812      	ldrb	r2, [r2, #0]
 8012880:	3201      	adds	r2, #1
 8012882:	b2d0      	uxtb	r0, r2
 8012884:	4a71      	ldr	r2, [pc, #452]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012886:	f240 4112 	movw	r1, #1042	; 0x412
 801288a:	fb01 f303 	mul.w	r3, r1, r3
 801288e:	4413      	add	r3, r2
 8012890:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012894:	4602      	mov	r2, r0
 8012896:	701a      	strb	r2, [r3, #0]
				break;
 8012898:	e0c9      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 801289a:	4b70      	ldr	r3, [pc, #448]	; (8012a5c <readCanToStructs+0x2cd4>)
 801289c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801289e:	4b6a      	ldr	r3, [pc, #424]	; (8012a48 <readCanToStructs+0x2cc0>)
 80128a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128a4:	885b      	ldrh	r3, [r3, #2]
 80128a6:	4a68      	ldr	r2, [pc, #416]	; (8012a48 <readCanToStructs+0x2cc0>)
 80128a8:	011b      	lsls	r3, r3, #4
 80128aa:	4413      	add	r3, r2
 80128ac:	3304      	adds	r3, #4
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80128b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d110      	bne.n	80128de <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80128bc:	2284      	movs	r2, #132	; 0x84
 80128be:	2100      	movs	r1, #0
 80128c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128c2:	f00f fbcf 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80128c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ca:	4a60      	ldr	r2, [pc, #384]	; (8012a4c <readCanToStructs+0x2cc4>)
 80128cc:	f240 4112 	movw	r1, #1042	; 0x412
 80128d0:	fb01 f303 	mul.w	r3, r1, r3
 80128d4:	4413      	add	r3, r2
 80128d6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80128da:	2200      	movs	r2, #0
 80128dc:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80128de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128e2:	4a5a      	ldr	r2, [pc, #360]	; (8012a4c <readCanToStructs+0x2cc4>)
 80128e4:	f240 4112 	movw	r1, #1042	; 0x412
 80128e8:	fb01 f303 	mul.w	r3, r1, r3
 80128ec:	4413      	add	r3, r2
 80128ee:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d011      	beq.n	8012920 <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80128fc:	2284      	movs	r2, #132	; 0x84
 80128fe:	2100      	movs	r1, #0
 8012900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012902:	f00f fbaf 	bl	8022064 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801290a:	4a50      	ldr	r2, [pc, #320]	; (8012a4c <readCanToStructs+0x2cc4>)
 801290c:	f240 4112 	movw	r1, #1042	; 0x412
 8012910:	fb01 f303 	mul.w	r3, r1, r3
 8012914:	4413      	add	r3, r2
 8012916:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801291a:	2200      	movs	r2, #0
 801291c:	701a      	strb	r2, [r3, #0]
					break;
 801291e:	e086      	b.n	8012a2e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012920:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012924:	4613      	mov	r3, r2
 8012926:	00db      	lsls	r3, r3, #3
 8012928:	1a9b      	subs	r3, r3, r2
 801292a:	461a      	mov	r2, r3
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	4413      	add	r3, r2
 8012930:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012932:	2301      	movs	r3, #1
 8012934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012938:	e016      	b.n	8012968 <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801293a:	4b43      	ldr	r3, [pc, #268]	; (8012a48 <readCanToStructs+0x2cc0>)
 801293c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012940:	885b      	ldrh	r3, [r3, #2]
 8012942:	461a      	mov	r2, r3
 8012944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012948:	493f      	ldr	r1, [pc, #252]	; (8012a48 <readCanToStructs+0x2cc0>)
 801294a:	0112      	lsls	r2, r2, #4
 801294c:	440a      	add	r2, r1
 801294e:	4413      	add	r3, r2
 8012950:	3304      	adds	r3, #4
 8012952:	781a      	ldrb	r2, [r3, #0]
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295a:	3301      	adds	r3, #1
 801295c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801295e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012962:	3301      	adds	r3, #1
 8012964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012968:	4b37      	ldr	r3, [pc, #220]	; (8012a48 <readCanToStructs+0x2cc0>)
 801296a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801296e:	885b      	ldrh	r3, [r3, #2]
 8012970:	4a35      	ldr	r2, [pc, #212]	; (8012a48 <readCanToStructs+0x2cc0>)
 8012972:	011b      	lsls	r3, r3, #4
 8012974:	4413      	add	r3, r2
 8012976:	330c      	adds	r3, #12
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801297e:	429a      	cmp	r2, r3
 8012980:	d3db      	bcc.n	801293a <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012986:	4a31      	ldr	r2, [pc, #196]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012988:	f240 4112 	movw	r1, #1042	; 0x412
 801298c:	fb01 f303 	mul.w	r3, r1, r3
 8012990:	4413      	add	r3, r2
 8012992:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	461a      	mov	r2, r3
 801299a:	4613      	mov	r3, r2
 801299c:	00db      	lsls	r3, r3, #3
 801299e:	1a9a      	subs	r2, r3, r2
 80129a0:	4b29      	ldr	r3, [pc, #164]	; (8012a48 <readCanToStructs+0x2cc0>)
 80129a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129a6:	885b      	ldrh	r3, [r3, #2]
 80129a8:	4927      	ldr	r1, [pc, #156]	; (8012a48 <readCanToStructs+0x2cc0>)
 80129aa:	011b      	lsls	r3, r3, #4
 80129ac:	440b      	add	r3, r1
 80129ae:	330c      	adds	r3, #12
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	3b01      	subs	r3, #1
 80129b4:	4413      	add	r3, r2
 80129b6:	2b83      	cmp	r3, #131	; 0x83
 80129b8:	d915      	bls.n	80129e6 <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 80129ba:	4829      	ldr	r0, [pc, #164]	; (8012a60 <readCanToStructs+0x2cd8>)
 80129bc:	f00f fcd6 	bl	802236c <puts>
					Medha_CAN_Xchanging_Happening = YES;
 80129c0:	4b25      	ldr	r3, [pc, #148]	; (8012a58 <readCanToStructs+0x2cd0>)
 80129c2:	2201      	movs	r2, #1
 80129c4:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 80129c6:	4b23      	ldr	r3, [pc, #140]	; (8012a54 <readCanToStructs+0x2ccc>)
 80129c8:	2201      	movs	r2, #1
 80129ca:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80129cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129d0:	4a1e      	ldr	r2, [pc, #120]	; (8012a4c <readCanToStructs+0x2cc4>)
 80129d2:	f240 4112 	movw	r1, #1042	; 0x412
 80129d6:	fb01 f303 	mul.w	r3, r1, r3
 80129da:	4413      	add	r3, r2
 80129dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80129e0:	2200      	movs	r2, #0
 80129e2:	701a      	strb	r2, [r3, #0]
 80129e4:	e022      	b.n	8012a2c <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80129e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ea:	4a18      	ldr	r2, [pc, #96]	; (8012a4c <readCanToStructs+0x2cc4>)
 80129ec:	f240 4112 	movw	r1, #1042	; 0x412
 80129f0:	fb01 f303 	mul.w	r3, r1, r3
 80129f4:	4413      	add	r3, r2
 80129f6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80129fa:	2201      	movs	r2, #1
 80129fc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80129fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a02:	4912      	ldr	r1, [pc, #72]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012a04:	f240 4212 	movw	r2, #1042	; 0x412
 8012a08:	fb03 f202 	mul.w	r2, r3, r2
 8012a0c:	440a      	add	r2, r1
 8012a0e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012a12:	7812      	ldrb	r2, [r2, #0]
 8012a14:	3201      	adds	r2, #1
 8012a16:	b2d0      	uxtb	r0, r2
 8012a18:	4a0c      	ldr	r2, [pc, #48]	; (8012a4c <readCanToStructs+0x2cc4>)
 8012a1a:	f240 4112 	movw	r1, #1042	; 0x412
 8012a1e:	fb01 f303 	mul.w	r3, r1, r3
 8012a22:	4413      	add	r3, r2
 8012a24:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012a28:	4602      	mov	r2, r0
 8012a2a:	701a      	strb	r2, [r3, #0]
				break;
 8012a2c:	bf00      	nop
		while(canDataReady())
 8012a2e:	f7fd f955 	bl	800fcdc <canDataReady>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f47f a9be 	bne.w	8011db6 <readCanToStructs+0x202e>
	break;
 8012a3a:	e002      	b.n	8012a42 <readCanToStructs+0x2cba>
		break;
 8012a3c:	bf00      	nop
 8012a3e:	e000      	b.n	8012a42 <readCanToStructs+0x2cba>
			return;
 8012a40:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8012a42:	3738      	adds	r7, #56	; 0x38
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	20005b10 	.word	0x20005b10
 8012a4c:	200052ec 	.word	0x200052ec
 8012a50:	08026b8c 	.word	0x08026b8c
 8012a54:	20002141 	.word	0x20002141
 8012a58:	20002140 	.word	0x20002140
 8012a5c:	20002734 	.word	0x20002734
 8012a60:	08026ba8 	.word	0x08026ba8

08012a64 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8012a70:	2300      	movs	r3, #0
 8012a72:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8012a74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	6879      	ldr	r1, [r7, #4]
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	f000 f845 	bl	8012b0c <GetCRC16>
 8012a82:	4603      	mov	r3, r0
 8012a84:	461a      	mov	r2, r3
 8012a86:	4b1d      	ldr	r3, [pc, #116]	; (8012afc <CheckCRC+0x98>)
 8012a88:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8012a8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a8e:	687a      	ldr	r2, [r7, #4]
 8012a90:	4413      	add	r3, r2
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	4b1a      	ldr	r3, [pc, #104]	; (8012b00 <CheckCRC+0x9c>)
 8012a98:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012a9a:	4b19      	ldr	r3, [pc, #100]	; (8012b00 <CheckCRC+0x9c>)
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	021b      	lsls	r3, r3, #8
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	4b17      	ldr	r3, [pc, #92]	; (8012b00 <CheckCRC+0x9c>)
 8012aa4:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8012aa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	4413      	add	r3, r2
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	4b12      	ldr	r3, [pc, #72]	; (8012b00 <CheckCRC+0x9c>)
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	4b10      	ldr	r3, [pc, #64]	; (8012b00 <CheckCRC+0x9c>)
 8012abe:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8012ac0:	4b0f      	ldr	r3, [pc, #60]	; (8012b00 <CheckCRC+0x9c>)
 8012ac2:	881a      	ldrh	r2, [r3, #0]
 8012ac4:	4b0d      	ldr	r3, [pc, #52]	; (8012afc <CheckCRC+0x98>)
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d105      	bne.n	8012ad8 <CheckCRC+0x74>
	{
		retVal = 1;
 8012acc:	2301      	movs	r3, #1
 8012ace:	81fb      	strh	r3, [r7, #14]
		return k;
 8012ad0:	4b0b      	ldr	r3, [pc, #44]	; (8012b00 <CheckCRC+0x9c>)
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	b21b      	sxth	r3, r3
 8012ad6:	e00d      	b.n	8012af4 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8012ad8:	4b08      	ldr	r3, [pc, #32]	; (8012afc <CheckCRC+0x98>)
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	4619      	mov	r1, r3
 8012ade:	4809      	ldr	r0, [pc, #36]	; (8012b04 <CheckCRC+0xa0>)
 8012ae0:	f00f fba8 	bl	8022234 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8012ae4:	4b06      	ldr	r3, [pc, #24]	; (8012b00 <CheckCRC+0x9c>)
 8012ae6:	881b      	ldrh	r3, [r3, #0]
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4807      	ldr	r0, [pc, #28]	; (8012b08 <CheckCRC+0xa4>)
 8012aec:	f00f fba2 	bl	8022234 <iprintf>
	return retVal;
 8012af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	20009c2c 	.word	0x20009c2c
 8012b00:	20009c2e 	.word	0x20009c2e
 8012b04:	08026bbc 	.word	0x08026bbc
 8012b08:	08026bd4 	.word	0x08026bd4

08012b0c <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	4603      	mov	r3, r0
 8012b14:	6039      	str	r1, [r7, #0]
 8012b16:	80fb      	strh	r3, [r7, #6]
 8012b18:	4613      	mov	r3, r2
 8012b1a:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8012b1c:	88fb      	ldrh	r3, [r7, #6]
 8012b1e:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8012b20:	e038      	b.n	8012b94 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012b22:	89fb      	ldrh	r3, [r7, #14]
 8012b24:	f003 030f 	and.w	r3, r3, #15
 8012b28:	4a22      	ldr	r2, [pc, #136]	; (8012bb4 <GetCRC16+0xa8>)
 8012b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b2e:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	091b      	lsrs	r3, r3, #4
 8012b34:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8012b36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012b3a:	89bb      	ldrh	r3, [r7, #12]
 8012b3c:	4053      	eors	r3, r2
 8012b3e:	b21a      	sxth	r2, r3
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 030f 	and.w	r3, r3, #15
 8012b48:	491a      	ldr	r1, [pc, #104]	; (8012bb4 <GetCRC16+0xa8>)
 8012b4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012b4e:	b21b      	sxth	r3, r3
 8012b50:	4053      	eors	r3, r2
 8012b52:	b21b      	sxth	r3, r3
 8012b54:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012b56:	89fb      	ldrh	r3, [r7, #14]
 8012b58:	f003 030f 	and.w	r3, r3, #15
 8012b5c:	4a15      	ldr	r2, [pc, #84]	; (8012bb4 <GetCRC16+0xa8>)
 8012b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b62:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012b64:	89fb      	ldrh	r3, [r7, #14]
 8012b66:	091b      	lsrs	r3, r3, #4
 8012b68:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8012b6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012b6e:	89bb      	ldrh	r3, [r7, #12]
 8012b70:	4053      	eors	r3, r2
 8012b72:	b21a      	sxth	r2, r3
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	091b      	lsrs	r3, r3, #4
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	f003 030f 	and.w	r3, r3, #15
 8012b80:	490c      	ldr	r1, [pc, #48]	; (8012bb4 <GetCRC16+0xa8>)
 8012b82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012b86:	b21b      	sxth	r3, r3
 8012b88:	4053      	eors	r3, r2
 8012b8a:	b21b      	sxth	r3, r3
 8012b8c:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	3301      	adds	r3, #1
 8012b92:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8012b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	3a01      	subs	r2, #1
 8012b9c:	b292      	uxth	r2, r2
 8012b9e:	80ba      	strh	r2, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	dcbe      	bgt.n	8012b22 <GetCRC16+0x16>
	}
	return(uiCrc);
 8012ba4:	89fb      	ldrh	r3, [r7, #14]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	08028a84 	.word	0x08028a84

08012bb8 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8012bc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	6879      	ldr	r1, [r7, #4]
 8012bcc:	2000      	movs	r0, #0
 8012bce:	f7ff ff9d 	bl	8012b0c <GetCRC16>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	4b11      	ldr	r3, [pc, #68]	; (8012c1c <ComputeCRC+0x64>)
 8012bd8:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8012bda:	4b10      	ldr	r3, [pc, #64]	; (8012c1c <ComputeCRC+0x64>)
 8012bdc:	881a      	ldrh	r2, [r3, #0]
 8012bde:	4b10      	ldr	r3, [pc, #64]	; (8012c20 <ComputeCRC+0x68>)
 8012be0:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8012be2:	4b0e      	ldr	r3, [pc, #56]	; (8012c1c <ComputeCRC+0x64>)
 8012be4:	8819      	ldrh	r1, [r3, #0]
 8012be6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bea:	3301      	adds	r3, #1
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	4413      	add	r3, r2
 8012bf0:	b2ca      	uxtb	r2, r1
 8012bf2:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8012bf4:	4b09      	ldr	r3, [pc, #36]	; (8012c1c <ComputeCRC+0x64>)
 8012bf6:	881b      	ldrh	r3, [r3, #0]
 8012bf8:	0a1b      	lsrs	r3, r3, #8
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	4b07      	ldr	r3, [pc, #28]	; (8012c1c <ComputeCRC+0x64>)
 8012bfe:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8012c00:	4b06      	ldr	r3, [pc, #24]	; (8012c1c <ComputeCRC+0x64>)
 8012c02:	8819      	ldrh	r1, [r3, #0]
 8012c04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	4413      	add	r3, r2
 8012c0c:	b2ca      	uxtb	r2, r1
 8012c0e:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8012c10:	4b03      	ldr	r3, [pc, #12]	; (8012c20 <ComputeCRC+0x68>)
 8012c12:	881b      	ldrh	r3, [r3, #0]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20009c30 	.word	0x20009c30
 8012c20:	20009c32 	.word	0x20009c32

08012c24 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b087      	sub	sp, #28
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8012c30:	2300      	movs	r3, #0
 8012c32:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	005b      	lsls	r3, r3, #1
 8012c3c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8012c3e:	2300      	movs	r3, #0
 8012c40:	60fb      	str	r3, [r7, #12]
 8012c42:	e012      	b.n	8012c6a <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	f003 0301 	and.w	r3, r3, #1
 8012c4a:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f1c3 031f 	rsb	r3, r3, #31
 8012c52:	68ba      	ldr	r2, [r7, #8]
 8012c54:	fa02 f303 	lsl.w	r3, r2, r3
 8012c58:	697a      	ldr	r2, [r7, #20]
 8012c5a:	4313      	orrs	r3, r2
 8012c5c:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	085b      	lsrs	r3, r3, #1
 8012c62:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	3301      	adds	r3, #1
 8012c68:	60fb      	str	r3, [r7, #12]
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2b1f      	cmp	r3, #31
 8012c6e:	dde9      	ble.n	8012c44 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8012c70:	697b      	ldr	r3, [r7, #20]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	371c      	adds	r7, #28
 8012c76:	46bd      	mov	sp, r7
 8012c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7c:	4770      	bx	lr
	...

08012c80 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b088      	sub	sp, #32
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8012c94:	2300      	movs	r3, #0
 8012c96:	613b      	str	r3, [r7, #16]
	int i=0;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8012c9c:	4b26      	ldr	r3, [pc, #152]	; (8012d38 <CalculateDirectReverseCrc+0xb8>)
 8012c9e:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f7ff ffbf 	bl	8012c24 <ReverseCRCPolynomial>
 8012ca6:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8012ca8:	2300      	movs	r3, #0
 8012caa:	61bb      	str	r3, [r7, #24]
 8012cac:	e00d      	b.n	8012cca <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8012cae:	69f8      	ldr	r0, [r7, #28]
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	697a      	ldr	r2, [r7, #20]
 8012cba:	4619      	mov	r1, r3
 8012cbc:	f000 f844 	bl	8012d48 <AnsoldoCrc>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	61bb      	str	r3, [r7, #24]
 8012cca:	887b      	ldrh	r3, [r7, #2]
 8012ccc:	69ba      	ldr	r2, [r7, #24]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	dbed      	blt.n	8012cae <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	061b      	lsls	r3, r3, #24
 8012cd6:	693a      	ldr	r2, [r7, #16]
 8012cd8:	4313      	orrs	r3, r2
 8012cda:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	021b      	lsls	r3, r3, #8
 8012ce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012ce4:	693a      	ldr	r2, [r7, #16]
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	121b      	asrs	r3, r3, #8
 8012cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012cf2:	693a      	ldr	r2, [r7, #16]
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	0e1a      	lsrs	r2, r3, #24
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	4313      	orrs	r3, r2
 8012d00:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8012d02:	4b0e      	ldr	r3, [pc, #56]	; (8012d3c <CalculateDirectReverseCrc+0xbc>)
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d110      	bne.n	8012d2c <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8012d0a:	480d      	ldr	r0, [pc, #52]	; (8012d40 <CalculateDirectReverseCrc+0xc0>)
 8012d0c:	f006 ff4e 	bl	8019bac <HAL_RNG_GetRandomNumber>
 8012d10:	4601      	mov	r1, r0
 8012d12:	4b0c      	ldr	r3, [pc, #48]	; (8012d44 <CalculateDirectReverseCrc+0xc4>)
 8012d14:	fba3 2301 	umull	r2, r3, r3, r1
 8012d18:	08da      	lsrs	r2, r3, #3
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	4413      	add	r3, r2
 8012d20:	005b      	lsls	r3, r3, #1
 8012d22:	1aca      	subs	r2, r1, r3
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	4413      	add	r3, r2
 8012d28:	3301      	adds	r3, #1
 8012d2a:	e000      	b.n	8012d2e <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8012d2c:	693b      	ldr	r3, [r7, #16]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3720      	adds	r7, #32
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	d20d8a81 	.word	0xd20d8a81
 8012d3c:	20000e39 	.word	0x20000e39
 8012d40:	20009cf4 	.word	0x20009cf4
 8012d44:	cccccccd 	.word	0xcccccccd

08012d48 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b08b      	sub	sp, #44	; 0x2c
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	460b      	mov	r3, r1
 8012d52:	607a      	str	r2, [r7, #4]
 8012d54:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8012d56:	7afb      	ldrb	r3, [r7, #11]
 8012d58:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d60:	e01d      	b.n	8012d9e <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8012d6a:	6a3b      	ldr	r3, [r7, #32]
 8012d6c:	f003 0301 	and.w	r3, r3, #1
 8012d70:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	085b      	lsrs	r3, r3, #1
 8012d76:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8012d78:	69fa      	ldr	r2, [r7, #28]
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	4053      	eors	r3, r2
 8012d7e:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	d103      	bne.n	8012d8e <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4053      	eors	r3, r2
 8012d8c:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8012d8e:	6a3b      	ldr	r3, [r7, #32]
 8012d90:	085b      	lsrs	r3, r3, #1
 8012d92:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8012d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d98:	3301      	adds	r3, #1
 8012d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012da2:	2b08      	cmp	r3, #8
 8012da4:	d9dd      	bls.n	8012d62 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8012da6:	68fb      	ldr	r3, [r7, #12]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	372c      	adds	r7, #44	; 0x2c
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b090      	sub	sp, #64	; 0x40
 8012db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	601a      	str	r2, [r3, #0]
 8012dc2:	605a      	str	r2, [r3, #4]
 8012dc4:	609a      	str	r2, [r3, #8]
 8012dc6:	60da      	str	r2, [r3, #12]
 8012dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012dca:	4bb2      	ldr	r3, [pc, #712]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dce:	4ab1      	ldr	r2, [pc, #708]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8012dd6:	4baf      	ldr	r3, [pc, #700]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8012de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012de2:	4bac      	ldr	r3, [pc, #688]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de6:	4aab      	ldr	r2, [pc, #684]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012de8:	f043 0320 	orr.w	r3, r3, #32
 8012dec:	6313      	str	r3, [r2, #48]	; 0x30
 8012dee:	4ba9      	ldr	r3, [pc, #676]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df2:	f003 0320 	and.w	r3, r3, #32
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012dfa:	4ba6      	ldr	r3, [pc, #664]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dfe:	4aa5      	ldr	r2, [pc, #660]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e04:	6313      	str	r3, [r2, #48]	; 0x30
 8012e06:	4ba3      	ldr	r3, [pc, #652]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e0e:	623b      	str	r3, [r7, #32]
 8012e10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e12:	4ba0      	ldr	r3, [pc, #640]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e16:	4a9f      	ldr	r2, [pc, #636]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e18:	f043 0304 	orr.w	r3, r3, #4
 8012e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e1e:	4b9d      	ldr	r3, [pc, #628]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e22:	f003 0304 	and.w	r3, r3, #4
 8012e26:	61fb      	str	r3, [r7, #28]
 8012e28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e2a:	4b9a      	ldr	r3, [pc, #616]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e2e:	4a99      	ldr	r2, [pc, #612]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e30:	f043 0301 	orr.w	r3, r3, #1
 8012e34:	6313      	str	r3, [r2, #48]	; 0x30
 8012e36:	4b97      	ldr	r3, [pc, #604]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e3a:	f003 0301 	and.w	r3, r3, #1
 8012e3e:	61bb      	str	r3, [r7, #24]
 8012e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012e42:	4b94      	ldr	r3, [pc, #592]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e46:	4a93      	ldr	r2, [pc, #588]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e4e:	4b91      	ldr	r3, [pc, #580]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e56:	617b      	str	r3, [r7, #20]
 8012e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012e5a:	4b8e      	ldr	r3, [pc, #568]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e5e:	4a8d      	ldr	r2, [pc, #564]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e60:	f043 0310 	orr.w	r3, r3, #16
 8012e64:	6313      	str	r3, [r2, #48]	; 0x30
 8012e66:	4b8b      	ldr	r3, [pc, #556]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e6a:	f003 0310 	and.w	r3, r3, #16
 8012e6e:	613b      	str	r3, [r7, #16]
 8012e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012e72:	4b88      	ldr	r3, [pc, #544]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e76:	4a87      	ldr	r2, [pc, #540]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e78:	f043 0302 	orr.w	r3, r3, #2
 8012e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e7e:	4b85      	ldr	r3, [pc, #532]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e82:	f003 0302 	and.w	r3, r3, #2
 8012e86:	60fb      	str	r3, [r7, #12]
 8012e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012e8a:	4b82      	ldr	r3, [pc, #520]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8e:	4a81      	ldr	r2, [pc, #516]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e90:	f043 0308 	orr.w	r3, r3, #8
 8012e94:	6313      	str	r3, [r2, #48]	; 0x30
 8012e96:	4b7f      	ldr	r3, [pc, #508]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e9a:	f003 0308 	and.w	r3, r3, #8
 8012e9e:	60bb      	str	r3, [r7, #8]
 8012ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012ea2:	4b7c      	ldr	r3, [pc, #496]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ea6:	4a7b      	ldr	r2, [pc, #492]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012eac:	6313      	str	r3, [r2, #48]	; 0x30
 8012eae:	4b79      	ldr	r3, [pc, #484]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012eb6:	607b      	str	r3, [r7, #4]
 8012eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012eba:	4b76      	ldr	r3, [pc, #472]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ebe:	4a75      	ldr	r2, [pc, #468]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ec6:	4b73      	ldr	r3, [pc, #460]	; (8013094 <MX_GPIO_Init+0x2e0>)
 8012ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012ece:	603b      	str	r3, [r7, #0]
 8012ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8012ed8:	486f      	ldr	r0, [pc, #444]	; (8013098 <MX_GPIO_Init+0x2e4>)
 8012eda:	f004 fe85 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8012ee4:	486d      	ldr	r0, [pc, #436]	; (801309c <MX_GPIO_Init+0x2e8>)
 8012ee6:	f004 fe7f 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8012eea:	2200      	movs	r2, #0
 8012eec:	f240 7104 	movw	r1, #1796	; 0x704
 8012ef0:	486b      	ldr	r0, [pc, #428]	; (80130a0 <MX_GPIO_Init+0x2ec>)
 8012ef2:	f004 fe79 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012efc:	4869      	ldr	r0, [pc, #420]	; (80130a4 <MX_GPIO_Init+0x2f0>)
 8012efe:	f004 fe73 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8012f02:	2200      	movs	r2, #0
 8012f04:	f241 0104 	movw	r1, #4100	; 0x1004
 8012f08:	4867      	ldr	r0, [pc, #412]	; (80130a8 <MX_GPIO_Init+0x2f4>)
 8012f0a:	f004 fe6d 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8012f0e:	2201      	movs	r2, #1
 8012f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012f14:	4865      	ldr	r0, [pc, #404]	; (80130ac <MX_GPIO_Init+0x2f8>)
 8012f16:	f004 fe67 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	2108      	movs	r1, #8
 8012f1e:	4864      	ldr	r0, [pc, #400]	; (80130b0 <MX_GPIO_Init+0x2fc>)
 8012f20:	f004 fe62 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8012f24:	2201      	movs	r2, #1
 8012f26:	2160      	movs	r1, #96	; 0x60
 8012f28:	4861      	ldr	r0, [pc, #388]	; (80130b0 <MX_GPIO_Init+0x2fc>)
 8012f2a:	f004 fe5d 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8012f34:	485f      	ldr	r0, [pc, #380]	; (80130b4 <MX_GPIO_Init+0x300>)
 8012f36:	f004 fe57 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012f40:	485c      	ldr	r0, [pc, #368]	; (80130b4 <MX_GPIO_Init+0x300>)
 8012f42:	f004 fe51 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8012f46:	2201      	movs	r2, #1
 8012f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012f4c:	4856      	ldr	r0, [pc, #344]	; (80130a8 <MX_GPIO_Init+0x2f4>)
 8012f4e:	f004 fe4b 	bl	8017be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8012f52:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8012f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f60:	2303      	movs	r3, #3
 8012f62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f68:	4619      	mov	r1, r3
 8012f6a:	484b      	ldr	r0, [pc, #300]	; (8013098 <MX_GPIO_Init+0x2e4>)
 8012f6c:	f004 fc78 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8012f70:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012f76:	2300      	movs	r3, #0
 8012f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f82:	4619      	mov	r1, r3
 8012f84:	4844      	ldr	r0, [pc, #272]	; (8013098 <MX_GPIO_Init+0x2e4>)
 8012f86:	f004 fc6b 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8012f8a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8012f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f90:	2301      	movs	r3, #1
 8012f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f94:	2300      	movs	r3, #0
 8012f96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	483e      	ldr	r0, [pc, #248]	; (801309c <MX_GPIO_Init+0x2e8>)
 8012fa4:	f004 fc5c 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8012fa8:	2304      	movs	r3, #4
 8012faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012fac:	2300      	movs	r3, #0
 8012fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8012fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fb8:	4619      	mov	r1, r3
 8012fba:	483c      	ldr	r0, [pc, #240]	; (80130ac <MX_GPIO_Init+0x2f8>)
 8012fbc:	f004 fc50 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8012fc0:	f240 7304 	movw	r3, #1796	; 0x704
 8012fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012fce:	2303      	movs	r3, #3
 8012fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	4831      	ldr	r0, [pc, #196]	; (80130a0 <MX_GPIO_Init+0x2ec>)
 8012fda:	f004 fc41 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8012fde:	2303      	movs	r3, #3
 8012fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8012fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	482d      	ldr	r0, [pc, #180]	; (80130a8 <MX_GPIO_Init+0x2f4>)
 8012ff4:	f004 fc34 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8012ff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ffe:	2300      	movs	r3, #0
 8013000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013002:	2300      	movs	r3, #0
 8013004:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8013006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801300a:	4619      	mov	r1, r3
 801300c:	4825      	ldr	r0, [pc, #148]	; (80130a4 <MX_GPIO_Init+0x2f0>)
 801300e:	f004 fc27 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8013012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013018:	2301      	movs	r3, #1
 801301a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801301c:	2300      	movs	r3, #0
 801301e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013020:	2303      	movs	r3, #3
 8013022:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8013024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013028:	4619      	mov	r1, r3
 801302a:	481e      	ldr	r0, [pc, #120]	; (80130a4 <MX_GPIO_Init+0x2f0>)
 801302c:	f004 fc18 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8013030:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013036:	2300      	movs	r3, #0
 8013038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801303a:	2300      	movs	r3, #0
 801303c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801303e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013042:	4619      	mov	r1, r3
 8013044:	481a      	ldr	r0, [pc, #104]	; (80130b0 <MX_GPIO_Init+0x2fc>)
 8013046:	f004 fc0b 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 801304a:	f241 4304 	movw	r3, #5124	; 0x1404
 801304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013050:	2301      	movs	r3, #1
 8013052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013054:	2300      	movs	r3, #0
 8013056:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013058:	2303      	movs	r3, #3
 801305a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801305c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013060:	4619      	mov	r1, r3
 8013062:	4811      	ldr	r0, [pc, #68]	; (80130a8 <MX_GPIO_Init+0x2f4>)
 8013064:	f004 fbfc 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8013068:	2308      	movs	r3, #8
 801306a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801306c:	2300      	movs	r3, #0
 801306e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013070:	2300      	movs	r3, #0
 8013072:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8013074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013078:	4619      	mov	r1, r3
 801307a:	480b      	ldr	r0, [pc, #44]	; (80130a8 <MX_GPIO_Init+0x2f4>)
 801307c:	f004 fbf0 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8013080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013086:	2301      	movs	r3, #1
 8013088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801308a:	2300      	movs	r3, #0
 801308c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801308e:	2300      	movs	r3, #0
 8013090:	63bb      	str	r3, [r7, #56]	; 0x38
 8013092:	e011      	b.n	80130b8 <MX_GPIO_Init+0x304>
 8013094:	40023800 	.word	0x40023800
 8013098:	40022000 	.word	0x40022000
 801309c:	40021400 	.word	0x40021400
 80130a0:	40021c00 	.word	0x40021c00
 80130a4:	40021000 	.word	0x40021000
 80130a8:	40021800 	.word	0x40021800
 80130ac:	40020800 	.word	0x40020800
 80130b0:	40020c00 	.word	0x40020c00
 80130b4:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80130b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130bc:	4619      	mov	r1, r3
 80130be:	4836      	ldr	r0, [pc, #216]	; (8013198 <MX_GPIO_Init+0x3e4>)
 80130c0:	f004 fbce 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 80130c4:	2303      	movs	r3, #3
 80130c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130c8:	2302      	movs	r3, #2
 80130ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130cc:	2300      	movs	r3, #0
 80130ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130d0:	2303      	movs	r3, #3
 80130d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80130d4:	2309      	movs	r3, #9
 80130d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80130d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130dc:	4619      	mov	r1, r3
 80130de:	482f      	ldr	r0, [pc, #188]	; (801319c <MX_GPIO_Init+0x3e8>)
 80130e0:	f004 fbbe 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 80130e4:	2368      	movs	r3, #104	; 0x68
 80130e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130e8:	2301      	movs	r3, #1
 80130ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130f0:	2303      	movs	r3, #3
 80130f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80130f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130f8:	4619      	mov	r1, r3
 80130fa:	4828      	ldr	r0, [pc, #160]	; (801319c <MX_GPIO_Init+0x3e8>)
 80130fc:	f004 fbb0 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8013100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013106:	2300      	movs	r3, #0
 8013108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801310a:	2300      	movs	r3, #0
 801310c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 801310e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013112:	4619      	mov	r1, r3
 8013114:	4822      	ldr	r0, [pc, #136]	; (80131a0 <MX_GPIO_Init+0x3ec>)
 8013116:	f004 fba3 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801311a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013120:	2301      	movs	r3, #1
 8013122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013124:	2300      	movs	r3, #0
 8013126:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013128:	2300      	movs	r3, #0
 801312a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801312c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013130:	4619      	mov	r1, r3
 8013132:	481b      	ldr	r0, [pc, #108]	; (80131a0 <MX_GPIO_Init+0x3ec>)
 8013134:	f004 fb94 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8013138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801313c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801313e:	2301      	movs	r3, #1
 8013140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013142:	2300      	movs	r3, #0
 8013144:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013146:	2303      	movs	r3, #3
 8013148:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 801314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801314e:	4619      	mov	r1, r3
 8013150:	4813      	ldr	r0, [pc, #76]	; (80131a0 <MX_GPIO_Init+0x3ec>)
 8013152:	f004 fb85 	bl	8017860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8013156:	2318      	movs	r3, #24
 8013158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801315a:	2300      	movs	r3, #0
 801315c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801315e:	2300      	movs	r3, #0
 8013160:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8013162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013166:	4619      	mov	r1, r3
 8013168:	480e      	ldr	r0, [pc, #56]	; (80131a4 <MX_GPIO_Init+0x3f0>)
 801316a:	f004 fb79 	bl	8017860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 801316e:	2200      	movs	r2, #0
 8013170:	2101      	movs	r1, #1
 8013172:	2006      	movs	r0, #6
 8013174:	f003 f849 	bl	801620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013178:	2006      	movs	r0, #6
 801317a:	f003 f862 	bl	8016242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 801317e:	2201      	movs	r2, #1
 8013180:	2101      	movs	r1, #1
 8013182:	2007      	movs	r0, #7
 8013184:	f003 f841 	bl	801620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8013188:	2007      	movs	r0, #7
 801318a:	f003 f85a 	bl	8016242 <HAL_NVIC_EnableIRQ>

}
 801318e:	bf00      	nop
 8013190:	3740      	adds	r7, #64	; 0x40
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	40020800 	.word	0x40020800
 801319c:	40020c00 	.word	0x40020c00
 80131a0:	40022400 	.word	0x40022400
 80131a4:	40022800 	.word	0x40022800

080131a8 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 80131ac:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <Feed_wdt+0x30>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fb fe61 	bl	800ee78 <HAL_Elaps_Ticks>
 80131b6:	4603      	mov	r3, r0
 80131b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80131bc:	d309      	bcc.n	80131d2 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 80131be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80131c2:	4806      	ldr	r0, [pc, #24]	; (80131dc <Feed_wdt+0x34>)
 80131c4:	f004 fd29 	bl	8017c1a <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 80131c8:	f002 f932 	bl	8015430 <HAL_GetTick>
 80131cc:	4603      	mov	r3, r0
 80131ce:	4a02      	ldr	r2, [pc, #8]	; (80131d8 <Feed_wdt+0x30>)
 80131d0:	6013      	str	r3, [r2, #0]
	}

}
 80131d2:	bf00      	nop
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	20009c34 	.word	0x20009c34
 80131dc:	40022400 	.word	0x40022400

080131e0 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 80131e4:	4b09      	ldr	r3, [pc, #36]	; (801320c <Blink_S2+0x2c>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fb fe45 	bl	800ee78 <HAL_Elaps_Ticks>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b64      	cmp	r3, #100	; 0x64
 80131f2:	d909      	bls.n	8013208 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80131f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80131f8:	4805      	ldr	r0, [pc, #20]	; (8013210 <Blink_S2+0x30>)
 80131fa:	f004 fd0e 	bl	8017c1a <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 80131fe:	f002 f917 	bl	8015430 <HAL_GetTick>
 8013202:	4603      	mov	r3, r0
 8013204:	4a01      	ldr	r2, [pc, #4]	; (801320c <Blink_S2+0x2c>)
 8013206:	6013      	str	r3, [r2, #0]
	}
}
 8013208:	bf00      	nop
 801320a:	bd80      	pop	{r7, pc}
 801320c:	20009c38 	.word	0x20009c38
 8013210:	40021c00 	.word	0x40021c00

08013214 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013218:	4b1b      	ldr	r3, [pc, #108]	; (8013288 <MX_I2C1_Init+0x74>)
 801321a:	4a1c      	ldr	r2, [pc, #112]	; (801328c <MX_I2C1_Init+0x78>)
 801321c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 801321e:	4b1a      	ldr	r3, [pc, #104]	; (8013288 <MX_I2C1_Init+0x74>)
 8013220:	4a1b      	ldr	r2, [pc, #108]	; (8013290 <MX_I2C1_Init+0x7c>)
 8013222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013224:	4b18      	ldr	r3, [pc, #96]	; (8013288 <MX_I2C1_Init+0x74>)
 8013226:	2200      	movs	r2, #0
 8013228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801322a:	4b17      	ldr	r3, [pc, #92]	; (8013288 <MX_I2C1_Init+0x74>)
 801322c:	2201      	movs	r2, #1
 801322e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013230:	4b15      	ldr	r3, [pc, #84]	; (8013288 <MX_I2C1_Init+0x74>)
 8013232:	2200      	movs	r2, #0
 8013234:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8013236:	4b14      	ldr	r3, [pc, #80]	; (8013288 <MX_I2C1_Init+0x74>)
 8013238:	2200      	movs	r2, #0
 801323a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801323c:	4b12      	ldr	r3, [pc, #72]	; (8013288 <MX_I2C1_Init+0x74>)
 801323e:	2200      	movs	r2, #0
 8013240:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013242:	4b11      	ldr	r3, [pc, #68]	; (8013288 <MX_I2C1_Init+0x74>)
 8013244:	2200      	movs	r2, #0
 8013246:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013248:	4b0f      	ldr	r3, [pc, #60]	; (8013288 <MX_I2C1_Init+0x74>)
 801324a:	2200      	movs	r2, #0
 801324c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801324e:	480e      	ldr	r0, [pc, #56]	; (8013288 <MX_I2C1_Init+0x74>)
 8013250:	f004 fd22 	bl	8017c98 <HAL_I2C_Init>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d001      	beq.n	801325e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 801325a:	f000 fb5d 	bl	8013918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801325e:	2100      	movs	r1, #0
 8013260:	4809      	ldr	r0, [pc, #36]	; (8013288 <MX_I2C1_Init+0x74>)
 8013262:	f005 fa71 	bl	8018748 <HAL_I2CEx_ConfigAnalogFilter>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 801326c:	f000 fb54 	bl	8013918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013270:	2100      	movs	r1, #0
 8013272:	4805      	ldr	r0, [pc, #20]	; (8013288 <MX_I2C1_Init+0x74>)
 8013274:	f005 fab3 	bl	80187de <HAL_I2CEx_ConfigDigitalFilter>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d001      	beq.n	8013282 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801327e:	f000 fb4b 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8013282:	bf00      	nop
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	20009c3c 	.word	0x20009c3c
 801328c:	40005400 	.word	0x40005400
 8013290:	c0000e12 	.word	0xc0000e12

08013294 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8013298:	4b1b      	ldr	r3, [pc, #108]	; (8013308 <MX_I2C2_Init+0x74>)
 801329a:	4a1c      	ldr	r2, [pc, #112]	; (801330c <MX_I2C2_Init+0x78>)
 801329c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 801329e:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <MX_I2C2_Init+0x74>)
 80132a0:	4a1b      	ldr	r2, [pc, #108]	; (8013310 <MX_I2C2_Init+0x7c>)
 80132a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80132a4:	4b18      	ldr	r3, [pc, #96]	; (8013308 <MX_I2C2_Init+0x74>)
 80132a6:	2200      	movs	r2, #0
 80132a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80132aa:	4b17      	ldr	r3, [pc, #92]	; (8013308 <MX_I2C2_Init+0x74>)
 80132ac:	2201      	movs	r2, #1
 80132ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80132b0:	4b15      	ldr	r3, [pc, #84]	; (8013308 <MX_I2C2_Init+0x74>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80132b6:	4b14      	ldr	r3, [pc, #80]	; (8013308 <MX_I2C2_Init+0x74>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80132bc:	4b12      	ldr	r3, [pc, #72]	; (8013308 <MX_I2C2_Init+0x74>)
 80132be:	2200      	movs	r2, #0
 80132c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80132c2:	4b11      	ldr	r3, [pc, #68]	; (8013308 <MX_I2C2_Init+0x74>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80132c8:	4b0f      	ldr	r3, [pc, #60]	; (8013308 <MX_I2C2_Init+0x74>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80132ce:	480e      	ldr	r0, [pc, #56]	; (8013308 <MX_I2C2_Init+0x74>)
 80132d0:	f004 fce2 	bl	8017c98 <HAL_I2C_Init>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d001      	beq.n	80132de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80132da:	f000 fb1d 	bl	8013918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80132de:	2100      	movs	r1, #0
 80132e0:	4809      	ldr	r0, [pc, #36]	; (8013308 <MX_I2C2_Init+0x74>)
 80132e2:	f005 fa31 	bl	8018748 <HAL_I2CEx_ConfigAnalogFilter>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d001      	beq.n	80132f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80132ec:	f000 fb14 	bl	8013918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80132f0:	2100      	movs	r1, #0
 80132f2:	4805      	ldr	r0, [pc, #20]	; (8013308 <MX_I2C2_Init+0x74>)
 80132f4:	f005 fa73 	bl	80187de <HAL_I2CEx_ConfigDigitalFilter>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d001      	beq.n	8013302 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80132fe:	f000 fb0b 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013302:	bf00      	nop
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	20009c90 	.word	0x20009c90
 801330c:	40005800 	.word	0x40005800
 8013310:	c0000e12 	.word	0xc0000e12

08013314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b0b0      	sub	sp, #192	; 0xc0
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801331c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013320:	2200      	movs	r2, #0
 8013322:	601a      	str	r2, [r3, #0]
 8013324:	605a      	str	r2, [r3, #4]
 8013326:	609a      	str	r2, [r3, #8]
 8013328:	60da      	str	r2, [r3, #12]
 801332a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801332c:	f107 031c 	add.w	r3, r7, #28
 8013330:	2290      	movs	r2, #144	; 0x90
 8013332:	2100      	movs	r1, #0
 8013334:	4618      	mov	r0, r3
 8013336:	f00e fe95 	bl	8022064 <memset>
  if(i2cHandle->Instance==I2C1)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a44      	ldr	r2, [pc, #272]	; (8013450 <HAL_I2C_MspInit+0x13c>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d13e      	bne.n	80133c2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8013344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013348:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801334a:	2300      	movs	r3, #0
 801334c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013350:	f107 031c 	add.w	r3, r7, #28
 8013354:	4618      	mov	r0, r3
 8013356:	f005 ff81 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8013360:	f000 fada 	bl	8013918 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013364:	4b3b      	ldr	r3, [pc, #236]	; (8013454 <HAL_I2C_MspInit+0x140>)
 8013366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013368:	4a3a      	ldr	r2, [pc, #232]	; (8013454 <HAL_I2C_MspInit+0x140>)
 801336a:	f043 0302 	orr.w	r3, r3, #2
 801336e:	6313      	str	r3, [r2, #48]	; 0x30
 8013370:	4b38      	ldr	r3, [pc, #224]	; (8013454 <HAL_I2C_MspInit+0x140>)
 8013372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013374:	f003 0302 	and.w	r3, r3, #2
 8013378:	61bb      	str	r3, [r7, #24]
 801337a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 801337c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013384:	2312      	movs	r3, #18
 8013386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801338a:	2300      	movs	r3, #0
 801338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013390:	2303      	movs	r3, #3
 8013392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013396:	2304      	movs	r3, #4
 8013398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801339c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80133a0:	4619      	mov	r1, r3
 80133a2:	482d      	ldr	r0, [pc, #180]	; (8013458 <HAL_I2C_MspInit+0x144>)
 80133a4:	f004 fa5c 	bl	8017860 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80133a8:	4b2a      	ldr	r3, [pc, #168]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ac:	4a29      	ldr	r2, [pc, #164]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80133b2:	6413      	str	r3, [r2, #64]	; 0x40
 80133b4:	4b27      	ldr	r3, [pc, #156]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80133c0:	e041      	b.n	8013446 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	4a25      	ldr	r2, [pc, #148]	; (801345c <HAL_I2C_MspInit+0x148>)
 80133c8:	4293      	cmp	r3, r2
 80133ca:	d13c      	bne.n	8013446 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80133cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80133d2:	2300      	movs	r3, #0
 80133d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80133d8:	f107 031c 	add.w	r3, r7, #28
 80133dc:	4618      	mov	r0, r3
 80133de:	f005 ff3d 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d001      	beq.n	80133ec <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80133e8:	f000 fa96 	bl	8013918 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80133ec:	4b19      	ldr	r3, [pc, #100]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133f0:	4a18      	ldr	r2, [pc, #96]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133f2:	f043 0320 	orr.w	r3, r3, #32
 80133f6:	6313      	str	r3, [r2, #48]	; 0x30
 80133f8:	4b16      	ldr	r3, [pc, #88]	; (8013454 <HAL_I2C_MspInit+0x140>)
 80133fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133fc:	f003 0320 	and.w	r3, r3, #32
 8013400:	613b      	str	r3, [r7, #16]
 8013402:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8013404:	2303      	movs	r3, #3
 8013406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801340a:	2312      	movs	r3, #18
 801340c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013410:	2300      	movs	r3, #0
 8013412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013416:	2303      	movs	r3, #3
 8013418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801341c:	2304      	movs	r3, #4
 801341e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013422:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013426:	4619      	mov	r1, r3
 8013428:	480d      	ldr	r0, [pc, #52]	; (8013460 <HAL_I2C_MspInit+0x14c>)
 801342a:	f004 fa19 	bl	8017860 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801342e:	4b09      	ldr	r3, [pc, #36]	; (8013454 <HAL_I2C_MspInit+0x140>)
 8013430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013432:	4a08      	ldr	r2, [pc, #32]	; (8013454 <HAL_I2C_MspInit+0x140>)
 8013434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013438:	6413      	str	r3, [r2, #64]	; 0x40
 801343a:	4b06      	ldr	r3, [pc, #24]	; (8013454 <HAL_I2C_MspInit+0x140>)
 801343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013442:	60fb      	str	r3, [r7, #12]
 8013444:	68fb      	ldr	r3, [r7, #12]
}
 8013446:	bf00      	nop
 8013448:	37c0      	adds	r7, #192	; 0xc0
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	40005400 	.word	0x40005400
 8013454:	40023800 	.word	0x40023800
 8013458:	40020400 	.word	0x40020400
 801345c:	40005800 	.word	0x40005800
 8013460:	40021400 	.word	0x40021400

08013464 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8013468:	4b0b      	ldr	r3, [pc, #44]	; (8013498 <MX_IWDG_Init+0x34>)
 801346a:	4a0c      	ldr	r2, [pc, #48]	; (801349c <MX_IWDG_Init+0x38>)
 801346c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801346e:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <MX_IWDG_Init+0x34>)
 8013470:	2203      	movs	r2, #3
 8013472:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8013474:	4b08      	ldr	r3, [pc, #32]	; (8013498 <MX_IWDG_Init+0x34>)
 8013476:	f640 72ff 	movw	r2, #4095	; 0xfff
 801347a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 801347c:	4b06      	ldr	r3, [pc, #24]	; (8013498 <MX_IWDG_Init+0x34>)
 801347e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8013482:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8013484:	4804      	ldr	r0, [pc, #16]	; (8013498 <MX_IWDG_Init+0x34>)
 8013486:	f005 f9f6 	bl	8018876 <HAL_IWDG_Init>
 801348a:	4603      	mov	r3, r0
 801348c:	2b00      	cmp	r3, #0
 801348e:	d001      	beq.n	8013494 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8013490:	f000 fa42 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8013494:	bf00      	nop
 8013496:	bd80      	pop	{r7, pc}
 8013498:	20009ce4 	.word	0x20009ce4
 801349c:	40003000 	.word	0x40003000

080134a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80134a0:	b480      	push	{r7}
 80134a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80134a4:	f3bf 8f4f 	dsb	sy
}
 80134a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80134aa:	f3bf 8f6f 	isb	sy
}
 80134ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80134b0:	4b0d      	ldr	r3, [pc, #52]	; (80134e8 <SCB_EnableICache+0x48>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80134b8:	f3bf 8f4f 	dsb	sy
}
 80134bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80134be:	f3bf 8f6f 	isb	sy
}
 80134c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80134c4:	4b08      	ldr	r3, [pc, #32]	; (80134e8 <SCB_EnableICache+0x48>)
 80134c6:	695b      	ldr	r3, [r3, #20]
 80134c8:	4a07      	ldr	r2, [pc, #28]	; (80134e8 <SCB_EnableICache+0x48>)
 80134ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80134ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80134d0:	f3bf 8f4f 	dsb	sy
}
 80134d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80134d6:	f3bf 8f6f 	isb	sy
}
 80134da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80134dc:	bf00      	nop
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	e000ed00 	.word	0xe000ed00

080134ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80134ec:	b480      	push	{r7}
 80134ee:	b085      	sub	sp, #20
 80134f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80134f2:	4b1f      	ldr	r3, [pc, #124]	; (8013570 <SCB_EnableDCache+0x84>)
 80134f4:	2200      	movs	r2, #0
 80134f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80134fa:	f3bf 8f4f 	dsb	sy
}
 80134fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013500:	4b1b      	ldr	r3, [pc, #108]	; (8013570 <SCB_EnableDCache+0x84>)
 8013502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013506:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	0b5b      	lsrs	r3, r3, #13
 801350c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013510:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	08db      	lsrs	r3, r3, #3
 8013516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801351a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	015a      	lsls	r2, r3, #5
 8013520:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013524:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013526:	68ba      	ldr	r2, [r7, #8]
 8013528:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801352a:	4911      	ldr	r1, [pc, #68]	; (8013570 <SCB_EnableDCache+0x84>)
 801352c:	4313      	orrs	r3, r2
 801352e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	1e5a      	subs	r2, r3, #1
 8013536:	60ba      	str	r2, [r7, #8]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d1ef      	bne.n	801351c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	1e5a      	subs	r2, r3, #1
 8013540:	60fa      	str	r2, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1e5      	bne.n	8013512 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013546:	f3bf 8f4f 	dsb	sy
}
 801354a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801354c:	4b08      	ldr	r3, [pc, #32]	; (8013570 <SCB_EnableDCache+0x84>)
 801354e:	695b      	ldr	r3, [r3, #20]
 8013550:	4a07      	ldr	r2, [pc, #28]	; (8013570 <SCB_EnableDCache+0x84>)
 8013552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013556:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013558:	f3bf 8f4f 	dsb	sy
}
 801355c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801355e:	f3bf 8f6f 	isb	sy
}
 8013562:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8013564:	bf00      	nop
 8013566:	3714      	adds	r7, #20
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr
 8013570:	e000ed00 	.word	0xe000ed00

08013574 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 801357a:	2300      	movs	r3, #0
 801357c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 801357e:	f000 f99f 	bl	80138c0 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8013582:	f7ff ff8d 	bl	80134a0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8013586:	f7ff ffb1 	bl	80134ec <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 801358a:	f001 fef1 	bl	8015370 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 801358e:	f000 f8d1 	bl	8013734 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8013592:	f7f5 fed9 	bl	8009348 <reset_cause_get>
 8013596:	4603      	mov	r3, r0
 8013598:	4618      	mov	r0, r3
 801359a:	f7f5 ff27 	bl	80093ec <reset_cause_get_name>
 801359e:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 80135a0:	f7ff fc08 	bl	8012db4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80135a4:	f001 f90a 	bl	80147bc <MX_USART1_UART_Init>
	Get_Slot();
 80135a8:	f7ed fa90 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 80135ac:	f7fc f8dc 	bl	800f768 <MX_CAN2_Init>
	MX_CAN3_Init();
 80135b0:	f7fc f952 	bl	800f858 <MX_CAN3_Init>
	MX_I2C1_Init();
 80135b4:	f7ff fe2e 	bl	8013214 <MX_I2C1_Init>
	MX_I2C2_Init();
 80135b8:	f7ff fe6c 	bl	8013294 <MX_I2C2_Init>
	MX_SPI1_Init();
 80135bc:	f000 fa10 	bl	80139e0 <MX_SPI1_Init>
	Get_Config();
 80135c0:	f000 fd7a 	bl	80140b8 <Get_Config>
	MX_RNG_Init();
 80135c4:	f000 f9ae 	bl	8013924 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80135c8:	2208      	movs	r2, #8
 80135ca:	2100      	movs	r1, #0
 80135cc:	484c      	ldr	r0, [pc, #304]	; (8013700 <main+0x18c>)
 80135ce:	f00e fd49 	bl	8022064 <memset>
	HAL_Delay(250);
 80135d2:	20fa      	movs	r0, #250	; 0xfa
 80135d4:	f001 ff38 	bl	8015448 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 80135d8:	484a      	ldr	r0, [pc, #296]	; (8013704 <main+0x190>)
 80135da:	f00e fe2b 	bl	8022234 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 80135de:	484a      	ldr	r0, [pc, #296]	; (8013708 <main+0x194>)
 80135e0:	f00e fec4 	bl	802236c <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 80135e4:	6879      	ldr	r1, [r7, #4]
 80135e6:	4849      	ldr	r0, [pc, #292]	; (801370c <main+0x198>)
 80135e8:	f00e fe24 	bl	8022234 <iprintf>
	Get_Build_Details();
 80135ec:	f000 f90c 	bl	8013808 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 80135f0:	4b47      	ldr	r3, [pc, #284]	; (8013710 <main+0x19c>)
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	3b01      	subs	r3, #1
 80135f6:	2b03      	cmp	r3, #3
 80135f8:	d85f      	bhi.n	80136ba <main+0x146>
 80135fa:	a201      	add	r2, pc, #4	; (adr r2, 8013600 <main+0x8c>)
 80135fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013600:	08013611 	.word	0x08013611
 8013604:	08013663 	.word	0x08013663
 8013608:	0801368b 	.word	0x0801368b
 801360c:	080136c3 	.word	0x080136c3
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013610:	4840      	ldr	r0, [pc, #256]	; (8013714 <main+0x1a0>)
 8013612:	f00e feab 	bl	802236c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013616:	4840      	ldr	r0, [pc, #256]	; (8013718 <main+0x1a4>)
 8013618:	f00e fea8 	bl	802236c <puts>
		MX_LWIP_Init();
 801361c:	f008 ff3e 	bl	801c49c <MX_LWIP_Init>
		udpServer_init();
 8013620:	f7fb fc3a 	bl	800ee98 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013624:	483d      	ldr	r0, [pc, #244]	; (801371c <main+0x1a8>)
 8013626:	f00e fea1 	bl	802236c <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 801362a:	4b39      	ldr	r3, [pc, #228]	; (8013710 <main+0x19c>)
 801362c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013630:	2b01      	cmp	r3, #1
 8013632:	d111      	bne.n	8013658 <main+0xe4>
 8013634:	4b36      	ldr	r3, [pc, #216]	; (8013710 <main+0x19c>)
 8013636:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00c      	beq.n	8013658 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 801363e:	4b34      	ldr	r3, [pc, #208]	; (8013710 <main+0x19c>)
 8013640:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013644:	4619      	mov	r1, r3
 8013646:	4836      	ldr	r0, [pc, #216]	; (8013720 <main+0x1ac>)
 8013648:	f00e fdf4 	bl	8022234 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 801364c:	4b30      	ldr	r3, [pc, #192]	; (8013710 <main+0x19c>)
 801364e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013652:	4618      	mov	r0, r3
 8013654:	f001 fa60 	bl	8014b18 <UART4_Init>
		}
		print_self_Details();
 8013658:	f7f5 f8d6 	bl	8008808 <print_self_Details>
		Update_HitachiCommands();
 801365c:	f7ed f922 	bl	80008a4 <Update_HitachiCommands>
		break;
 8013660:	e030      	b.n	80136c4 <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8013662:	4830      	ldr	r0, [pc, #192]	; (8013724 <main+0x1b0>)
 8013664:	f00e fe82 	bl	802236c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013668:	482b      	ldr	r0, [pc, #172]	; (8013718 <main+0x1a4>)
 801366a:	f00e fe7f 	bl	802236c <puts>
		MX_LWIP_Init();
 801366e:	f008 ff15 	bl	801c49c <MX_LWIP_Init>
		udpServer_init();
 8013672:	f7fb fc11 	bl	800ee98 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013676:	4829      	ldr	r0, [pc, #164]	; (801371c <main+0x1a8>)
 8013678:	f00e fe78 	bl	802236c <puts>
		print_self_DetailsSiemens();
 801367c:	f7fb faf2 	bl	800ec64 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8013680:	f7f9 fffc 	bl	800d67c <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8013684:	f7fa fe10 	bl	800e2a8 <UpdateSIGNALSNames>
		break;
 8013688:	e01c      	b.n	80136c4 <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 801368a:	4827      	ldr	r0, [pc, #156]	; (8013728 <main+0x1b4>)
 801368c:	f00e fe6e 	bl	802236c <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8013690:	4b1f      	ldr	r3, [pc, #124]	; (8013710 <main+0x19c>)
 8013692:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013696:	2b00      	cmp	r3, #0
 8013698:	d006      	beq.n	80136a8 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 801369a:	4b1d      	ldr	r3, [pc, #116]	; (8013710 <main+0x19c>)
 801369c:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80136a0:	4618      	mov	r0, r3
 80136a2:	f001 fa39 	bl	8014b18 <UART4_Init>
 80136a6:	e003      	b.n	80136b0 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 80136a8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80136ac:	f001 fa34 	bl	8014b18 <UART4_Init>
		}
		Update_MedhaCommands();
 80136b0:	f7f7 fabe 	bl	800ac30 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 80136b4:	f7f7 f87c 	bl	800a7b0 <Print_Medha_Self_Details>
		break;
 80136b8:	e004      	b.n	80136c4 <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 80136ba:	481c      	ldr	r0, [pc, #112]	; (801372c <main+0x1b8>)
 80136bc:	f00e fe56 	bl	802236c <puts>
		while(1);
 80136c0:	e7fe      	b.n	80136c0 <main+0x14c>
		break;
 80136c2:	bf00      	nop
	}


	printf("Initialization Success\n");
 80136c4:	481a      	ldr	r0, [pc, #104]	; (8013730 <main+0x1bc>)
 80136c6:	f00e fe51 	bl	802236c <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 80136ca:	f7ff fecb 	bl	8013464 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 80136ce:	4b10      	ldr	r3, [pc, #64]	; (8013710 <main+0x19c>)
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	2b03      	cmp	r3, #3
 80136d4:	d00c      	beq.n	80136f0 <main+0x17c>
 80136d6:	2b03      	cmp	r3, #3
 80136d8:	dc0d      	bgt.n	80136f6 <main+0x182>
 80136da:	2b01      	cmp	r3, #1
 80136dc:	d002      	beq.n	80136e4 <main+0x170>
 80136de:	2b02      	cmp	r3, #2
 80136e0:	d003      	beq.n	80136ea <main+0x176>
 80136e2:	e008      	b.n	80136f6 <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 80136e4:	f7f5 fd60 	bl	80091a8 <Process_HitachiEI>
			break;
 80136e8:	e009      	b.n	80136fe <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 80136ea:	f7f7 ffc7 	bl	800b67c <Process_SiemensEI>
			break;
 80136ee:	e006      	b.n	80136fe <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 80136f0:	f7f5 fecc 	bl	800948c <Process_Medha_EI>
			break;
 80136f4:	e003      	b.n	80136fe <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 80136f6:	480d      	ldr	r0, [pc, #52]	; (801372c <main+0x1b8>)
 80136f8:	f00e fe38 	bl	802236c <puts>
			while(1);
 80136fc:	e7fe      	b.n	80136fc <main+0x188>
		switch(EI_data.ProtocolType)
 80136fe:	e7e6      	b.n	80136ce <main+0x15a>
 8013700:	2000195c 	.word	0x2000195c
 8013704:	08026bec 	.word	0x08026bec
 8013708:	08026bf8 	.word	0x08026bf8
 801370c:	08026c48 	.word	0x08026c48
 8013710:	20000304 	.word	0x20000304
 8013714:	08026c64 	.word	0x08026c64
 8013718:	08026c84 	.word	0x08026c84
 801371c:	08026cac 	.word	0x08026cac
 8013720:	08026cc8 	.word	0x08026cc8
 8013724:	08026cf0 	.word	0x08026cf0
 8013728:	08026d10 	.word	0x08026d10
 801372c:	08026d2c 	.word	0x08026d2c
 8013730:	08026d48 	.word	0x08026d48

08013734 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b094      	sub	sp, #80	; 0x50
 8013738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801373a:	f107 031c 	add.w	r3, r7, #28
 801373e:	2234      	movs	r2, #52	; 0x34
 8013740:	2100      	movs	r1, #0
 8013742:	4618      	mov	r0, r3
 8013744:	f00e fc8e 	bl	8022064 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013748:	f107 0308 	add.w	r3, r7, #8
 801374c:	2200      	movs	r2, #0
 801374e:	601a      	str	r2, [r3, #0]
 8013750:	605a      	str	r2, [r3, #4]
 8013752:	609a      	str	r2, [r3, #8]
 8013754:	60da      	str	r2, [r3, #12]
 8013756:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8013758:	4b29      	ldr	r3, [pc, #164]	; (8013800 <SystemClock_Config+0xcc>)
 801375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375c:	4a28      	ldr	r2, [pc, #160]	; (8013800 <SystemClock_Config+0xcc>)
 801375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013762:	6413      	str	r3, [r2, #64]	; 0x40
 8013764:	4b26      	ldr	r3, [pc, #152]	; (8013800 <SystemClock_Config+0xcc>)
 8013766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801376c:	607b      	str	r3, [r7, #4]
 801376e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013770:	4b24      	ldr	r3, [pc, #144]	; (8013804 <SystemClock_Config+0xd0>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	4a23      	ldr	r2, [pc, #140]	; (8013804 <SystemClock_Config+0xd0>)
 8013776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801377a:	6013      	str	r3, [r2, #0]
 801377c:	4b21      	ldr	r3, [pc, #132]	; (8013804 <SystemClock_Config+0xd0>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013784:	603b      	str	r3, [r7, #0]
 8013786:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013788:	2309      	movs	r3, #9
 801378a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801378c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013790:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013792:	2301      	movs	r3, #1
 8013794:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013796:	2302      	movs	r3, #2
 8013798:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801379a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801379e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 80137a0:	2306      	movs	r3, #6
 80137a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80137a4:	23b4      	movs	r3, #180	; 0xb4
 80137a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80137a8:	2302      	movs	r3, #2
 80137aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80137ac:	2308      	movs	r3, #8
 80137ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80137b0:	2302      	movs	r3, #2
 80137b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80137b4:	f107 031c 	add.w	r3, r7, #28
 80137b8:	4618      	mov	r0, r3
 80137ba:	f005 f8bb 	bl	8018934 <HAL_RCC_OscConfig>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d001      	beq.n	80137c8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80137c4:	f000 f8a8 	bl	8013918 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80137c8:	230f      	movs	r3, #15
 80137ca:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80137cc:	2302      	movs	r3, #2
 80137ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80137d0:	2300      	movs	r3, #0
 80137d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80137d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80137d8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80137da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137de:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80137e0:	f107 0308 	add.w	r3, r7, #8
 80137e4:	2105      	movs	r1, #5
 80137e6:	4618      	mov	r0, r3
 80137e8:	f005 fb52 	bl	8018e90 <HAL_RCC_ClockConfig>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d001      	beq.n	80137f6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80137f2:	f000 f891 	bl	8013918 <Error_Handler>
	}
}
 80137f6:	bf00      	nop
 80137f8:	3750      	adds	r7, #80	; 0x50
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	40023800 	.word	0x40023800
 8013804:	40007000 	.word	0x40007000

08013808 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08e      	sub	sp, #56	; 0x38
 801380c:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 801380e:	2300      	movs	r3, #0
 8013810:	607b      	str	r3, [r7, #4]
 8013812:	f107 0308 	add.w	r3, r7, #8
 8013816:	222e      	movs	r2, #46	; 0x2e
 8013818:	2100      	movs	r1, #0
 801381a:	4618      	mov	r0, r3
 801381c:	f00e fc22 	bl	8022064 <memset>
	printf("\n_____________________________________________\n");
 8013820:	481d      	ldr	r0, [pc, #116]	; (8013898 <Get_Build_Details+0x90>)
 8013822:	f00e fda3 	bl	802236c <puts>
	printf("Build Date:%s\n",__DATE__);
 8013826:	491d      	ldr	r1, [pc, #116]	; (801389c <Get_Build_Details+0x94>)
 8013828:	481d      	ldr	r0, [pc, #116]	; (80138a0 <Get_Build_Details+0x98>)
 801382a:	f00e fd03 	bl	8022234 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 801382e:	491d      	ldr	r1, [pc, #116]	; (80138a4 <Get_Build_Details+0x9c>)
 8013830:	481d      	ldr	r0, [pc, #116]	; (80138a8 <Get_Build_Details+0xa0>)
 8013832:	f00e fcff 	bl	8022234 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013836:	1d3b      	adds	r3, r7, #4
 8013838:	4a18      	ldr	r2, [pc, #96]	; (801389c <Get_Build_Details+0x94>)
 801383a:	ca07      	ldmia	r2, {r0, r1, r2}
 801383c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8013840:	1d3b      	adds	r3, r7, #4
 8013842:	4618      	mov	r0, r3
 8013844:	f7ec fd06 	bl	8000254 <strlen>
 8013848:	4603      	mov	r3, r0
 801384a:	461a      	mov	r2, r3
 801384c:	1d3b      	adds	r3, r7, #4
 801384e:	4413      	add	r3, r2
 8013850:	4914      	ldr	r1, [pc, #80]	; (80138a4 <Get_Build_Details+0x9c>)
 8013852:	461a      	mov	r2, r3
 8013854:	460b      	mov	r3, r1
 8013856:	cb03      	ldmia	r3!, {r0, r1}
 8013858:	6010      	str	r0, [r2, #0]
 801385a:	6051      	str	r1, [r2, #4]
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8013860:	1d3b      	adds	r3, r7, #4
 8013862:	4618      	mov	r0, r3
 8013864:	f7ec fcf6 	bl	8000254 <strlen>
 8013868:	4603      	mov	r3, r0
 801386a:	b21a      	sxth	r2, r3
 801386c:	1d3b      	adds	r3, r7, #4
 801386e:	4619      	mov	r1, r3
 8013870:	2000      	movs	r0, #0
 8013872:	f7ff f94b 	bl	8012b0c <GetCRC16>
 8013876:	4603      	mov	r3, r0
 8013878:	461a      	mov	r2, r3
 801387a:	4b0c      	ldr	r3, [pc, #48]	; (80138ac <Get_Build_Details+0xa4>)
 801387c:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 801387e:	4a0c      	ldr	r2, [pc, #48]	; (80138b0 <Get_Build_Details+0xa8>)
 8013880:	490c      	ldr	r1, [pc, #48]	; (80138b4 <Get_Build_Details+0xac>)
 8013882:	480d      	ldr	r0, [pc, #52]	; (80138b8 <Get_Build_Details+0xb0>)
 8013884:	f00e fcd6 	bl	8022234 <iprintf>
	printf("_____________________________________________\n");
 8013888:	480c      	ldr	r0, [pc, #48]	; (80138bc <Get_Build_Details+0xb4>)
 801388a:	f00e fd6f 	bl	802236c <puts>

}
 801388e:	bf00      	nop
 8013890:	3738      	adds	r7, #56	; 0x38
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	08026d60 	.word	0x08026d60
 801389c:	08026d90 	.word	0x08026d90
 80138a0:	08026d9c 	.word	0x08026d9c
 80138a4:	08026dac 	.word	0x08026dac
 80138a8:	08026db8 	.word	0x08026db8
 80138ac:	20009d18 	.word	0x20009d18
 80138b0:	08026dc8 	.word	0x08026dc8
 80138b4:	08026dd0 	.word	0x08026dd0
 80138b8:	08026de8 	.word	0x08026de8
 80138bc:	08026e04 	.word	0x08026e04

080138c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80138c6:	463b      	mov	r3, r7
 80138c8:	2200      	movs	r2, #0
 80138ca:	601a      	str	r2, [r3, #0]
 80138cc:	605a      	str	r2, [r3, #4]
 80138ce:	609a      	str	r2, [r3, #8]
 80138d0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80138d2:	f002 fcd1 	bl	8016278 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80138d6:	2301      	movs	r3, #1
 80138d8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80138da:	2300      	movs	r3, #0
 80138dc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80138de:	2300      	movs	r3, #0
 80138e0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80138e2:	231f      	movs	r3, #31
 80138e4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80138e6:	2387      	movs	r3, #135	; 0x87
 80138e8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80138ea:	2300      	movs	r3, #0
 80138ec:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80138ee:	2300      	movs	r3, #0
 80138f0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80138f2:	2301      	movs	r3, #1
 80138f4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80138f6:	2301      	movs	r3, #1
 80138f8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80138fa:	2300      	movs	r3, #0
 80138fc:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80138fe:	2300      	movs	r3, #0
 8013900:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013902:	463b      	mov	r3, r7
 8013904:	4618      	mov	r0, r3
 8013906:	f002 fcef 	bl	80162e8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801390a:	2004      	movs	r0, #4
 801390c:	f002 fccc 	bl	80162a8 <HAL_MPU_Enable>

}
 8013910:	bf00      	nop
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013918:	b480      	push	{r7}
 801391a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 801391c:	b672      	cpsid	i
}
 801391e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013920:	e7fe      	b.n	8013920 <Error_Handler+0x8>
	...

08013924 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013928:	4b06      	ldr	r3, [pc, #24]	; (8013944 <MX_RNG_Init+0x20>)
 801392a:	4a07      	ldr	r2, [pc, #28]	; (8013948 <MX_RNG_Init+0x24>)
 801392c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 801392e:	4805      	ldr	r0, [pc, #20]	; (8013944 <MX_RNG_Init+0x20>)
 8013930:	f006 f8bc 	bl	8019aac <HAL_RNG_Init>
 8013934:	4603      	mov	r3, r0
 8013936:	2b00      	cmp	r3, #0
 8013938:	d001      	beq.n	801393e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 801393a:	f7ff ffed 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 801393e:	bf00      	nop
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	20009cf4 	.word	0x20009cf4
 8013948:	50060800 	.word	0x50060800

0801394c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b0a8      	sub	sp, #160	; 0xa0
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013954:	f107 0310 	add.w	r3, r7, #16
 8013958:	2290      	movs	r2, #144	; 0x90
 801395a:	2100      	movs	r1, #0
 801395c:	4618      	mov	r0, r3
 801395e:	f00e fb81 	bl	8022064 <memset>
  if(rngHandle->Instance==RNG)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4a11      	ldr	r2, [pc, #68]	; (80139ac <HAL_RNG_MspInit+0x60>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d11b      	bne.n	80139a4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801396c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013970:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8013972:	2300      	movs	r3, #0
 8013974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013978:	f107 0310 	add.w	r3, r7, #16
 801397c:	4618      	mov	r0, r3
 801397e:	f005 fc6d 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d001      	beq.n	801398c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8013988:	f7ff ffc6 	bl	8013918 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 801398c:	4b08      	ldr	r3, [pc, #32]	; (80139b0 <HAL_RNG_MspInit+0x64>)
 801398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013990:	4a07      	ldr	r2, [pc, #28]	; (80139b0 <HAL_RNG_MspInit+0x64>)
 8013992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013996:	6353      	str	r3, [r2, #52]	; 0x34
 8013998:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <HAL_RNG_MspInit+0x64>)
 801399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139a0:	60fb      	str	r3, [r7, #12]
 80139a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80139a4:	bf00      	nop
 80139a6:	37a0      	adds	r7, #160	; 0xa0
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	50060800 	.word	0x50060800
 80139b0:	40023800 	.word	0x40023800

080139b4 <__NVIC_SystemReset>:
{
 80139b4:	b480      	push	{r7}
 80139b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80139b8:	f3bf 8f4f 	dsb	sy
}
 80139bc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80139be:	4b06      	ldr	r3, [pc, #24]	; (80139d8 <__NVIC_SystemReset+0x24>)
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80139c6:	4904      	ldr	r1, [pc, #16]	; (80139d8 <__NVIC_SystemReset+0x24>)
 80139c8:	4b04      	ldr	r3, [pc, #16]	; (80139dc <__NVIC_SystemReset+0x28>)
 80139ca:	4313      	orrs	r3, r2
 80139cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80139ce:	f3bf 8f4f 	dsb	sy
}
 80139d2:	bf00      	nop
    __NOP();
 80139d4:	bf00      	nop
 80139d6:	e7fd      	b.n	80139d4 <__NVIC_SystemReset+0x20>
 80139d8:	e000ed00 	.word	0xe000ed00
 80139dc:	05fa0004 	.word	0x05fa0004

080139e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80139e4:	4b1b      	ldr	r3, [pc, #108]	; (8013a54 <MX_SPI1_Init+0x74>)
 80139e6:	4a1c      	ldr	r2, [pc, #112]	; (8013a58 <MX_SPI1_Init+0x78>)
 80139e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80139ea:	4b1a      	ldr	r3, [pc, #104]	; (8013a54 <MX_SPI1_Init+0x74>)
 80139ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80139f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80139f2:	4b18      	ldr	r3, [pc, #96]	; (8013a54 <MX_SPI1_Init+0x74>)
 80139f4:	2200      	movs	r2, #0
 80139f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80139f8:	4b16      	ldr	r3, [pc, #88]	; (8013a54 <MX_SPI1_Init+0x74>)
 80139fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80139fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013a00:	4b14      	ldr	r3, [pc, #80]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a02:	2200      	movs	r2, #0
 8013a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013a06:	4b13      	ldr	r3, [pc, #76]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a08:	2200      	movs	r2, #0
 8013a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013a0c:	4b11      	ldr	r3, [pc, #68]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8013a14:	4b0f      	ldr	r3, [pc, #60]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a16:	2208      	movs	r2, #8
 8013a18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013a1a:	4b0e      	ldr	r3, [pc, #56]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013a20:	4b0c      	ldr	r3, [pc, #48]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013a26:	4b0b      	ldr	r3, [pc, #44]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a28:	2200      	movs	r2, #0
 8013a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013a2c:	4b09      	ldr	r3, [pc, #36]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a2e:	2207      	movs	r2, #7
 8013a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013a32:	4b08      	ldr	r3, [pc, #32]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a34:	2200      	movs	r2, #0
 8013a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013a38:	4b06      	ldr	r3, [pc, #24]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a3a:	2208      	movs	r2, #8
 8013a3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013a3e:	4805      	ldr	r0, [pc, #20]	; (8013a54 <MX_SPI1_Init+0x74>)
 8013a40:	f006 f8c9 	bl	8019bd6 <HAL_SPI_Init>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013a4a:	f7ff ff65 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013a4e:	bf00      	nop
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	20009d1c 	.word	0x20009d1c
 8013a58:	40013000 	.word	0x40013000

08013a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b08c      	sub	sp, #48	; 0x30
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a64:	f107 031c 	add.w	r3, r7, #28
 8013a68:	2200      	movs	r2, #0
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	605a      	str	r2, [r3, #4]
 8013a6e:	609a      	str	r2, [r3, #8]
 8013a70:	60da      	str	r2, [r3, #12]
 8013a72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	4a33      	ldr	r2, [pc, #204]	; (8013b48 <HAL_SPI_MspInit+0xec>)
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	d160      	bne.n	8013b40 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013a7e:	4b33      	ldr	r3, [pc, #204]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a82:	4a32      	ldr	r2, [pc, #200]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013a88:	6453      	str	r3, [r2, #68]	; 0x44
 8013a8a:	4b30      	ldr	r3, [pc, #192]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013a92:	61bb      	str	r3, [r7, #24]
 8013a94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a96:	4b2d      	ldr	r3, [pc, #180]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a9a:	4a2c      	ldr	r2, [pc, #176]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013a9c:	f043 0301 	orr.w	r3, r3, #1
 8013aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8013aa2:	4b2a      	ldr	r3, [pc, #168]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa6:	f003 0301 	and.w	r3, r3, #1
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013aae:	4b27      	ldr	r3, [pc, #156]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab2:	4a26      	ldr	r2, [pc, #152]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013ab4:	f043 0308 	orr.w	r3, r3, #8
 8013ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8013aba:	4b24      	ldr	r3, [pc, #144]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013abe:	f003 0308 	and.w	r3, r3, #8
 8013ac2:	613b      	str	r3, [r7, #16]
 8013ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013ac6:	4b21      	ldr	r3, [pc, #132]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aca:	4a20      	ldr	r2, [pc, #128]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8013ad2:	4b1e      	ldr	r3, [pc, #120]	; (8013b4c <HAL_SPI_MspInit+0xf0>)
 8013ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ada:	60fb      	str	r3, [r7, #12]
 8013adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8013ade:	2320      	movs	r3, #32
 8013ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ae2:	2302      	movs	r3, #2
 8013ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013aea:	2303      	movs	r3, #3
 8013aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013aee:	2305      	movs	r3, #5
 8013af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8013af2:	f107 031c 	add.w	r3, r7, #28
 8013af6:	4619      	mov	r1, r3
 8013af8:	4815      	ldr	r0, [pc, #84]	; (8013b50 <HAL_SPI_MspInit+0xf4>)
 8013afa:	f003 feb1 	bl	8017860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8013afe:	2380      	movs	r3, #128	; 0x80
 8013b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b02:	2302      	movs	r3, #2
 8013b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b06:	2300      	movs	r3, #0
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013b0e:	2305      	movs	r3, #5
 8013b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013b12:	f107 031c 	add.w	r3, r7, #28
 8013b16:	4619      	mov	r1, r3
 8013b18:	480e      	ldr	r0, [pc, #56]	; (8013b54 <HAL_SPI_MspInit+0xf8>)
 8013b1a:	f003 fea1 	bl	8017860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8013b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b24:	2302      	movs	r3, #2
 8013b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b2c:	2303      	movs	r3, #3
 8013b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013b30:	2305      	movs	r3, #5
 8013b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8013b34:	f107 031c 	add.w	r3, r7, #28
 8013b38:	4619      	mov	r1, r3
 8013b3a:	4807      	ldr	r0, [pc, #28]	; (8013b58 <HAL_SPI_MspInit+0xfc>)
 8013b3c:	f003 fe90 	bl	8017860 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8013b40:	bf00      	nop
 8013b42:	3730      	adds	r7, #48	; 0x30
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	40013000 	.word	0x40013000
 8013b4c:	40023800 	.word	0x40023800
 8013b50:	40020000 	.word	0x40020000
 8013b54:	40020c00 	.word	0x40020c00
 8013b58:	40021800 	.word	0x40021800

08013b5c <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b086      	sub	sp, #24
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60b9      	str	r1, [r7, #8]
 8013b64:	607b      	str	r3, [r7, #4]
 8013b66:	4603      	mov	r3, r0
 8013b68:	73fb      	strb	r3, [r7, #15]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	3b01      	subs	r3, #1
 8013b76:	2b03      	cmp	r3, #3
 8013b78:	d828      	bhi.n	8013bcc <SPI_WriteInFlash+0x70>
 8013b7a:	a201      	add	r2, pc, #4	; (adr r2, 8013b80 <SPI_WriteInFlash+0x24>)
 8013b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b80:	08013b91 	.word	0x08013b91
 8013b84:	08013ba1 	.word	0x08013ba1
 8013b88:	08013baf 	.word	0x08013baf
 8013b8c:	08013bbd 	.word	0x08013bbd
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8013b90:	4b75      	ldr	r3, [pc, #468]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013b92:	4a76      	ldr	r2, [pc, #472]	; (8013d6c <SPI_WriteInFlash+0x210>)
 8013b94:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013b96:	4b76      	ldr	r3, [pc, #472]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b9c:	601a      	str	r2, [r3, #0]
		break;
 8013b9e:	e018      	b.n	8013bd2 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8013ba0:	4b71      	ldr	r3, [pc, #452]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013ba2:	4a74      	ldr	r2, [pc, #464]	; (8013d74 <SPI_WriteInFlash+0x218>)
 8013ba4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013ba6:	4b72      	ldr	r3, [pc, #456]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013ba8:	2220      	movs	r2, #32
 8013baa:	601a      	str	r2, [r3, #0]
		break;
 8013bac:	e011      	b.n	8013bd2 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8013bae:	4b6e      	ldr	r3, [pc, #440]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013bb0:	4a70      	ldr	r2, [pc, #448]	; (8013d74 <SPI_WriteInFlash+0x218>)
 8013bb2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013bb4:	4b6e      	ldr	r3, [pc, #440]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013bb6:	2240      	movs	r2, #64	; 0x40
 8013bb8:	601a      	str	r2, [r3, #0]
		break;
 8013bba:	e00a      	b.n	8013bd2 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8013bbc:	4b6a      	ldr	r3, [pc, #424]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013bbe:	4a6e      	ldr	r2, [pc, #440]	; (8013d78 <SPI_WriteInFlash+0x21c>)
 8013bc0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013bc2:	4b6b      	ldr	r3, [pc, #428]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013bc8:	601a      	str	r2, [r3, #0]
		break;
 8013bca:	e002      	b.n	8013bd2 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8013bcc:	486b      	ldr	r0, [pc, #428]	; (8013d7c <SPI_WriteInFlash+0x220>)
 8013bce:	f00e fbcd 	bl	802236c <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013bd2:	4b65      	ldr	r3, [pc, #404]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	4a66      	ldr	r2, [pc, #408]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013bd8:	6812      	ldr	r2, [r2, #0]
 8013bda:	b291      	uxth	r1, r2
 8013bdc:	2201      	movs	r2, #1
 8013bde:	4618      	mov	r0, r3
 8013be0:	f004 f802 	bl	8017be8 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013be4:	4b60      	ldr	r3, [pc, #384]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4a61      	ldr	r2, [pc, #388]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013bea:	6812      	ldr	r2, [r2, #0]
 8013bec:	b291      	uxth	r1, r2
 8013bee:	2200      	movs	r2, #0
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f003 fff9 	bl	8017be8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8013bf6:	2364      	movs	r3, #100	; 0x64
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	4961      	ldr	r1, [pc, #388]	; (8013d80 <SPI_WriteInFlash+0x224>)
 8013bfc:	4861      	ldr	r0, [pc, #388]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013bfe:	f006 f895 	bl	8019d2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013c02:	4b59      	ldr	r3, [pc, #356]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4a5a      	ldr	r2, [pc, #360]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013c08:	6812      	ldr	r2, [r2, #0]
 8013c0a:	b291      	uxth	r1, r2
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f003 ffea 	bl	8017be8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013c14:	4b54      	ldr	r3, [pc, #336]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	4a55      	ldr	r2, [pc, #340]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013c1a:	6812      	ldr	r2, [r2, #0]
 8013c1c:	b291      	uxth	r1, r2
 8013c1e:	2200      	movs	r2, #0
 8013c20:	4618      	mov	r0, r3
 8013c22:	f003 ffe1 	bl	8017be8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8013c26:	2364      	movs	r3, #100	; 0x64
 8013c28:	2201      	movs	r2, #1
 8013c2a:	4957      	ldr	r1, [pc, #348]	; (8013d88 <SPI_WriteInFlash+0x22c>)
 8013c2c:	4855      	ldr	r0, [pc, #340]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013c2e:	f006 f87d 	bl	8019d2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013c32:	2364      	movs	r3, #100	; 0x64
 8013c34:	2201      	movs	r2, #1
 8013c36:	4955      	ldr	r1, [pc, #340]	; (8013d8c <SPI_WriteInFlash+0x230>)
 8013c38:	4852      	ldr	r0, [pc, #328]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013c3a:	f006 f9e5 	bl	801a008 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013c3e:	4b4a      	ldr	r3, [pc, #296]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	4a4b      	ldr	r2, [pc, #300]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013c44:	6812      	ldr	r2, [r2, #0]
 8013c46:	b291      	uxth	r1, r2
 8013c48:	2201      	movs	r2, #1
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f003 ffcc 	bl	8017be8 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013c50:	4b4e      	ldr	r3, [pc, #312]	; (8013d8c <SPI_WriteInFlash+0x230>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	f003 0302 	and.w	r3, r3, #2
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d103      	bne.n	8013c64 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8013c5c:	484c      	ldr	r0, [pc, #304]	; (8013d90 <SPI_WriteInFlash+0x234>)
 8013c5e:	f00e fae9 	bl	8022234 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013c62:	e7d7      	b.n	8013c14 <SPI_WriteInFlash+0xb8>
			break;
 8013c64:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013c66:	4b40      	ldr	r3, [pc, #256]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4a41      	ldr	r2, [pc, #260]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013c6c:	6812      	ldr	r2, [r2, #0]
 8013c6e:	b291      	uxth	r1, r2
 8013c70:	2200      	movs	r2, #0
 8013c72:	4618      	mov	r0, r3
 8013c74:	f003 ffb8 	bl	8017be8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8013c78:	2202      	movs	r2, #2
 8013c7a:	4b46      	ldr	r3, [pc, #280]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013c7c:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	0c1b      	lsrs	r3, r3, #16
 8013c82:	b2da      	uxtb	r2, r3
 8013c84:	4b43      	ldr	r3, [pc, #268]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013c86:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	0a1b      	lsrs	r3, r3, #8
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	4b41      	ldr	r3, [pc, #260]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013c90:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	b2da      	uxtb	r2, r3
 8013c96:	4b3f      	ldr	r3, [pc, #252]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013c98:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013c9a:	2364      	movs	r3, #100	; 0x64
 8013c9c:	2204      	movs	r2, #4
 8013c9e:	493d      	ldr	r1, [pc, #244]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013ca0:	4838      	ldr	r0, [pc, #224]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013ca2:	f006 f843 	bl	8019d2c <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8013ca6:	89ba      	ldrh	r2, [r7, #12]
 8013ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013cac:	6879      	ldr	r1, [r7, #4]
 8013cae:	4835      	ldr	r0, [pc, #212]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013cb0:	f006 f83c 	bl	8019d2c <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013cb4:	4b2c      	ldr	r3, [pc, #176]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4a2d      	ldr	r2, [pc, #180]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013cba:	6812      	ldr	r2, [r2, #0]
 8013cbc:	b291      	uxth	r1, r2
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f003 ff91 	bl	8017be8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013cc6:	4b28      	ldr	r3, [pc, #160]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4a29      	ldr	r2, [pc, #164]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013ccc:	6812      	ldr	r2, [r2, #0]
 8013cce:	b291      	uxth	r1, r2
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f003 ff88 	bl	8017be8 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013cd8:	2205      	movs	r2, #5
 8013cda:	4b2e      	ldr	r3, [pc, #184]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013cdc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013cde:	2364      	movs	r3, #100	; 0x64
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	492c      	ldr	r1, [pc, #176]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013ce4:	4827      	ldr	r0, [pc, #156]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013ce6:	f006 f821 	bl	8019d2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013cea:	2364      	movs	r3, #100	; 0x64
 8013cec:	2201      	movs	r2, #1
 8013cee:	4927      	ldr	r1, [pc, #156]	; (8013d8c <SPI_WriteInFlash+0x230>)
 8013cf0:	4824      	ldr	r0, [pc, #144]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013cf2:	f006 f989 	bl	801a008 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013cf6:	4b1c      	ldr	r3, [pc, #112]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a1d      	ldr	r2, [pc, #116]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013cfc:	6812      	ldr	r2, [r2, #0]
 8013cfe:	b291      	uxth	r1, r2
 8013d00:	2201      	movs	r2, #1
 8013d02:	4618      	mov	r0, r3
 8013d04:	f003 ff70 	bl	8017be8 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013d08:	4b20      	ldr	r3, [pc, #128]	; (8013d8c <SPI_WriteInFlash+0x230>)
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	f003 0301 	and.w	r3, r3, #1
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d1d8      	bne.n	8013cc6 <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8013d14:	2301      	movs	r3, #1
 8013d16:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8013d18:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d1a:	4b13      	ldr	r3, [pc, #76]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4a14      	ldr	r2, [pc, #80]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013d20:	6812      	ldr	r2, [r2, #0]
 8013d22:	b291      	uxth	r1, r2
 8013d24:	2200      	movs	r2, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f003 ff5e 	bl	8017be8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013d2c:	2204      	movs	r2, #4
 8013d2e:	4b19      	ldr	r3, [pc, #100]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013d30:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013d32:	2364      	movs	r3, #100	; 0x64
 8013d34:	2201      	movs	r2, #1
 8013d36:	4917      	ldr	r1, [pc, #92]	; (8013d94 <SPI_WriteInFlash+0x238>)
 8013d38:	4812      	ldr	r0, [pc, #72]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013d3a:	f005 fff7 	bl	8019d2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013d3e:	2364      	movs	r3, #100	; 0x64
 8013d40:	2201      	movs	r2, #1
 8013d42:	4912      	ldr	r1, [pc, #72]	; (8013d8c <SPI_WriteInFlash+0x230>)
 8013d44:	480f      	ldr	r0, [pc, #60]	; (8013d84 <SPI_WriteInFlash+0x228>)
 8013d46:	f006 f95f 	bl	801a008 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d4a:	4b07      	ldr	r3, [pc, #28]	; (8013d68 <SPI_WriteInFlash+0x20c>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a08      	ldr	r2, [pc, #32]	; (8013d70 <SPI_WriteInFlash+0x214>)
 8013d50:	6812      	ldr	r2, [r2, #0]
 8013d52:	b291      	uxth	r1, r2
 8013d54:	2201      	movs	r2, #1
 8013d56:	4618      	mov	r0, r3
 8013d58:	f003 ff46 	bl	8017be8 <HAL_GPIO_WritePin>

	return Return_Value;
 8013d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	20009d10 	.word	0x20009d10
 8013d6c:	40021800 	.word	0x40021800
 8013d70:	20009d14 	.word	0x20009d14
 8013d74:	40020c00 	.word	0x40020c00
 8013d78:	40021000 	.word	0x40021000
 8013d7c:	08026e34 	.word	0x08026e34
 8013d80:	08028aa4 	.word	0x08028aa4
 8013d84:	20009d1c 	.word	0x20009d1c
 8013d88:	08028aa5 	.word	0x08028aa5
 8013d8c:	20009d0c 	.word	0x20009d0c
 8013d90:	08026e4c 	.word	0x08026e4c
 8013d94:	20009d08 	.word	0x20009d08

08013d98 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	4603      	mov	r3, r0
 8013da0:	6039      	str	r1, [r7, #0]
 8013da2:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8013da4:	2300      	movs	r3, #0
 8013da6:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8013da8:	79fb      	ldrb	r3, [r7, #7]
 8013daa:	3b01      	subs	r3, #1
 8013dac:	2b03      	cmp	r3, #3
 8013dae:	d829      	bhi.n	8013e04 <SPI_MemoryEraseBySector+0x6c>
 8013db0:	a201      	add	r2, pc, #4	; (adr r2, 8013db8 <SPI_MemoryEraseBySector+0x20>)
 8013db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db6:	bf00      	nop
 8013db8:	08013dc9 	.word	0x08013dc9
 8013dbc:	08013dd9 	.word	0x08013dd9
 8013dc0:	08013de7 	.word	0x08013de7
 8013dc4:	08013df5 	.word	0x08013df5
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013dc8:	4b6d      	ldr	r3, [pc, #436]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013dca:	4a6e      	ldr	r2, [pc, #440]	; (8013f84 <SPI_MemoryEraseBySector+0x1ec>)
 8013dcc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013dce:	4b6e      	ldr	r3, [pc, #440]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013dd4:	601a      	str	r2, [r3, #0]
		break;
 8013dd6:	e018      	b.n	8013e0a <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013dd8:	4b69      	ldr	r3, [pc, #420]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013dda:	4a6c      	ldr	r2, [pc, #432]	; (8013f8c <SPI_MemoryEraseBySector+0x1f4>)
 8013ddc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013dde:	4b6a      	ldr	r3, [pc, #424]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013de0:	2220      	movs	r2, #32
 8013de2:	601a      	str	r2, [r3, #0]
		break;
 8013de4:	e011      	b.n	8013e0a <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013de6:	4b66      	ldr	r3, [pc, #408]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013de8:	4a68      	ldr	r2, [pc, #416]	; (8013f8c <SPI_MemoryEraseBySector+0x1f4>)
 8013dea:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013dec:	4b66      	ldr	r3, [pc, #408]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013dee:	2240      	movs	r2, #64	; 0x40
 8013df0:	601a      	str	r2, [r3, #0]
		break;
 8013df2:	e00a      	b.n	8013e0a <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8013df4:	4b62      	ldr	r3, [pc, #392]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013df6:	4a66      	ldr	r2, [pc, #408]	; (8013f90 <SPI_MemoryEraseBySector+0x1f8>)
 8013df8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013dfa:	4b63      	ldr	r3, [pc, #396]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013dfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013e00:	601a      	str	r2, [r3, #0]
		break;
 8013e02:	e002      	b.n	8013e0a <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8013e04:	4863      	ldr	r0, [pc, #396]	; (8013f94 <SPI_MemoryEraseBySector+0x1fc>)
 8013e06:	f00e fab1 	bl	802236c <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e0a:	4b5d      	ldr	r3, [pc, #372]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	4a5e      	ldr	r2, [pc, #376]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013e10:	6812      	ldr	r2, [r2, #0]
 8013e12:	b291      	uxth	r1, r2
 8013e14:	2200      	movs	r2, #0
 8013e16:	4618      	mov	r0, r3
 8013e18:	f003 fee6 	bl	8017be8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8013e1c:	2364      	movs	r3, #100	; 0x64
 8013e1e:	2201      	movs	r2, #1
 8013e20:	495d      	ldr	r1, [pc, #372]	; (8013f98 <SPI_MemoryEraseBySector+0x200>)
 8013e22:	485e      	ldr	r0, [pc, #376]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013e24:	f005 ff82 	bl	8019d2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e28:	4b55      	ldr	r3, [pc, #340]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4a56      	ldr	r2, [pc, #344]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013e2e:	6812      	ldr	r2, [r2, #0]
 8013e30:	b291      	uxth	r1, r2
 8013e32:	2201      	movs	r2, #1
 8013e34:	4618      	mov	r0, r3
 8013e36:	f003 fed7 	bl	8017be8 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e3a:	4b51      	ldr	r3, [pc, #324]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4a52      	ldr	r2, [pc, #328]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013e40:	6812      	ldr	r2, [r2, #0]
 8013e42:	b291      	uxth	r1, r2
 8013e44:	2200      	movs	r2, #0
 8013e46:	4618      	mov	r0, r3
 8013e48:	f003 fece 	bl	8017be8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8013e4c:	2364      	movs	r3, #100	; 0x64
 8013e4e:	2201      	movs	r2, #1
 8013e50:	4953      	ldr	r1, [pc, #332]	; (8013fa0 <SPI_MemoryEraseBySector+0x208>)
 8013e52:	4852      	ldr	r0, [pc, #328]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013e54:	f005 ff6a 	bl	8019d2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013e58:	2364      	movs	r3, #100	; 0x64
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	4951      	ldr	r1, [pc, #324]	; (8013fa4 <SPI_MemoryEraseBySector+0x20c>)
 8013e5e:	484f      	ldr	r0, [pc, #316]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013e60:	f006 f8d2 	bl	801a008 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e64:	4b46      	ldr	r3, [pc, #280]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4a47      	ldr	r2, [pc, #284]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013e6a:	6812      	ldr	r2, [r2, #0]
 8013e6c:	b291      	uxth	r1, r2
 8013e6e:	2201      	movs	r2, #1
 8013e70:	4618      	mov	r0, r3
 8013e72:	f003 feb9 	bl	8017be8 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013e76:	4b4b      	ldr	r3, [pc, #300]	; (8013fa4 <SPI_MemoryEraseBySector+0x20c>)
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	f003 0302 	and.w	r3, r3, #2
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d103      	bne.n	8013e8a <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8013e82:	4849      	ldr	r0, [pc, #292]	; (8013fa8 <SPI_MemoryEraseBySector+0x210>)
 8013e84:	f00e f9d6 	bl	8022234 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e88:	e7d7      	b.n	8013e3a <SPI_MemoryEraseBySector+0xa2>
			break;
 8013e8a:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e8c:	4b3c      	ldr	r3, [pc, #240]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a3d      	ldr	r2, [pc, #244]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013e92:	6812      	ldr	r2, [r2, #0]
 8013e94:	b291      	uxth	r1, r2
 8013e96:	2200      	movs	r2, #0
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f003 fea5 	bl	8017be8 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8013e9e:	4b43      	ldr	r3, [pc, #268]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013ea0:	2220      	movs	r2, #32
 8013ea2:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	0c1b      	lsrs	r3, r3, #16
 8013ea8:	b2da      	uxtb	r2, r3
 8013eaa:	4b40      	ldr	r3, [pc, #256]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013eac:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	0a1b      	lsrs	r3, r3, #8
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	4b3d      	ldr	r3, [pc, #244]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013eb6:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	4b3b      	ldr	r3, [pc, #236]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013ebe:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013ec0:	2364      	movs	r3, #100	; 0x64
 8013ec2:	2204      	movs	r2, #4
 8013ec4:	4939      	ldr	r1, [pc, #228]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013ec6:	4835      	ldr	r0, [pc, #212]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013ec8:	f005 ff30 	bl	8019d2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013ecc:	4b2c      	ldr	r3, [pc, #176]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4a2d      	ldr	r2, [pc, #180]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013ed2:	6812      	ldr	r2, [r2, #0]
 8013ed4:	b291      	uxth	r1, r2
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f003 fe85 	bl	8017be8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013ede:	4b28      	ldr	r3, [pc, #160]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4a29      	ldr	r2, [pc, #164]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013ee4:	6812      	ldr	r2, [r2, #0]
 8013ee6:	b291      	uxth	r1, r2
 8013ee8:	2200      	movs	r2, #0
 8013eea:	4618      	mov	r0, r3
 8013eec:	f003 fe7c 	bl	8017be8 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013ef0:	2205      	movs	r2, #5
 8013ef2:	4b2e      	ldr	r3, [pc, #184]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013ef4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013ef6:	2364      	movs	r3, #100	; 0x64
 8013ef8:	2201      	movs	r2, #1
 8013efa:	492c      	ldr	r1, [pc, #176]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013efc:	4827      	ldr	r0, [pc, #156]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013efe:	f005 ff15 	bl	8019d2c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013f02:	2364      	movs	r3, #100	; 0x64
 8013f04:	2201      	movs	r2, #1
 8013f06:	4927      	ldr	r1, [pc, #156]	; (8013fa4 <SPI_MemoryEraseBySector+0x20c>)
 8013f08:	4824      	ldr	r0, [pc, #144]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013f0a:	f006 f87d 	bl	801a008 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013f0e:	4b1c      	ldr	r3, [pc, #112]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4a1d      	ldr	r2, [pc, #116]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013f14:	6812      	ldr	r2, [r2, #0]
 8013f16:	b291      	uxth	r1, r2
 8013f18:	2201      	movs	r2, #1
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f003 fe64 	bl	8017be8 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013f20:	4b20      	ldr	r3, [pc, #128]	; (8013fa4 <SPI_MemoryEraseBySector+0x20c>)
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	f003 0301 	and.w	r3, r3, #1
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1d8      	bne.n	8013ede <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8013f30:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013f32:	4b13      	ldr	r3, [pc, #76]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4a14      	ldr	r2, [pc, #80]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013f38:	6812      	ldr	r2, [r2, #0]
 8013f3a:	b291      	uxth	r1, r2
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f003 fe52 	bl	8017be8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013f44:	2204      	movs	r2, #4
 8013f46:	4b19      	ldr	r3, [pc, #100]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013f48:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013f4a:	2364      	movs	r3, #100	; 0x64
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	4917      	ldr	r1, [pc, #92]	; (8013fac <SPI_MemoryEraseBySector+0x214>)
 8013f50:	4812      	ldr	r0, [pc, #72]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013f52:	f005 feeb 	bl	8019d2c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013f56:	2364      	movs	r3, #100	; 0x64
 8013f58:	2201      	movs	r2, #1
 8013f5a:	4912      	ldr	r1, [pc, #72]	; (8013fa4 <SPI_MemoryEraseBySector+0x20c>)
 8013f5c:	480f      	ldr	r0, [pc, #60]	; (8013f9c <SPI_MemoryEraseBySector+0x204>)
 8013f5e:	f006 f853 	bl	801a008 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013f62:	4b07      	ldr	r3, [pc, #28]	; (8013f80 <SPI_MemoryEraseBySector+0x1e8>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	4a08      	ldr	r2, [pc, #32]	; (8013f88 <SPI_MemoryEraseBySector+0x1f0>)
 8013f68:	6812      	ldr	r2, [r2, #0]
 8013f6a:	b291      	uxth	r1, r2
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f003 fe3a 	bl	8017be8 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8013f74:	68fb      	ldr	r3, [r7, #12]

}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	20009d10 	.word	0x20009d10
 8013f84:	40021800 	.word	0x40021800
 8013f88:	20009d14 	.word	0x20009d14
 8013f8c:	40020c00 	.word	0x40020c00
 8013f90:	40021000 	.word	0x40021000
 8013f94:	08026e34 	.word	0x08026e34
 8013f98:	08028aa4 	.word	0x08028aa4
 8013f9c:	20009d1c 	.word	0x20009d1c
 8013fa0:	08028aa5 	.word	0x08028aa5
 8013fa4:	20009d0c 	.word	0x20009d0c
 8013fa8:	08026e70 	.word	0x08026e70
 8013fac:	20009d08 	.word	0x20009d08

08013fb0 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60b9      	str	r1, [r7, #8]
 8013fb8:	607b      	str	r3, [r7, #4]
 8013fba:	4603      	mov	r3, r0
 8013fbc:	73fb      	strb	r3, [r7, #15]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8013fc2:	7bfb      	ldrb	r3, [r7, #15]
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	2b03      	cmp	r3, #3
 8013fc8:	d828      	bhi.n	801401c <SPI_ReadFromFlash+0x6c>
 8013fca:	a201      	add	r2, pc, #4	; (adr r2, 8013fd0 <SPI_ReadFromFlash+0x20>)
 8013fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd0:	08013fe1 	.word	0x08013fe1
 8013fd4:	08013ff1 	.word	0x08013ff1
 8013fd8:	08013fff 	.word	0x08013fff
 8013fdc:	0801400d 	.word	0x0801400d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013fe0:	4b2d      	ldr	r3, [pc, #180]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 8013fe2:	4a2e      	ldr	r2, [pc, #184]	; (801409c <SPI_ReadFromFlash+0xec>)
 8013fe4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013fe6:	4b2e      	ldr	r3, [pc, #184]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8013fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013fec:	601a      	str	r2, [r3, #0]
		break;
 8013fee:	e018      	b.n	8014022 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013ff0:	4b29      	ldr	r3, [pc, #164]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 8013ff2:	4a2c      	ldr	r2, [pc, #176]	; (80140a4 <SPI_ReadFromFlash+0xf4>)
 8013ff4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013ff6:	4b2a      	ldr	r3, [pc, #168]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8013ff8:	2220      	movs	r2, #32
 8013ffa:	601a      	str	r2, [r3, #0]
		break;
 8013ffc:	e011      	b.n	8014022 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013ffe:	4b26      	ldr	r3, [pc, #152]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 8014000:	4a28      	ldr	r2, [pc, #160]	; (80140a4 <SPI_ReadFromFlash+0xf4>)
 8014002:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8014004:	4b26      	ldr	r3, [pc, #152]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8014006:	2240      	movs	r2, #64	; 0x40
 8014008:	601a      	str	r2, [r3, #0]
		break;
 801400a:	e00a      	b.n	8014022 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 801400c:	4b22      	ldr	r3, [pc, #136]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 801400e:	4a26      	ldr	r2, [pc, #152]	; (80140a8 <SPI_ReadFromFlash+0xf8>)
 8014010:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014012:	4b23      	ldr	r3, [pc, #140]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8014014:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014018:	601a      	str	r2, [r3, #0]
		break;
 801401a:	e002      	b.n	8014022 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 801401c:	4823      	ldr	r0, [pc, #140]	; (80140ac <SPI_ReadFromFlash+0xfc>)
 801401e:	f00e f9a5 	bl	802236c <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8014022:	89bb      	ldrh	r3, [r7, #12]
 8014024:	461a      	mov	r2, r3
 8014026:	2100      	movs	r1, #0
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f00e f81b 	bl	8022064 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801402e:	4b1a      	ldr	r3, [pc, #104]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a1b      	ldr	r2, [pc, #108]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8014034:	6812      	ldr	r2, [r2, #0]
 8014036:	b291      	uxth	r1, r2
 8014038:	2200      	movs	r2, #0
 801403a:	4618      	mov	r0, r3
 801403c:	f003 fdd4 	bl	8017be8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8014040:	2203      	movs	r2, #3
 8014042:	4b1b      	ldr	r3, [pc, #108]	; (80140b0 <SPI_ReadFromFlash+0x100>)
 8014044:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	0c1b      	lsrs	r3, r3, #16
 801404a:	b2da      	uxtb	r2, r3
 801404c:	4b18      	ldr	r3, [pc, #96]	; (80140b0 <SPI_ReadFromFlash+0x100>)
 801404e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	0a1b      	lsrs	r3, r3, #8
 8014054:	b2da      	uxtb	r2, r3
 8014056:	4b16      	ldr	r3, [pc, #88]	; (80140b0 <SPI_ReadFromFlash+0x100>)
 8014058:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	b2da      	uxtb	r2, r3
 801405e:	4b14      	ldr	r3, [pc, #80]	; (80140b0 <SPI_ReadFromFlash+0x100>)
 8014060:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014062:	2364      	movs	r3, #100	; 0x64
 8014064:	2204      	movs	r2, #4
 8014066:	4912      	ldr	r1, [pc, #72]	; (80140b0 <SPI_ReadFromFlash+0x100>)
 8014068:	4812      	ldr	r0, [pc, #72]	; (80140b4 <SPI_ReadFromFlash+0x104>)
 801406a:	f005 fe5f 	bl	8019d2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 801406e:	89ba      	ldrh	r2, [r7, #12]
 8014070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014074:	6879      	ldr	r1, [r7, #4]
 8014076:	480f      	ldr	r0, [pc, #60]	; (80140b4 <SPI_ReadFromFlash+0x104>)
 8014078:	f005 ffc6 	bl	801a008 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801407c:	4b06      	ldr	r3, [pc, #24]	; (8014098 <SPI_ReadFromFlash+0xe8>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4a07      	ldr	r2, [pc, #28]	; (80140a0 <SPI_ReadFromFlash+0xf0>)
 8014082:	6812      	ldr	r2, [r2, #0]
 8014084:	b291      	uxth	r1, r2
 8014086:	2201      	movs	r2, #1
 8014088:	4618      	mov	r0, r3
 801408a:	f003 fdad 	bl	8017be8 <HAL_GPIO_WritePin>

}
 801408e:	bf00      	nop
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20009d10 	.word	0x20009d10
 801409c:	40021800 	.word	0x40021800
 80140a0:	20009d14 	.word	0x20009d14
 80140a4:	40020c00 	.word	0x40020c00
 80140a8:	40021000 	.word	0x40021000
 80140ac:	08026e34 	.word	0x08026e34
 80140b0:	20009d08 	.word	0x20009d08
 80140b4:	20009d1c 	.word	0x20009d1c

080140b8 <Get_Config>:




void Get_Config(void)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b084      	sub	sp, #16
 80140bc:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80140be:	2300      	movs	r3, #0
 80140c0:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 80140c2:	f240 3346 	movw	r3, #838	; 0x346
 80140c6:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80140cc:	2300      	movs	r3, #0
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e01d      	b.n	801410e <Get_Config+0x56>
	{
		HAL_Delay(20);
 80140d2:	2014      	movs	r0, #20
 80140d4:	f001 f9b8 	bl	8015448 <HAL_Delay>
		if(SIZE_VAR <32)
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	2b1f      	cmp	r3, #31
 80140dc:	d809      	bhi.n	80140f2 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	492c      	ldr	r1, [pc, #176]	; (8014198 <Get_Config+0xe0>)
 80140e6:	440b      	add	r3, r1
 80140e8:	68f9      	ldr	r1, [r7, #12]
 80140ea:	2001      	movs	r0, #1
 80140ec:	f7ff ff60 	bl	8013fb0 <SPI_ReadFromFlash>
 80140f0:	e00a      	b.n	8014108 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	4a28      	ldr	r2, [pc, #160]	; (8014198 <Get_Config+0xe0>)
 80140f6:	4413      	add	r3, r2
 80140f8:	2220      	movs	r2, #32
 80140fa:	68f9      	ldr	r1, [r7, #12]
 80140fc:	2001      	movs	r0, #1
 80140fe:	f7ff ff57 	bl	8013fb0 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	3b20      	subs	r3, #32
 8014106:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3320      	adds	r3, #32
 801410c:	60fb      	str	r3, [r7, #12]
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	429a      	cmp	r2, r3
 8014114:	d3dd      	bcc.n	80140d2 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8014116:	f44f 7151 	mov.w	r1, #836	; 0x344
 801411a:	481f      	ldr	r0, [pc, #124]	; (8014198 <Get_Config+0xe0>)
 801411c:	f7fe fca2 	bl	8012a64 <CheckCRC>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d013      	beq.n	801414e <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8014126:	f44f 7250 	mov.w	r2, #832	; 0x340
 801412a:	491c      	ldr	r1, [pc, #112]	; (801419c <Get_Config+0xe4>)
 801412c:	481c      	ldr	r0, [pc, #112]	; (80141a0 <Get_Config+0xe8>)
 801412e:	f00d ff71 	bl	8022014 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8014132:	4a1c      	ldr	r2, [pc, #112]	; (80141a4 <Get_Config+0xec>)
 8014134:	2110      	movs	r1, #16
 8014136:	2000      	movs	r0, #0
 8014138:	f7ec fa6c 	bl	8000614 <ExtractBits>
 801413c:	4603      	mov	r3, r0
 801413e:	b29a      	uxth	r2, r3
 8014140:	4b19      	ldr	r3, [pc, #100]	; (80141a8 <Get_Config+0xf0>)
 8014142:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8014144:	4b19      	ldr	r3, [pc, #100]	; (80141ac <Get_Config+0xf4>)
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d121      	bne.n	8014190 <Get_Config+0xd8>
 801414c:	e01e      	b.n	801418c <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 801414e:	f44f 7151 	mov.w	r1, #836	; 0x344
 8014152:	4817      	ldr	r0, [pc, #92]	; (80141b0 <Get_Config+0xf8>)
 8014154:	f00e f86e 	bl	8022234 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014158:	4b16      	ldr	r3, [pc, #88]	; (80141b4 <Get_Config+0xfc>)
 801415a:	4a10      	ldr	r2, [pc, #64]	; (801419c <Get_Config+0xe4>)
 801415c:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 801415e:	4b0e      	ldr	r3, [pc, #56]	; (8014198 <Get_Config+0xe0>)
 8014160:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8014164:	4619      	mov	r1, r3
 8014166:	4b0c      	ldr	r3, [pc, #48]	; (8014198 <Get_Config+0xe0>)
 8014168:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 801416c:	461a      	mov	r2, r3
 801416e:	4812      	ldr	r0, [pc, #72]	; (80141b8 <Get_Config+0x100>)
 8014170:	f00e f860 	bl	8022234 <iprintf>
		printf("\nCheck for CRC:");
 8014174:	4811      	ldr	r0, [pc, #68]	; (80141bc <Get_Config+0x104>)
 8014176:	f00e f85d 	bl	8022234 <iprintf>
		gucFlagUpdate =3;
 801417a:	4b11      	ldr	r3, [pc, #68]	; (80141c0 <Get_Config+0x108>)
 801417c:	2203      	movs	r2, #3
 801417e:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8014180:	4810      	ldr	r0, [pc, #64]	; (80141c4 <Get_Config+0x10c>)
 8014182:	f00e f8f3 	bl	802236c <puts>
			Data_Processing();
 8014186:	f000 f81f 	bl	80141c8 <Data_Processing>
 801418a:	e7fc      	b.n	8014186 <Get_Config+0xce>
	{
		readCanToStructs();
 801418c:	f7fb fdfc 	bl	800fd88 <readCanToStructs>
	}
}
 8014190:	bf00      	nop
 8014192:	3710      	adds	r7, #16
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}
 8014198:	20000648 	.word	0x20000648
 801419c:	2000064c 	.word	0x2000064c
 80141a0:	20000304 	.word	0x20000304
 80141a4:	2000098c 	.word	0x2000098c
 80141a8:	20009d1a 	.word	0x20009d1a
 80141ac:	20000a4b 	.word	0x20000a4b
 80141b0:	08026ea0 	.word	0x08026ea0
 80141b4:	20000300 	.word	0x20000300
 80141b8:	08026ec8 	.word	0x08026ec8
 80141bc:	08026edc 	.word	0x08026edc
 80141c0:	20000a49 	.word	0x20000a49
 80141c4:	08026eec 	.word	0x08026eec

080141c8 <Data_Processing>:


void Data_Processing(void)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80141cc:	4b0b      	ldr	r3, [pc, #44]	; (80141fc <Data_Processing+0x34>)
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b03      	cmp	r3, #3
 80141d2:	d10e      	bne.n	80141f2 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80141d4:	2000      	movs	r0, #0
 80141d6:	f7f6 fe4f 	bl	800ae78 <CheckForRqst>
 80141da:	4603      	mov	r3, r0
 80141dc:	461a      	mov	r2, r3
 80141de:	4b08      	ldr	r3, [pc, #32]	; (8014200 <Data_Processing+0x38>)
 80141e0:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80141e2:	4b07      	ldr	r3, [pc, #28]	; (8014200 <Data_Processing+0x38>)
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	2b01      	cmp	r3, #1
 80141e8:	d105      	bne.n	80141f6 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80141ea:	2000      	movs	r0, #0
 80141ec:	f000 f80a 	bl	8014204 <AutoLoadDat>
		}
		break;
 80141f0:	e001      	b.n	80141f6 <Data_Processing+0x2e>
	default:
		break;
 80141f2:	bf00      	nop
 80141f4:	e000      	b.n	80141f8 <Data_Processing+0x30>
		break;
 80141f6:	bf00      	nop
	}
}
 80141f8:	bf00      	nop
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	20000a49 	.word	0x20000a49
 8014200:	20000a4a 	.word	0x20000a4a

08014204 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	4603      	mov	r3, r0
 801420c:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 801420e:	2300      	movs	r3, #0
 8014210:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	b29b      	uxth	r3, r3
 8014216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801421a:	4934      	ldr	r1, [pc, #208]	; (80142ec <AutoLoadDat+0xe8>)
 801421c:	4618      	mov	r0, r3
 801421e:	f7f6 ffd3 	bl	800b1c8 <ReadAndFormConfig>
 8014222:	4603      	mov	r3, r0
 8014224:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8014226:	4832      	ldr	r0, [pc, #200]	; (80142f0 <AutoLoadDat+0xec>)
 8014228:	f004 fb74 	bl	8018914 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801422c:	7bbb      	ldrb	r3, [r7, #14]
 801422e:	2b01      	cmp	r3, #1
 8014230:	d921      	bls.n	8014276 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8014232:	4b30      	ldr	r3, [pc, #192]	; (80142f4 <AutoLoadDat+0xf0>)
 8014234:	2200      	movs	r2, #0
 8014236:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8014238:	4b2c      	ldr	r3, [pc, #176]	; (80142ec <AutoLoadDat+0xe8>)
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d107      	bne.n	8014250 <AutoLoadDat+0x4c>
 8014240:	4b2a      	ldr	r3, [pc, #168]	; (80142ec <AutoLoadDat+0xe8>)
 8014242:	789b      	ldrb	r3, [r3, #2]
 8014244:	2b01      	cmp	r3, #1
 8014246:	d103      	bne.n	8014250 <AutoLoadDat+0x4c>
 8014248:	4b28      	ldr	r3, [pc, #160]	; (80142ec <AutoLoadDat+0xe8>)
 801424a:	78db      	ldrb	r3, [r3, #3]
 801424c:	2b04      	cmp	r3, #4
 801424e:	d003      	beq.n	8014258 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8014250:	4829      	ldr	r0, [pc, #164]	; (80142f8 <AutoLoadDat+0xf4>)
 8014252:	f00e f88b 	bl	802236c <puts>
				return;
 8014256:	e046      	b.n	80142e6 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014258:	4b28      	ldr	r3, [pc, #160]	; (80142fc <AutoLoadDat+0xf8>)
 801425a:	4a29      	ldr	r2, [pc, #164]	; (8014300 <AutoLoadDat+0xfc>)
 801425c:	601a      	str	r2, [r3, #0]
			saveConfig();
 801425e:	f000 f85b 	bl	8014318 <saveConfig>
			gucFlagCheck =1;
 8014262:	4b28      	ldr	r3, [pc, #160]	; (8014304 <AutoLoadDat+0x100>)
 8014264:	2201      	movs	r2, #1
 8014266:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8014268:	4b27      	ldr	r3, [pc, #156]	; (8014308 <AutoLoadDat+0x104>)
 801426a:	2201      	movs	r2, #1
 801426c:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 801426e:	4827      	ldr	r0, [pc, #156]	; (801430c <AutoLoadDat+0x108>)
 8014270:	f00e f87c 	bl	802236c <puts>
			break;
 8014274:	e037      	b.n	80142e6 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 8014276:	7bbb      	ldrb	r3, [r7, #14]
 8014278:	2b01      	cmp	r3, #1
 801427a:	d11b      	bne.n	80142b4 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 801427c:	7bfb      	ldrb	r3, [r7, #15]
 801427e:	2b03      	cmp	r3, #3
 8014280:	d109      	bne.n	8014296 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 8014282:	4b1c      	ldr	r3, [pc, #112]	; (80142f4 <AutoLoadDat+0xf0>)
 8014284:	2200      	movs	r2, #0
 8014286:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8014288:	79fb      	ldrb	r3, [r7, #7]
 801428a:	2203      	movs	r2, #3
 801428c:	2101      	movs	r1, #1
 801428e:	4618      	mov	r0, r3
 8014290:	f7f6 ff4e 	bl	800b130 <SendAck>
				break;
 8014294:	e027      	b.n	80142e6 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	2202      	movs	r2, #2
 801429a:	2101      	movs	r1, #1
 801429c:	4618      	mov	r0, r3
 801429e:	f7f6 ff47 	bl	800b130 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 80142a2:	f001 f8c5 	bl	8015430 <HAL_GetTick>
 80142a6:	4603      	mov	r3, r0
 80142a8:	4a19      	ldr	r2, [pc, #100]	; (8014310 <AutoLoadDat+0x10c>)
 80142aa:	6013      	str	r3, [r2, #0]
			AckCount++;
 80142ac:	7bfb      	ldrb	r3, [r7, #15]
 80142ae:	3301      	adds	r3, #1
 80142b0:	73fb      	strb	r3, [r7, #15]
 80142b2:	e7ae      	b.n	8014212 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80142b4:	f001 f8bc 	bl	8015430 <HAL_GetTick>
 80142b8:	4602      	mov	r2, r0
 80142ba:	4b15      	ldr	r3, [pc, #84]	; (8014310 <AutoLoadDat+0x10c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	bfb8      	it	lt
 80142c4:	425b      	neglt	r3, r3
 80142c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80142ca:	4293      	cmp	r3, r2
 80142cc:	dda1      	ble.n	8014212 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <AutoLoadDat+0xf0>)
 80142d0:	2200      	movs	r2, #0
 80142d2:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80142d4:	480f      	ldr	r0, [pc, #60]	; (8014314 <AutoLoadDat+0x110>)
 80142d6:	f00e f849 	bl	802236c <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80142da:	79fb      	ldrb	r3, [r7, #7]
 80142dc:	2205      	movs	r2, #5
 80142de:	2101      	movs	r1, #1
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f6 ff25 	bl	800b130 <SendAck>
				break;
			}
		}
	}
}
 80142e6:	3710      	adds	r7, #16
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}
 80142ec:	20000648 	.word	0x20000648
 80142f0:	20009ce4 	.word	0x20009ce4
 80142f4:	20000a4a 	.word	0x20000a4a
 80142f8:	08026f2c 	.word	0x08026f2c
 80142fc:	20000300 	.word	0x20000300
 8014300:	2000064c 	.word	0x2000064c
 8014304:	20009d04 	.word	0x20009d04
 8014308:	20009d05 	.word	0x20009d05
 801430c:	08026f44 	.word	0x08026f44
 8014310:	20000a4c 	.word	0x20000a4c
 8014314:	08026f54 	.word	0x08026f54

08014318 <saveConfig>:

unsigned char saveConfig(void)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8014322:	4825      	ldr	r0, [pc, #148]	; (80143b8 <saveConfig+0xa0>)
 8014324:	f00e f822 	bl	802236c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014328:	2300      	movs	r3, #0
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	e011      	b.n	8014352 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	031b      	lsls	r3, r3, #12
 8014332:	4619      	mov	r1, r3
 8014334:	2001      	movs	r0, #1
 8014336:	f7ff fd2f 	bl	8013d98 <SPI_MemoryEraseBySector>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d005      	beq.n	801434c <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8014340:	481e      	ldr	r0, [pc, #120]	; (80143bc <saveConfig+0xa4>)
 8014342:	f004 fae7 	bl	8018914 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 8014346:	481e      	ldr	r0, [pc, #120]	; (80143c0 <saveConfig+0xa8>)
 8014348:	f00e f810 	bl	802236c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	3301      	adds	r3, #1
 8014350:	60fb      	str	r3, [r7, #12]
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2b05      	cmp	r3, #5
 8014356:	d9ea      	bls.n	801432e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8014358:	f240 3347 	movw	r3, #839	; 0x347
 801435c:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014362:	2300      	movs	r3, #0
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	e01d      	b.n	80143a4 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8014368:	4814      	ldr	r0, [pc, #80]	; (80143bc <saveConfig+0xa4>)
 801436a:	f004 fad3 	bl	8018914 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	2b1f      	cmp	r3, #31
 8014372:	d809      	bhi.n	8014388 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	b29a      	uxth	r2, r3
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	4912      	ldr	r1, [pc, #72]	; (80143c4 <saveConfig+0xac>)
 801437c:	440b      	add	r3, r1
 801437e:	68f9      	ldr	r1, [r7, #12]
 8014380:	2001      	movs	r0, #1
 8014382:	f7ff fbeb 	bl	8013b5c <SPI_WriteInFlash>
 8014386:	e00a      	b.n	801439e <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4a0e      	ldr	r2, [pc, #56]	; (80143c4 <saveConfig+0xac>)
 801438c:	4413      	add	r3, r2
 801438e:	2220      	movs	r2, #32
 8014390:	68f9      	ldr	r1, [r7, #12]
 8014392:	2001      	movs	r0, #1
 8014394:	f7ff fbe2 	bl	8013b5c <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	3b20      	subs	r3, #32
 801439c:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3320      	adds	r3, #32
 80143a2:	60fb      	str	r3, [r7, #12]
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d3dd      	bcc.n	8014368 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 80143ac:	4806      	ldr	r0, [pc, #24]	; (80143c8 <saveConfig+0xb0>)
 80143ae:	f00d ff41 	bl	8022234 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80143b2:	f7ff faff 	bl	80139b4 <__NVIC_SystemReset>
 80143b6:	bf00      	nop
 80143b8:	08026f70 	.word	0x08026f70
 80143bc:	20009ce4 	.word	0x20009ce4
 80143c0:	08026f7c 	.word	0x08026f7c
 80143c4:	20000648 	.word	0x20000648
 80143c8:	08026f90 	.word	0x08026f90

080143cc <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80143d0:	4b14      	ldr	r3, [pc, #80]	; (8014424 <Print_BuildDat_Details+0x58>)
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d022      	beq.n	801441e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80143d8:	4b13      	ldr	r3, [pc, #76]	; (8014428 <Print_BuildDat_Details+0x5c>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7fa fd4b 	bl	800ee78 <HAL_Elaps_Ticks>
 80143e2:	4603      	mov	r3, r0
 80143e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80143e8:	4293      	cmp	r3, r2
 80143ea:	d919      	bls.n	8014420 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80143ec:	480f      	ldr	r0, [pc, #60]	; (801442c <Print_BuildDat_Details+0x60>)
 80143ee:	f00d ffbd 	bl	802236c <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80143f2:	490f      	ldr	r1, [pc, #60]	; (8014430 <Print_BuildDat_Details+0x64>)
 80143f4:	480f      	ldr	r0, [pc, #60]	; (8014434 <Print_BuildDat_Details+0x68>)
 80143f6:	f00d ff1d 	bl	8022234 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80143fa:	4b0f      	ldr	r3, [pc, #60]	; (8014438 <Print_BuildDat_Details+0x6c>)
 80143fc:	881b      	ldrh	r3, [r3, #0]
 80143fe:	4619      	mov	r1, r3
 8014400:	480e      	ldr	r0, [pc, #56]	; (801443c <Print_BuildDat_Details+0x70>)
 8014402:	f00d ff17 	bl	8022234 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8014406:	4b0e      	ldr	r3, [pc, #56]	; (8014440 <Print_BuildDat_Details+0x74>)
 8014408:	881b      	ldrh	r3, [r3, #0]
 801440a:	4619      	mov	r1, r3
 801440c:	480d      	ldr	r0, [pc, #52]	; (8014444 <Print_BuildDat_Details+0x78>)
 801440e:	f00d ff11 	bl	8022234 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014412:	f001 f80d 	bl	8015430 <HAL_GetTick>
 8014416:	4603      	mov	r3, r0
 8014418:	4a03      	ldr	r2, [pc, #12]	; (8014428 <Print_BuildDat_Details+0x5c>)
 801441a:	6013      	str	r3, [r2, #0]
 801441c:	e000      	b.n	8014420 <Print_BuildDat_Details+0x54>
		return;
 801441e:	bf00      	nop
	}
}
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	20000645 	.word	0x20000645
 8014428:	20009d80 	.word	0x20009d80
 801442c:	08026fac 	.word	0x08026fac
 8014430:	20000305 	.word	0x20000305
 8014434:	08026fe0 	.word	0x08026fe0
 8014438:	20009d1a 	.word	0x20009d1a
 801443c:	08026ff4 	.word	0x08026ff4
 8014440:	20009d18 	.word	0x20009d18
 8014444:	08027004 	.word	0x08027004

08014448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b082      	sub	sp, #8
 801444c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801444e:	4b0f      	ldr	r3, [pc, #60]	; (801448c <HAL_MspInit+0x44>)
 8014450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014452:	4a0e      	ldr	r2, [pc, #56]	; (801448c <HAL_MspInit+0x44>)
 8014454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014458:	6413      	str	r3, [r2, #64]	; 0x40
 801445a:	4b0c      	ldr	r3, [pc, #48]	; (801448c <HAL_MspInit+0x44>)
 801445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014462:	607b      	str	r3, [r7, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014466:	4b09      	ldr	r3, [pc, #36]	; (801448c <HAL_MspInit+0x44>)
 8014468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801446a:	4a08      	ldr	r2, [pc, #32]	; (801448c <HAL_MspInit+0x44>)
 801446c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014470:	6453      	str	r3, [r2, #68]	; 0x44
 8014472:	4b06      	ldr	r3, [pc, #24]	; (801448c <HAL_MspInit+0x44>)
 8014474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 801447e:	2004      	movs	r0, #4
 8014480:	f001 feb8 	bl	80161f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014484:	bf00      	nop
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	40023800 	.word	0x40023800

08014490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014490:	b480      	push	{r7}
 8014492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8014494:	e7fe      	b.n	8014494 <NMI_Handler+0x4>

08014496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014496:	b480      	push	{r7}
 8014498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801449a:	e7fe      	b.n	801449a <HardFault_Handler+0x4>

0801449c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801449c:	b480      	push	{r7}
 801449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80144a0:	e7fe      	b.n	80144a0 <MemManage_Handler+0x4>

080144a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80144a2:	b480      	push	{r7}
 80144a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80144a6:	e7fe      	b.n	80144a6 <BusFault_Handler+0x4>

080144a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80144a8:	b480      	push	{r7}
 80144aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80144ac:	e7fe      	b.n	80144ac <UsageFault_Handler+0x4>

080144ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80144ae:	b480      	push	{r7}
 80144b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80144b2:	bf00      	nop
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr

080144bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80144bc:	b480      	push	{r7}
 80144be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80144c0:	bf00      	nop
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr

080144ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80144ca:	b480      	push	{r7}
 80144cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80144ce:	bf00      	nop
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80144dc:	f000 ff94 	bl	8015408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80144e0:	bf00      	nop
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80144e8:	2001      	movs	r0, #1
 80144ea:	f003 fbb1 	bl	8017c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80144ee:	bf00      	nop
 80144f0:	bd80      	pop	{r7, pc}

080144f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80144f6:	2002      	movs	r0, #2
 80144f8:	f003 fbaa 	bl	8017c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80144fc:	bf00      	nop
 80144fe:	bd80      	pop	{r7, pc}

08014500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014504:	4802      	ldr	r0, [pc, #8]	; (8014510 <TIM4_IRQHandler+0x10>)
 8014506:	f006 fac7 	bl	801aa98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801450a:	bf00      	nop
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	20009d88 	.word	0x20009d88

08014514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014518:	4802      	ldr	r0, [pc, #8]	; (8014524 <USART1_IRQHandler+0x10>)
 801451a:	f006 fce1 	bl	801aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801451e:	bf00      	nop
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	2000bcbc 	.word	0x2000bcbc

08014528 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801452c:	4802      	ldr	r0, [pc, #8]	; (8014538 <TIM5_IRQHandler+0x10>)
 801452e:	f006 fab3 	bl	801aa98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014532:	bf00      	nop
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	20009e44 	.word	0x20009e44

0801453c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014540:	4802      	ldr	r0, [pc, #8]	; (801454c <UART4_IRQHandler+0x10>)
 8014542:	f006 fccd 	bl	801aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8014546:	bf00      	nop
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	2000ba94 	.word	0x2000ba94

08014550 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8014554:	4802      	ldr	r0, [pc, #8]	; (8014560 <UART5_IRQHandler+0x10>)
 8014556:	f006 fcc3 	bl	801aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801455a:	bf00      	nop
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	2000bb4c 	.word	0x2000bb4c

08014564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014568:	4802      	ldr	r0, [pc, #8]	; (8014574 <TIM6_DAC_IRQHandler+0x10>)
 801456a:	f006 fa95 	bl	801aa98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801456e:	bf00      	nop
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	20009f00 	.word	0x20009f00

08014578 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801457c:	4802      	ldr	r0, [pc, #8]	; (8014588 <TIM7_IRQHandler+0x10>)
 801457e:	f006 fa8b 	bl	801aa98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014582:	bf00      	nop
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	20009fbc 	.word	0x20009fbc

0801458c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014590:	4802      	ldr	r0, [pc, #8]	; (801459c <ETH_IRQHandler+0x10>)
 8014592:	f002 fa7f 	bl	8016a94 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8014596:	bf00      	nop
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	200106d0 	.word	0x200106d0

080145a0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80145a4:	4802      	ldr	r0, [pc, #8]	; (80145b0 <CAN2_RX0_IRQHandler+0x10>)
 80145a6:	f001 fb21 	bl	8015bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80145aa:	bf00      	nop
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20009b60 	.word	0x20009b60

080145b4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80145b8:	4802      	ldr	r0, [pc, #8]	; (80145c4 <CAN2_RX1_IRQHandler+0x10>)
 80145ba:	f001 fb17 	bl	8015bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80145be:	bf00      	nop
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20009b60 	.word	0x20009b60

080145c8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80145cc:	4802      	ldr	r0, [pc, #8]	; (80145d8 <UART7_IRQHandler+0x10>)
 80145ce:	f006 fc87 	bl	801aee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80145d2:	bf00      	nop
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	2000bc04 	.word	0x2000bc04

080145dc <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80145e0:	4802      	ldr	r0, [pc, #8]	; (80145ec <CAN3_RX0_IRQHandler+0x10>)
 80145e2:	f001 fb03 	bl	8015bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80145e6:	bf00      	nop
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	20009bc4 	.word	0x20009bc4

080145f0 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80145f4:	4802      	ldr	r0, [pc, #8]	; (8014600 <CAN3_RX1_IRQHandler+0x10>)
 80145f6:	f001 faf9 	bl	8015bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80145fa:	bf00      	nop
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	20009bc4 	.word	0x20009bc4

08014604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014604:	b480      	push	{r7}
 8014606:	af00      	add	r7, sp, #0
	return 1;
 8014608:	2301      	movs	r3, #1
}
 801460a:	4618      	mov	r0, r3
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr

08014614 <_kill>:

int _kill(int pid, int sig)
{
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801461e:	4b05      	ldr	r3, [pc, #20]	; (8014634 <_kill+0x20>)
 8014620:	2216      	movs	r2, #22
 8014622:	601a      	str	r2, [r3, #0]
	return -1;
 8014624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	20014314 	.word	0x20014314

08014638 <_exit>:

void _exit (int status)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014640:	f04f 31ff 	mov.w	r1, #4294967295
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7ff ffe5 	bl	8014614 <_kill>
	while (1) {}		/* Make sure we hang here */
 801464a:	e7fe      	b.n	801464a <_exit+0x12>

0801464c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b086      	sub	sp, #24
 8014650:	af00      	add	r7, sp, #0
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	60b9      	str	r1, [r7, #8]
 8014656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014658:	2300      	movs	r3, #0
 801465a:	617b      	str	r3, [r7, #20]
 801465c:	e00a      	b.n	8014674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801465e:	f3af 8000 	nop.w
 8014662:	4601      	mov	r1, r0
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	1c5a      	adds	r2, r3, #1
 8014668:	60ba      	str	r2, [r7, #8]
 801466a:	b2ca      	uxtb	r2, r1
 801466c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	3301      	adds	r3, #1
 8014672:	617b      	str	r3, [r7, #20]
 8014674:	697a      	ldr	r2, [r7, #20]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	429a      	cmp	r2, r3
 801467a:	dbf0      	blt.n	801465e <_read+0x12>
	}

return len;
 801467c:	687b      	ldr	r3, [r7, #4]
}
 801467e:	4618      	mov	r0, r3
 8014680:	3718      	adds	r7, #24
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014686:	b580      	push	{r7, lr}
 8014688:	b086      	sub	sp, #24
 801468a:	af00      	add	r7, sp, #0
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	60b9      	str	r1, [r7, #8]
 8014690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014692:	2300      	movs	r3, #0
 8014694:	617b      	str	r3, [r7, #20]
 8014696:	e009      	b.n	80146ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	1c5a      	adds	r2, r3, #1
 801469c:	60ba      	str	r2, [r7, #8]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ec f9f7 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	3301      	adds	r3, #1
 80146aa:	617b      	str	r3, [r7, #20]
 80146ac:	697a      	ldr	r2, [r7, #20]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	dbf1      	blt.n	8014698 <_write+0x12>
	}
	return len;
 80146b4:	687b      	ldr	r3, [r7, #4]
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3718      	adds	r7, #24
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}

080146be <_close>:

int _close(int file)
{
 80146be:	b480      	push	{r7}
 80146c0:	b083      	sub	sp, #12
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
	return -1;
 80146c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	370c      	adds	r7, #12
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr

080146d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80146d6:	b480      	push	{r7}
 80146d8:	b083      	sub	sp, #12
 80146da:	af00      	add	r7, sp, #0
 80146dc:	6078      	str	r0, [r7, #4]
 80146de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80146e6:	605a      	str	r2, [r3, #4]
	return 0;
 80146e8:	2300      	movs	r3, #0
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	370c      	adds	r7, #12
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr

080146f6 <_isatty>:

int _isatty(int file)
{
 80146f6:	b480      	push	{r7}
 80146f8:	b083      	sub	sp, #12
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
	return 1;
 80146fe:	2301      	movs	r3, #1
}
 8014700:	4618      	mov	r0, r3
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801470c:	b480      	push	{r7}
 801470e:	b085      	sub	sp, #20
 8014710:	af00      	add	r7, sp, #0
 8014712:	60f8      	str	r0, [r7, #12]
 8014714:	60b9      	str	r1, [r7, #8]
 8014716:	607a      	str	r2, [r7, #4]
	return 0;
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3714      	adds	r7, #20
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr
	...

08014728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014728:	b480      	push	{r7}
 801472a:	b087      	sub	sp, #28
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014730:	4a14      	ldr	r2, [pc, #80]	; (8014784 <_sbrk+0x5c>)
 8014732:	4b15      	ldr	r3, [pc, #84]	; (8014788 <_sbrk+0x60>)
 8014734:	1ad3      	subs	r3, r2, r3
 8014736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801473c:	4b13      	ldr	r3, [pc, #76]	; (801478c <_sbrk+0x64>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014744:	4b11      	ldr	r3, [pc, #68]	; (801478c <_sbrk+0x64>)
 8014746:	4a12      	ldr	r2, [pc, #72]	; (8014790 <_sbrk+0x68>)
 8014748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801474a:	4b10      	ldr	r3, [pc, #64]	; (801478c <_sbrk+0x64>)
 801474c:	681a      	ldr	r2, [r3, #0]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	4413      	add	r3, r2
 8014752:	693a      	ldr	r2, [r7, #16]
 8014754:	429a      	cmp	r2, r3
 8014756:	d205      	bcs.n	8014764 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8014758:	4b0e      	ldr	r3, [pc, #56]	; (8014794 <_sbrk+0x6c>)
 801475a:	220c      	movs	r2, #12
 801475c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801475e:	f04f 33ff 	mov.w	r3, #4294967295
 8014762:	e009      	b.n	8014778 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8014764:	4b09      	ldr	r3, [pc, #36]	; (801478c <_sbrk+0x64>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801476a:	4b08      	ldr	r3, [pc, #32]	; (801478c <_sbrk+0x64>)
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4413      	add	r3, r2
 8014772:	4a06      	ldr	r2, [pc, #24]	; (801478c <_sbrk+0x64>)
 8014774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014776:	68fb      	ldr	r3, [r7, #12]
}
 8014778:	4618      	mov	r0, r3
 801477a:	371c      	adds	r7, #28
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr
 8014784:	20080000 	.word	0x20080000
 8014788:	00000400 	.word	0x00000400
 801478c:	20009d84 	.word	0x20009d84
 8014790:	20014320 	.word	0x20014320
 8014794:	20014314 	.word	0x20014314

08014798 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014798:	b480      	push	{r7}
 801479a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801479c:	4b06      	ldr	r3, [pc, #24]	; (80147b8 <SystemInit+0x20>)
 801479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147a2:	4a05      	ldr	r2, [pc, #20]	; (80147b8 <SystemInit+0x20>)
 80147a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80147a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80147ac:	bf00      	nop
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	e000ed00 	.word	0xe000ed00

080147bc <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80147c0:	4b16      	ldr	r3, [pc, #88]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147c2:	4a17      	ldr	r2, [pc, #92]	; (8014820 <MX_USART1_UART_Init+0x64>)
 80147c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80147c6:	4b15      	ldr	r3, [pc, #84]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80147cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80147ce:	4b13      	ldr	r3, [pc, #76]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147d0:	2200      	movs	r2, #0
 80147d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80147d4:	4b11      	ldr	r3, [pc, #68]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147d6:	2200      	movs	r2, #0
 80147d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80147da:	4b10      	ldr	r3, [pc, #64]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147dc:	2200      	movs	r2, #0
 80147de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80147e0:	4b0e      	ldr	r3, [pc, #56]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147e2:	220c      	movs	r2, #12
 80147e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80147e6:	4b0d      	ldr	r3, [pc, #52]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147e8:	2200      	movs	r2, #0
 80147ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80147ec:	4b0b      	ldr	r3, [pc, #44]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80147f2:	4b0a      	ldr	r3, [pc, #40]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80147f8:	4b08      	ldr	r3, [pc, #32]	; (801481c <MX_USART1_UART_Init+0x60>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80147fe:	4807      	ldr	r0, [pc, #28]	; (801481c <MX_USART1_UART_Init+0x60>)
 8014800:	f006 fa8c 	bl	801ad1c <HAL_UART_Init>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d001      	beq.n	801480e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801480a:	f7ff f885 	bl	8013918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801480e:	2280      	movs	r2, #128	; 0x80
 8014810:	4904      	ldr	r1, [pc, #16]	; (8014824 <MX_USART1_UART_Init+0x68>)
 8014812:	4802      	ldr	r0, [pc, #8]	; (801481c <MX_USART1_UART_Init+0x60>)
 8014814:	f007 fdee 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014818:	bf00      	nop
 801481a:	bd80      	pop	{r7, pc}
 801481c:	2000bcbc 	.word	0x2000bcbc
 8014820:	40011000 	.word	0x40011000
 8014824:	2000b894 	.word	0x2000b894

08014828 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b0b4      	sub	sp, #208	; 0xd0
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014830:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014834:	2200      	movs	r2, #0
 8014836:	601a      	str	r2, [r3, #0]
 8014838:	605a      	str	r2, [r3, #4]
 801483a:	609a      	str	r2, [r3, #8]
 801483c:	60da      	str	r2, [r3, #12]
 801483e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014844:	2290      	movs	r2, #144	; 0x90
 8014846:	2100      	movs	r1, #0
 8014848:	4618      	mov	r0, r3
 801484a:	f00d fc0b 	bl	8022064 <memset>
  if(uartHandle->Instance==UART4)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	4aa7      	ldr	r2, [pc, #668]	; (8014af0 <HAL_UART_MspInit+0x2c8>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d145      	bne.n	80148e4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8014858:	f44f 7300 	mov.w	r3, #512	; 0x200
 801485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801485e:	2300      	movs	r3, #0
 8014860:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014866:	4618      	mov	r0, r3
 8014868:	f004 fcf8 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8014872:	f7ff f851 	bl	8013918 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014876:	4b9f      	ldr	r3, [pc, #636]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801487a:	4a9e      	ldr	r2, [pc, #632]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 801487c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014880:	6413      	str	r3, [r2, #64]	; 0x40
 8014882:	4b9c      	ldr	r3, [pc, #624]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801488a:	62bb      	str	r3, [r7, #40]	; 0x28
 801488c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 801488e:	4b99      	ldr	r3, [pc, #612]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014892:	4a98      	ldr	r2, [pc, #608]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014898:	6313      	str	r3, [r2, #48]	; 0x30
 801489a:	4b96      	ldr	r3, [pc, #600]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 801489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148a2:	627b      	str	r3, [r7, #36]	; 0x24
 80148a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80148a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80148aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148ae:	2302      	movs	r3, #2
 80148b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148b4:	2300      	movs	r3, #0
 80148b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148ba:	2303      	movs	r3, #3
 80148bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80148c0:	2308      	movs	r3, #8
 80148c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80148c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80148ca:	4619      	mov	r1, r3
 80148cc:	488a      	ldr	r0, [pc, #552]	; (8014af8 <HAL_UART_MspInit+0x2d0>)
 80148ce:	f002 ffc7 	bl	8017860 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80148d2:	2200      	movs	r2, #0
 80148d4:	2105      	movs	r1, #5
 80148d6:	2034      	movs	r0, #52	; 0x34
 80148d8:	f001 fc97 	bl	801620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80148dc:	2034      	movs	r0, #52	; 0x34
 80148de:	f001 fcb0 	bl	8016242 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80148e2:	e100      	b.n	8014ae6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4a84      	ldr	r2, [pc, #528]	; (8014afc <HAL_UART_MspInit+0x2d4>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d167      	bne.n	80149be <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80148ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80148f4:	2300      	movs	r3, #0
 80148f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80148fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80148fe:	4618      	mov	r0, r3
 8014900:	f004 fcac 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d001      	beq.n	801490e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 801490a:	f7ff f805 	bl	8013918 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 801490e:	4b79      	ldr	r3, [pc, #484]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014912:	4a78      	ldr	r2, [pc, #480]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014918:	6413      	str	r3, [r2, #64]	; 0x40
 801491a:	4b76      	ldr	r3, [pc, #472]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 801491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014922:	623b      	str	r3, [r7, #32]
 8014924:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014926:	4b73      	ldr	r3, [pc, #460]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801492a:	4a72      	ldr	r2, [pc, #456]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 801492c:	f043 0308 	orr.w	r3, r3, #8
 8014930:	6313      	str	r3, [r2, #48]	; 0x30
 8014932:	4b70      	ldr	r3, [pc, #448]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014936:	f003 0308 	and.w	r3, r3, #8
 801493a:	61fb      	str	r3, [r7, #28]
 801493c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801493e:	4b6d      	ldr	r3, [pc, #436]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014942:	4a6c      	ldr	r2, [pc, #432]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014944:	f043 0302 	orr.w	r3, r3, #2
 8014948:	6313      	str	r3, [r2, #48]	; 0x30
 801494a:	4b6a      	ldr	r3, [pc, #424]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 801494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801494e:	f003 0302 	and.w	r3, r3, #2
 8014952:	61bb      	str	r3, [r7, #24]
 8014954:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8014956:	2304      	movs	r3, #4
 8014958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801495c:	2302      	movs	r3, #2
 801495e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014962:	2300      	movs	r3, #0
 8014964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014968:	2303      	movs	r3, #3
 801496a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801496e:	2308      	movs	r3, #8
 8014970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8014974:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014978:	4619      	mov	r1, r3
 801497a:	4861      	ldr	r0, [pc, #388]	; (8014b00 <HAL_UART_MspInit+0x2d8>)
 801497c:	f002 ff70 	bl	8017860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8014980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014988:	2302      	movs	r3, #2
 801498a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801498e:	2300      	movs	r3, #0
 8014990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014994:	2303      	movs	r3, #3
 8014996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 801499a:	2307      	movs	r3, #7
 801499c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80149a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80149a4:	4619      	mov	r1, r3
 80149a6:	4857      	ldr	r0, [pc, #348]	; (8014b04 <HAL_UART_MspInit+0x2dc>)
 80149a8:	f002 ff5a 	bl	8017860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80149ac:	2200      	movs	r2, #0
 80149ae:	2105      	movs	r1, #5
 80149b0:	2035      	movs	r0, #53	; 0x35
 80149b2:	f001 fc2a 	bl	801620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80149b6:	2035      	movs	r0, #53	; 0x35
 80149b8:	f001 fc43 	bl	8016242 <HAL_NVIC_EnableIRQ>
}
 80149bc:	e093      	b.n	8014ae6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4a51      	ldr	r2, [pc, #324]	; (8014b08 <HAL_UART_MspInit+0x2e0>)
 80149c4:	4293      	cmp	r3, r2
 80149c6:	d145      	bne.n	8014a54 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80149c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80149cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80149ce:	2300      	movs	r3, #0
 80149d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80149d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149d8:	4618      	mov	r0, r3
 80149da:	f004 fc3f 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d001      	beq.n	80149e8 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80149e4:	f7fe ff98 	bl	8013918 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80149e8:	4b42      	ldr	r3, [pc, #264]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 80149ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ec:	4a41      	ldr	r2, [pc, #260]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 80149ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80149f2:	6413      	str	r3, [r2, #64]	; 0x40
 80149f4:	4b3f      	ldr	r3, [pc, #252]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 80149f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80149fc:	617b      	str	r3, [r7, #20]
 80149fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014a00:	4b3c      	ldr	r3, [pc, #240]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a04:	4a3b      	ldr	r2, [pc, #236]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a06:	f043 0320 	orr.w	r3, r3, #32
 8014a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8014a0c:	4b39      	ldr	r3, [pc, #228]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a10:	f003 0320 	and.w	r3, r3, #32
 8014a14:	613b      	str	r3, [r7, #16]
 8014a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014a18:	23c0      	movs	r3, #192	; 0xc0
 8014a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a1e:	2302      	movs	r3, #2
 8014a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a24:	2300      	movs	r3, #0
 8014a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a2a:	2303      	movs	r3, #3
 8014a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014a30:	2308      	movs	r3, #8
 8014a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014a36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	4833      	ldr	r0, [pc, #204]	; (8014b0c <HAL_UART_MspInit+0x2e4>)
 8014a3e:	f002 ff0f 	bl	8017860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8014a42:	2200      	movs	r2, #0
 8014a44:	2105      	movs	r1, #5
 8014a46:	2052      	movs	r0, #82	; 0x52
 8014a48:	f001 fbdf 	bl	801620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8014a4c:	2052      	movs	r0, #82	; 0x52
 8014a4e:	f001 fbf8 	bl	8016242 <HAL_NVIC_EnableIRQ>
}
 8014a52:	e048      	b.n	8014ae6 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4a2d      	ldr	r2, [pc, #180]	; (8014b10 <HAL_UART_MspInit+0x2e8>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d143      	bne.n	8014ae6 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8014a5e:	2340      	movs	r3, #64	; 0x40
 8014a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8014a62:	2300      	movs	r3, #0
 8014a64:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f004 fbf6 	bl	801925c <HAL_RCCEx_PeriphCLKConfig>
 8014a70:	4603      	mov	r3, r0
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d001      	beq.n	8014a7a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8014a76:	f7fe ff4f 	bl	8013918 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014a7a:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a7e:	4a1d      	ldr	r2, [pc, #116]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a80:	f043 0310 	orr.w	r3, r3, #16
 8014a84:	6453      	str	r3, [r2, #68]	; 0x44
 8014a86:	4b1b      	ldr	r3, [pc, #108]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a8a:	f003 0310 	and.w	r3, r3, #16
 8014a8e:	60fb      	str	r3, [r7, #12]
 8014a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a92:	4b18      	ldr	r3, [pc, #96]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a96:	4a17      	ldr	r2, [pc, #92]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014a98:	f043 0301 	orr.w	r3, r3, #1
 8014a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8014a9e:	4b15      	ldr	r3, [pc, #84]	; (8014af4 <HAL_UART_MspInit+0x2cc>)
 8014aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aa2:	f003 0301 	and.w	r3, r3, #1
 8014aa6:	60bb      	str	r3, [r7, #8]
 8014aa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014aaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ab2:	2302      	movs	r3, #2
 8014ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014ac4:	2307      	movs	r3, #7
 8014ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014aca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4810      	ldr	r0, [pc, #64]	; (8014b14 <HAL_UART_MspInit+0x2ec>)
 8014ad2:	f002 fec5 	bl	8017860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	2107      	movs	r1, #7
 8014ada:	2025      	movs	r0, #37	; 0x25
 8014adc:	f001 fb95 	bl	801620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014ae0:	2025      	movs	r0, #37	; 0x25
 8014ae2:	f001 fbae 	bl	8016242 <HAL_NVIC_EnableIRQ>
}
 8014ae6:	bf00      	nop
 8014ae8:	37d0      	adds	r7, #208	; 0xd0
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	40004c00 	.word	0x40004c00
 8014af4:	40023800 	.word	0x40023800
 8014af8:	40021c00 	.word	0x40021c00
 8014afc:	40005000 	.word	0x40005000
 8014b00:	40020c00 	.word	0x40020c00
 8014b04:	40020400 	.word	0x40020400
 8014b08:	40007800 	.word	0x40007800
 8014b0c:	40021400 	.word	0x40021400
 8014b10:	40011000 	.word	0x40011000
 8014b14:	40020000 	.word	0x40020000

08014b18 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8014b20:	4b17      	ldr	r3, [pc, #92]	; (8014b80 <UART4_Init+0x68>)
 8014b22:	4a18      	ldr	r2, [pc, #96]	; (8014b84 <UART4_Init+0x6c>)
 8014b24:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8014b26:	4a16      	ldr	r2, [pc, #88]	; (8014b80 <UART4_Init+0x68>)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8014b2c:	4b14      	ldr	r3, [pc, #80]	; (8014b80 <UART4_Init+0x68>)
 8014b2e:	2200      	movs	r2, #0
 8014b30:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8014b32:	4b13      	ldr	r3, [pc, #76]	; (8014b80 <UART4_Init+0x68>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8014b38:	4b11      	ldr	r3, [pc, #68]	; (8014b80 <UART4_Init+0x68>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8014b3e:	4b10      	ldr	r3, [pc, #64]	; (8014b80 <UART4_Init+0x68>)
 8014b40:	220c      	movs	r2, #12
 8014b42:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014b44:	4b0e      	ldr	r3, [pc, #56]	; (8014b80 <UART4_Init+0x68>)
 8014b46:	2200      	movs	r2, #0
 8014b48:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <UART4_Init+0x68>)
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014b50:	4b0b      	ldr	r3, [pc, #44]	; (8014b80 <UART4_Init+0x68>)
 8014b52:	2200      	movs	r2, #0
 8014b54:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014b56:	4b0a      	ldr	r3, [pc, #40]	; (8014b80 <UART4_Init+0x68>)
 8014b58:	2200      	movs	r2, #0
 8014b5a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8014b5c:	4808      	ldr	r0, [pc, #32]	; (8014b80 <UART4_Init+0x68>)
 8014b5e:	f006 f8dd 	bl	801ad1c <HAL_UART_Init>
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d001      	beq.n	8014b6c <UART4_Init+0x54>
	{
		Error_Handler();
 8014b68:	f7fe fed6 	bl	8013918 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014b6c:	2280      	movs	r2, #128	; 0x80
 8014b6e:	4906      	ldr	r1, [pc, #24]	; (8014b88 <UART4_Init+0x70>)
 8014b70:	4803      	ldr	r0, [pc, #12]	; (8014b80 <UART4_Init+0x68>)
 8014b72:	f007 fc3f 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8014b76:	bf00      	nop
 8014b78:	3708      	adds	r7, #8
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	2000ba94 	.word	0x2000ba94
 8014b84:	40004c00 	.word	0x40004c00
 8014b88:	2000ba14 	.word	0x2000ba14

08014b8c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	460b      	mov	r3, r1
 8014b96:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	4a60      	ldr	r2, [pc, #384]	; (8014d20 <HAL_UARTEx_RxEventCallback+0x194>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d129      	bne.n	8014bf6 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ba2:	2280      	movs	r2, #128	; 0x80
 8014ba4:	495f      	ldr	r1, [pc, #380]	; (8014d24 <HAL_UARTEx_RxEventCallback+0x198>)
 8014ba6:	4860      	ldr	r0, [pc, #384]	; (8014d28 <HAL_UARTEx_RxEventCallback+0x19c>)
 8014ba8:	f007 fc24 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014bac:	2300      	movs	r3, #0
 8014bae:	81fb      	strh	r3, [r7, #14]
 8014bb0:	e017      	b.n	8014be2 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8014bb2:	89fa      	ldrh	r2, [r7, #14]
 8014bb4:	4b5d      	ldr	r3, [pc, #372]	; (8014d2c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014bb6:	881b      	ldrh	r3, [r3, #0]
 8014bb8:	1c59      	adds	r1, r3, #1
 8014bba:	b288      	uxth	r0, r1
 8014bbc:	495b      	ldr	r1, [pc, #364]	; (8014d2c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014bbe:	8008      	strh	r0, [r1, #0]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	4b58      	ldr	r3, [pc, #352]	; (8014d24 <HAL_UARTEx_RxEventCallback+0x198>)
 8014bc4:	5c9a      	ldrb	r2, [r3, r2]
 8014bc6:	4b59      	ldr	r3, [pc, #356]	; (8014d2c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014bc8:	440b      	add	r3, r1
 8014bca:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8014bcc:	4b57      	ldr	r3, [pc, #348]	; (8014d2c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014bd4:	d302      	bcc.n	8014bdc <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8014bd6:	4b55      	ldr	r3, [pc, #340]	; (8014d2c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8014bdc:	89fb      	ldrh	r3, [r7, #14]
 8014bde:	3301      	adds	r3, #1
 8014be0:	81fb      	strh	r3, [r7, #14]
 8014be2:	89fa      	ldrh	r2, [r7, #14]
 8014be4:	887b      	ldrh	r3, [r7, #2]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d3e3      	bcc.n	8014bb2 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8014bea:	f000 fc21 	bl	8015430 <HAL_GetTick>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	4a4f      	ldr	r2, [pc, #316]	; (8014d30 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8014bf2:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8014bf4:	e090      	b.n	8014d18 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4a4e      	ldr	r2, [pc, #312]	; (8014d34 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d129      	bne.n	8014c54 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014c00:	2280      	movs	r2, #128	; 0x80
 8014c02:	494d      	ldr	r1, [pc, #308]	; (8014d38 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014c04:	484d      	ldr	r0, [pc, #308]	; (8014d3c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8014c06:	f007 fbf5 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	81bb      	strh	r3, [r7, #12]
 8014c0e:	e01c      	b.n	8014c4a <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8014c10:	89ba      	ldrh	r2, [r7, #12]
 8014c12:	4b4b      	ldr	r3, [pc, #300]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c14:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014c18:	1c59      	adds	r1, r3, #1
 8014c1a:	b288      	uxth	r0, r1
 8014c1c:	4948      	ldr	r1, [pc, #288]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c1e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8014c22:	4619      	mov	r1, r3
 8014c24:	4b44      	ldr	r3, [pc, #272]	; (8014d38 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014c26:	5c9a      	ldrb	r2, [r3, r2]
 8014c28:	4b45      	ldr	r3, [pc, #276]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c2a:	440b      	add	r3, r1
 8014c2c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8014c30:	4b43      	ldr	r3, [pc, #268]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c32:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c3a:	d303      	bcc.n	8014c44 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8014c3c:	4b40      	ldr	r3, [pc, #256]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8014c44:	89bb      	ldrh	r3, [r7, #12]
 8014c46:	3301      	adds	r3, #1
 8014c48:	81bb      	strh	r3, [r7, #12]
 8014c4a:	89ba      	ldrh	r2, [r7, #12]
 8014c4c:	887b      	ldrh	r3, [r7, #2]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d3de      	bcc.n	8014c10 <HAL_UARTEx_RxEventCallback+0x84>
}
 8014c52:	e061      	b.n	8014d18 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4a3a      	ldr	r2, [pc, #232]	; (8014d44 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	d129      	bne.n	8014cb2 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014c5e:	2280      	movs	r2, #128	; 0x80
 8014c60:	4939      	ldr	r1, [pc, #228]	; (8014d48 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014c62:	483a      	ldr	r0, [pc, #232]	; (8014d4c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8014c64:	f007 fbc6 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014c68:	2300      	movs	r3, #0
 8014c6a:	817b      	strh	r3, [r7, #10]
 8014c6c:	e01c      	b.n	8014ca8 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8014c6e:	897a      	ldrh	r2, [r7, #10]
 8014c70:	4b33      	ldr	r3, [pc, #204]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c72:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014c76:	1c59      	adds	r1, r3, #1
 8014c78:	b288      	uxth	r0, r1
 8014c7a:	4931      	ldr	r1, [pc, #196]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c7c:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8014c80:	4619      	mov	r1, r3
 8014c82:	4b31      	ldr	r3, [pc, #196]	; (8014d48 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014c84:	5c9a      	ldrb	r2, [r3, r2]
 8014c86:	4b2e      	ldr	r3, [pc, #184]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c88:	440b      	add	r3, r1
 8014c8a:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8014c8e:	4b2c      	ldr	r3, [pc, #176]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c90:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c98:	d303      	bcc.n	8014ca2 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8014c9a:	4b29      	ldr	r3, [pc, #164]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8014ca2:	897b      	ldrh	r3, [r7, #10]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	817b      	strh	r3, [r7, #10]
 8014ca8:	897a      	ldrh	r2, [r7, #10]
 8014caa:	887b      	ldrh	r3, [r7, #2]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d3de      	bcc.n	8014c6e <HAL_UARTEx_RxEventCallback+0xe2>
}
 8014cb0:	e032      	b.n	8014d18 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4a26      	ldr	r2, [pc, #152]	; (8014d50 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	d12d      	bne.n	8014d18 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014cbc:	2280      	movs	r2, #128	; 0x80
 8014cbe:	4925      	ldr	r1, [pc, #148]	; (8014d54 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014cc0:	4825      	ldr	r0, [pc, #148]	; (8014d58 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8014cc2:	f007 fb97 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	813b      	strh	r3, [r7, #8]
 8014cca:	e01c      	b.n	8014d06 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8014ccc:	893a      	ldrh	r2, [r7, #8]
 8014cce:	4b1c      	ldr	r3, [pc, #112]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014cd0:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014cd4:	1c59      	adds	r1, r3, #1
 8014cd6:	b288      	uxth	r0, r1
 8014cd8:	4919      	ldr	r1, [pc, #100]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014cda:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8014cde:	4619      	mov	r1, r3
 8014ce0:	4b1c      	ldr	r3, [pc, #112]	; (8014d54 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014ce2:	5c9a      	ldrb	r2, [r3, r2]
 8014ce4:	4b16      	ldr	r3, [pc, #88]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014ce6:	440b      	add	r3, r1
 8014ce8:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8014cec:	4b14      	ldr	r3, [pc, #80]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014cee:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014cf6:	d303      	bcc.n	8014d00 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8014cf8:	4b11      	ldr	r3, [pc, #68]	; (8014d40 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8014d00:	893b      	ldrh	r3, [r7, #8]
 8014d02:	3301      	adds	r3, #1
 8014d04:	813b      	strh	r3, [r7, #8]
 8014d06:	893a      	ldrh	r2, [r7, #8]
 8014d08:	887b      	ldrh	r3, [r7, #2]
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d3de      	bcc.n	8014ccc <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8014d0e:	f000 fb8f 	bl	8015430 <HAL_GetTick>
 8014d12:	4603      	mov	r3, r0
 8014d14:	4a11      	ldr	r2, [pc, #68]	; (8014d5c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8014d16:	6013      	str	r3, [r2, #0]
}
 8014d18:	bf00      	nop
 8014d1a:	3710      	adds	r7, #16
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	40011000 	.word	0x40011000
 8014d24:	2000b894 	.word	0x2000b894
 8014d28:	2000bcbc 	.word	0x2000bcbc
 8014d2c:	2000b090 	.word	0x2000b090
 8014d30:	2000a07c 	.word	0x2000a07c
 8014d34:	40005000 	.word	0x40005000
 8014d38:	2000b914 	.word	0x2000b914
 8014d3c:	2000bb4c 	.word	0x2000bb4c
 8014d40:	2000a080 	.word	0x2000a080
 8014d44:	40007800 	.word	0x40007800
 8014d48:	2000b994 	.word	0x2000b994
 8014d4c:	2000bc04 	.word	0x2000bc04
 8014d50:	40004c00 	.word	0x40004c00
 8014d54:	2000ba14 	.word	0x2000ba14
 8014d58:	2000ba94 	.word	0x2000ba94
 8014d5c:	2000a078 	.word	0x2000a078

08014d60 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b085      	sub	sp, #20
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	4603      	mov	r3, r0
 8014d68:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8014d6e:	79fb      	ldrb	r3, [r7, #7]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d115      	bne.n	8014da0 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8014d74:	79fa      	ldrb	r2, [r7, #7]
 8014d76:	4918      	ldr	r1, [pc, #96]	; (8014dd8 <Com_DataReady+0x78>)
 8014d78:	4613      	mov	r3, r2
 8014d7a:	025b      	lsls	r3, r3, #9
 8014d7c:	4413      	add	r3, r2
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	440b      	add	r3, r1
 8014d82:	8819      	ldrh	r1, [r3, #0]
 8014d84:	79fa      	ldrb	r2, [r7, #7]
 8014d86:	4814      	ldr	r0, [pc, #80]	; (8014dd8 <Com_DataReady+0x78>)
 8014d88:	4613      	mov	r3, r2
 8014d8a:	025b      	lsls	r3, r3, #9
 8014d8c:	4413      	add	r3, r2
 8014d8e:	009b      	lsls	r3, r3, #2
 8014d90:	4403      	add	r3, r0
 8014d92:	3302      	adds	r3, #2
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	4299      	cmp	r1, r3
 8014d98:	d017      	beq.n	8014dca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	73fb      	strb	r3, [r7, #15]
 8014d9e:	e014      	b.n	8014dca <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8014da0:	79fa      	ldrb	r2, [r7, #7]
 8014da2:	490e      	ldr	r1, [pc, #56]	; (8014ddc <Com_DataReady+0x7c>)
 8014da4:	4613      	mov	r3, r2
 8014da6:	021b      	lsls	r3, r3, #8
 8014da8:	4413      	add	r3, r2
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	440b      	add	r3, r1
 8014dae:	8819      	ldrh	r1, [r3, #0]
 8014db0:	79fa      	ldrb	r2, [r7, #7]
 8014db2:	480a      	ldr	r0, [pc, #40]	; (8014ddc <Com_DataReady+0x7c>)
 8014db4:	4613      	mov	r3, r2
 8014db6:	021b      	lsls	r3, r3, #8
 8014db8:	4413      	add	r3, r2
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	4403      	add	r3, r0
 8014dbe:	3302      	adds	r3, #2
 8014dc0:	881b      	ldrh	r3, [r3, #0]
 8014dc2:	4299      	cmp	r1, r3
 8014dc4:	d001      	beq.n	8014dca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8014dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3714      	adds	r7, #20
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr
 8014dd8:	2000b090 	.word	0x2000b090
 8014ddc:	2000a080 	.word	0x2000a080

08014de0 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8014de0:	b4b0      	push	{r4, r5, r7}
 8014de2:	b085      	sub	sp, #20
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	4603      	mov	r3, r0
 8014de8:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8014dea:	2300      	movs	r3, #0
 8014dec:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8014dee:	79fb      	ldrb	r3, [r7, #7]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d135      	bne.n	8014e60 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8014df4:	79f9      	ldrb	r1, [r7, #7]
 8014df6:	79fa      	ldrb	r2, [r7, #7]
 8014df8:	4837      	ldr	r0, [pc, #220]	; (8014ed8 <Com_Get_Byte+0xf8>)
 8014dfa:	4613      	mov	r3, r2
 8014dfc:	025b      	lsls	r3, r3, #9
 8014dfe:	4413      	add	r3, r2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	4403      	add	r3, r0
 8014e04:	3302      	adds	r3, #2
 8014e06:	8818      	ldrh	r0, [r3, #0]
 8014e08:	1c43      	adds	r3, r0, #1
 8014e0a:	b29d      	uxth	r5, r3
 8014e0c:	4c32      	ldr	r4, [pc, #200]	; (8014ed8 <Com_Get_Byte+0xf8>)
 8014e0e:	4613      	mov	r3, r2
 8014e10:	025b      	lsls	r3, r3, #9
 8014e12:	4413      	add	r3, r2
 8014e14:	009b      	lsls	r3, r3, #2
 8014e16:	4423      	add	r3, r4
 8014e18:	3302      	adds	r3, #2
 8014e1a:	462a      	mov	r2, r5
 8014e1c:	801a      	strh	r2, [r3, #0]
 8014e1e:	4a2e      	ldr	r2, [pc, #184]	; (8014ed8 <Com_Get_Byte+0xf8>)
 8014e20:	460b      	mov	r3, r1
 8014e22:	025b      	lsls	r3, r3, #9
 8014e24:	440b      	add	r3, r1
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4413      	add	r3, r2
 8014e2a:	4403      	add	r3, r0
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8014e32:	79fa      	ldrb	r2, [r7, #7]
 8014e34:	4928      	ldr	r1, [pc, #160]	; (8014ed8 <Com_Get_Byte+0xf8>)
 8014e36:	4613      	mov	r3, r2
 8014e38:	025b      	lsls	r3, r3, #9
 8014e3a:	4413      	add	r3, r2
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	440b      	add	r3, r1
 8014e40:	3302      	adds	r3, #2
 8014e42:	881b      	ldrh	r3, [r3, #0]
 8014e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e48:	d33f      	bcc.n	8014eca <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8014e4a:	79fa      	ldrb	r2, [r7, #7]
 8014e4c:	4922      	ldr	r1, [pc, #136]	; (8014ed8 <Com_Get_Byte+0xf8>)
 8014e4e:	4613      	mov	r3, r2
 8014e50:	025b      	lsls	r3, r3, #9
 8014e52:	4413      	add	r3, r2
 8014e54:	009b      	lsls	r3, r3, #2
 8014e56:	440b      	add	r3, r1
 8014e58:	3302      	adds	r3, #2
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	801a      	strh	r2, [r3, #0]
 8014e5e:	e034      	b.n	8014eca <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8014e60:	79f9      	ldrb	r1, [r7, #7]
 8014e62:	79fa      	ldrb	r2, [r7, #7]
 8014e64:	481d      	ldr	r0, [pc, #116]	; (8014edc <Com_Get_Byte+0xfc>)
 8014e66:	4613      	mov	r3, r2
 8014e68:	021b      	lsls	r3, r3, #8
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4403      	add	r3, r0
 8014e70:	3302      	adds	r3, #2
 8014e72:	8818      	ldrh	r0, [r3, #0]
 8014e74:	1c43      	adds	r3, r0, #1
 8014e76:	b29d      	uxth	r5, r3
 8014e78:	4c18      	ldr	r4, [pc, #96]	; (8014edc <Com_Get_Byte+0xfc>)
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	021b      	lsls	r3, r3, #8
 8014e7e:	4413      	add	r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	4423      	add	r3, r4
 8014e84:	3302      	adds	r3, #2
 8014e86:	462a      	mov	r2, r5
 8014e88:	801a      	strh	r2, [r3, #0]
 8014e8a:	4a14      	ldr	r2, [pc, #80]	; (8014edc <Com_Get_Byte+0xfc>)
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	021b      	lsls	r3, r3, #8
 8014e90:	440b      	add	r3, r1
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	4403      	add	r3, r0
 8014e98:	3304      	adds	r3, #4
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8014e9e:	79fa      	ldrb	r2, [r7, #7]
 8014ea0:	490e      	ldr	r1, [pc, #56]	; (8014edc <Com_Get_Byte+0xfc>)
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	021b      	lsls	r3, r3, #8
 8014ea6:	4413      	add	r3, r2
 8014ea8:	009b      	lsls	r3, r3, #2
 8014eaa:	440b      	add	r3, r1
 8014eac:	3302      	adds	r3, #2
 8014eae:	881b      	ldrh	r3, [r3, #0]
 8014eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014eb4:	d309      	bcc.n	8014eca <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8014eb6:	79fa      	ldrb	r2, [r7, #7]
 8014eb8:	4908      	ldr	r1, [pc, #32]	; (8014edc <Com_Get_Byte+0xfc>)
 8014eba:	4613      	mov	r3, r2
 8014ebc:	021b      	lsls	r3, r3, #8
 8014ebe:	4413      	add	r3, r2
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	440b      	add	r3, r1
 8014ec4:	3302      	adds	r3, #2
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8014eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3714      	adds	r7, #20
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bcb0      	pop	{r4, r5, r7}
 8014ed4:	4770      	bx	lr
 8014ed6:	bf00      	nop
 8014ed8:	2000b090 	.word	0x2000b090
 8014edc:	2000a080 	.word	0x2000a080

08014ee0 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	6039      	str	r1, [r7, #0]
 8014eea:	71fb      	strb	r3, [r7, #7]
 8014eec:	4613      	mov	r3, r2
 8014eee:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	81fb      	strh	r3, [r7, #14]
 8014ef8:	e03a      	b.n	8014f70 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8014efa:	89fb      	ldrh	r3, [r7, #14]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d00a      	beq.n	8014f16 <CommTransmitMessage+0x36>
 8014f00:	89fb      	ldrh	r3, [r7, #14]
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	4413      	add	r3, r2
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	2b24      	cmp	r3, #36	; 0x24
 8014f0a:	d104      	bne.n	8014f16 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8014f0c:	79fb      	ldrb	r3, [r7, #7]
 8014f0e:	2105      	movs	r1, #5
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 f835 	bl	8014f80 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8014f16:	89fb      	ldrh	r3, [r7, #14]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d00e      	beq.n	8014f3a <CommTransmitMessage+0x5a>
 8014f1c:	89fa      	ldrh	r2, [r7, #14]
 8014f1e:	88bb      	ldrh	r3, [r7, #4]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d20a      	bcs.n	8014f3a <CommTransmitMessage+0x5a>
 8014f24:	89fb      	ldrh	r3, [r7, #14]
 8014f26:	683a      	ldr	r2, [r7, #0]
 8014f28:	4413      	add	r3, r2
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	2b05      	cmp	r3, #5
 8014f2e:	d104      	bne.n	8014f3a <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8014f30:	79fb      	ldrb	r3, [r7, #7]
 8014f32:	2105      	movs	r1, #5
 8014f34:	4618      	mov	r0, r3
 8014f36:	f000 f823 	bl	8014f80 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8014f3a:	89fb      	ldrh	r3, [r7, #14]
 8014f3c:	683a      	ldr	r2, [r7, #0]
 8014f3e:	4413      	add	r3, r2
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	2b26      	cmp	r3, #38	; 0x26
 8014f44:	d108      	bne.n	8014f58 <CommTransmitMessage+0x78>
 8014f46:	89fa      	ldrh	r2, [r7, #14]
 8014f48:	88bb      	ldrh	r3, [r7, #4]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d004      	beq.n	8014f58 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	2105      	movs	r1, #5
 8014f52:	4618      	mov	r0, r3
 8014f54:	f000 f814 	bl	8014f80 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8014f58:	89fb      	ldrh	r3, [r7, #14]
 8014f5a:	683a      	ldr	r2, [r7, #0]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	781a      	ldrb	r2, [r3, #0]
 8014f60:	79fb      	ldrb	r3, [r7, #7]
 8014f62:	4611      	mov	r1, r2
 8014f64:	4618      	mov	r0, r3
 8014f66:	f000 f80b 	bl	8014f80 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8014f6a:	89fb      	ldrh	r3, [r7, #14]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	81fb      	strh	r3, [r7, #14]
 8014f70:	89fa      	ldrh	r2, [r7, #14]
 8014f72:	88bb      	ldrh	r3, [r7, #4]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d9c0      	bls.n	8014efa <CommTransmitMessage+0x1a>
	}

	return;
 8014f78:	bf00      	nop
}
 8014f7a:	3710      	adds	r7, #16
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	4603      	mov	r3, r0
 8014f88:	460a      	mov	r2, r1
 8014f8a:	71fb      	strb	r3, [r7, #7]
 8014f8c:	4613      	mov	r3, r2
 8014f8e:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8014f90:	1dbb      	adds	r3, r7, #6
 8014f92:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8014f94:	79fb      	ldrb	r3, [r7, #7]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d107      	bne.n	8014faa <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	68f9      	ldr	r1, [r7, #12]
 8014fa2:	4816      	ldr	r0, [pc, #88]	; (8014ffc <Com_SendByte+0x7c>)
 8014fa4:	f005 ff18 	bl	801add8 <HAL_UART_Transmit>
 8014fa8:	e01f      	b.n	8014fea <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8014faa:	79fb      	ldrb	r3, [r7, #7]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d107      	bne.n	8014fc0 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	68f9      	ldr	r1, [r7, #12]
 8014fb8:	4811      	ldr	r0, [pc, #68]	; (8015000 <Com_SendByte+0x80>)
 8014fba:	f005 ff0d 	bl	801add8 <HAL_UART_Transmit>
 8014fbe:	e014      	b.n	8014fea <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8014fc0:	79fb      	ldrb	r3, [r7, #7]
 8014fc2:	2b02      	cmp	r3, #2
 8014fc4:	d107      	bne.n	8014fd6 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fca:	2201      	movs	r2, #1
 8014fcc:	68f9      	ldr	r1, [r7, #12]
 8014fce:	480d      	ldr	r0, [pc, #52]	; (8015004 <Com_SendByte+0x84>)
 8014fd0:	f005 ff02 	bl	801add8 <HAL_UART_Transmit>
 8014fd4:	e009      	b.n	8014fea <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8014fd6:	79fb      	ldrb	r3, [r7, #7]
 8014fd8:	2b03      	cmp	r3, #3
 8014fda:	d106      	bne.n	8014fea <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	68f9      	ldr	r1, [r7, #12]
 8014fe4:	4808      	ldr	r0, [pc, #32]	; (8015008 <Com_SendByte+0x88>)
 8014fe6:	f005 fef7 	bl	801add8 <HAL_UART_Transmit>
	}

	ptr=NULL;
 8014fea:	2300      	movs	r3, #0
 8014fec:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f00c fff8 	bl	8021fe4 <free>
}
 8014ff4:	bf00      	nop
 8014ff6:	3710      	adds	r7, #16
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	2000bcbc 	.word	0x2000bcbc
 8015000:	2000bb4c 	.word	0x2000bb4c
 8015004:	2000bc04 	.word	0x2000bc04
 8015008:	2000ba94 	.word	0x2000ba94

0801500c <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015010:	2280      	movs	r2, #128	; 0x80
 8015012:	490a      	ldr	r1, [pc, #40]	; (801503c <Enable_UART_Interrupts+0x30>)
 8015014:	480a      	ldr	r0, [pc, #40]	; (8015040 <Enable_UART_Interrupts+0x34>)
 8015016:	f007 f9ed 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801501a:	2280      	movs	r2, #128	; 0x80
 801501c:	4909      	ldr	r1, [pc, #36]	; (8015044 <Enable_UART_Interrupts+0x38>)
 801501e:	480a      	ldr	r0, [pc, #40]	; (8015048 <Enable_UART_Interrupts+0x3c>)
 8015020:	f007 f9e8 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015024:	2280      	movs	r2, #128	; 0x80
 8015026:	4909      	ldr	r1, [pc, #36]	; (801504c <Enable_UART_Interrupts+0x40>)
 8015028:	4809      	ldr	r0, [pc, #36]	; (8015050 <Enable_UART_Interrupts+0x44>)
 801502a:	f007 f9e3 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801502e:	2280      	movs	r2, #128	; 0x80
 8015030:	4908      	ldr	r1, [pc, #32]	; (8015054 <Enable_UART_Interrupts+0x48>)
 8015032:	4809      	ldr	r0, [pc, #36]	; (8015058 <Enable_UART_Interrupts+0x4c>)
 8015034:	f007 f9de 	bl	801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8015038:	bf00      	nop
 801503a:	bd80      	pop	{r7, pc}
 801503c:	2000b894 	.word	0x2000b894
 8015040:	2000bcbc 	.word	0x2000bcbc
 8015044:	2000b914 	.word	0x2000b914
 8015048:	2000bb4c 	.word	0x2000bb4c
 801504c:	2000b994 	.word	0x2000b994
 8015050:	2000bc04 	.word	0x2000bc04
 8015054:	2000ba14 	.word	0x2000ba14
 8015058:	2000ba94 	.word	0x2000ba94

0801505c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801505c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015060:	480d      	ldr	r0, [pc, #52]	; (8015098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015062:	490e      	ldr	r1, [pc, #56]	; (801509c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015064:	4a0e      	ldr	r2, [pc, #56]	; (80150a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015068:	e002      	b.n	8015070 <LoopCopyDataInit>

0801506a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801506a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801506c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801506e:	3304      	adds	r3, #4

08015070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015074:	d3f9      	bcc.n	801506a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015076:	4a0b      	ldr	r2, [pc, #44]	; (80150a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015078:	4c0b      	ldr	r4, [pc, #44]	; (80150a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 801507a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801507c:	e001      	b.n	8015082 <LoopFillZerobss>

0801507e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801507e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015080:	3204      	adds	r2, #4

08015082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015084:	d3fb      	bcc.n	801507e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015086:	f7ff fb87 	bl	8014798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801508a:	f00c ff7f 	bl	8021f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801508e:	f7fe fa71 	bl	8013574 <main>
  bx  lr    
 8015092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015094:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8015098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801509c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80150a0:	08028ca8 	.word	0x08028ca8
  ldr r2, =_sbss
 80150a4:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80150a8:	2001431c 	.word	0x2001431c

080150ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80150ac:	e7fe      	b.n	80150ac <ADC_IRQHandler>

080150ae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80150ae:	b480      	push	{r7}
 80150b0:	b083      	sub	sp, #12
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d00b      	beq.n	80150d6 <DP83848_RegisterBusIO+0x28>
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d007      	beq.n	80150d6 <DP83848_RegisterBusIO+0x28>
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	689b      	ldr	r3, [r3, #8]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d003      	beq.n	80150d6 <DP83848_RegisterBusIO+0x28>
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d102      	bne.n	80150dc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80150d6:	f04f 33ff 	mov.w	r3, #4294967295
 80150da:	e014      	b.n	8015106 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	68da      	ldr	r2, [r3, #12]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	689a      	ldr	r2, [r3, #8]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	691a      	ldr	r2, [r3, #16]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8015104:	2300      	movs	r3, #0
}
 8015106:	4618      	mov	r0, r3
 8015108:	370c      	adds	r7, #12
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr

08015112 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8015112:	b580      	push	{r7, lr}
 8015114:	b086      	sub	sp, #24
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801511a:	2300      	movs	r3, #0
 801511c:	60fb      	str	r3, [r7, #12]
 801511e:	2300      	movs	r3, #0
 8015120:	60bb      	str	r3, [r7, #8]
 8015122:	2300      	movs	r3, #0
 8015124:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8015126:	2300      	movs	r3, #0
 8015128:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d17c      	bne.n	801522c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	689b      	ldr	r3, [r3, #8]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d002      	beq.n	8015140 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	689b      	ldr	r3, [r3, #8]
 801513e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2220      	movs	r2, #32
 8015144:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8015146:	2300      	movs	r3, #0
 8015148:	617b      	str	r3, [r7, #20]
 801514a:	e01c      	b.n	8015186 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	695b      	ldr	r3, [r3, #20]
 8015150:	f107 0208 	add.w	r2, r7, #8
 8015154:	2119      	movs	r1, #25
 8015156:	6978      	ldr	r0, [r7, #20]
 8015158:	4798      	blx	r3
 801515a:	4603      	mov	r3, r0
 801515c:	2b00      	cmp	r3, #0
 801515e:	da03      	bge.n	8015168 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8015160:	f06f 0304 	mvn.w	r3, #4
 8015164:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8015166:	e00b      	b.n	8015180 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	f003 031f 	and.w	r3, r3, #31
 801516e:	697a      	ldr	r2, [r7, #20]
 8015170:	429a      	cmp	r2, r3
 8015172:	d105      	bne.n	8015180 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	697a      	ldr	r2, [r7, #20]
 8015178:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801517a:	2300      	movs	r3, #0
 801517c:	613b      	str	r3, [r7, #16]
         break;
 801517e:	e005      	b.n	801518c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	3301      	adds	r3, #1
 8015184:	617b      	str	r3, [r7, #20]
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	2b1f      	cmp	r3, #31
 801518a:	d9df      	bls.n	801514c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2b1f      	cmp	r3, #31
 8015192:	d902      	bls.n	801519a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8015194:	f06f 0302 	mvn.w	r3, #2
 8015198:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d145      	bne.n	801522c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	691b      	ldr	r3, [r3, #16]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	6810      	ldr	r0, [r2, #0]
 80151a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80151ac:	2100      	movs	r1, #0
 80151ae:	4798      	blx	r3
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	db37      	blt.n	8015226 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	6810      	ldr	r0, [r2, #0]
 80151be:	f107 0208 	add.w	r2, r7, #8
 80151c2:	2100      	movs	r1, #0
 80151c4:	4798      	blx	r3
 80151c6:	4603      	mov	r3, r0
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	db28      	blt.n	801521e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	699b      	ldr	r3, [r3, #24]
 80151d0:	4798      	blx	r3
 80151d2:	4603      	mov	r3, r0
 80151d4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80151d6:	e01c      	b.n	8015212 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	699b      	ldr	r3, [r3, #24]
 80151dc:	4798      	blx	r3
 80151de:	4603      	mov	r3, r0
 80151e0:	461a      	mov	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80151ea:	d80e      	bhi.n	801520a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	695b      	ldr	r3, [r3, #20]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	6810      	ldr	r0, [r2, #0]
 80151f4:	f107 0208 	add.w	r2, r7, #8
 80151f8:	2100      	movs	r1, #0
 80151fa:	4798      	blx	r3
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	da07      	bge.n	8015212 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8015202:	f06f 0304 	mvn.w	r3, #4
 8015206:	613b      	str	r3, [r7, #16]
                 break;
 8015208:	e010      	b.n	801522c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801520a:	f06f 0301 	mvn.w	r3, #1
 801520e:	613b      	str	r3, [r7, #16]
               break;
 8015210:	e00c      	b.n	801522c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015218:	2b00      	cmp	r3, #0
 801521a:	d1dd      	bne.n	80151d8 <DP83848_Init+0xc6>
 801521c:	e006      	b.n	801522c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 801521e:	f06f 0304 	mvn.w	r3, #4
 8015222:	613b      	str	r3, [r7, #16]
 8015224:	e002      	b.n	801522c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8015226:	f06f 0303 	mvn.w	r3, #3
 801522a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d112      	bne.n	8015258 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	699b      	ldr	r3, [r3, #24]
 8015236:	4798      	blx	r3
 8015238:	4603      	mov	r3, r0
 801523a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 801523c:	bf00      	nop
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	699b      	ldr	r3, [r3, #24]
 8015242:	4798      	blx	r3
 8015244:	4603      	mov	r3, r0
 8015246:	461a      	mov	r2, r3
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	1ad3      	subs	r3, r2, r3
 801524c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8015250:	d9f5      	bls.n	801523e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2201      	movs	r2, #1
 8015256:	605a      	str	r2, [r3, #4]
   }

   return status;
 8015258:	693b      	ldr	r3, [r7, #16]
 }
 801525a:	4618      	mov	r0, r3
 801525c:	3718      	adds	r7, #24
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b084      	sub	sp, #16
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 801526a:	2300      	movs	r3, #0
 801526c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	695b      	ldr	r3, [r3, #20]
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	6810      	ldr	r0, [r2, #0]
 8015276:	f107 020c 	add.w	r2, r7, #12
 801527a:	2101      	movs	r1, #1
 801527c:	4798      	blx	r3
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	da02      	bge.n	801528a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8015284:	f06f 0304 	mvn.w	r3, #4
 8015288:	e06e      	b.n	8015368 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	695b      	ldr	r3, [r3, #20]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	6810      	ldr	r0, [r2, #0]
 8015292:	f107 020c 	add.w	r2, r7, #12
 8015296:	2101      	movs	r1, #1
 8015298:	4798      	blx	r3
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	da02      	bge.n	80152a6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80152a0:	f06f 0304 	mvn.w	r3, #4
 80152a4:	e060      	b.n	8015368 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f003 0304 	and.w	r3, r3, #4
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d101      	bne.n	80152b4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80152b0:	2301      	movs	r3, #1
 80152b2:	e059      	b.n	8015368 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	695b      	ldr	r3, [r3, #20]
 80152b8:	687a      	ldr	r2, [r7, #4]
 80152ba:	6810      	ldr	r0, [r2, #0]
 80152bc:	f107 020c 	add.w	r2, r7, #12
 80152c0:	2100      	movs	r1, #0
 80152c2:	4798      	blx	r3
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	da02      	bge.n	80152d0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80152ca:	f06f 0304 	mvn.w	r3, #4
 80152ce:	e04b      	b.n	8015368 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d11b      	bne.n	8015312 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d006      	beq.n	80152f2 <DP83848_GetLinkState+0x90>
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d001      	beq.n	80152f2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80152ee:	2302      	movs	r3, #2
 80152f0:	e03a      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80152fc:	2303      	movs	r3, #3
 80152fe:	e033      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015306:	2b00      	cmp	r3, #0
 8015308:	d001      	beq.n	801530e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801530a:	2304      	movs	r3, #4
 801530c:	e02c      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801530e:	2305      	movs	r3, #5
 8015310:	e02a      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	695b      	ldr	r3, [r3, #20]
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	6810      	ldr	r0, [r2, #0]
 801531a:	f107 020c 	add.w	r2, r7, #12
 801531e:	2110      	movs	r1, #16
 8015320:	4798      	blx	r3
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	da02      	bge.n	801532e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8015328:	f06f 0304 	mvn.w	r3, #4
 801532c:	e01c      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015334:	2b00      	cmp	r3, #0
 8015336:	d101      	bne.n	801533c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8015338:	2306      	movs	r3, #6
 801533a:	e015      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f003 0306 	and.w	r3, r3, #6
 8015342:	2b04      	cmp	r3, #4
 8015344:	d101      	bne.n	801534a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8015346:	2302      	movs	r3, #2
 8015348:	e00e      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f003 0306 	and.w	r3, r3, #6
 8015350:	2b00      	cmp	r3, #0
 8015352:	d101      	bne.n	8015358 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015354:	2303      	movs	r3, #3
 8015356:	e007      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f003 0306 	and.w	r3, r3, #6
 801535e:	2b06      	cmp	r3, #6
 8015360:	d101      	bne.n	8015366 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8015362:	2304      	movs	r3, #4
 8015364:	e000      	b.n	8015368 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015366:	2305      	movs	r3, #5
    }
  }
}
 8015368:	4618      	mov	r0, r3
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8015374:	4b0b      	ldr	r3, [pc, #44]	; (80153a4 <HAL_Init+0x34>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	4a0a      	ldr	r2, [pc, #40]	; (80153a4 <HAL_Init+0x34>)
 801537a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801537e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <HAL_Init+0x34>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4a07      	ldr	r2, [pc, #28]	; (80153a4 <HAL_Init+0x34>)
 8015386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801538a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801538c:	2003      	movs	r0, #3
 801538e:	f000 ff31 	bl	80161f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015392:	2007      	movs	r0, #7
 8015394:	f000 f808 	bl	80153a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015398:	f7ff f856 	bl	8014448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801539c:	2300      	movs	r3, #0
}
 801539e:	4618      	mov	r0, r3
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	40023c00 	.word	0x40023c00

080153a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80153b0:	4b12      	ldr	r3, [pc, #72]	; (80153fc <HAL_InitTick+0x54>)
 80153b2:	681a      	ldr	r2, [r3, #0]
 80153b4:	4b12      	ldr	r3, [pc, #72]	; (8015400 <HAL_InitTick+0x58>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	4619      	mov	r1, r3
 80153ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153be:	fbb3 f3f1 	udiv	r3, r3, r1
 80153c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80153c6:	4618      	mov	r0, r3
 80153c8:	f000 ff49 	bl	801625e <HAL_SYSTICK_Config>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d001      	beq.n	80153d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80153d2:	2301      	movs	r3, #1
 80153d4:	e00e      	b.n	80153f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2b0f      	cmp	r3, #15
 80153da:	d80a      	bhi.n	80153f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80153dc:	2200      	movs	r2, #0
 80153de:	6879      	ldr	r1, [r7, #4]
 80153e0:	f04f 30ff 	mov.w	r0, #4294967295
 80153e4:	f000 ff11 	bl	801620a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80153e8:	4a06      	ldr	r2, [pc, #24]	; (8015404 <HAL_InitTick+0x5c>)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80153ee:	2300      	movs	r3, #0
 80153f0:	e000      	b.n	80153f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80153f2:	2301      	movs	r3, #1
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	2000011c 	.word	0x2000011c
 8015400:	20000124 	.word	0x20000124
 8015404:	20000120 	.word	0x20000120

08015408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015408:	b480      	push	{r7}
 801540a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801540c:	4b06      	ldr	r3, [pc, #24]	; (8015428 <HAL_IncTick+0x20>)
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	461a      	mov	r2, r3
 8015412:	4b06      	ldr	r3, [pc, #24]	; (801542c <HAL_IncTick+0x24>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	4413      	add	r3, r2
 8015418:	4a04      	ldr	r2, [pc, #16]	; (801542c <HAL_IncTick+0x24>)
 801541a:	6013      	str	r3, [r2, #0]
}
 801541c:	bf00      	nop
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr
 8015426:	bf00      	nop
 8015428:	20000124 	.word	0x20000124
 801542c:	2000bd74 	.word	0x2000bd74

08015430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015430:	b480      	push	{r7}
 8015432:	af00      	add	r7, sp, #0
  return uwTick;
 8015434:	4b03      	ldr	r3, [pc, #12]	; (8015444 <HAL_GetTick+0x14>)
 8015436:	681b      	ldr	r3, [r3, #0]
}
 8015438:	4618      	mov	r0, r3
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop
 8015444:	2000bd74 	.word	0x2000bd74

08015448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b084      	sub	sp, #16
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015450:	f7ff ffee 	bl	8015430 <HAL_GetTick>
 8015454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015460:	d005      	beq.n	801546e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015462:	4b0a      	ldr	r3, [pc, #40]	; (801548c <HAL_Delay+0x44>)
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	461a      	mov	r2, r3
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	4413      	add	r3, r2
 801546c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801546e:	bf00      	nop
 8015470:	f7ff ffde 	bl	8015430 <HAL_GetTick>
 8015474:	4602      	mov	r2, r0
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	1ad3      	subs	r3, r2, r3
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	429a      	cmp	r2, r3
 801547e:	d8f7      	bhi.n	8015470 <HAL_Delay+0x28>
  {
  }
}
 8015480:	bf00      	nop
 8015482:	bf00      	nop
 8015484:	3710      	adds	r7, #16
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
 801548a:	bf00      	nop
 801548c:	20000124 	.word	0x20000124

08015490 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d101      	bne.n	80154a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801549e:	2301      	movs	r3, #1
 80154a0:	e11c      	b.n	80156dc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d131      	bne.n	8015512 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	4a8c      	ldr	r2, [pc, #560]	; (80156e4 <HAL_CAN_Init+0x254>)
 80154b2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	4a8c      	ldr	r2, [pc, #560]	; (80156e8 <HAL_CAN_Init+0x258>)
 80154b8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	4a8b      	ldr	r2, [pc, #556]	; (80156ec <HAL_CAN_Init+0x25c>)
 80154be:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	4a8b      	ldr	r2, [pc, #556]	; (80156f0 <HAL_CAN_Init+0x260>)
 80154c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	4a8a      	ldr	r2, [pc, #552]	; (80156f4 <HAL_CAN_Init+0x264>)
 80154ca:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	4a8a      	ldr	r2, [pc, #552]	; (80156f8 <HAL_CAN_Init+0x268>)
 80154d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	4a89      	ldr	r2, [pc, #548]	; (80156fc <HAL_CAN_Init+0x26c>)
 80154d6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4a89      	ldr	r2, [pc, #548]	; (8015700 <HAL_CAN_Init+0x270>)
 80154dc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	4a88      	ldr	r2, [pc, #544]	; (8015704 <HAL_CAN_Init+0x274>)
 80154e2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	4a88      	ldr	r2, [pc, #544]	; (8015708 <HAL_CAN_Init+0x278>)
 80154e8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	4a87      	ldr	r2, [pc, #540]	; (801570c <HAL_CAN_Init+0x27c>)
 80154ee:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	4a87      	ldr	r2, [pc, #540]	; (8015710 <HAL_CAN_Init+0x280>)
 80154f4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	4a86      	ldr	r2, [pc, #536]	; (8015714 <HAL_CAN_Init+0x284>)
 80154fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015500:	2b00      	cmp	r3, #0
 8015502:	d102      	bne.n	801550a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	4a84      	ldr	r2, [pc, #528]	; (8015718 <HAL_CAN_Init+0x288>)
 8015508:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f042 0201 	orr.w	r2, r2, #1
 8015520:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015522:	f7ff ff85 	bl	8015430 <HAL_GetTick>
 8015526:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015528:	e012      	b.n	8015550 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801552a:	f7ff ff81 	bl	8015430 <HAL_GetTick>
 801552e:	4602      	mov	r2, r0
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	1ad3      	subs	r3, r2, r3
 8015534:	2b0a      	cmp	r3, #10
 8015536:	d90b      	bls.n	8015550 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801553c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2205      	movs	r2, #5
 8015548:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801554c:	2301      	movs	r3, #1
 801554e:	e0c5      	b.n	80156dc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	f003 0301 	and.w	r3, r3, #1
 801555a:	2b00      	cmp	r3, #0
 801555c:	d0e5      	beq.n	801552a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f022 0202 	bic.w	r2, r2, #2
 801556c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801556e:	f7ff ff5f 	bl	8015430 <HAL_GetTick>
 8015572:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015574:	e012      	b.n	801559c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015576:	f7ff ff5b 	bl	8015430 <HAL_GetTick>
 801557a:	4602      	mov	r2, r0
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	2b0a      	cmp	r3, #10
 8015582:	d90b      	bls.n	801559c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015588:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2205      	movs	r2, #5
 8015594:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015598:	2301      	movs	r3, #1
 801559a:	e09f      	b.n	80156dc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	f003 0302 	and.w	r3, r3, #2
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d1e5      	bne.n	8015576 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	7e1b      	ldrb	r3, [r3, #24]
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d108      	bne.n	80155c4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	e007      	b.n	80155d4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80155d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	7e5b      	ldrb	r3, [r3, #25]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d108      	bne.n	80155ee <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80155ea:	601a      	str	r2, [r3, #0]
 80155ec:	e007      	b.n	80155fe <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80155fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	7e9b      	ldrb	r3, [r3, #26]
 8015602:	2b01      	cmp	r3, #1
 8015604:	d108      	bne.n	8015618 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f042 0220 	orr.w	r2, r2, #32
 8015614:	601a      	str	r2, [r3, #0]
 8015616:	e007      	b.n	8015628 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f022 0220 	bic.w	r2, r2, #32
 8015626:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	7edb      	ldrb	r3, [r3, #27]
 801562c:	2b01      	cmp	r3, #1
 801562e:	d108      	bne.n	8015642 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	f022 0210 	bic.w	r2, r2, #16
 801563e:	601a      	str	r2, [r3, #0]
 8015640:	e007      	b.n	8015652 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f042 0210 	orr.w	r2, r2, #16
 8015650:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	7f1b      	ldrb	r3, [r3, #28]
 8015656:	2b01      	cmp	r3, #1
 8015658:	d108      	bne.n	801566c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f042 0208 	orr.w	r2, r2, #8
 8015668:	601a      	str	r2, [r3, #0]
 801566a:	e007      	b.n	801567c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f022 0208 	bic.w	r2, r2, #8
 801567a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	7f5b      	ldrb	r3, [r3, #29]
 8015680:	2b01      	cmp	r3, #1
 8015682:	d108      	bne.n	8015696 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	f042 0204 	orr.w	r2, r2, #4
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	e007      	b.n	80156a6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	f022 0204 	bic.w	r2, r2, #4
 80156a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	689a      	ldr	r2, [r3, #8]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	68db      	ldr	r3, [r3, #12]
 80156ae:	431a      	orrs	r2, r3
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	691b      	ldr	r3, [r3, #16]
 80156b4:	431a      	orrs	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	695b      	ldr	r3, [r3, #20]
 80156ba:	ea42 0103 	orr.w	r1, r2, r3
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	1e5a      	subs	r2, r3, #1
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	430a      	orrs	r2, r1
 80156ca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2200      	movs	r2, #0
 80156d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2201      	movs	r2, #1
 80156d6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80156da:	2300      	movs	r3, #0
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3710      	adds	r7, #16
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	0800fa95 	.word	0x0800fa95
 80156e8:	08015fef 	.word	0x08015fef
 80156ec:	0800fbb1 	.word	0x0800fbb1
 80156f0:	08016003 	.word	0x08016003
 80156f4:	08015f77 	.word	0x08015f77
 80156f8:	08015f8b 	.word	0x08015f8b
 80156fc:	08015f9f 	.word	0x08015f9f
 8015700:	08015fb3 	.word	0x08015fb3
 8015704:	08015fc7 	.word	0x08015fc7
 8015708:	08015fdb 	.word	0x08015fdb
 801570c:	08016017 	.word	0x08016017
 8015710:	0801602b 	.word	0x0801602b
 8015714:	0801603f 	.word	0x0801603f
 8015718:	0800f939 	.word	0x0800f939

0801571c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 801571c:	b480      	push	{r7}
 801571e:	b087      	sub	sp, #28
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015732:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015734:	7cfb      	ldrb	r3, [r7, #19]
 8015736:	2b01      	cmp	r3, #1
 8015738:	d003      	beq.n	8015742 <HAL_CAN_ConfigFilter+0x26>
 801573a:	7cfb      	ldrb	r3, [r7, #19]
 801573c:	2b02      	cmp	r3, #2
 801573e:	f040 80c7 	bne.w	80158d0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	4a69      	ldr	r2, [pc, #420]	; (80158ec <HAL_CAN_ConfigFilter+0x1d0>)
 8015748:	4293      	cmp	r3, r2
 801574a:	d001      	beq.n	8015750 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 801574c:	4b68      	ldr	r3, [pc, #416]	; (80158f0 <HAL_CAN_ConfigFilter+0x1d4>)
 801574e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015756:	f043 0201 	orr.w	r2, r3, #1
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	4a63      	ldr	r2, [pc, #396]	; (80158f0 <HAL_CAN_ConfigFilter+0x1d4>)
 8015764:	4293      	cmp	r3, r2
 8015766:	d111      	bne.n	801578c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801576e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015782:	021b      	lsls	r3, r3, #8
 8015784:	431a      	orrs	r2, r3
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	695b      	ldr	r3, [r3, #20]
 8015790:	f003 031f 	and.w	r3, r3, #31
 8015794:	2201      	movs	r2, #1
 8015796:	fa02 f303 	lsl.w	r3, r2, r3
 801579a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	43db      	mvns	r3, r3
 80157a6:	401a      	ands	r2, r3
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	69db      	ldr	r3, [r3, #28]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d123      	bne.n	80157fe <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	43db      	mvns	r3, r3
 80157c0:	401a      	ands	r2, r3
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	685b      	ldr	r3, [r3, #4]
 80157d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80157d4:	683a      	ldr	r2, [r7, #0]
 80157d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80157d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	3248      	adds	r2, #72	; 0x48
 80157de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	689b      	ldr	r3, [r3, #8]
 80157e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80157f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80157f4:	6979      	ldr	r1, [r7, #20]
 80157f6:	3348      	adds	r3, #72	; 0x48
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	69db      	ldr	r3, [r3, #28]
 8015802:	2b01      	cmp	r3, #1
 8015804:	d122      	bne.n	801584c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	431a      	orrs	r2, r3
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015822:	683a      	ldr	r2, [r7, #0]
 8015824:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015826:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	3248      	adds	r2, #72	; 0x48
 801582c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	689b      	ldr	r3, [r3, #8]
 8015834:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015840:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015842:	6979      	ldr	r1, [r7, #20]
 8015844:	3348      	adds	r3, #72	; 0x48
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	440b      	add	r3, r1
 801584a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d109      	bne.n	8015868 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	43db      	mvns	r3, r3
 801585e:	401a      	ands	r2, r3
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015866:	e007      	b.n	8015878 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	431a      	orrs	r2, r3
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d109      	bne.n	8015894 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	43db      	mvns	r3, r3
 801588a:	401a      	ands	r2, r3
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8015892:	e007      	b.n	80158a4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	431a      	orrs	r2, r3
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	6a1b      	ldr	r3, [r3, #32]
 80158a8:	2b01      	cmp	r3, #1
 80158aa:	d107      	bne.n	80158bc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	431a      	orrs	r2, r3
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80158c2:	f023 0201 	bic.w	r2, r3, #1
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80158cc:	2300      	movs	r3, #0
 80158ce:	e006      	b.n	80158de <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80158dc:	2301      	movs	r3, #1
  }
}
 80158de:	4618      	mov	r0, r3
 80158e0:	371c      	adds	r7, #28
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	40003400 	.word	0x40003400
 80158f0:	40006400 	.word	0x40006400

080158f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015902:	b2db      	uxtb	r3, r3
 8015904:	2b01      	cmp	r3, #1
 8015906:	d12e      	bne.n	8015966 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2202      	movs	r2, #2
 801590c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f022 0201 	bic.w	r2, r2, #1
 801591e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015920:	f7ff fd86 	bl	8015430 <HAL_GetTick>
 8015924:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015926:	e012      	b.n	801594e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015928:	f7ff fd82 	bl	8015430 <HAL_GetTick>
 801592c:	4602      	mov	r2, r0
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	1ad3      	subs	r3, r2, r3
 8015932:	2b0a      	cmp	r3, #10
 8015934:	d90b      	bls.n	801594e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801593a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2205      	movs	r2, #5
 8015946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801594a:	2301      	movs	r3, #1
 801594c:	e012      	b.n	8015974 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	f003 0301 	and.w	r3, r3, #1
 8015958:	2b00      	cmp	r3, #0
 801595a:	d1e5      	bne.n	8015928 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2200      	movs	r2, #0
 8015960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015962:	2300      	movs	r3, #0
 8015964:	e006      	b.n	8015974 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801596a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015972:	2301      	movs	r3, #1
  }
}
 8015974:	4618      	mov	r0, r3
 8015976:	3710      	adds	r7, #16
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}

0801597c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801597c:	b480      	push	{r7}
 801597e:	b087      	sub	sp, #28
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8015992:	7dfb      	ldrb	r3, [r7, #23]
 8015994:	2b01      	cmp	r3, #1
 8015996:	d003      	beq.n	80159a0 <HAL_CAN_GetRxMessage+0x24>
 8015998:	7dfb      	ldrb	r3, [r7, #23]
 801599a:	2b02      	cmp	r3, #2
 801599c:	f040 80f3 	bne.w	8015b86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d10e      	bne.n	80159c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	f003 0303 	and.w	r3, r3, #3
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d116      	bne.n	80159e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80159c0:	2301      	movs	r3, #1
 80159c2:	e0e7      	b.n	8015b94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	691b      	ldr	r3, [r3, #16]
 80159ca:	f003 0303 	and.w	r3, r3, #3
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d107      	bne.n	80159e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80159de:	2301      	movs	r3, #1
 80159e0:	e0d8      	b.n	8015b94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	681a      	ldr	r2, [r3, #0]
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	331b      	adds	r3, #27
 80159ea:	011b      	lsls	r3, r3, #4
 80159ec:	4413      	add	r3, r2
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	f003 0204 	and.w	r2, r3, #4
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d10c      	bne.n	8015a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	331b      	adds	r3, #27
 8015a08:	011b      	lsls	r3, r3, #4
 8015a0a:	4413      	add	r3, r2
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	0d5b      	lsrs	r3, r3, #21
 8015a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	e00b      	b.n	8015a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	331b      	adds	r3, #27
 8015a22:	011b      	lsls	r3, r3, #4
 8015a24:	4413      	add	r3, r2
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	08db      	lsrs	r3, r3, #3
 8015a2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	331b      	adds	r3, #27
 8015a3a:	011b      	lsls	r3, r3, #4
 8015a3c:	4413      	add	r3, r2
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f003 0202 	and.w	r2, r3, #2
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	331b      	adds	r3, #27
 8015a50:	011b      	lsls	r3, r3, #4
 8015a52:	4413      	add	r3, r2
 8015a54:	3304      	adds	r3, #4
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	f003 020f 	and.w	r2, r3, #15
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	331b      	adds	r3, #27
 8015a68:	011b      	lsls	r3, r3, #4
 8015a6a:	4413      	add	r3, r2
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	0a1b      	lsrs	r3, r3, #8
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	331b      	adds	r3, #27
 8015a80:	011b      	lsls	r3, r3, #4
 8015a82:	4413      	add	r3, r2
 8015a84:	3304      	adds	r3, #4
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	0c1b      	lsrs	r3, r3, #16
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	011b      	lsls	r3, r3, #4
 8015a98:	4413      	add	r3, r2
 8015a9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	b2da      	uxtb	r2, r3
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	011b      	lsls	r3, r3, #4
 8015aae:	4413      	add	r3, r2
 8015ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	0a1a      	lsrs	r2, r3, #8
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	3301      	adds	r3, #1
 8015abc:	b2d2      	uxtb	r2, r2
 8015abe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	011b      	lsls	r3, r3, #4
 8015ac8:	4413      	add	r3, r2
 8015aca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	0c1a      	lsrs	r2, r3, #16
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	3302      	adds	r3, #2
 8015ad6:	b2d2      	uxtb	r2, r2
 8015ad8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	011b      	lsls	r3, r3, #4
 8015ae2:	4413      	add	r3, r2
 8015ae4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	0e1a      	lsrs	r2, r3, #24
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	3303      	adds	r3, #3
 8015af0:	b2d2      	uxtb	r2, r2
 8015af2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	681a      	ldr	r2, [r3, #0]
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	011b      	lsls	r3, r3, #4
 8015afc:	4413      	add	r3, r2
 8015afe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b02:	681a      	ldr	r2, [r3, #0]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	3304      	adds	r3, #4
 8015b08:	b2d2      	uxtb	r2, r2
 8015b0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	011b      	lsls	r3, r3, #4
 8015b14:	4413      	add	r3, r2
 8015b16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	0a1a      	lsrs	r2, r3, #8
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	3305      	adds	r3, #5
 8015b22:	b2d2      	uxtb	r2, r2
 8015b24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	011b      	lsls	r3, r3, #4
 8015b2e:	4413      	add	r3, r2
 8015b30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	0c1a      	lsrs	r2, r3, #16
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	3306      	adds	r3, #6
 8015b3c:	b2d2      	uxtb	r2, r2
 8015b3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681a      	ldr	r2, [r3, #0]
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	011b      	lsls	r3, r3, #4
 8015b48:	4413      	add	r3, r2
 8015b4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	0e1a      	lsrs	r2, r3, #24
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	3307      	adds	r3, #7
 8015b56:	b2d2      	uxtb	r2, r2
 8015b58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d108      	bne.n	8015b72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	68da      	ldr	r2, [r3, #12]
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	f042 0220 	orr.w	r2, r2, #32
 8015b6e:	60da      	str	r2, [r3, #12]
 8015b70:	e007      	b.n	8015b82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	691a      	ldr	r2, [r3, #16]
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f042 0220 	orr.w	r2, r2, #32
 8015b80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8015b82:	2300      	movs	r3, #0
 8015b84:	e006      	b.n	8015b94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015b92:	2301      	movs	r3, #1
  }
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	371c      	adds	r7, #28
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr

08015ba0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b085      	sub	sp, #20
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8015bb2:	7bfb      	ldrb	r3, [r7, #15]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d002      	beq.n	8015bbe <HAL_CAN_ActivateNotification+0x1e>
 8015bb8:	7bfb      	ldrb	r3, [r7, #15]
 8015bba:	2b02      	cmp	r3, #2
 8015bbc:	d109      	bne.n	8015bd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	6959      	ldr	r1, [r3, #20]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	430a      	orrs	r2, r1
 8015bcc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	e006      	b.n	8015be0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015bde:	2301      	movs	r3, #1
  }
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3714      	adds	r7, #20
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr

08015bec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b08a      	sub	sp, #40	; 0x28
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	695b      	ldr	r3, [r3, #20]
 8015bfe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	691b      	ldr	r3, [r3, #16]
 8015c1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	699b      	ldr	r3, [r3, #24]
 8015c26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8015c28:	6a3b      	ldr	r3, [r7, #32]
 8015c2a:	f003 0301 	and.w	r3, r3, #1
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f000 8083 	beq.w	8015d3a <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8015c34:	69bb      	ldr	r3, [r7, #24]
 8015c36:	f003 0301 	and.w	r3, r3, #1
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d025      	beq.n	8015c8a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2201      	movs	r2, #1
 8015c44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	f003 0302 	and.w	r3, r3, #2
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d004      	beq.n	8015c5a <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	4798      	blx	r3
 8015c58:	e017      	b.n	8015c8a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	f003 0304 	and.w	r3, r3, #4
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d004      	beq.n	8015c6e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8015c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c6c:	e00d      	b.n	8015c8a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8015c6e:	69bb      	ldr	r3, [r7, #24]
 8015c70:	f003 0308 	and.w	r3, r3, #8
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d004      	beq.n	8015c82 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8015c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8015c80:	e003      	b.n	8015c8a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d026      	beq.n	8015ce2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015c9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8015c9e:	69bb      	ldr	r3, [r7, #24]
 8015ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d004      	beq.n	8015cb2 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	4798      	blx	r3
 8015cb0:	e017      	b.n	8015ce2 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d004      	beq.n	8015cc6 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8015cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8015cc4:	e00d      	b.n	8015ce2 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d004      	beq.n	8015cda <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8015cd8:	e003      	b.n	8015ce2 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d026      	beq.n	8015d3a <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015cf4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8015cf6:	69bb      	ldr	r3, [r7, #24]
 8015cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d004      	beq.n	8015d0a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	4798      	blx	r3
 8015d08:	e017      	b.n	8015d3a <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8015d0a:	69bb      	ldr	r3, [r7, #24]
 8015d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d004      	beq.n	8015d1e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8015d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8015d1c:	e00d      	b.n	8015d3a <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d004      	beq.n	8015d32 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8015d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d30:	e003      	b.n	8015d3a <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8015d3a:	6a3b      	ldr	r3, [r7, #32]
 8015d3c:	f003 0308 	and.w	r3, r3, #8
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00c      	beq.n	8015d5e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	f003 0310 	and.w	r3, r3, #16
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d007      	beq.n	8015d5e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2210      	movs	r2, #16
 8015d5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8015d5e:	6a3b      	ldr	r3, [r7, #32]
 8015d60:	f003 0304 	and.w	r3, r3, #4
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00c      	beq.n	8015d82 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	f003 0308 	and.w	r3, r3, #8
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d007      	beq.n	8015d82 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2208      	movs	r2, #8
 8015d78:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8015d82:	6a3b      	ldr	r3, [r7, #32]
 8015d84:	f003 0302 	and.w	r3, r3, #2
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d00a      	beq.n	8015da2 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	f003 0303 	and.w	r3, r3, #3
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d003      	beq.n	8015da2 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d00c      	beq.n	8015dc6 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	f003 0310 	and.w	r3, r3, #16
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d007      	beq.n	8015dc6 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8015db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015dbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2210      	movs	r2, #16
 8015dc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8015dc6:	6a3b      	ldr	r3, [r7, #32]
 8015dc8:	f003 0320 	and.w	r3, r3, #32
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00c      	beq.n	8015dea <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	f003 0308 	and.w	r3, r3, #8
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d007      	beq.n	8015dea <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2208      	movs	r2, #8
 8015de0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8015dea:	6a3b      	ldr	r3, [r7, #32]
 8015dec:	f003 0310 	and.w	r3, r3, #16
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00a      	beq.n	8015e0a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	691b      	ldr	r3, [r3, #16]
 8015dfa:	f003 0303 	and.w	r3, r3, #3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d003      	beq.n	8015e0a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8015e0a:	6a3b      	ldr	r3, [r7, #32]
 8015e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d00c      	beq.n	8015e2e <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	f003 0310 	and.w	r3, r3, #16
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d007      	beq.n	8015e2e <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	2210      	movs	r2, #16
 8015e24:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8015e2e:	6a3b      	ldr	r3, [r7, #32]
 8015e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00c      	beq.n	8015e52 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	f003 0308 	and.w	r3, r3, #8
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d007      	beq.n	8015e52 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	2208      	movs	r2, #8
 8015e48:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8015e52:	6a3b      	ldr	r3, [r7, #32]
 8015e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d07b      	beq.n	8015f54 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8015e5c:	69fb      	ldr	r3, [r7, #28]
 8015e5e:	f003 0304 	and.w	r3, r3, #4
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d072      	beq.n	8015f4c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015e66:	6a3b      	ldr	r3, [r7, #32]
 8015e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d008      	beq.n	8015e82 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d003      	beq.n	8015e82 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8015e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e7c:	f043 0301 	orr.w	r3, r3, #1
 8015e80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015e82:	6a3b      	ldr	r3, [r7, #32]
 8015e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d008      	beq.n	8015e9e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d003      	beq.n	8015e9e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8015e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e98:	f043 0302 	orr.w	r3, r3, #2
 8015e9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015e9e:	6a3b      	ldr	r3, [r7, #32]
 8015ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d008      	beq.n	8015eba <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d003      	beq.n	8015eba <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8015eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb4:	f043 0304 	orr.w	r3, r3, #4
 8015eb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015eba:	6a3b      	ldr	r3, [r7, #32]
 8015ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d043      	beq.n	8015f4c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d03e      	beq.n	8015f4c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015ed4:	2b60      	cmp	r3, #96	; 0x60
 8015ed6:	d02b      	beq.n	8015f30 <HAL_CAN_IRQHandler+0x344>
 8015ed8:	2b60      	cmp	r3, #96	; 0x60
 8015eda:	d82e      	bhi.n	8015f3a <HAL_CAN_IRQHandler+0x34e>
 8015edc:	2b50      	cmp	r3, #80	; 0x50
 8015ede:	d022      	beq.n	8015f26 <HAL_CAN_IRQHandler+0x33a>
 8015ee0:	2b50      	cmp	r3, #80	; 0x50
 8015ee2:	d82a      	bhi.n	8015f3a <HAL_CAN_IRQHandler+0x34e>
 8015ee4:	2b40      	cmp	r3, #64	; 0x40
 8015ee6:	d019      	beq.n	8015f1c <HAL_CAN_IRQHandler+0x330>
 8015ee8:	2b40      	cmp	r3, #64	; 0x40
 8015eea:	d826      	bhi.n	8015f3a <HAL_CAN_IRQHandler+0x34e>
 8015eec:	2b30      	cmp	r3, #48	; 0x30
 8015eee:	d010      	beq.n	8015f12 <HAL_CAN_IRQHandler+0x326>
 8015ef0:	2b30      	cmp	r3, #48	; 0x30
 8015ef2:	d822      	bhi.n	8015f3a <HAL_CAN_IRQHandler+0x34e>
 8015ef4:	2b10      	cmp	r3, #16
 8015ef6:	d002      	beq.n	8015efe <HAL_CAN_IRQHandler+0x312>
 8015ef8:	2b20      	cmp	r3, #32
 8015efa:	d005      	beq.n	8015f08 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8015efc:	e01d      	b.n	8015f3a <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	f043 0308 	orr.w	r3, r3, #8
 8015f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f06:	e019      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	f043 0310 	orr.w	r3, r3, #16
 8015f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f10:	e014      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8015f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f14:	f043 0320 	orr.w	r3, r3, #32
 8015f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f1a:	e00f      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f24:	e00a      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8015f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f2e:	e005      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8015f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f38:	e000      	b.n	8015f3c <HAL_CAN_IRQHandler+0x350>
            break;
 8015f3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	699a      	ldr	r2, [r3, #24]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8015f4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	2204      	movs	r2, #4
 8015f52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d009      	beq.n	8015f6e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f60:	431a      	orrs	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8015f6e:	bf00      	nop
 8015f70:	3728      	adds	r7, #40	; 0x28
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015f76:	b480      	push	{r7}
 8015f78:	b083      	sub	sp, #12
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8015f7e:	bf00      	nop
 8015f80:	370c      	adds	r7, #12
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr

08015f8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015f8a:	b480      	push	{r7}
 8015f8c:	b083      	sub	sp, #12
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8015f92:	bf00      	nop
 8015f94:	370c      	adds	r7, #12
 8015f96:	46bd      	mov	sp, r7
 8015f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9c:	4770      	bx	lr

08015f9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015f9e:	b480      	push	{r7}
 8015fa0:	b083      	sub	sp, #12
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8015fa6:	bf00      	nop
 8015fa8:	370c      	adds	r7, #12
 8015faa:	46bd      	mov	sp, r7
 8015fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb0:	4770      	bx	lr

08015fb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015fb2:	b480      	push	{r7}
 8015fb4:	b083      	sub	sp, #12
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8015fba:	bf00      	nop
 8015fbc:	370c      	adds	r7, #12
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc4:	4770      	bx	lr

08015fc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015fc6:	b480      	push	{r7}
 8015fc8:	b083      	sub	sp, #12
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8015fce:	bf00      	nop
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd8:	4770      	bx	lr

08015fda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015fda:	b480      	push	{r7}
 8015fdc:	b083      	sub	sp, #12
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8015fe2:	bf00      	nop
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8015fee:	b480      	push	{r7}
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8015ff6:	bf00      	nop
 8015ff8:	370c      	adds	r7, #12
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016000:	4770      	bx	lr

08016002 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8016002:	b480      	push	{r7}
 8016004:	b083      	sub	sp, #12
 8016006:	af00      	add	r7, sp, #0
 8016008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801600a:	bf00      	nop
 801600c:	370c      	adds	r7, #12
 801600e:	46bd      	mov	sp, r7
 8016010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016014:	4770      	bx	lr

08016016 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8016016:	b480      	push	{r7}
 8016018:	b083      	sub	sp, #12
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801601e:	bf00      	nop
 8016020:	370c      	adds	r7, #12
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr

0801602a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801602a:	b480      	push	{r7}
 801602c:	b083      	sub	sp, #12
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8016032:	bf00      	nop
 8016034:	370c      	adds	r7, #12
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801603e:	b480      	push	{r7}
 8016040:	b083      	sub	sp, #12
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8016046:	bf00      	nop
 8016048:	370c      	adds	r7, #12
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
	...

08016054 <__NVIC_SetPriorityGrouping>:
{
 8016054:	b480      	push	{r7}
 8016056:	b085      	sub	sp, #20
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f003 0307 	and.w	r3, r3, #7
 8016062:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016064:	4b0b      	ldr	r3, [pc, #44]	; (8016094 <__NVIC_SetPriorityGrouping+0x40>)
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801606a:	68ba      	ldr	r2, [r7, #8]
 801606c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016070:	4013      	ands	r3, r2
 8016072:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801607c:	4b06      	ldr	r3, [pc, #24]	; (8016098 <__NVIC_SetPriorityGrouping+0x44>)
 801607e:	4313      	orrs	r3, r2
 8016080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016082:	4a04      	ldr	r2, [pc, #16]	; (8016094 <__NVIC_SetPriorityGrouping+0x40>)
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	60d3      	str	r3, [r2, #12]
}
 8016088:	bf00      	nop
 801608a:	3714      	adds	r7, #20
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr
 8016094:	e000ed00 	.word	0xe000ed00
 8016098:	05fa0000 	.word	0x05fa0000

0801609c <__NVIC_GetPriorityGrouping>:
{
 801609c:	b480      	push	{r7}
 801609e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80160a0:	4b04      	ldr	r3, [pc, #16]	; (80160b4 <__NVIC_GetPriorityGrouping+0x18>)
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	0a1b      	lsrs	r3, r3, #8
 80160a6:	f003 0307 	and.w	r3, r3, #7
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr
 80160b4:	e000ed00 	.word	0xe000ed00

080160b8 <__NVIC_EnableIRQ>:
{
 80160b8:	b480      	push	{r7}
 80160ba:	b083      	sub	sp, #12
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80160c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	db0b      	blt.n	80160e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80160ca:	79fb      	ldrb	r3, [r7, #7]
 80160cc:	f003 021f 	and.w	r2, r3, #31
 80160d0:	4907      	ldr	r1, [pc, #28]	; (80160f0 <__NVIC_EnableIRQ+0x38>)
 80160d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160d6:	095b      	lsrs	r3, r3, #5
 80160d8:	2001      	movs	r0, #1
 80160da:	fa00 f202 	lsl.w	r2, r0, r2
 80160de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80160e2:	bf00      	nop
 80160e4:	370c      	adds	r7, #12
 80160e6:	46bd      	mov	sp, r7
 80160e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ec:	4770      	bx	lr
 80160ee:	bf00      	nop
 80160f0:	e000e100 	.word	0xe000e100

080160f4 <__NVIC_SetPriority>:
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	4603      	mov	r3, r0
 80160fc:	6039      	str	r1, [r7, #0]
 80160fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016104:	2b00      	cmp	r3, #0
 8016106:	db0a      	blt.n	801611e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	b2da      	uxtb	r2, r3
 801610c:	490c      	ldr	r1, [pc, #48]	; (8016140 <__NVIC_SetPriority+0x4c>)
 801610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016112:	0112      	lsls	r2, r2, #4
 8016114:	b2d2      	uxtb	r2, r2
 8016116:	440b      	add	r3, r1
 8016118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801611c:	e00a      	b.n	8016134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	b2da      	uxtb	r2, r3
 8016122:	4908      	ldr	r1, [pc, #32]	; (8016144 <__NVIC_SetPriority+0x50>)
 8016124:	79fb      	ldrb	r3, [r7, #7]
 8016126:	f003 030f 	and.w	r3, r3, #15
 801612a:	3b04      	subs	r3, #4
 801612c:	0112      	lsls	r2, r2, #4
 801612e:	b2d2      	uxtb	r2, r2
 8016130:	440b      	add	r3, r1
 8016132:	761a      	strb	r2, [r3, #24]
}
 8016134:	bf00      	nop
 8016136:	370c      	adds	r7, #12
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr
 8016140:	e000e100 	.word	0xe000e100
 8016144:	e000ed00 	.word	0xe000ed00

08016148 <NVIC_EncodePriority>:
{
 8016148:	b480      	push	{r7}
 801614a:	b089      	sub	sp, #36	; 0x24
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f003 0307 	and.w	r3, r3, #7
 801615a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	f1c3 0307 	rsb	r3, r3, #7
 8016162:	2b04      	cmp	r3, #4
 8016164:	bf28      	it	cs
 8016166:	2304      	movcs	r3, #4
 8016168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	3304      	adds	r3, #4
 801616e:	2b06      	cmp	r3, #6
 8016170:	d902      	bls.n	8016178 <NVIC_EncodePriority+0x30>
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	3b03      	subs	r3, #3
 8016176:	e000      	b.n	801617a <NVIC_EncodePriority+0x32>
 8016178:	2300      	movs	r3, #0
 801617a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801617c:	f04f 32ff 	mov.w	r2, #4294967295
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	fa02 f303 	lsl.w	r3, r2, r3
 8016186:	43da      	mvns	r2, r3
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	401a      	ands	r2, r3
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016190:	f04f 31ff 	mov.w	r1, #4294967295
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	fa01 f303 	lsl.w	r3, r1, r3
 801619a:	43d9      	mvns	r1, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161a0:	4313      	orrs	r3, r2
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3724      	adds	r7, #36	; 0x24
 80161a6:	46bd      	mov	sp, r7
 80161a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ac:	4770      	bx	lr
	...

080161b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	3b01      	subs	r3, #1
 80161bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80161c0:	d301      	bcc.n	80161c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80161c2:	2301      	movs	r3, #1
 80161c4:	e00f      	b.n	80161e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80161c6:	4a0a      	ldr	r2, [pc, #40]	; (80161f0 <SysTick_Config+0x40>)
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	3b01      	subs	r3, #1
 80161cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80161ce:	210f      	movs	r1, #15
 80161d0:	f04f 30ff 	mov.w	r0, #4294967295
 80161d4:	f7ff ff8e 	bl	80160f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80161d8:	4b05      	ldr	r3, [pc, #20]	; (80161f0 <SysTick_Config+0x40>)
 80161da:	2200      	movs	r2, #0
 80161dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80161de:	4b04      	ldr	r3, [pc, #16]	; (80161f0 <SysTick_Config+0x40>)
 80161e0:	2207      	movs	r2, #7
 80161e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80161e4:	2300      	movs	r3, #0
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3708      	adds	r7, #8
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}
 80161ee:	bf00      	nop
 80161f0:	e000e010 	.word	0xe000e010

080161f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7ff ff29 	bl	8016054 <__NVIC_SetPriorityGrouping>
}
 8016202:	bf00      	nop
 8016204:	3708      	adds	r7, #8
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}

0801620a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801620a:	b580      	push	{r7, lr}
 801620c:	b086      	sub	sp, #24
 801620e:	af00      	add	r7, sp, #0
 8016210:	4603      	mov	r3, r0
 8016212:	60b9      	str	r1, [r7, #8]
 8016214:	607a      	str	r2, [r7, #4]
 8016216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016218:	2300      	movs	r3, #0
 801621a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801621c:	f7ff ff3e 	bl	801609c <__NVIC_GetPriorityGrouping>
 8016220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	68b9      	ldr	r1, [r7, #8]
 8016226:	6978      	ldr	r0, [r7, #20]
 8016228:	f7ff ff8e 	bl	8016148 <NVIC_EncodePriority>
 801622c:	4602      	mov	r2, r0
 801622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016232:	4611      	mov	r1, r2
 8016234:	4618      	mov	r0, r3
 8016236:	f7ff ff5d 	bl	80160f4 <__NVIC_SetPriority>
}
 801623a:	bf00      	nop
 801623c:	3718      	adds	r7, #24
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}

08016242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016242:	b580      	push	{r7, lr}
 8016244:	b082      	sub	sp, #8
 8016246:	af00      	add	r7, sp, #0
 8016248:	4603      	mov	r3, r0
 801624a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801624c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016250:	4618      	mov	r0, r3
 8016252:	f7ff ff31 	bl	80160b8 <__NVIC_EnableIRQ>
}
 8016256:	bf00      	nop
 8016258:	3708      	adds	r7, #8
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b082      	sub	sp, #8
 8016262:	af00      	add	r7, sp, #0
 8016264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f7ff ffa2 	bl	80161b0 <SysTick_Config>
 801626c:	4603      	mov	r3, r0
}
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
	...

08016278 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8016278:	b480      	push	{r7}
 801627a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801627c:	f3bf 8f5f 	dmb	sy
}
 8016280:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8016282:	4b07      	ldr	r3, [pc, #28]	; (80162a0 <HAL_MPU_Disable+0x28>)
 8016284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016286:	4a06      	ldr	r2, [pc, #24]	; (80162a0 <HAL_MPU_Disable+0x28>)
 8016288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801628c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801628e:	4b05      	ldr	r3, [pc, #20]	; (80162a4 <HAL_MPU_Disable+0x2c>)
 8016290:	2200      	movs	r2, #0
 8016292:	605a      	str	r2, [r3, #4]
}
 8016294:	bf00      	nop
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop
 80162a0:	e000ed00 	.word	0xe000ed00
 80162a4:	e000ed90 	.word	0xe000ed90

080162a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80162a8:	b480      	push	{r7}
 80162aa:	b083      	sub	sp, #12
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80162b0:	4a0b      	ldr	r2, [pc, #44]	; (80162e0 <HAL_MPU_Enable+0x38>)
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f043 0301 	orr.w	r3, r3, #1
 80162b8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80162ba:	4b0a      	ldr	r3, [pc, #40]	; (80162e4 <HAL_MPU_Enable+0x3c>)
 80162bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162be:	4a09      	ldr	r2, [pc, #36]	; (80162e4 <HAL_MPU_Enable+0x3c>)
 80162c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80162c4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80162c6:	f3bf 8f4f 	dsb	sy
}
 80162ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80162cc:	f3bf 8f6f 	isb	sy
}
 80162d0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80162d2:	bf00      	nop
 80162d4:	370c      	adds	r7, #12
 80162d6:	46bd      	mov	sp, r7
 80162d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162dc:	4770      	bx	lr
 80162de:	bf00      	nop
 80162e0:	e000ed90 	.word	0xe000ed90
 80162e4:	e000ed00 	.word	0xe000ed00

080162e8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b083      	sub	sp, #12
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	785a      	ldrb	r2, [r3, #1]
 80162f4:	4b1d      	ldr	r3, [pc, #116]	; (801636c <HAL_MPU_ConfigRegion+0x84>)
 80162f6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d029      	beq.n	8016354 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016300:	4a1a      	ldr	r2, [pc, #104]	; (801636c <HAL_MPU_ConfigRegion+0x84>)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	7b1b      	ldrb	r3, [r3, #12]
 801630c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	7adb      	ldrb	r3, [r3, #11]
 8016312:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016314:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	7a9b      	ldrb	r3, [r3, #10]
 801631a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801631c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	7b5b      	ldrb	r3, [r3, #13]
 8016322:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016324:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	7b9b      	ldrb	r3, [r3, #14]
 801632a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801632c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	7bdb      	ldrb	r3, [r3, #15]
 8016332:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	7a5b      	ldrb	r3, [r3, #9]
 801633a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801633c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	7a1b      	ldrb	r3, [r3, #8]
 8016342:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016344:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	7812      	ldrb	r2, [r2, #0]
 801634a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801634c:	4a07      	ldr	r2, [pc, #28]	; (801636c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801634e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016350:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8016352:	e005      	b.n	8016360 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8016354:	4b05      	ldr	r3, [pc, #20]	; (801636c <HAL_MPU_ConfigRegion+0x84>)
 8016356:	2200      	movs	r2, #0
 8016358:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801635a:	4b04      	ldr	r3, [pc, #16]	; (801636c <HAL_MPU_ConfigRegion+0x84>)
 801635c:	2200      	movs	r2, #0
 801635e:	611a      	str	r2, [r3, #16]
}
 8016360:	bf00      	nop
 8016362:	370c      	adds	r7, #12
 8016364:	46bd      	mov	sp, r7
 8016366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636a:	4770      	bx	lr
 801636c:	e000ed90 	.word	0xe000ed90

08016370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801637c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801637e:	f7ff f857 	bl	8015430 <HAL_GetTick>
 8016382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801638a:	b2db      	uxtb	r3, r3
 801638c:	2b02      	cmp	r3, #2
 801638e:	d008      	beq.n	80163a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2280      	movs	r2, #128	; 0x80
 8016394:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801639e:	2301      	movs	r3, #1
 80163a0:	e052      	b.n	8016448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	681a      	ldr	r2, [r3, #0]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	f022 0216 	bic.w	r2, r2, #22
 80163b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	695a      	ldr	r2, [r3, #20]
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80163c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d103      	bne.n	80163d2 <HAL_DMA_Abort+0x62>
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d007      	beq.n	80163e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	f022 0208 	bic.w	r2, r2, #8
 80163e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	f022 0201 	bic.w	r2, r2, #1
 80163f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80163f2:	e013      	b.n	801641c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80163f4:	f7ff f81c 	bl	8015430 <HAL_GetTick>
 80163f8:	4602      	mov	r2, r0
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	1ad3      	subs	r3, r2, r3
 80163fe:	2b05      	cmp	r3, #5
 8016400:	d90c      	bls.n	801641c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2220      	movs	r2, #32
 8016406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2203      	movs	r2, #3
 801640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2200      	movs	r2, #0
 8016414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016418:	2303      	movs	r3, #3
 801641a:	e015      	b.n	8016448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	f003 0301 	and.w	r3, r3, #1
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1e4      	bne.n	80163f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801642e:	223f      	movs	r2, #63	; 0x3f
 8016430:	409a      	lsls	r2, r3
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2201      	movs	r2, #1
 801643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2200      	movs	r2, #0
 8016442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8016446:	2300      	movs	r3, #0
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016450:	b480      	push	{r7}
 8016452:	b083      	sub	sp, #12
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b02      	cmp	r3, #2
 8016462:	d004      	beq.n	801646e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2280      	movs	r2, #128	; 0x80
 8016468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801646a:	2301      	movs	r3, #1
 801646c:	e00c      	b.n	8016488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2205      	movs	r2, #5
 8016472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f022 0201 	bic.w	r2, r2, #1
 8016484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	370c      	adds	r7, #12
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr

08016494 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80164a2:	2301      	movs	r3, #1
 80164a4:	e06a      	b.n	801657c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d106      	bne.n	80164be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2223      	movs	r2, #35	; 0x23
 80164b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f006 fb9b 	bl	801cbf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80164be:	4b31      	ldr	r3, [pc, #196]	; (8016584 <HAL_ETH_Init+0xf0>)
 80164c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164c2:	4a30      	ldr	r2, [pc, #192]	; (8016584 <HAL_ETH_Init+0xf0>)
 80164c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80164c8:	6453      	str	r3, [r2, #68]	; 0x44
 80164ca:	4b2e      	ldr	r3, [pc, #184]	; (8016584 <HAL_ETH_Init+0xf0>)
 80164cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80164d2:	60bb      	str	r3, [r7, #8]
 80164d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80164d6:	4b2c      	ldr	r3, [pc, #176]	; (8016588 <HAL_ETH_Init+0xf4>)
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	4a2b      	ldr	r2, [pc, #172]	; (8016588 <HAL_ETH_Init+0xf4>)
 80164dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80164e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80164e2:	4b29      	ldr	r3, [pc, #164]	; (8016588 <HAL_ETH_Init+0xf4>)
 80164e4:	685a      	ldr	r2, [r3, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	689b      	ldr	r3, [r3, #8]
 80164ea:	4927      	ldr	r1, [pc, #156]	; (8016588 <HAL_ETH_Init+0xf4>)
 80164ec:	4313      	orrs	r3, r2
 80164ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80164f0:	4b25      	ldr	r3, [pc, #148]	; (8016588 <HAL_ETH_Init+0xf4>)
 80164f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	6812      	ldr	r2, [r2, #0]
 8016502:	f043 0301 	orr.w	r3, r3, #1
 8016506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801650a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801650c:	f7fe ff90 	bl	8015430 <HAL_GetTick>
 8016510:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016512:	e011      	b.n	8016538 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8016514:	f7fe ff8c 	bl	8015430 <HAL_GetTick>
 8016518:	4602      	mov	r2, r0
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	1ad3      	subs	r3, r2, r3
 801651e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016522:	d909      	bls.n	8016538 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2204      	movs	r2, #4
 8016528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	22e0      	movs	r2, #224	; 0xe0
 8016530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8016534:	2301      	movs	r3, #1
 8016536:	e021      	b.n	801657c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f003 0301 	and.w	r3, r3, #1
 8016546:	2b00      	cmp	r3, #0
 8016548:	d1e4      	bne.n	8016514 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f000 fee4 	bl	8017318 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f000 ff8b 	bl	801746c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 ffe1 	bl	801751e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	461a      	mov	r2, r3
 8016562:	2100      	movs	r1, #0
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f000 ff49 	bl	80173fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2210      	movs	r2, #16
 8016576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801657a:	2300      	movs	r3, #0
}
 801657c:	4618      	mov	r0, r3
 801657e:	3710      	adds	r7, #16
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}
 8016584:	40023800 	.word	0x40023800
 8016588:	40013800 	.word	0x40013800

0801658c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801659a:	2b10      	cmp	r3, #16
 801659c:	d150      	bne.n	8016640 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2223      	movs	r2, #35	; 0x23
 80165a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2204      	movs	r2, #4
 80165aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f000 f9fd 	bl	80169ac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	f042 0208 	orr.w	r2, r2, #8
 80165c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80165ca:	2001      	movs	r0, #1
 80165cc:	f7fe ff3c 	bl	8015448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	f042 0204 	orr.w	r2, r2, #4
 80165e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80165f0:	2001      	movs	r0, #1
 80165f2:	f7fe ff29 	bl	8015448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	68fa      	ldr	r2, [r7, #12]
 80165fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 fd2a 	bl	8017058 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801660c:	699b      	ldr	r3, [r3, #24]
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	6812      	ldr	r2, [r2, #0]
 8016612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801661a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016624:	699b      	ldr	r3, [r3, #24]
 8016626:	687a      	ldr	r2, [r7, #4]
 8016628:	6812      	ldr	r2, [r2, #0]
 801662a:	f043 0302 	orr.w	r3, r3, #2
 801662e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016632:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2223      	movs	r2, #35	; 0x23
 8016638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801663c:	2300      	movs	r3, #0
 801663e:	e000      	b.n	8016642 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016640:	2301      	movs	r3, #1
  }
}
 8016642:	4618      	mov	r0, r3
 8016644:	3710      	adds	r7, #16
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801664a:	b580      	push	{r7, lr}
 801664c:	b084      	sub	sp, #16
 801664e:	af00      	add	r7, sp, #0
 8016650:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016658:	2b23      	cmp	r3, #35	; 0x23
 801665a:	d14a      	bne.n	80166f2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2223      	movs	r2, #35	; 0x23
 8016660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801666c:	699b      	ldr	r3, [r3, #24]
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	6812      	ldr	r2, [r2, #0]
 8016672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801667a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016684:	699b      	ldr	r3, [r3, #24]
 8016686:	687a      	ldr	r2, [r7, #4]
 8016688:	6812      	ldr	r2, [r2, #0]
 801668a:	f023 0302 	bic.w	r3, r3, #2
 801668e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016692:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	f022 0204 	bic.w	r2, r2, #4
 80166a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80166ac:	2001      	movs	r0, #1
 80166ae:	f7fe fecb 	bl	8015448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	68fa      	ldr	r2, [r7, #12]
 80166b8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 fccc 	bl	8017058 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	f022 0208 	bic.w	r2, r2, #8
 80166ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80166d8:	2001      	movs	r0, #1
 80166da:	f7fe feb5 	bl	8015448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	68fa      	ldr	r2, [r7, #12]
 80166e4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2210      	movs	r2, #16
 80166ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80166ee:	2300      	movs	r3, #0
 80166f0:	e000      	b.n	80166f4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80166f2:	2301      	movs	r3, #1
  }
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3710      	adds	r7, #16
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d109      	bne.n	8016722 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016714:	f043 0201 	orr.w	r2, r3, #1
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801671e:	2301      	movs	r3, #1
 8016720:	e07c      	b.n	801681c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016728:	2b23      	cmp	r3, #35	; 0x23
 801672a:	d176      	bne.n	801681a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801672c:	2200      	movs	r2, #0
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f000 ff61 	bl	80175f8 <ETH_Prepare_Tx_Descriptors>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d009      	beq.n	8016750 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016742:	f043 0202 	orr.w	r2, r3, #2
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801674c:	2301      	movs	r3, #1
 801674e:	e065      	b.n	801681c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016750:	f3bf 8f4f 	dsb	sy
}
 8016754:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	3206      	adds	r2, #6
 801675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016762:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016768:	1c5a      	adds	r2, r3, #1
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	629a      	str	r2, [r3, #40]	; 0x28
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016772:	2b03      	cmp	r3, #3
 8016774:	d904      	bls.n	8016780 <HAL_ETH_Transmit+0x84>
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801677a:	1f1a      	subs	r2, r3, #4
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	3106      	adds	r1, #6
 801678c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016794:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8016796:	f7fe fe4b 	bl	8015430 <HAL_GetTick>
 801679a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801679c:	e037      	b.n	801680e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167a6:	695b      	ldr	r3, [r3, #20]
 80167a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d011      	beq.n	80167d4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167b6:	f043 0208 	orr.w	r2, r3, #8
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167c8:	695a      	ldr	r2, [r3, #20]
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80167d0:	2301      	movs	r3, #1
 80167d2:	e023      	b.n	801681c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167da:	d018      	beq.n	801680e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80167dc:	f7fe fe28 	bl	8015430 <HAL_GetTick>
 80167e0:	4602      	mov	r2, r0
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	1ad3      	subs	r3, r2, r3
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d302      	bcc.n	80167f2 <HAL_ETH_Transmit+0xf6>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d10d      	bne.n	801680e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167f8:	f043 0204 	orr.w	r2, r3, #4
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016808:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801680a:	2301      	movs	r3, #1
 801680c:	e006      	b.n	801681c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	dbc3      	blt.n	801679e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016816:	2300      	movs	r3, #0
 8016818:	e000      	b.n	801681c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801681a:	2301      	movs	r3, #1
  }
}
 801681c:	4618      	mov	r0, r3
 801681e:	3718      	adds	r7, #24
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b088      	sub	sp, #32
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801682e:	2300      	movs	r3, #0
 8016830:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016832:	2300      	movs	r3, #0
 8016834:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d109      	bne.n	8016850 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016842:	f043 0201 	orr.w	r2, r3, #1
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801684c:	2301      	movs	r3, #1
 801684e:	e0a8      	b.n	80169a2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016856:	2b23      	cmp	r3, #35	; 0x23
 8016858:	d001      	beq.n	801685e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	e0a1      	b.n	80169a2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016862:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	69fa      	ldr	r2, [r7, #28]
 8016868:	3212      	adds	r2, #18
 801686a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801686e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016874:	f1c3 0304 	rsb	r3, r3, #4
 8016878:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801687a:	e06a      	b.n	8016952 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801687c:	69bb      	ldr	r3, [r7, #24]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016884:	2b00      	cmp	r3, #0
 8016886:	d007      	beq.n	8016898 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8016888:	69bb      	ldr	r3, [r7, #24]
 801688a:	699a      	ldr	r2, [r3, #24]
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8016890:	69bb      	ldr	r3, [r7, #24]
 8016892:	69da      	ldr	r2, [r3, #28]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8016898:	69bb      	ldr	r3, [r7, #24]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d103      	bne.n	80168ac <HAL_ETH_ReadData+0x88>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d040      	beq.n	801692e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80168ac:	69bb      	ldr	r3, [r7, #24]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d005      	beq.n	80168c4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2200      	movs	r2, #0
 80168bc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	695b      	ldr	r3, [r3, #20]
 80168c8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80168ca:	69bb      	ldr	r3, [r7, #24]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d00c      	beq.n	80168f0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	0c1b      	lsrs	r3, r3, #16
 80168dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80168e0:	3b04      	subs	r3, #4
 80168e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80168e4:	69bb      	ldr	r3, [r7, #24]
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80168ec:	2301      	movs	r3, #1
 80168ee:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80168f0:	69bb      	ldr	r3, [r7, #24]
 80168f2:	689a      	ldr	r2, [r3, #8]
 80168f4:	69bb      	ldr	r3, [r7, #24]
 80168f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016908:	461a      	mov	r2, r3
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	b29b      	uxth	r3, r3
 801690e:	f006 fb3b 	bl	801cf88 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016916:	1c5a      	adds	r2, r3, #1
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016920:	693b      	ldr	r3, [r7, #16]
 8016922:	441a      	add	r2, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	2200      	movs	r2, #0
 801692c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	3301      	adds	r3, #1
 8016932:	61fb      	str	r3, [r7, #28]
 8016934:	69fb      	ldr	r3, [r7, #28]
 8016936:	2b03      	cmp	r3, #3
 8016938:	d902      	bls.n	8016940 <HAL_ETH_ReadData+0x11c>
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	3b04      	subs	r3, #4
 801693e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	69fa      	ldr	r2, [r7, #28]
 8016944:	3212      	adds	r2, #18
 8016946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801694a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	3301      	adds	r3, #1
 8016950:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	db06      	blt.n	8016968 <HAL_ETH_ReadData+0x144>
 801695a:	697a      	ldr	r2, [r7, #20]
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	429a      	cmp	r2, r3
 8016960:	d202      	bcs.n	8016968 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8016962:	7bfb      	ldrb	r3, [r7, #15]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d089      	beq.n	801687c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	441a      	add	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d002      	beq.n	8016982 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 f815 	bl	80169ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	69fa      	ldr	r2, [r7, #28]
 8016986:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8016988:	7bfb      	ldrb	r3, [r7, #15]
 801698a:	2b01      	cmp	r3, #1
 801698c:	d108      	bne.n	80169a0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2200      	movs	r2, #0
 801699a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801699c:	2300      	movs	r3, #0
 801699e:	e000      	b.n	80169a2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3720      	adds	r7, #32
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
	...

080169ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b088      	sub	sp, #32
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80169b4:	2300      	movs	r3, #0
 80169b6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80169b8:	2301      	movs	r3, #1
 80169ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80169c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	69fa      	ldr	r2, [r7, #28]
 80169c6:	3212      	adds	r2, #18
 80169c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80169d4:	e040      	b.n	8016a58 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	6a1b      	ldr	r3, [r3, #32]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d112      	bne.n	8016a04 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80169de:	f107 030c 	add.w	r3, r7, #12
 80169e2:	4618      	mov	r0, r3
 80169e4:	f006 faa0 	bl	801cf28 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d102      	bne.n	80169f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80169ee:	2300      	movs	r3, #0
 80169f0:	74fb      	strb	r3, [r7, #19]
 80169f2:	e007      	b.n	8016a04 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	461a      	mov	r2, r3
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	461a      	mov	r2, r3
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8016a04:	7cfb      	ldrb	r3, [r7, #19]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d026      	beq.n	8016a58 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d103      	bne.n	8016a1a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	4a1e      	ldr	r2, [pc, #120]	; (8016a90 <ETH_UpdateDescriptor+0xe4>)
 8016a16:	605a      	str	r2, [r3, #4]
 8016a18:	e003      	b.n	8016a22 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8016a20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8016a22:	f3bf 8f5f 	dmb	sy
}
 8016a26:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	3301      	adds	r3, #1
 8016a38:	61fb      	str	r3, [r7, #28]
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	2b03      	cmp	r3, #3
 8016a3e:	d902      	bls.n	8016a46 <ETH_UpdateDescriptor+0x9a>
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	3b04      	subs	r3, #4
 8016a44:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	69fa      	ldr	r2, [r7, #28]
 8016a4a:	3212      	adds	r2, #18
 8016a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a50:	617b      	str	r3, [r7, #20]
      desccount--;
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	3b01      	subs	r3, #1
 8016a56:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8016a58:	69bb      	ldr	r3, [r7, #24]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d002      	beq.n	8016a64 <ETH_UpdateDescriptor+0xb8>
 8016a5e:	7cfb      	ldrb	r3, [r7, #19]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d1b8      	bne.n	80169d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a68:	69ba      	ldr	r2, [r7, #24]
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d00c      	beq.n	8016a88 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a76:	461a      	mov	r2, r3
 8016a78:	2300      	movs	r3, #0
 8016a7a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	69fa      	ldr	r2, [r7, #28]
 8016a80:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	69ba      	ldr	r2, [r7, #24]
 8016a86:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8016a88:	bf00      	nop
 8016a8a:	3720      	adds	r7, #32
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	800045f8 	.word	0x800045f8

08016a94 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016aa4:	695b      	ldr	r3, [r3, #20]
 8016aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016aaa:	2b40      	cmp	r3, #64	; 0x40
 8016aac:	d112      	bne.n	8016ad4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ab6:	69db      	ldr	r3, [r3, #28]
 8016ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016abc:	2b40      	cmp	r3, #64	; 0x40
 8016abe:	d109      	bne.n	8016ad4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4b50      	ldr	r3, [pc, #320]	; (8016c0c <HAL_ETH_IRQHandler+0x178>)
 8016acc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 f8ac 	bl	8016c2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016adc:	695b      	ldr	r3, [r3, #20]
 8016ade:	f003 0301 	and.w	r3, r3, #1
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d113      	bne.n	8016b0e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016aee:	69db      	ldr	r3, [r3, #28]
 8016af0:	f003 0301 	and.w	r3, r3, #1
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d10a      	bne.n	8016b0e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b00:	461a      	mov	r2, r3
 8016b02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8016b06:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f000 f885 	bl	8016c18 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b16:	695b      	ldr	r3, [r3, #20]
 8016b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016b20:	d14c      	bne.n	8016bbc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b2a:	69db      	ldr	r3, [r3, #28]
 8016b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016b34:	d142      	bne.n	8016bbc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b3c:	f043 0208 	orr.w	r2, r3, #8
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b4e:	695b      	ldr	r3, [r3, #20]
 8016b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016b58:	d11a      	bne.n	8016b90 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b62:	695a      	ldr	r2, [r3, #20]
 8016b64:	4b2a      	ldr	r3, [pc, #168]	; (8016c10 <HAL_ETH_IRQHandler+0x17c>)
 8016b66:	4013      	ands	r3, r2
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b76:	69db      	ldr	r3, [r3, #28]
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	6812      	ldr	r2, [r2, #0]
 8016b7c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8016b80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016b84:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	22e0      	movs	r2, #224	; 0xe0
 8016b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8016b8e:	e012      	b.n	8016bb6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b98:	695a      	ldr	r2, [r3, #20]
 8016b9a:	f248 6380 	movw	r3, #34432	; 0x8680
 8016b9e:	4013      	ands	r3, r2
 8016ba0:	687a      	ldr	r2, [r7, #4]
 8016ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bae:	461a      	mov	r2, r3
 8016bb0:	f248 6380 	movw	r3, #34432	; 0x8680
 8016bb4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f000 f842 	bl	8016c40 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bc2:	f003 0308 	and.w	r3, r3, #8
 8016bc6:	2b08      	cmp	r3, #8
 8016bc8:	d10e      	bne.n	8016be8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f000 f83a 	bl	8016c54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2200      	movs	r2, #0
 8016be4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8016be8:	4b0a      	ldr	r3, [pc, #40]	; (8016c14 <HAL_ETH_IRQHandler+0x180>)
 8016bea:	695b      	ldr	r3, [r3, #20]
 8016bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d006      	beq.n	8016c02 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8016bf4:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <HAL_ETH_IRQHandler+0x180>)
 8016bf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016bfa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 f833 	bl	8016c68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8016c02:	bf00      	nop
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	00010040 	.word	0x00010040
 8016c10:	007e2000 	.word	0x007e2000
 8016c14:	40013c00 	.word	0x40013c00

08016c18 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8016c20:	bf00      	nop
 8016c22:	370c      	adds	r7, #12
 8016c24:	46bd      	mov	sp, r7
 8016c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2a:	4770      	bx	lr

08016c2c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b083      	sub	sp, #12
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8016c34:	bf00      	nop
 8016c36:	370c      	adds	r7, #12
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8016c48:	bf00      	nop
 8016c4a:	370c      	adds	r7, #12
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c52:	4770      	bx	lr

08016c54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8016c54:	b480      	push	{r7}
 8016c56:	b083      	sub	sp, #12
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8016c5c:	bf00      	nop
 8016c5e:	370c      	adds	r7, #12
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr

08016c68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b083      	sub	sp, #12
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8016c70:	bf00      	nop
 8016c72:	370c      	adds	r7, #12
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr

08016c7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b086      	sub	sp, #24
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	60b9      	str	r1, [r7, #8]
 8016c86:	607a      	str	r2, [r7, #4]
 8016c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	691b      	ldr	r3, [r3, #16]
 8016c90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	f003 031c 	and.w	r3, r3, #28
 8016c98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	02db      	lsls	r3, r3, #11
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	697a      	ldr	r2, [r7, #20]
 8016ca2:	4313      	orrs	r3, r2
 8016ca4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	019b      	lsls	r3, r3, #6
 8016caa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016cae:	697a      	ldr	r2, [r7, #20]
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	f023 0302 	bic.w	r3, r3, #2
 8016cba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8016cbc:	697b      	ldr	r3, [r7, #20]
 8016cbe:	f043 0301 	orr.w	r3, r3, #1
 8016cc2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	697a      	ldr	r2, [r7, #20]
 8016cca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8016ccc:	f7fe fbb0 	bl	8015430 <HAL_GetTick>
 8016cd0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016cd2:	e00d      	b.n	8016cf0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8016cd4:	f7fe fbac 	bl	8015430 <HAL_GetTick>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	1ad3      	subs	r3, r2, r3
 8016cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ce2:	d301      	bcc.n	8016ce8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	e010      	b.n	8016d0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	691b      	ldr	r3, [r3, #16]
 8016cee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	f003 0301 	and.w	r3, r3, #1
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d1ec      	bne.n	8016cd4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	695b      	ldr	r3, [r3, #20]
 8016d00:	b29b      	uxth	r3, r3
 8016d02:	461a      	mov	r2, r3
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8016d08:	2300      	movs	r3, #0
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3718      	adds	r7, #24
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}

08016d12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8016d12:	b580      	push	{r7, lr}
 8016d14:	b086      	sub	sp, #24
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	60f8      	str	r0, [r7, #12]
 8016d1a:	60b9      	str	r1, [r7, #8]
 8016d1c:	607a      	str	r2, [r7, #4]
 8016d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	f003 031c 	and.w	r3, r3, #28
 8016d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	02db      	lsls	r3, r3, #11
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	697a      	ldr	r2, [r7, #20]
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	019b      	lsls	r3, r3, #6
 8016d40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016d44:	697a      	ldr	r2, [r7, #20]
 8016d46:	4313      	orrs	r3, r2
 8016d48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	f043 0302 	orr.w	r3, r3, #2
 8016d50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	f043 0301 	orr.w	r3, r3, #1
 8016d58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	697a      	ldr	r2, [r7, #20]
 8016d6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016d6c:	f7fe fb60 	bl	8015430 <HAL_GetTick>
 8016d70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016d72:	e00d      	b.n	8016d90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8016d74:	f7fe fb5c 	bl	8015430 <HAL_GetTick>
 8016d78:	4602      	mov	r2, r0
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	1ad3      	subs	r3, r2, r3
 8016d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d82:	d301      	bcc.n	8016d88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8016d84:	2301      	movs	r3, #1
 8016d86:	e009      	b.n	8016d9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	691b      	ldr	r3, [r3, #16]
 8016d8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	f003 0301 	and.w	r3, r3, #1
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d1ec      	bne.n	8016d74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3718      	adds	r7, #24
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8016da4:	b480      	push	{r7}
 8016da6:	b083      	sub	sp, #12
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d101      	bne.n	8016db8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8016db4:	2301      	movs	r3, #1
 8016db6:	e0d9      	b.n	8016f6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	f003 0310 	and.w	r3, r3, #16
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	bf14      	ite	ne
 8016dc6:	2301      	movne	r3, #1
 8016dc8:	2300      	moveq	r3, #0
 8016dca:	b2db      	uxtb	r3, r3
 8016dcc:	461a      	mov	r2, r3
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	bf0c      	ite	eq
 8016df0:	2301      	moveq	r3, #1
 8016df2:	2300      	movne	r3, #0
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	461a      	mov	r2, r3
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	bf14      	ite	ne
 8016e0c:	2301      	movne	r3, #1
 8016e0e:	2300      	moveq	r3, #0
 8016e10:	b2db      	uxtb	r3, r3
 8016e12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	bf0c      	ite	eq
 8016e26:	2301      	moveq	r3, #1
 8016e28:	2300      	movne	r3, #0
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	461a      	mov	r2, r3
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	bf14      	ite	ne
 8016e40:	2301      	movne	r3, #1
 8016e42:	2300      	moveq	r3, #0
 8016e44:	b2db      	uxtb	r3, r3
 8016e46:	461a      	mov	r2, r3
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8016e56:	683b      	ldr	r3, [r7, #0]
 8016e58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	bf0c      	ite	eq
 8016e76:	2301      	moveq	r3, #1
 8016e78:	2300      	movne	r3, #0
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	683b      	ldr	r3, [r7, #0]
 8016e80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	bf0c      	ite	eq
 8016e90:	2301      	moveq	r3, #1
 8016e92:	2300      	movne	r3, #0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	461a      	mov	r2, r3
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	bf14      	ite	ne
 8016eaa:	2301      	movne	r3, #1
 8016eac:	2300      	moveq	r3, #0
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	461a      	mov	r2, r3
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	bf14      	ite	ne
 8016ed2:	2301      	movne	r3, #1
 8016ed4:	2300      	moveq	r3, #0
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	461a      	mov	r2, r3
 8016eda:	683b      	ldr	r3, [r7, #0]
 8016edc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	699b      	ldr	r3, [r3, #24]
 8016ee4:	f003 0302 	and.w	r3, r3, #2
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	bf14      	ite	ne
 8016eec:	2301      	movne	r3, #1
 8016eee:	2300      	moveq	r3, #0
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	699b      	ldr	r3, [r3, #24]
 8016f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	bf0c      	ite	eq
 8016f08:	2301      	moveq	r3, #1
 8016f0a:	2300      	movne	r3, #0
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	461a      	mov	r2, r3
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	699b      	ldr	r3, [r3, #24]
 8016f1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	699b      	ldr	r3, [r3, #24]
 8016f2a:	0c1b      	lsrs	r3, r3, #16
 8016f2c:	b29a      	uxth	r2, r3
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	699b      	ldr	r3, [r3, #24]
 8016f38:	f003 0304 	and.w	r3, r3, #4
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	bf14      	ite	ne
 8016f40:	2301      	movne	r3, #1
 8016f42:	2300      	moveq	r3, #0
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	461a      	mov	r2, r3
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	699b      	ldr	r3, [r3, #24]
 8016f54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	bf14      	ite	ne
 8016f5c:	2301      	movne	r3, #1
 8016f5e:	2300      	moveq	r3, #0
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8016f6a:	2300      	movs	r3, #0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
 8016f80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d101      	bne.n	8016f8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8016f88:	2301      	movs	r3, #1
 8016f8a:	e00b      	b.n	8016fa4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016f92:	2b10      	cmp	r3, #16
 8016f94:	d105      	bne.n	8016fa2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8016f96:	6839      	ldr	r1, [r7, #0]
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f000 f883 	bl	80170a4 <ETH_SetMACConfig>

    return HAL_OK;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	e000      	b.n	8016fa4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8016fa2:	2301      	movs	r3, #1
  }
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3708      	adds	r7, #8
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}

08016fac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b084      	sub	sp, #16
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	691b      	ldr	r3, [r3, #16]
 8016fba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	f023 031c 	bic.w	r3, r3, #28
 8016fc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8016fc4:	f002 f916 	bl	80191f4 <HAL_RCC_GetHCLKFreq>
 8016fc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	4a1d      	ldr	r2, [pc, #116]	; (8017044 <HAL_ETH_SetMDIOClockRange+0x98>)
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	d908      	bls.n	8016fe4 <HAL_ETH_SetMDIOClockRange+0x38>
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	4a1c      	ldr	r2, [pc, #112]	; (8017048 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8016fd6:	4293      	cmp	r3, r2
 8016fd8:	d804      	bhi.n	8016fe4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f043 0308 	orr.w	r3, r3, #8
 8016fe0:	60fb      	str	r3, [r7, #12]
 8016fe2:	e027      	b.n	8017034 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	4a18      	ldr	r2, [pc, #96]	; (8017048 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d908      	bls.n	8016ffe <HAL_ETH_SetMDIOClockRange+0x52>
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	4a17      	ldr	r2, [pc, #92]	; (801704c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8016ff0:	4293      	cmp	r3, r2
 8016ff2:	d204      	bcs.n	8016ffe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	f043 030c 	orr.w	r3, r3, #12
 8016ffa:	60fb      	str	r3, [r7, #12]
 8016ffc:	e01a      	b.n	8017034 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	4a12      	ldr	r2, [pc, #72]	; (801704c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8017002:	4293      	cmp	r3, r2
 8017004:	d303      	bcc.n	801700e <HAL_ETH_SetMDIOClockRange+0x62>
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	4a11      	ldr	r2, [pc, #68]	; (8017050 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801700a:	4293      	cmp	r3, r2
 801700c:	d911      	bls.n	8017032 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	4a0f      	ldr	r2, [pc, #60]	; (8017050 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8017012:	4293      	cmp	r3, r2
 8017014:	d908      	bls.n	8017028 <HAL_ETH_SetMDIOClockRange+0x7c>
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	4a0e      	ldr	r2, [pc, #56]	; (8017054 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801701a:	4293      	cmp	r3, r2
 801701c:	d804      	bhi.n	8017028 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f043 0304 	orr.w	r3, r3, #4
 8017024:	60fb      	str	r3, [r7, #12]
 8017026:	e005      	b.n	8017034 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	f043 0310 	orr.w	r3, r3, #16
 801702e:	60fb      	str	r3, [r7, #12]
 8017030:	e000      	b.n	8017034 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8017032:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	68fa      	ldr	r2, [r7, #12]
 801703a:	611a      	str	r2, [r3, #16]
}
 801703c:	bf00      	nop
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	01312cff 	.word	0x01312cff
 8017048:	02160ebf 	.word	0x02160ebf
 801704c:	03938700 	.word	0x03938700
 8017050:	05f5e0ff 	.word	0x05f5e0ff
 8017054:	08f0d17f 	.word	0x08f0d17f

08017058 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8017060:	2300      	movs	r3, #0
 8017062:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801706c:	699b      	ldr	r3, [r3, #24]
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	6812      	ldr	r2, [r2, #0]
 8017072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801707a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017084:	699b      	ldr	r3, [r3, #24]
 8017086:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017088:	2001      	movs	r0, #1
 801708a:	f7fe f9dd 	bl	8015448 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681a      	ldr	r2, [r3, #0]
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017098:	6193      	str	r3, [r2, #24]
}
 801709a:	bf00      	nop
 801709c:	3710      	adds	r7, #16
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
	...

080170a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b084      	sub	sp, #16
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80170b6:	68fa      	ldr	r2, [r7, #12]
 80170b8:	4b51      	ldr	r3, [pc, #324]	; (8017200 <ETH_SetMACConfig+0x15c>)
 80170ba:	4013      	ands	r3, r2
 80170bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	7c1b      	ldrb	r3, [r3, #16]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d102      	bne.n	80170cc <ETH_SetMACConfig+0x28>
 80170c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80170ca:	e000      	b.n	80170ce <ETH_SetMACConfig+0x2a>
 80170cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	7c5b      	ldrb	r3, [r3, #17]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d102      	bne.n	80170dc <ETH_SetMACConfig+0x38>
 80170d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80170da:	e000      	b.n	80170de <ETH_SetMACConfig+0x3a>
 80170dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80170de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80170e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	7fdb      	ldrb	r3, [r3, #31]
 80170ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80170ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80170f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80170f4:	683a      	ldr	r2, [r7, #0]
 80170f6:	7f92      	ldrb	r2, [r2, #30]
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	d102      	bne.n	8017102 <ETH_SetMACConfig+0x5e>
 80170fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017100:	e000      	b.n	8017104 <ETH_SetMACConfig+0x60>
 8017102:	2200      	movs	r2, #0
                        macconf->Speed |
 8017104:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	7f1b      	ldrb	r3, [r3, #28]
 801710a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801710c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8017112:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	791b      	ldrb	r3, [r3, #4]
 8017118:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801711a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801711c:	683a      	ldr	r2, [r7, #0]
 801711e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017122:	2a00      	cmp	r2, #0
 8017124:	d102      	bne.n	801712c <ETH_SetMACConfig+0x88>
 8017126:	f44f 7200 	mov.w	r2, #512	; 0x200
 801712a:	e000      	b.n	801712e <ETH_SetMACConfig+0x8a>
 801712c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801712e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	7bdb      	ldrb	r3, [r3, #15]
 8017134:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017136:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801713c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017144:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017146:	4313      	orrs	r3, r2
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	4313      	orrs	r3, r2
 801714c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	68fa      	ldr	r2, [r7, #12]
 8017154:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801715e:	2001      	movs	r0, #1
 8017160:	f7fe f972 	bl	8015448 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	68fa      	ldr	r2, [r7, #12]
 801716a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	699b      	ldr	r3, [r3, #24]
 8017172:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	f64f 7341 	movw	r3, #65345	; 0xff41
 801717a:	4013      	ands	r3, r2
 801717c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017182:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8017184:	683a      	ldr	r2, [r7, #0]
 8017186:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801718a:	2a00      	cmp	r2, #0
 801718c:	d101      	bne.n	8017192 <ETH_SetMACConfig+0xee>
 801718e:	2280      	movs	r2, #128	; 0x80
 8017190:	e000      	b.n	8017194 <ETH_SetMACConfig+0xf0>
 8017192:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017194:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801719a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801719c:	683a      	ldr	r2, [r7, #0]
 801719e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80171a2:	2a01      	cmp	r2, #1
 80171a4:	d101      	bne.n	80171aa <ETH_SetMACConfig+0x106>
 80171a6:	2208      	movs	r2, #8
 80171a8:	e000      	b.n	80171ac <ETH_SetMACConfig+0x108>
 80171aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80171ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80171ae:	683a      	ldr	r2, [r7, #0]
 80171b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80171b4:	2a01      	cmp	r2, #1
 80171b6:	d101      	bne.n	80171bc <ETH_SetMACConfig+0x118>
 80171b8:	2204      	movs	r2, #4
 80171ba:	e000      	b.n	80171be <ETH_SetMACConfig+0x11a>
 80171bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80171be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80171c0:	683a      	ldr	r2, [r7, #0]
 80171c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80171c6:	2a01      	cmp	r2, #1
 80171c8:	d101      	bne.n	80171ce <ETH_SetMACConfig+0x12a>
 80171ca:	2202      	movs	r2, #2
 80171cc:	e000      	b.n	80171d0 <ETH_SetMACConfig+0x12c>
 80171ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80171d0:	4313      	orrs	r3, r2
 80171d2:	68fa      	ldr	r2, [r7, #12]
 80171d4:	4313      	orrs	r3, r2
 80171d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	68fa      	ldr	r2, [r7, #12]
 80171de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	699b      	ldr	r3, [r3, #24]
 80171e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80171e8:	2001      	movs	r0, #1
 80171ea:	f7fe f92d 	bl	8015448 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	68fa      	ldr	r2, [r7, #12]
 80171f4:	619a      	str	r2, [r3, #24]
}
 80171f6:	bf00      	nop
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	ff20810f 	.word	0xff20810f

08017204 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b084      	sub	sp, #16
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017216:	699b      	ldr	r3, [r3, #24]
 8017218:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801721a:	68fa      	ldr	r2, [r7, #12]
 801721c:	4b3d      	ldr	r3, [pc, #244]	; (8017314 <ETH_SetDMAConfig+0x110>)
 801721e:	4013      	ands	r3, r2
 8017220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	7b1b      	ldrb	r3, [r3, #12]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d102      	bne.n	8017230 <ETH_SetDMAConfig+0x2c>
 801722a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801722e:	e000      	b.n	8017232 <ETH_SetDMAConfig+0x2e>
 8017230:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	7b5b      	ldrb	r3, [r3, #13]
 8017236:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017238:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801723a:	683a      	ldr	r2, [r7, #0]
 801723c:	7f52      	ldrb	r2, [r2, #29]
 801723e:	2a00      	cmp	r2, #0
 8017240:	d102      	bne.n	8017248 <ETH_SetDMAConfig+0x44>
 8017242:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017246:	e000      	b.n	801724a <ETH_SetDMAConfig+0x46>
 8017248:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801724a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	7b9b      	ldrb	r3, [r3, #14]
 8017250:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017252:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017258:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	7f1b      	ldrb	r3, [r3, #28]
 801725e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8017260:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	7f9b      	ldrb	r3, [r3, #30]
 8017266:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017268:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801726e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017276:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017278:	4313      	orrs	r3, r2
 801727a:	68fa      	ldr	r2, [r7, #12]
 801727c:	4313      	orrs	r3, r2
 801727e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017288:	461a      	mov	r2, r3
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017296:	699b      	ldr	r3, [r3, #24]
 8017298:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801729a:	2001      	movs	r0, #1
 801729c:	f7fe f8d4 	bl	8015448 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172a8:	461a      	mov	r2, r3
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	791b      	ldrb	r3, [r3, #4]
 80172b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80172b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80172be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80172c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80172cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80172ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80172d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80172dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80172de:	687a      	ldr	r2, [r7, #4]
 80172e0:	6812      	ldr	r2, [r2, #0]
 80172e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80172e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80172ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80172f8:	2001      	movs	r0, #1
 80172fa:	f7fe f8a5 	bl	8015448 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017306:	461a      	mov	r2, r3
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	6013      	str	r3, [r2, #0]
}
 801730c:	bf00      	nop
 801730e:	3710      	adds	r7, #16
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	f8de3f23 	.word	0xf8de3f23

08017318 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b0a6      	sub	sp, #152	; 0x98
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017320:	2301      	movs	r3, #1
 8017322:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8017326:	2301      	movs	r3, #1
 8017328:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801732c:	2300      	movs	r3, #0
 801732e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017330:	2300      	movs	r3, #0
 8017332:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8017336:	2301      	movs	r3, #1
 8017338:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801733c:	2300      	movs	r3, #0
 801733e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8017342:	2301      	movs	r3, #1
 8017344:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017348:	2300      	movs	r3, #0
 801734a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801734e:	2300      	movs	r3, #0
 8017350:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8017354:	2300      	movs	r3, #0
 8017356:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8017358:	2300      	movs	r3, #0
 801735a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801735e:	2300      	movs	r3, #0
 8017360:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8017362:	2300      	movs	r3, #0
 8017364:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8017368:	2300      	movs	r3, #0
 801736a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801736e:	2300      	movs	r3, #0
 8017370:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8017374:	2300      	movs	r3, #0
 8017376:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801737a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801737e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8017380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017384:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8017386:	2300      	movs	r3, #0
 8017388:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801738c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017390:	4619      	mov	r1, r3
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7ff fe86 	bl	80170a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8017398:	2301      	movs	r3, #1
 801739a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801739c:	2301      	movs	r3, #1
 801739e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80173a0:	2301      	movs	r3, #1
 80173a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80173a6:	2301      	movs	r3, #1
 80173a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80173aa:	2300      	movs	r3, #0
 80173ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80173ae:	2300      	movs	r3, #0
 80173b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80173b4:	2300      	movs	r3, #0
 80173b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80173ba:	2300      	movs	r3, #0
 80173bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80173be:	2301      	movs	r3, #1
 80173c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80173c4:	2301      	movs	r3, #1
 80173c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80173c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80173cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80173ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80173d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80173d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80173d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80173da:	2301      	movs	r3, #1
 80173dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80173e0:	2300      	movs	r3, #0
 80173e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80173e4:	2300      	movs	r3, #0
 80173e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80173e8:	f107 0308 	add.w	r3, r7, #8
 80173ec:	4619      	mov	r1, r3
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7ff ff08 	bl	8017204 <ETH_SetDMAConfig>
}
 80173f4:	bf00      	nop
 80173f6:	3798      	adds	r7, #152	; 0x98
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}

080173fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b087      	sub	sp, #28
 8017400:	af00      	add	r7, sp, #0
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	3305      	adds	r3, #5
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	021b      	lsls	r3, r3, #8
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	3204      	adds	r2, #4
 8017414:	7812      	ldrb	r2, [r2, #0]
 8017416:	4313      	orrs	r3, r2
 8017418:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801741a:	68ba      	ldr	r2, [r7, #8]
 801741c:	4b11      	ldr	r3, [pc, #68]	; (8017464 <ETH_MACAddressConfig+0x68>)
 801741e:	4413      	add	r3, r2
 8017420:	461a      	mov	r2, r3
 8017422:	697b      	ldr	r3, [r7, #20]
 8017424:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	3303      	adds	r3, #3
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	061a      	lsls	r2, r3, #24
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	3302      	adds	r3, #2
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	041b      	lsls	r3, r3, #16
 8017436:	431a      	orrs	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	3301      	adds	r3, #1
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	021b      	lsls	r3, r3, #8
 8017440:	4313      	orrs	r3, r2
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	7812      	ldrb	r2, [r2, #0]
 8017446:	4313      	orrs	r3, r2
 8017448:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801744a:	68ba      	ldr	r2, [r7, #8]
 801744c:	4b06      	ldr	r3, [pc, #24]	; (8017468 <ETH_MACAddressConfig+0x6c>)
 801744e:	4413      	add	r3, r2
 8017450:	461a      	mov	r2, r3
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	6013      	str	r3, [r2, #0]
}
 8017456:	bf00      	nop
 8017458:	371c      	adds	r7, #28
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop
 8017464:	40028040 	.word	0x40028040
 8017468:	40028044 	.word	0x40028044

0801746c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801746c:	b480      	push	{r7}
 801746e:	b085      	sub	sp, #20
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017474:	2300      	movs	r3, #0
 8017476:	60fb      	str	r3, [r7, #12]
 8017478:	e03e      	b.n	80174f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	68d9      	ldr	r1, [r3, #12]
 801747e:	68fa      	ldr	r2, [r7, #12]
 8017480:	4613      	mov	r3, r2
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	4413      	add	r3, r2
 8017486:	00db      	lsls	r3, r3, #3
 8017488:	440b      	add	r3, r1
 801748a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	2200      	movs	r2, #0
 8017490:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	2200      	movs	r2, #0
 8017496:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	2200      	movs	r2, #0
 801749c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2200      	movs	r2, #0
 80174a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80174a4:	68b9      	ldr	r1, [r7, #8]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	3206      	adds	r2, #6
 80174ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	2b02      	cmp	r3, #2
 80174c0:	d80c      	bhi.n	80174dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	68d9      	ldr	r1, [r3, #12]
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	1c5a      	adds	r2, r3, #1
 80174ca:	4613      	mov	r3, r2
 80174cc:	009b      	lsls	r3, r3, #2
 80174ce:	4413      	add	r3, r2
 80174d0:	00db      	lsls	r3, r3, #3
 80174d2:	440b      	add	r3, r1
 80174d4:	461a      	mov	r2, r3
 80174d6:	68bb      	ldr	r3, [r7, #8]
 80174d8:	60da      	str	r2, [r3, #12]
 80174da:	e004      	b.n	80174e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	461a      	mov	r2, r3
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	3301      	adds	r3, #1
 80174f6:	60fb      	str	r3, [r7, #12]
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2b03      	cmp	r3, #3
 80174fc:	d9bd      	bls.n	801747a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	2200      	movs	r2, #0
 8017502:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	68da      	ldr	r2, [r3, #12]
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017510:	611a      	str	r2, [r3, #16]
}
 8017512:	bf00      	nop
 8017514:	3714      	adds	r7, #20
 8017516:	46bd      	mov	sp, r7
 8017518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751c:	4770      	bx	lr

0801751e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801751e:	b480      	push	{r7}
 8017520:	b085      	sub	sp, #20
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017526:	2300      	movs	r3, #0
 8017528:	60fb      	str	r3, [r7, #12]
 801752a:	e046      	b.n	80175ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6919      	ldr	r1, [r3, #16]
 8017530:	68fa      	ldr	r2, [r7, #12]
 8017532:	4613      	mov	r3, r2
 8017534:	009b      	lsls	r3, r3, #2
 8017536:	4413      	add	r3, r2
 8017538:	00db      	lsls	r3, r3, #3
 801753a:	440b      	add	r3, r1
 801753c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	2200      	movs	r2, #0
 8017542:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	2200      	movs	r2, #0
 8017548:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	2200      	movs	r2, #0
 801754e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	2200      	movs	r2, #0
 8017554:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	2200      	movs	r2, #0
 801755a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2200      	movs	r2, #0
 8017560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017568:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8017570:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801757e:	68b9      	ldr	r1, [r7, #8]
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	68fa      	ldr	r2, [r7, #12]
 8017584:	3212      	adds	r2, #18
 8017586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	2b02      	cmp	r3, #2
 801758e:	d80c      	bhi.n	80175aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	6919      	ldr	r1, [r3, #16]
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	1c5a      	adds	r2, r3, #1
 8017598:	4613      	mov	r3, r2
 801759a:	009b      	lsls	r3, r3, #2
 801759c:	4413      	add	r3, r2
 801759e:	00db      	lsls	r3, r3, #3
 80175a0:	440b      	add	r3, r1
 80175a2:	461a      	mov	r2, r3
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	60da      	str	r2, [r3, #12]
 80175a8:	e004      	b.n	80175b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	691b      	ldr	r3, [r3, #16]
 80175ae:	461a      	mov	r2, r3
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	3301      	adds	r3, #1
 80175b8:	60fb      	str	r3, [r7, #12]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	2b03      	cmp	r3, #3
 80175be:	d9b5      	bls.n	801752c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2200      	movs	r2, #0
 80175c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2200      	movs	r2, #0
 80175ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2200      	movs	r2, #0
 80175d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	2200      	movs	r2, #0
 80175d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2200      	movs	r2, #0
 80175dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	691a      	ldr	r2, [r3, #16]
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175ea:	60da      	str	r2, [r3, #12]
}
 80175ec:	bf00      	nop
 80175ee:	3714      	adds	r7, #20
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80175f8:	b480      	push	{r7}
 80175fa:	b08d      	sub	sp, #52	; 0x34
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	60f8      	str	r0, [r7, #12]
 8017600:	60b9      	str	r1, [r7, #8]
 8017602:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	3318      	adds	r3, #24
 8017608:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	691b      	ldr	r3, [r3, #16]
 801760e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	691b      	ldr	r3, [r3, #16]
 8017614:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8017616:	2300      	movs	r3, #0
 8017618:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017622:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	689b      	ldr	r3, [r3, #8]
 8017628:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801762a:	2300      	movs	r3, #0
 801762c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801762e:	6a3b      	ldr	r3, [r7, #32]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801763a:	d007      	beq.n	801764c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801763c:	697a      	ldr	r2, [r7, #20]
 801763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017640:	3304      	adds	r3, #4
 8017642:	009b      	lsls	r3, r3, #2
 8017644:	4413      	add	r3, r2
 8017646:	685b      	ldr	r3, [r3, #4]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d001      	beq.n	8017650 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801764c:	2302      	movs	r3, #2
 801764e:	e0ff      	b.n	8017850 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017652:	3301      	adds	r3, #1
 8017654:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017656:	69fb      	ldr	r3, [r7, #28]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	461a      	mov	r2, r3
 801765c:	6a3b      	ldr	r3, [r7, #32]
 801765e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017660:	6a3b      	ldr	r3, [r7, #32]
 8017662:	685a      	ldr	r2, [r3, #4]
 8017664:	4b7d      	ldr	r3, [pc, #500]	; (801785c <ETH_Prepare_Tx_Descriptors+0x264>)
 8017666:	4013      	ands	r3, r2
 8017668:	69fa      	ldr	r2, [r7, #28]
 801766a:	6852      	ldr	r2, [r2, #4]
 801766c:	431a      	orrs	r2, r3
 801766e:	6a3b      	ldr	r3, [r7, #32]
 8017670:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	f003 0301 	and.w	r3, r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	d008      	beq.n	8017690 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801767e:	6a3b      	ldr	r3, [r7, #32]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	695b      	ldr	r3, [r3, #20]
 801768a:	431a      	orrs	r2, r3
 801768c:	6a3b      	ldr	r3, [r7, #32]
 801768e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f003 0320 	and.w	r3, r3, #32
 8017698:	2b00      	cmp	r3, #0
 801769a:	d008      	beq.n	80176ae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801769c:	6a3b      	ldr	r3, [r7, #32]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	691b      	ldr	r3, [r3, #16]
 80176a8:	431a      	orrs	r2, r3
 80176aa:	6a3b      	ldr	r3, [r7, #32]
 80176ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	f003 0304 	and.w	r3, r3, #4
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d005      	beq.n	80176c6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80176ba:	6a3b      	ldr	r3, [r7, #32]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80176c2:	6a3b      	ldr	r3, [r7, #32]
 80176c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80176c6:	6a3b      	ldr	r3, [r7, #32]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80176ce:	6a3b      	ldr	r3, [r7, #32]
 80176d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80176d2:	f3bf 8f5f 	dmb	sy
}
 80176d6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80176d8:	6a3b      	ldr	r3, [r7, #32]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80176e0:	6a3b      	ldr	r3, [r7, #32]
 80176e2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80176e4:	e082      	b.n	80177ec <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80176e6:	6a3b      	ldr	r3, [r7, #32]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80176ee:	6a3b      	ldr	r3, [r7, #32]
 80176f0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d006      	beq.n	8017706 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80176f8:	6a3b      	ldr	r3, [r7, #32]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017700:	6a3b      	ldr	r3, [r7, #32]
 8017702:	601a      	str	r2, [r3, #0]
 8017704:	e005      	b.n	8017712 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017706:	6a3b      	ldr	r3, [r7, #32]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801770e:	6a3b      	ldr	r3, [r7, #32]
 8017710:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017714:	3301      	adds	r3, #1
 8017716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801771a:	2b03      	cmp	r3, #3
 801771c:	d902      	bls.n	8017724 <ETH_Prepare_Tx_Descriptors+0x12c>
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	3b04      	subs	r3, #4
 8017722:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801772c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801772e:	6a3b      	ldr	r3, [r7, #32]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017736:	6a3b      	ldr	r3, [r7, #32]
 8017738:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801773a:	6a3b      	ldr	r3, [r7, #32]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017746:	d007      	beq.n	8017758 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017748:	697a      	ldr	r2, [r7, #20]
 801774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801774c:	3304      	adds	r3, #4
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	4413      	add	r3, r2
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d029      	beq.n	80177ac <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017764:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8017766:	2300      	movs	r3, #0
 8017768:	62bb      	str	r3, [r7, #40]	; 0x28
 801776a:	e019      	b.n	80177a0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801776c:	f3bf 8f5f 	dmb	sy
}
 8017770:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017772:	6a3b      	ldr	r3, [r7, #32]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801777a:	6a3b      	ldr	r3, [r7, #32]
 801777c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017780:	3301      	adds	r3, #1
 8017782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017786:	2b03      	cmp	r3, #3
 8017788:	d902      	bls.n	8017790 <ETH_Prepare_Tx_Descriptors+0x198>
 801778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801778c:	3b04      	subs	r3, #4
 801778e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017798:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779c:	3301      	adds	r3, #1
 801779e:	62bb      	str	r3, [r7, #40]	; 0x28
 80177a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d3e1      	bcc.n	801776c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80177a8:	2302      	movs	r3, #2
 80177aa:	e051      	b.n	8017850 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80177ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ae:	3301      	adds	r3, #1
 80177b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	689b      	ldr	r3, [r3, #8]
 80177b6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	461a      	mov	r2, r3
 80177be:	6a3b      	ldr	r3, [r7, #32]
 80177c0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80177c2:	6a3b      	ldr	r3, [r7, #32]
 80177c4:	685a      	ldr	r2, [r3, #4]
 80177c6:	4b25      	ldr	r3, [pc, #148]	; (801785c <ETH_Prepare_Tx_Descriptors+0x264>)
 80177c8:	4013      	ands	r3, r2
 80177ca:	69fa      	ldr	r2, [r7, #28]
 80177cc:	6852      	ldr	r2, [r2, #4]
 80177ce:	431a      	orrs	r2, r3
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80177d4:	69bb      	ldr	r3, [r7, #24]
 80177d6:	3301      	adds	r3, #1
 80177d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80177da:	f3bf 8f5f 	dmb	sy
}
 80177de:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80177e0:	6a3b      	ldr	r3, [r7, #32]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80177e8:	6a3b      	ldr	r3, [r7, #32]
 80177ea:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	689b      	ldr	r3, [r3, #8]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	f47f af78 	bne.w	80176e6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d006      	beq.n	801780a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80177fc:	6a3b      	ldr	r3, [r7, #32]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017804:	6a3b      	ldr	r3, [r7, #32]
 8017806:	601a      	str	r2, [r3, #0]
 8017808:	e005      	b.n	8017816 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801780a:	6a3b      	ldr	r3, [r7, #32]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017812:	6a3b      	ldr	r3, [r7, #32]
 8017814:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017816:	6a3b      	ldr	r3, [r7, #32]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801781e:	6a3b      	ldr	r3, [r7, #32]
 8017820:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017826:	6979      	ldr	r1, [r7, #20]
 8017828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782a:	3304      	adds	r3, #4
 801782c:	009b      	lsls	r3, r3, #2
 801782e:	440b      	add	r3, r1
 8017830:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017832:	697b      	ldr	r3, [r7, #20]
 8017834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017836:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017838:	b672      	cpsid	i
}
 801783a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017840:	69bb      	ldr	r3, [r7, #24]
 8017842:	4413      	add	r3, r2
 8017844:	1c5a      	adds	r2, r3, #1
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801784a:	b662      	cpsie	i
}
 801784c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801784e:	2300      	movs	r3, #0
}
 8017850:	4618      	mov	r0, r3
 8017852:	3734      	adds	r7, #52	; 0x34
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr
 801785c:	ffffe000 	.word	0xffffe000

08017860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017860:	b480      	push	{r7}
 8017862:	b089      	sub	sp, #36	; 0x24
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
 8017868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801786a:	2300      	movs	r3, #0
 801786c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801786e:	2300      	movs	r3, #0
 8017870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8017872:	2300      	movs	r3, #0
 8017874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8017876:	2300      	movs	r3, #0
 8017878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801787a:	2300      	movs	r3, #0
 801787c:	61fb      	str	r3, [r7, #28]
 801787e:	e175      	b.n	8017b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8017880:	2201      	movs	r2, #1
 8017882:	69fb      	ldr	r3, [r7, #28]
 8017884:	fa02 f303 	lsl.w	r3, r2, r3
 8017888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	697a      	ldr	r2, [r7, #20]
 8017890:	4013      	ands	r3, r2
 8017892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017894:	693a      	ldr	r2, [r7, #16]
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	429a      	cmp	r2, r3
 801789a:	f040 8164 	bne.w	8017b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	685b      	ldr	r3, [r3, #4]
 80178a2:	f003 0303 	and.w	r3, r3, #3
 80178a6:	2b01      	cmp	r3, #1
 80178a8:	d005      	beq.n	80178b6 <HAL_GPIO_Init+0x56>
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	f003 0303 	and.w	r3, r3, #3
 80178b2:	2b02      	cmp	r3, #2
 80178b4:	d130      	bne.n	8017918 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	689b      	ldr	r3, [r3, #8]
 80178ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	2203      	movs	r2, #3
 80178c2:	fa02 f303 	lsl.w	r3, r2, r3
 80178c6:	43db      	mvns	r3, r3
 80178c8:	69ba      	ldr	r2, [r7, #24]
 80178ca:	4013      	ands	r3, r2
 80178cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	68da      	ldr	r2, [r3, #12]
 80178d2:	69fb      	ldr	r3, [r7, #28]
 80178d4:	005b      	lsls	r3, r3, #1
 80178d6:	fa02 f303 	lsl.w	r3, r2, r3
 80178da:	69ba      	ldr	r2, [r7, #24]
 80178dc:	4313      	orrs	r3, r2
 80178de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	69ba      	ldr	r2, [r7, #24]
 80178e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80178ec:	2201      	movs	r2, #1
 80178ee:	69fb      	ldr	r3, [r7, #28]
 80178f0:	fa02 f303 	lsl.w	r3, r2, r3
 80178f4:	43db      	mvns	r3, r3
 80178f6:	69ba      	ldr	r2, [r7, #24]
 80178f8:	4013      	ands	r3, r2
 80178fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	091b      	lsrs	r3, r3, #4
 8017902:	f003 0201 	and.w	r2, r3, #1
 8017906:	69fb      	ldr	r3, [r7, #28]
 8017908:	fa02 f303 	lsl.w	r3, r2, r3
 801790c:	69ba      	ldr	r2, [r7, #24]
 801790e:	4313      	orrs	r3, r2
 8017910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	69ba      	ldr	r2, [r7, #24]
 8017916:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	685b      	ldr	r3, [r3, #4]
 801791c:	f003 0303 	and.w	r3, r3, #3
 8017920:	2b03      	cmp	r3, #3
 8017922:	d017      	beq.n	8017954 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	68db      	ldr	r3, [r3, #12]
 8017928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801792a:	69fb      	ldr	r3, [r7, #28]
 801792c:	005b      	lsls	r3, r3, #1
 801792e:	2203      	movs	r2, #3
 8017930:	fa02 f303 	lsl.w	r3, r2, r3
 8017934:	43db      	mvns	r3, r3
 8017936:	69ba      	ldr	r2, [r7, #24]
 8017938:	4013      	ands	r3, r2
 801793a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	689a      	ldr	r2, [r3, #8]
 8017940:	69fb      	ldr	r3, [r7, #28]
 8017942:	005b      	lsls	r3, r3, #1
 8017944:	fa02 f303 	lsl.w	r3, r2, r3
 8017948:	69ba      	ldr	r2, [r7, #24]
 801794a:	4313      	orrs	r3, r2
 801794c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	69ba      	ldr	r2, [r7, #24]
 8017952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	685b      	ldr	r3, [r3, #4]
 8017958:	f003 0303 	and.w	r3, r3, #3
 801795c:	2b02      	cmp	r3, #2
 801795e:	d123      	bne.n	80179a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8017960:	69fb      	ldr	r3, [r7, #28]
 8017962:	08da      	lsrs	r2, r3, #3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	3208      	adds	r2, #8
 8017968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801796c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	f003 0307 	and.w	r3, r3, #7
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	220f      	movs	r2, #15
 8017978:	fa02 f303 	lsl.w	r3, r2, r3
 801797c:	43db      	mvns	r3, r3
 801797e:	69ba      	ldr	r2, [r7, #24]
 8017980:	4013      	ands	r3, r2
 8017982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	691a      	ldr	r2, [r3, #16]
 8017988:	69fb      	ldr	r3, [r7, #28]
 801798a:	f003 0307 	and.w	r3, r3, #7
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	fa02 f303 	lsl.w	r3, r2, r3
 8017994:	69ba      	ldr	r2, [r7, #24]
 8017996:	4313      	orrs	r3, r2
 8017998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801799a:	69fb      	ldr	r3, [r7, #28]
 801799c:	08da      	lsrs	r2, r3, #3
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	3208      	adds	r2, #8
 80179a2:	69b9      	ldr	r1, [r7, #24]
 80179a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	005b      	lsls	r3, r3, #1
 80179b2:	2203      	movs	r2, #3
 80179b4:	fa02 f303 	lsl.w	r3, r2, r3
 80179b8:	43db      	mvns	r3, r3
 80179ba:	69ba      	ldr	r2, [r7, #24]
 80179bc:	4013      	ands	r3, r2
 80179be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	f003 0203 	and.w	r2, r3, #3
 80179c8:	69fb      	ldr	r3, [r7, #28]
 80179ca:	005b      	lsls	r3, r3, #1
 80179cc:	fa02 f303 	lsl.w	r3, r2, r3
 80179d0:	69ba      	ldr	r2, [r7, #24]
 80179d2:	4313      	orrs	r3, r2
 80179d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	69ba      	ldr	r2, [r7, #24]
 80179da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	f000 80be 	beq.w	8017b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80179ea:	4b66      	ldr	r3, [pc, #408]	; (8017b84 <HAL_GPIO_Init+0x324>)
 80179ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179ee:	4a65      	ldr	r2, [pc, #404]	; (8017b84 <HAL_GPIO_Init+0x324>)
 80179f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179f4:	6453      	str	r3, [r2, #68]	; 0x44
 80179f6:	4b63      	ldr	r3, [pc, #396]	; (8017b84 <HAL_GPIO_Init+0x324>)
 80179f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80179fe:	60fb      	str	r3, [r7, #12]
 8017a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8017a02:	4a61      	ldr	r2, [pc, #388]	; (8017b88 <HAL_GPIO_Init+0x328>)
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	089b      	lsrs	r3, r3, #2
 8017a08:	3302      	adds	r3, #2
 8017a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	f003 0303 	and.w	r3, r3, #3
 8017a16:	009b      	lsls	r3, r3, #2
 8017a18:	220f      	movs	r2, #15
 8017a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8017a1e:	43db      	mvns	r3, r3
 8017a20:	69ba      	ldr	r2, [r7, #24]
 8017a22:	4013      	ands	r3, r2
 8017a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	4a58      	ldr	r2, [pc, #352]	; (8017b8c <HAL_GPIO_Init+0x32c>)
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	d037      	beq.n	8017a9e <HAL_GPIO_Init+0x23e>
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	4a57      	ldr	r2, [pc, #348]	; (8017b90 <HAL_GPIO_Init+0x330>)
 8017a32:	4293      	cmp	r3, r2
 8017a34:	d031      	beq.n	8017a9a <HAL_GPIO_Init+0x23a>
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	4a56      	ldr	r2, [pc, #344]	; (8017b94 <HAL_GPIO_Init+0x334>)
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d02b      	beq.n	8017a96 <HAL_GPIO_Init+0x236>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	4a55      	ldr	r2, [pc, #340]	; (8017b98 <HAL_GPIO_Init+0x338>)
 8017a42:	4293      	cmp	r3, r2
 8017a44:	d025      	beq.n	8017a92 <HAL_GPIO_Init+0x232>
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	4a54      	ldr	r2, [pc, #336]	; (8017b9c <HAL_GPIO_Init+0x33c>)
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	d01f      	beq.n	8017a8e <HAL_GPIO_Init+0x22e>
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	4a53      	ldr	r2, [pc, #332]	; (8017ba0 <HAL_GPIO_Init+0x340>)
 8017a52:	4293      	cmp	r3, r2
 8017a54:	d019      	beq.n	8017a8a <HAL_GPIO_Init+0x22a>
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	4a52      	ldr	r2, [pc, #328]	; (8017ba4 <HAL_GPIO_Init+0x344>)
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d013      	beq.n	8017a86 <HAL_GPIO_Init+0x226>
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	4a51      	ldr	r2, [pc, #324]	; (8017ba8 <HAL_GPIO_Init+0x348>)
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d00d      	beq.n	8017a82 <HAL_GPIO_Init+0x222>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	4a50      	ldr	r2, [pc, #320]	; (8017bac <HAL_GPIO_Init+0x34c>)
 8017a6a:	4293      	cmp	r3, r2
 8017a6c:	d007      	beq.n	8017a7e <HAL_GPIO_Init+0x21e>
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	4a4f      	ldr	r2, [pc, #316]	; (8017bb0 <HAL_GPIO_Init+0x350>)
 8017a72:	4293      	cmp	r3, r2
 8017a74:	d101      	bne.n	8017a7a <HAL_GPIO_Init+0x21a>
 8017a76:	2309      	movs	r3, #9
 8017a78:	e012      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a7a:	230a      	movs	r3, #10
 8017a7c:	e010      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a7e:	2308      	movs	r3, #8
 8017a80:	e00e      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a82:	2307      	movs	r3, #7
 8017a84:	e00c      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a86:	2306      	movs	r3, #6
 8017a88:	e00a      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a8a:	2305      	movs	r3, #5
 8017a8c:	e008      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a8e:	2304      	movs	r3, #4
 8017a90:	e006      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a92:	2303      	movs	r3, #3
 8017a94:	e004      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a96:	2302      	movs	r3, #2
 8017a98:	e002      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a9a:	2301      	movs	r3, #1
 8017a9c:	e000      	b.n	8017aa0 <HAL_GPIO_Init+0x240>
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	69fa      	ldr	r2, [r7, #28]
 8017aa2:	f002 0203 	and.w	r2, r2, #3
 8017aa6:	0092      	lsls	r2, r2, #2
 8017aa8:	4093      	lsls	r3, r2
 8017aaa:	69ba      	ldr	r2, [r7, #24]
 8017aac:	4313      	orrs	r3, r2
 8017aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8017ab0:	4935      	ldr	r1, [pc, #212]	; (8017b88 <HAL_GPIO_Init+0x328>)
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	089b      	lsrs	r3, r3, #2
 8017ab6:	3302      	adds	r3, #2
 8017ab8:	69ba      	ldr	r2, [r7, #24]
 8017aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017abe:	4b3d      	ldr	r3, [pc, #244]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017ac0:	689b      	ldr	r3, [r3, #8]
 8017ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	43db      	mvns	r3, r3
 8017ac8:	69ba      	ldr	r2, [r7, #24]
 8017aca:	4013      	ands	r3, r2
 8017acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d003      	beq.n	8017ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8017ada:	69ba      	ldr	r2, [r7, #24]
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	4313      	orrs	r3, r2
 8017ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017ae2:	4a34      	ldr	r2, [pc, #208]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017ae4:	69bb      	ldr	r3, [r7, #24]
 8017ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017ae8:	4b32      	ldr	r3, [pc, #200]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017aea:	68db      	ldr	r3, [r3, #12]
 8017aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	43db      	mvns	r3, r3
 8017af2:	69ba      	ldr	r2, [r7, #24]
 8017af4:	4013      	ands	r3, r2
 8017af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d003      	beq.n	8017b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8017b04:	69ba      	ldr	r2, [r7, #24]
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	4313      	orrs	r3, r2
 8017b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017b0c:	4a29      	ldr	r2, [pc, #164]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017b12:	4b28      	ldr	r3, [pc, #160]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b18:	693b      	ldr	r3, [r7, #16]
 8017b1a:	43db      	mvns	r3, r3
 8017b1c:	69ba      	ldr	r2, [r7, #24]
 8017b1e:	4013      	ands	r3, r2
 8017b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d003      	beq.n	8017b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8017b2e:	69ba      	ldr	r2, [r7, #24]
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	4313      	orrs	r3, r2
 8017b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017b36:	4a1f      	ldr	r2, [pc, #124]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017b3c:	4b1d      	ldr	r3, [pc, #116]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b42:	693b      	ldr	r3, [r7, #16]
 8017b44:	43db      	mvns	r3, r3
 8017b46:	69ba      	ldr	r2, [r7, #24]
 8017b48:	4013      	ands	r3, r2
 8017b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d003      	beq.n	8017b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8017b58:	69ba      	ldr	r2, [r7, #24]
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017b60:	4a14      	ldr	r2, [pc, #80]	; (8017bb4 <HAL_GPIO_Init+0x354>)
 8017b62:	69bb      	ldr	r3, [r7, #24]
 8017b64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8017b66:	69fb      	ldr	r3, [r7, #28]
 8017b68:	3301      	adds	r3, #1
 8017b6a:	61fb      	str	r3, [r7, #28]
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	2b0f      	cmp	r3, #15
 8017b70:	f67f ae86 	bls.w	8017880 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8017b74:	bf00      	nop
 8017b76:	bf00      	nop
 8017b78:	3724      	adds	r7, #36	; 0x24
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	40023800 	.word	0x40023800
 8017b88:	40013800 	.word	0x40013800
 8017b8c:	40020000 	.word	0x40020000
 8017b90:	40020400 	.word	0x40020400
 8017b94:	40020800 	.word	0x40020800
 8017b98:	40020c00 	.word	0x40020c00
 8017b9c:	40021000 	.word	0x40021000
 8017ba0:	40021400 	.word	0x40021400
 8017ba4:	40021800 	.word	0x40021800
 8017ba8:	40021c00 	.word	0x40021c00
 8017bac:	40022000 	.word	0x40022000
 8017bb0:	40022400 	.word	0x40022400
 8017bb4:	40013c00 	.word	0x40013c00

08017bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017bb8:	b480      	push	{r7}
 8017bba:	b085      	sub	sp, #20
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	691a      	ldr	r2, [r3, #16]
 8017bc8:	887b      	ldrh	r3, [r7, #2]
 8017bca:	4013      	ands	r3, r2
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d002      	beq.n	8017bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	73fb      	strb	r3, [r7, #15]
 8017bd4:	e001      	b.n	8017bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3714      	adds	r7, #20
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr

08017be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017be8:	b480      	push	{r7}
 8017bea:	b083      	sub	sp, #12
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	460b      	mov	r3, r1
 8017bf2:	807b      	strh	r3, [r7, #2]
 8017bf4:	4613      	mov	r3, r2
 8017bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017bf8:	787b      	ldrb	r3, [r7, #1]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d003      	beq.n	8017c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017bfe:	887a      	ldrh	r2, [r7, #2]
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8017c04:	e003      	b.n	8017c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8017c06:	887b      	ldrh	r3, [r7, #2]
 8017c08:	041a      	lsls	r2, r3, #16
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	619a      	str	r2, [r3, #24]
}
 8017c0e:	bf00      	nop
 8017c10:	370c      	adds	r7, #12
 8017c12:	46bd      	mov	sp, r7
 8017c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c18:	4770      	bx	lr

08017c1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017c1a:	b480      	push	{r7}
 8017c1c:	b085      	sub	sp, #20
 8017c1e:	af00      	add	r7, sp, #0
 8017c20:	6078      	str	r0, [r7, #4]
 8017c22:	460b      	mov	r3, r1
 8017c24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	695b      	ldr	r3, [r3, #20]
 8017c2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017c2c:	887a      	ldrh	r2, [r7, #2]
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	4013      	ands	r3, r2
 8017c32:	041a      	lsls	r2, r3, #16
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	43d9      	mvns	r1, r3
 8017c38:	887b      	ldrh	r3, [r7, #2]
 8017c3a:	400b      	ands	r3, r1
 8017c3c:	431a      	orrs	r2, r3
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	619a      	str	r2, [r3, #24]
}
 8017c42:	bf00      	nop
 8017c44:	3714      	adds	r7, #20
 8017c46:	46bd      	mov	sp, r7
 8017c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4c:	4770      	bx	lr
	...

08017c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017c5a:	4b08      	ldr	r3, [pc, #32]	; (8017c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017c5c:	695a      	ldr	r2, [r3, #20]
 8017c5e:	88fb      	ldrh	r3, [r7, #6]
 8017c60:	4013      	ands	r3, r2
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d006      	beq.n	8017c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8017c66:	4a05      	ldr	r2, [pc, #20]	; (8017c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017c68:	88fb      	ldrh	r3, [r7, #6]
 8017c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017c6c:	88fb      	ldrh	r3, [r7, #6]
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f000 f806 	bl	8017c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8017c74:	bf00      	nop
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	40013c00 	.word	0x40013c00

08017c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8017c80:	b480      	push	{r7}
 8017c82:	b083      	sub	sp, #12
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	4603      	mov	r3, r0
 8017c88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8017c8a:	bf00      	nop
 8017c8c:	370c      	adds	r7, #12
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c94:	4770      	bx	lr
	...

08017c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b082      	sub	sp, #8
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d101      	bne.n	8017caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	e07f      	b.n	8017daa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d106      	bne.n	8017cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f7fb fb28 	bl	8013314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2224      	movs	r2, #36	; 0x24
 8017cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	681a      	ldr	r2, [r3, #0]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	f022 0201 	bic.w	r2, r2, #1
 8017cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	685a      	ldr	r2, [r3, #4]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8017ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	689a      	ldr	r2, [r3, #8]
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	68db      	ldr	r3, [r3, #12]
 8017cfe:	2b01      	cmp	r3, #1
 8017d00:	d107      	bne.n	8017d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	689a      	ldr	r2, [r3, #8]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017d0e:	609a      	str	r2, [r3, #8]
 8017d10:	e006      	b.n	8017d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	689a      	ldr	r2, [r3, #8]
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8017d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	68db      	ldr	r3, [r3, #12]
 8017d24:	2b02      	cmp	r3, #2
 8017d26:	d104      	bne.n	8017d32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	6859      	ldr	r1, [r3, #4]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681a      	ldr	r2, [r3, #0]
 8017d3c:	4b1d      	ldr	r3, [pc, #116]	; (8017db4 <HAL_I2C_Init+0x11c>)
 8017d3e:	430b      	orrs	r3, r1
 8017d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	68da      	ldr	r2, [r3, #12]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	691a      	ldr	r2, [r3, #16]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	695b      	ldr	r3, [r3, #20]
 8017d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	699b      	ldr	r3, [r3, #24]
 8017d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	430a      	orrs	r2, r1
 8017d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	69d9      	ldr	r1, [r3, #28]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6a1a      	ldr	r2, [r3, #32]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	430a      	orrs	r2, r1
 8017d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	681a      	ldr	r2, [r3, #0]
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	f042 0201 	orr.w	r2, r2, #1
 8017d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	2220      	movs	r2, #32
 8017d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	2200      	movs	r2, #0
 8017da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8017da8:	2300      	movs	r3, #0
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3708      	adds	r7, #8
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	02008000 	.word	0x02008000

08017db8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b088      	sub	sp, #32
 8017dbc:	af02      	add	r7, sp, #8
 8017dbe:	60f8      	str	r0, [r7, #12]
 8017dc0:	4608      	mov	r0, r1
 8017dc2:	4611      	mov	r1, r2
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	817b      	strh	r3, [r7, #10]
 8017dca:	460b      	mov	r3, r1
 8017dcc:	813b      	strh	r3, [r7, #8]
 8017dce:	4613      	mov	r3, r2
 8017dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	2b20      	cmp	r3, #32
 8017ddc:	f040 80f9 	bne.w	8017fd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017de0:	6a3b      	ldr	r3, [r7, #32]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d002      	beq.n	8017dec <HAL_I2C_Mem_Write+0x34>
 8017de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d105      	bne.n	8017df8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017df2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8017df4:	2301      	movs	r3, #1
 8017df6:	e0ed      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d101      	bne.n	8017e06 <HAL_I2C_Mem_Write+0x4e>
 8017e02:	2302      	movs	r3, #2
 8017e04:	e0e6      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	2201      	movs	r2, #1
 8017e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8017e0e:	f7fd fb0f 	bl	8015430 <HAL_GetTick>
 8017e12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8017e14:	697b      	ldr	r3, [r7, #20]
 8017e16:	9300      	str	r3, [sp, #0]
 8017e18:	2319      	movs	r3, #25
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f000 fac3 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 8017e26:	4603      	mov	r3, r0
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d001      	beq.n	8017e30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	e0d1      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	2221      	movs	r2, #33	; 0x21
 8017e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	2240      	movs	r2, #64	; 0x40
 8017e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	2200      	movs	r2, #0
 8017e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	6a3a      	ldr	r2, [r7, #32]
 8017e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	2200      	movs	r2, #0
 8017e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017e58:	88f8      	ldrh	r0, [r7, #6]
 8017e5a:	893a      	ldrh	r2, [r7, #8]
 8017e5c:	8979      	ldrh	r1, [r7, #10]
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	9301      	str	r3, [sp, #4]
 8017e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	4603      	mov	r3, r0
 8017e68:	68f8      	ldr	r0, [r7, #12]
 8017e6a:	f000 f9d3 	bl	8018214 <I2C_RequestMemoryWrite>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d005      	beq.n	8017e80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2200      	movs	r2, #0
 8017e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e0a9      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	2bff      	cmp	r3, #255	; 0xff
 8017e88:	d90e      	bls.n	8017ea8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	22ff      	movs	r2, #255	; 0xff
 8017e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e94:	b2da      	uxtb	r2, r3
 8017e96:	8979      	ldrh	r1, [r7, #10]
 8017e98:	2300      	movs	r3, #0
 8017e9a:	9300      	str	r3, [sp, #0]
 8017e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017ea0:	68f8      	ldr	r0, [r7, #12]
 8017ea2:	f000 fc1f 	bl	80186e4 <I2C_TransferConfig>
 8017ea6:	e00f      	b.n	8017ec8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017eac:	b29a      	uxth	r2, r3
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017eb6:	b2da      	uxtb	r2, r3
 8017eb8:	8979      	ldrh	r1, [r7, #10]
 8017eba:	2300      	movs	r3, #0
 8017ebc:	9300      	str	r3, [sp, #0]
 8017ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017ec2:	68f8      	ldr	r0, [r7, #12]
 8017ec4:	f000 fc0e 	bl	80186e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017ec8:	697a      	ldr	r2, [r7, #20]
 8017eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ecc:	68f8      	ldr	r0, [r7, #12]
 8017ece:	f000 faad 	bl	801842c <I2C_WaitOnTXISFlagUntilTimeout>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d001      	beq.n	8017edc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8017ed8:	2301      	movs	r3, #1
 8017eda:	e07b      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee0:	781a      	ldrb	r2, [r3, #0]
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017eec:	1c5a      	adds	r2, r3, #1
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ef6:	b29b      	uxth	r3, r3
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	b29a      	uxth	r2, r3
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f04:	3b01      	subs	r3, #1
 8017f06:	b29a      	uxth	r2, r3
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d034      	beq.n	8017f80 <HAL_I2C_Mem_Write+0x1c8>
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d130      	bne.n	8017f80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8017f1e:	697b      	ldr	r3, [r7, #20]
 8017f20:	9300      	str	r3, [sp, #0]
 8017f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f24:	2200      	movs	r2, #0
 8017f26:	2180      	movs	r1, #128	; 0x80
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f000 fa3f 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d001      	beq.n	8017f38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8017f34:	2301      	movs	r3, #1
 8017f36:	e04d      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f3c:	b29b      	uxth	r3, r3
 8017f3e:	2bff      	cmp	r3, #255	; 0xff
 8017f40:	d90e      	bls.n	8017f60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	22ff      	movs	r2, #255	; 0xff
 8017f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f4c:	b2da      	uxtb	r2, r3
 8017f4e:	8979      	ldrh	r1, [r7, #10]
 8017f50:	2300      	movs	r3, #0
 8017f52:	9300      	str	r3, [sp, #0]
 8017f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017f58:	68f8      	ldr	r0, [r7, #12]
 8017f5a:	f000 fbc3 	bl	80186e4 <I2C_TransferConfig>
 8017f5e:	e00f      	b.n	8017f80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f64:	b29a      	uxth	r2, r3
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f6e:	b2da      	uxtb	r2, r3
 8017f70:	8979      	ldrh	r1, [r7, #10]
 8017f72:	2300      	movs	r3, #0
 8017f74:	9300      	str	r3, [sp, #0]
 8017f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017f7a:	68f8      	ldr	r0, [r7, #12]
 8017f7c:	f000 fbb2 	bl	80186e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d19e      	bne.n	8017ec8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017f8a:	697a      	ldr	r2, [r7, #20]
 8017f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f8e:	68f8      	ldr	r0, [r7, #12]
 8017f90:	f000 fa8c 	bl	80184ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8017f94:	4603      	mov	r3, r0
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d001      	beq.n	8017f9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e01a      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2220      	movs	r2, #32
 8017fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	6859      	ldr	r1, [r3, #4]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681a      	ldr	r2, [r3, #0]
 8017fb0:	4b0a      	ldr	r3, [pc, #40]	; (8017fdc <HAL_I2C_Mem_Write+0x224>)
 8017fb2:	400b      	ands	r3, r1
 8017fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	2220      	movs	r2, #32
 8017fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	e000      	b.n	8017fd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8017fd2:	2302      	movs	r3, #2
  }
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3718      	adds	r7, #24
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	fe00e800 	.word	0xfe00e800

08017fe0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b088      	sub	sp, #32
 8017fe4:	af02      	add	r7, sp, #8
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	4608      	mov	r0, r1
 8017fea:	4611      	mov	r1, r2
 8017fec:	461a      	mov	r2, r3
 8017fee:	4603      	mov	r3, r0
 8017ff0:	817b      	strh	r3, [r7, #10]
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	813b      	strh	r3, [r7, #8]
 8017ff6:	4613      	mov	r3, r2
 8017ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018000:	b2db      	uxtb	r3, r3
 8018002:	2b20      	cmp	r3, #32
 8018004:	f040 80fd 	bne.w	8018202 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018008:	6a3b      	ldr	r3, [r7, #32]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d002      	beq.n	8018014 <HAL_I2C_Mem_Read+0x34>
 801800e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018010:	2b00      	cmp	r3, #0
 8018012:	d105      	bne.n	8018020 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	f44f 7200 	mov.w	r2, #512	; 0x200
 801801a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801801c:	2301      	movs	r3, #1
 801801e:	e0f1      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018026:	2b01      	cmp	r3, #1
 8018028:	d101      	bne.n	801802e <HAL_I2C_Mem_Read+0x4e>
 801802a:	2302      	movs	r3, #2
 801802c:	e0ea      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	2201      	movs	r2, #1
 8018032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018036:	f7fd f9fb 	bl	8015430 <HAL_GetTick>
 801803a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	9300      	str	r3, [sp, #0]
 8018040:	2319      	movs	r3, #25
 8018042:	2201      	movs	r2, #1
 8018044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018048:	68f8      	ldr	r0, [r7, #12]
 801804a:	f000 f9af 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d001      	beq.n	8018058 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018054:	2301      	movs	r3, #1
 8018056:	e0d5      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	2222      	movs	r2, #34	; 0x22
 801805c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2240      	movs	r2, #64	; 0x40
 8018064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	2200      	movs	r2, #0
 801806c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	6a3a      	ldr	r2, [r7, #32]
 8018072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	2200      	movs	r2, #0
 801807e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018080:	88f8      	ldrh	r0, [r7, #6]
 8018082:	893a      	ldrh	r2, [r7, #8]
 8018084:	8979      	ldrh	r1, [r7, #10]
 8018086:	697b      	ldr	r3, [r7, #20]
 8018088:	9301      	str	r3, [sp, #4]
 801808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808c:	9300      	str	r3, [sp, #0]
 801808e:	4603      	mov	r3, r0
 8018090:	68f8      	ldr	r0, [r7, #12]
 8018092:	f000 f913 	bl	80182bc <I2C_RequestMemoryRead>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d005      	beq.n	80180a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	2200      	movs	r2, #0
 80180a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80180a4:	2301      	movs	r3, #1
 80180a6:	e0ad      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	2bff      	cmp	r3, #255	; 0xff
 80180b0:	d90e      	bls.n	80180d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	22ff      	movs	r2, #255	; 0xff
 80180b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180bc:	b2da      	uxtb	r2, r3
 80180be:	8979      	ldrh	r1, [r7, #10]
 80180c0:	4b52      	ldr	r3, [pc, #328]	; (801820c <HAL_I2C_Mem_Read+0x22c>)
 80180c2:	9300      	str	r3, [sp, #0]
 80180c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f000 fb0b 	bl	80186e4 <I2C_TransferConfig>
 80180ce:	e00f      	b.n	80180f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180d4:	b29a      	uxth	r2, r3
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180de:	b2da      	uxtb	r2, r3
 80180e0:	8979      	ldrh	r1, [r7, #10]
 80180e2:	4b4a      	ldr	r3, [pc, #296]	; (801820c <HAL_I2C_Mem_Read+0x22c>)
 80180e4:	9300      	str	r3, [sp, #0]
 80180e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80180ea:	68f8      	ldr	r0, [r7, #12]
 80180ec:	f000 fafa 	bl	80186e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	9300      	str	r3, [sp, #0]
 80180f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f6:	2200      	movs	r2, #0
 80180f8:	2104      	movs	r1, #4
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	f000 f956 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 8018100:	4603      	mov	r3, r0
 8018102:	2b00      	cmp	r3, #0
 8018104:	d001      	beq.n	801810a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018106:	2301      	movs	r3, #1
 8018108:	e07c      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018114:	b2d2      	uxtb	r2, r2
 8018116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801811c:	1c5a      	adds	r2, r3, #1
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018126:	3b01      	subs	r3, #1
 8018128:	b29a      	uxth	r2, r3
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018132:	b29b      	uxth	r3, r3
 8018134:	3b01      	subs	r3, #1
 8018136:	b29a      	uxth	r2, r3
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018140:	b29b      	uxth	r3, r3
 8018142:	2b00      	cmp	r3, #0
 8018144:	d034      	beq.n	80181b0 <HAL_I2C_Mem_Read+0x1d0>
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801814a:	2b00      	cmp	r3, #0
 801814c:	d130      	bne.n	80181b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	9300      	str	r3, [sp, #0]
 8018152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018154:	2200      	movs	r2, #0
 8018156:	2180      	movs	r1, #128	; 0x80
 8018158:	68f8      	ldr	r0, [r7, #12]
 801815a:	f000 f927 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d001      	beq.n	8018168 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018164:	2301      	movs	r3, #1
 8018166:	e04d      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801816c:	b29b      	uxth	r3, r3
 801816e:	2bff      	cmp	r3, #255	; 0xff
 8018170:	d90e      	bls.n	8018190 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	22ff      	movs	r2, #255	; 0xff
 8018176:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801817c:	b2da      	uxtb	r2, r3
 801817e:	8979      	ldrh	r1, [r7, #10]
 8018180:	2300      	movs	r3, #0
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018188:	68f8      	ldr	r0, [r7, #12]
 801818a:	f000 faab 	bl	80186e4 <I2C_TransferConfig>
 801818e:	e00f      	b.n	80181b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018194:	b29a      	uxth	r2, r3
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801819e:	b2da      	uxtb	r2, r3
 80181a0:	8979      	ldrh	r1, [r7, #10]
 80181a2:	2300      	movs	r3, #0
 80181a4:	9300      	str	r3, [sp, #0]
 80181a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80181aa:	68f8      	ldr	r0, [r7, #12]
 80181ac:	f000 fa9a 	bl	80186e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d19a      	bne.n	80180f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80181ba:	697a      	ldr	r2, [r7, #20]
 80181bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181be:	68f8      	ldr	r0, [r7, #12]
 80181c0:	f000 f974 	bl	80184ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d001      	beq.n	80181ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80181ca:	2301      	movs	r3, #1
 80181cc:	e01a      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	2220      	movs	r2, #32
 80181d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	6859      	ldr	r1, [r3, #4]
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	681a      	ldr	r2, [r3, #0]
 80181e0:	4b0b      	ldr	r3, [pc, #44]	; (8018210 <HAL_I2C_Mem_Read+0x230>)
 80181e2:	400b      	ands	r3, r1
 80181e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	2220      	movs	r2, #32
 80181ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	2200      	movs	r2, #0
 80181f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	2200      	movs	r2, #0
 80181fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80181fe:	2300      	movs	r3, #0
 8018200:	e000      	b.n	8018204 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8018202:	2302      	movs	r3, #2
  }
}
 8018204:	4618      	mov	r0, r3
 8018206:	3718      	adds	r7, #24
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}
 801820c:	80002400 	.word	0x80002400
 8018210:	fe00e800 	.word	0xfe00e800

08018214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b086      	sub	sp, #24
 8018218:	af02      	add	r7, sp, #8
 801821a:	60f8      	str	r0, [r7, #12]
 801821c:	4608      	mov	r0, r1
 801821e:	4611      	mov	r1, r2
 8018220:	461a      	mov	r2, r3
 8018222:	4603      	mov	r3, r0
 8018224:	817b      	strh	r3, [r7, #10]
 8018226:	460b      	mov	r3, r1
 8018228:	813b      	strh	r3, [r7, #8]
 801822a:	4613      	mov	r3, r2
 801822c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801822e:	88fb      	ldrh	r3, [r7, #6]
 8018230:	b2da      	uxtb	r2, r3
 8018232:	8979      	ldrh	r1, [r7, #10]
 8018234:	4b20      	ldr	r3, [pc, #128]	; (80182b8 <I2C_RequestMemoryWrite+0xa4>)
 8018236:	9300      	str	r3, [sp, #0]
 8018238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801823c:	68f8      	ldr	r0, [r7, #12]
 801823e:	f000 fa51 	bl	80186e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018242:	69fa      	ldr	r2, [r7, #28]
 8018244:	69b9      	ldr	r1, [r7, #24]
 8018246:	68f8      	ldr	r0, [r7, #12]
 8018248:	f000 f8f0 	bl	801842c <I2C_WaitOnTXISFlagUntilTimeout>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	d001      	beq.n	8018256 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8018252:	2301      	movs	r3, #1
 8018254:	e02c      	b.n	80182b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018256:	88fb      	ldrh	r3, [r7, #6]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d105      	bne.n	8018268 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801825c:	893b      	ldrh	r3, [r7, #8]
 801825e:	b2da      	uxtb	r2, r3
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	629a      	str	r2, [r3, #40]	; 0x28
 8018266:	e015      	b.n	8018294 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018268:	893b      	ldrh	r3, [r7, #8]
 801826a:	0a1b      	lsrs	r3, r3, #8
 801826c:	b29b      	uxth	r3, r3
 801826e:	b2da      	uxtb	r2, r3
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018276:	69fa      	ldr	r2, [r7, #28]
 8018278:	69b9      	ldr	r1, [r7, #24]
 801827a:	68f8      	ldr	r0, [r7, #12]
 801827c:	f000 f8d6 	bl	801842c <I2C_WaitOnTXISFlagUntilTimeout>
 8018280:	4603      	mov	r3, r0
 8018282:	2b00      	cmp	r3, #0
 8018284:	d001      	beq.n	801828a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8018286:	2301      	movs	r3, #1
 8018288:	e012      	b.n	80182b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801828a:	893b      	ldrh	r3, [r7, #8]
 801828c:	b2da      	uxtb	r2, r3
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8018294:	69fb      	ldr	r3, [r7, #28]
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	69bb      	ldr	r3, [r7, #24]
 801829a:	2200      	movs	r2, #0
 801829c:	2180      	movs	r1, #128	; 0x80
 801829e:	68f8      	ldr	r0, [r7, #12]
 80182a0:	f000 f884 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 80182a4:	4603      	mov	r3, r0
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d001      	beq.n	80182ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80182aa:	2301      	movs	r3, #1
 80182ac:	e000      	b.n	80182b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80182ae:	2300      	movs	r3, #0
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	80002000 	.word	0x80002000

080182bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b086      	sub	sp, #24
 80182c0:	af02      	add	r7, sp, #8
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	4608      	mov	r0, r1
 80182c6:	4611      	mov	r1, r2
 80182c8:	461a      	mov	r2, r3
 80182ca:	4603      	mov	r3, r0
 80182cc:	817b      	strh	r3, [r7, #10]
 80182ce:	460b      	mov	r3, r1
 80182d0:	813b      	strh	r3, [r7, #8]
 80182d2:	4613      	mov	r3, r2
 80182d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80182d6:	88fb      	ldrh	r3, [r7, #6]
 80182d8:	b2da      	uxtb	r2, r3
 80182da:	8979      	ldrh	r1, [r7, #10]
 80182dc:	4b20      	ldr	r3, [pc, #128]	; (8018360 <I2C_RequestMemoryRead+0xa4>)
 80182de:	9300      	str	r3, [sp, #0]
 80182e0:	2300      	movs	r3, #0
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f000 f9fe 	bl	80186e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80182e8:	69fa      	ldr	r2, [r7, #28]
 80182ea:	69b9      	ldr	r1, [r7, #24]
 80182ec:	68f8      	ldr	r0, [r7, #12]
 80182ee:	f000 f89d 	bl	801842c <I2C_WaitOnTXISFlagUntilTimeout>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d001      	beq.n	80182fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80182f8:	2301      	movs	r3, #1
 80182fa:	e02c      	b.n	8018356 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80182fc:	88fb      	ldrh	r3, [r7, #6]
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d105      	bne.n	801830e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018302:	893b      	ldrh	r3, [r7, #8]
 8018304:	b2da      	uxtb	r2, r3
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	629a      	str	r2, [r3, #40]	; 0x28
 801830c:	e015      	b.n	801833a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801830e:	893b      	ldrh	r3, [r7, #8]
 8018310:	0a1b      	lsrs	r3, r3, #8
 8018312:	b29b      	uxth	r3, r3
 8018314:	b2da      	uxtb	r2, r3
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801831c:	69fa      	ldr	r2, [r7, #28]
 801831e:	69b9      	ldr	r1, [r7, #24]
 8018320:	68f8      	ldr	r0, [r7, #12]
 8018322:	f000 f883 	bl	801842c <I2C_WaitOnTXISFlagUntilTimeout>
 8018326:	4603      	mov	r3, r0
 8018328:	2b00      	cmp	r3, #0
 801832a:	d001      	beq.n	8018330 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801832c:	2301      	movs	r3, #1
 801832e:	e012      	b.n	8018356 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018330:	893b      	ldrh	r3, [r7, #8]
 8018332:	b2da      	uxtb	r2, r3
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801833a:	69fb      	ldr	r3, [r7, #28]
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	2200      	movs	r2, #0
 8018342:	2140      	movs	r1, #64	; 0x40
 8018344:	68f8      	ldr	r0, [r7, #12]
 8018346:	f000 f831 	bl	80183ac <I2C_WaitOnFlagUntilTimeout>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d001      	beq.n	8018354 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8018350:	2301      	movs	r3, #1
 8018352:	e000      	b.n	8018356 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8018354:	2300      	movs	r3, #0
}
 8018356:	4618      	mov	r0, r3
 8018358:	3710      	adds	r7, #16
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	80002000 	.word	0x80002000

08018364 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	699b      	ldr	r3, [r3, #24]
 8018372:	f003 0302 	and.w	r3, r3, #2
 8018376:	2b02      	cmp	r3, #2
 8018378:	d103      	bne.n	8018382 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2200      	movs	r2, #0
 8018380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	699b      	ldr	r3, [r3, #24]
 8018388:	f003 0301 	and.w	r3, r3, #1
 801838c:	2b01      	cmp	r3, #1
 801838e:	d007      	beq.n	80183a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	699a      	ldr	r2, [r3, #24]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f042 0201 	orr.w	r2, r2, #1
 801839e:	619a      	str	r2, [r3, #24]
  }
}
 80183a0:	bf00      	nop
 80183a2:	370c      	adds	r7, #12
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b084      	sub	sp, #16
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	60f8      	str	r0, [r7, #12]
 80183b4:	60b9      	str	r1, [r7, #8]
 80183b6:	603b      	str	r3, [r7, #0]
 80183b8:	4613      	mov	r3, r2
 80183ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80183bc:	e022      	b.n	8018404 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183c4:	d01e      	beq.n	8018404 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80183c6:	f7fd f833 	bl	8015430 <HAL_GetTick>
 80183ca:	4602      	mov	r2, r0
 80183cc:	69bb      	ldr	r3, [r7, #24]
 80183ce:	1ad3      	subs	r3, r2, r3
 80183d0:	683a      	ldr	r2, [r7, #0]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d302      	bcc.n	80183dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d113      	bne.n	8018404 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183e0:	f043 0220 	orr.w	r2, r3, #32
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	2220      	movs	r2, #32
 80183ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	2200      	movs	r2, #0
 80183f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	2200      	movs	r2, #0
 80183fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018400:	2301      	movs	r3, #1
 8018402:	e00f      	b.n	8018424 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	699a      	ldr	r2, [r3, #24]
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	4013      	ands	r3, r2
 801840e:	68ba      	ldr	r2, [r7, #8]
 8018410:	429a      	cmp	r2, r3
 8018412:	bf0c      	ite	eq
 8018414:	2301      	moveq	r3, #1
 8018416:	2300      	movne	r3, #0
 8018418:	b2db      	uxtb	r3, r3
 801841a:	461a      	mov	r2, r3
 801841c:	79fb      	ldrb	r3, [r7, #7]
 801841e:	429a      	cmp	r2, r3
 8018420:	d0cd      	beq.n	80183be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018422:	2300      	movs	r3, #0
}
 8018424:	4618      	mov	r0, r3
 8018426:	3710      	adds	r7, #16
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}

0801842c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b084      	sub	sp, #16
 8018430:	af00      	add	r7, sp, #0
 8018432:	60f8      	str	r0, [r7, #12]
 8018434:	60b9      	str	r1, [r7, #8]
 8018436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018438:	e02c      	b.n	8018494 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	68b9      	ldr	r1, [r7, #8]
 801843e:	68f8      	ldr	r0, [r7, #12]
 8018440:	f000 f870 	bl	8018524 <I2C_IsErrorOccurred>
 8018444:	4603      	mov	r3, r0
 8018446:	2b00      	cmp	r3, #0
 8018448:	d001      	beq.n	801844e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801844a:	2301      	movs	r3, #1
 801844c:	e02a      	b.n	80184a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018454:	d01e      	beq.n	8018494 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018456:	f7fc ffeb 	bl	8015430 <HAL_GetTick>
 801845a:	4602      	mov	r2, r0
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	1ad3      	subs	r3, r2, r3
 8018460:	68ba      	ldr	r2, [r7, #8]
 8018462:	429a      	cmp	r2, r3
 8018464:	d302      	bcc.n	801846c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d113      	bne.n	8018494 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018470:	f043 0220 	orr.w	r2, r3, #32
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2220      	movs	r2, #32
 801847c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2200      	movs	r2, #0
 8018484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2200      	movs	r2, #0
 801848c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018490:	2301      	movs	r3, #1
 8018492:	e007      	b.n	80184a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	699b      	ldr	r3, [r3, #24]
 801849a:	f003 0302 	and.w	r3, r3, #2
 801849e:	2b02      	cmp	r3, #2
 80184a0:	d1cb      	bne.n	801843a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80184a2:	2300      	movs	r3, #0
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3710      	adds	r7, #16
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b084      	sub	sp, #16
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	60f8      	str	r0, [r7, #12]
 80184b4:	60b9      	str	r1, [r7, #8]
 80184b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80184b8:	e028      	b.n	801850c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80184ba:	687a      	ldr	r2, [r7, #4]
 80184bc:	68b9      	ldr	r1, [r7, #8]
 80184be:	68f8      	ldr	r0, [r7, #12]
 80184c0:	f000 f830 	bl	8018524 <I2C_IsErrorOccurred>
 80184c4:	4603      	mov	r3, r0
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d001      	beq.n	80184ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80184ca:	2301      	movs	r3, #1
 80184cc:	e026      	b.n	801851c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80184ce:	f7fc ffaf 	bl	8015430 <HAL_GetTick>
 80184d2:	4602      	mov	r2, r0
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	1ad3      	subs	r3, r2, r3
 80184d8:	68ba      	ldr	r2, [r7, #8]
 80184da:	429a      	cmp	r2, r3
 80184dc:	d302      	bcc.n	80184e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d113      	bne.n	801850c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184e8:	f043 0220 	orr.w	r2, r3, #32
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	2220      	movs	r2, #32
 80184f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	2200      	movs	r2, #0
 80184fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	2200      	movs	r2, #0
 8018504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018508:	2301      	movs	r3, #1
 801850a:	e007      	b.n	801851c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	699b      	ldr	r3, [r3, #24]
 8018512:	f003 0320 	and.w	r3, r3, #32
 8018516:	2b20      	cmp	r3, #32
 8018518:	d1cf      	bne.n	80184ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801851a:	2300      	movs	r3, #0
}
 801851c:	4618      	mov	r0, r3
 801851e:	3710      	adds	r7, #16
 8018520:	46bd      	mov	sp, r7
 8018522:	bd80      	pop	{r7, pc}

08018524 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b08a      	sub	sp, #40	; 0x28
 8018528:	af00      	add	r7, sp, #0
 801852a:	60f8      	str	r0, [r7, #12]
 801852c:	60b9      	str	r1, [r7, #8]
 801852e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018530:	2300      	movs	r3, #0
 8018532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	699b      	ldr	r3, [r3, #24]
 801853c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801853e:	2300      	movs	r3, #0
 8018540:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	f003 0310 	and.w	r3, r3, #16
 801854c:	2b00      	cmp	r3, #0
 801854e:	d068      	beq.n	8018622 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2210      	movs	r2, #16
 8018556:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018558:	e049      	b.n	80185ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018560:	d045      	beq.n	80185ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018562:	f7fc ff65 	bl	8015430 <HAL_GetTick>
 8018566:	4602      	mov	r2, r0
 8018568:	69fb      	ldr	r3, [r7, #28]
 801856a:	1ad3      	subs	r3, r2, r3
 801856c:	68ba      	ldr	r2, [r7, #8]
 801856e:	429a      	cmp	r2, r3
 8018570:	d302      	bcc.n	8018578 <I2C_IsErrorOccurred+0x54>
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d13a      	bne.n	80185ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	685b      	ldr	r3, [r3, #4]
 801857e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801858a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	699b      	ldr	r3, [r3, #24]
 8018592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801859a:	d121      	bne.n	80185e0 <I2C_IsErrorOccurred+0xbc>
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80185a2:	d01d      	beq.n	80185e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80185a4:	7cfb      	ldrb	r3, [r7, #19]
 80185a6:	2b20      	cmp	r3, #32
 80185a8:	d01a      	beq.n	80185e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	685a      	ldr	r2, [r3, #4]
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80185b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80185ba:	f7fc ff39 	bl	8015430 <HAL_GetTick>
 80185be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80185c0:	e00e      	b.n	80185e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80185c2:	f7fc ff35 	bl	8015430 <HAL_GetTick>
 80185c6:	4602      	mov	r2, r0
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	1ad3      	subs	r3, r2, r3
 80185cc:	2b19      	cmp	r3, #25
 80185ce:	d907      	bls.n	80185e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80185d0:	6a3b      	ldr	r3, [r7, #32]
 80185d2:	f043 0320 	orr.w	r3, r3, #32
 80185d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80185d8:	2301      	movs	r3, #1
 80185da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80185de:	e006      	b.n	80185ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	699b      	ldr	r3, [r3, #24]
 80185e6:	f003 0320 	and.w	r3, r3, #32
 80185ea:	2b20      	cmp	r3, #32
 80185ec:	d1e9      	bne.n	80185c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	699b      	ldr	r3, [r3, #24]
 80185f4:	f003 0320 	and.w	r3, r3, #32
 80185f8:	2b20      	cmp	r3, #32
 80185fa:	d003      	beq.n	8018604 <I2C_IsErrorOccurred+0xe0>
 80185fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018600:	2b00      	cmp	r3, #0
 8018602:	d0aa      	beq.n	801855a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018608:	2b00      	cmp	r3, #0
 801860a:	d103      	bne.n	8018614 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2220      	movs	r2, #32
 8018612:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018614:	6a3b      	ldr	r3, [r7, #32]
 8018616:	f043 0304 	orr.w	r3, r3, #4
 801861a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801861c:	2301      	movs	r3, #1
 801861e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	699b      	ldr	r3, [r3, #24]
 8018628:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801862a:	69bb      	ldr	r3, [r7, #24]
 801862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018630:	2b00      	cmp	r3, #0
 8018632:	d00b      	beq.n	801864c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018634:	6a3b      	ldr	r3, [r7, #32]
 8018636:	f043 0301 	orr.w	r3, r3, #1
 801863a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018646:	2301      	movs	r3, #1
 8018648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801864c:	69bb      	ldr	r3, [r7, #24]
 801864e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00b      	beq.n	801866e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018656:	6a3b      	ldr	r3, [r7, #32]
 8018658:	f043 0308 	orr.w	r3, r3, #8
 801865c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018666:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018668:	2301      	movs	r3, #1
 801866a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801866e:	69bb      	ldr	r3, [r7, #24]
 8018670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018674:	2b00      	cmp	r3, #0
 8018676:	d00b      	beq.n	8018690 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018678:	6a3b      	ldr	r3, [r7, #32]
 801867a:	f043 0302 	orr.w	r3, r3, #2
 801867e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801868a:	2301      	movs	r3, #1
 801868c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8018690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018694:	2b00      	cmp	r3, #0
 8018696:	d01c      	beq.n	80186d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	f7ff fe63 	bl	8018364 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	6859      	ldr	r1, [r3, #4]
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	4b0d      	ldr	r3, [pc, #52]	; (80186e0 <I2C_IsErrorOccurred+0x1bc>)
 80186aa:	400b      	ands	r3, r1
 80186ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80186b2:	6a3b      	ldr	r3, [r7, #32]
 80186b4:	431a      	orrs	r2, r3
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2220      	movs	r2, #32
 80186be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	2200      	movs	r2, #0
 80186c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	2200      	movs	r2, #0
 80186ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80186d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3728      	adds	r7, #40	; 0x28
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	fe00e800 	.word	0xfe00e800

080186e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80186e4:	b480      	push	{r7}
 80186e6:	b087      	sub	sp, #28
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	607b      	str	r3, [r7, #4]
 80186ee:	460b      	mov	r3, r1
 80186f0:	817b      	strh	r3, [r7, #10]
 80186f2:	4613      	mov	r3, r2
 80186f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80186f6:	897b      	ldrh	r3, [r7, #10]
 80186f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80186fc:	7a7b      	ldrb	r3, [r7, #9]
 80186fe:	041b      	lsls	r3, r3, #16
 8018700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018704:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801870a:	6a3b      	ldr	r3, [r7, #32]
 801870c:	4313      	orrs	r3, r2
 801870e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018712:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	685a      	ldr	r2, [r3, #4]
 801871a:	6a3b      	ldr	r3, [r7, #32]
 801871c:	0d5b      	lsrs	r3, r3, #21
 801871e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018722:	4b08      	ldr	r3, [pc, #32]	; (8018744 <I2C_TransferConfig+0x60>)
 8018724:	430b      	orrs	r3, r1
 8018726:	43db      	mvns	r3, r3
 8018728:	ea02 0103 	and.w	r1, r2, r3
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	697a      	ldr	r2, [r7, #20]
 8018732:	430a      	orrs	r2, r1
 8018734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018736:	bf00      	nop
 8018738:	371c      	adds	r7, #28
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	03ff63ff 	.word	0x03ff63ff

08018748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018748:	b480      	push	{r7}
 801874a:	b083      	sub	sp, #12
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018758:	b2db      	uxtb	r3, r3
 801875a:	2b20      	cmp	r3, #32
 801875c:	d138      	bne.n	80187d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018764:	2b01      	cmp	r3, #1
 8018766:	d101      	bne.n	801876c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018768:	2302      	movs	r3, #2
 801876a:	e032      	b.n	80187d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2201      	movs	r2, #1
 8018770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	2224      	movs	r2, #36	; 0x24
 8018778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	681a      	ldr	r2, [r3, #0]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	f022 0201 	bic.w	r2, r2, #1
 801878a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	681a      	ldr	r2, [r3, #0]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801879a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	6819      	ldr	r1, [r3, #0]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	683a      	ldr	r2, [r7, #0]
 80187a8:	430a      	orrs	r2, r1
 80187aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	f042 0201 	orr.w	r2, r2, #1
 80187ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	2220      	movs	r2, #32
 80187c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2200      	movs	r2, #0
 80187c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80187cc:	2300      	movs	r3, #0
 80187ce:	e000      	b.n	80187d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80187d0:	2302      	movs	r3, #2
  }
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	370c      	adds	r7, #12
 80187d6:	46bd      	mov	sp, r7
 80187d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187dc:	4770      	bx	lr

080187de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80187de:	b480      	push	{r7}
 80187e0:	b085      	sub	sp, #20
 80187e2:	af00      	add	r7, sp, #0
 80187e4:	6078      	str	r0, [r7, #4]
 80187e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80187ee:	b2db      	uxtb	r3, r3
 80187f0:	2b20      	cmp	r3, #32
 80187f2:	d139      	bne.n	8018868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80187fa:	2b01      	cmp	r3, #1
 80187fc:	d101      	bne.n	8018802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80187fe:	2302      	movs	r3, #2
 8018800:	e033      	b.n	801886a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2201      	movs	r2, #1
 8018806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2224      	movs	r2, #36	; 0x24
 801880e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	681a      	ldr	r2, [r3, #0]
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	f022 0201 	bic.w	r2, r2, #1
 8018820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	021b      	lsls	r3, r3, #8
 8018836:	68fa      	ldr	r2, [r7, #12]
 8018838:	4313      	orrs	r3, r2
 801883a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	68fa      	ldr	r2, [r7, #12]
 8018842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	f042 0201 	orr.w	r2, r2, #1
 8018852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	2220      	movs	r2, #32
 8018858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	2200      	movs	r2, #0
 8018860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018864:	2300      	movs	r3, #0
 8018866:	e000      	b.n	801886a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018868:	2302      	movs	r3, #2
  }
}
 801886a:	4618      	mov	r0, r3
 801886c:	3714      	adds	r7, #20
 801886e:	46bd      	mov	sp, r7
 8018870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018874:	4770      	bx	lr

08018876 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b084      	sub	sp, #16
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d101      	bne.n	8018888 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8018884:	2301      	movs	r3, #1
 8018886:	e041      	b.n	801890c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018890:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f245 5255 	movw	r2, #21845	; 0x5555
 801889a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	687a      	ldr	r2, [r7, #4]
 80188a2:	6852      	ldr	r2, [r2, #4]
 80188a4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	6892      	ldr	r2, [r2, #8]
 80188ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80188b0:	f7fc fdbe 	bl	8015430 <HAL_GetTick>
 80188b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80188b6:	e00f      	b.n	80188d8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80188b8:	f7fc fdba 	bl	8015430 <HAL_GetTick>
 80188bc:	4602      	mov	r2, r0
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	1ad3      	subs	r3, r2, r3
 80188c2:	2b31      	cmp	r3, #49	; 0x31
 80188c4:	d908      	bls.n	80188d8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	68db      	ldr	r3, [r3, #12]
 80188cc:	f003 0307 	and.w	r3, r3, #7
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d001      	beq.n	80188d8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80188d4:	2303      	movs	r3, #3
 80188d6:	e019      	b.n	801890c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	68db      	ldr	r3, [r3, #12]
 80188de:	f003 0307 	and.w	r3, r3, #7
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d1e8      	bne.n	80188b8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	691a      	ldr	r2, [r3, #16]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	68db      	ldr	r3, [r3, #12]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d005      	beq.n	8018900 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	68d2      	ldr	r2, [r2, #12]
 80188fc:	611a      	str	r2, [r3, #16]
 80188fe:	e004      	b.n	801890a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801890a:	2300      	movs	r3, #0
}
 801890c:	4618      	mov	r0, r3
 801890e:	3710      	adds	r7, #16
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8018914:	b480      	push	{r7}
 8018916:	b083      	sub	sp, #12
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018924:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018926:	2300      	movs	r3, #0
}
 8018928:	4618      	mov	r0, r3
 801892a:	370c      	adds	r7, #12
 801892c:	46bd      	mov	sp, r7
 801892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018932:	4770      	bx	lr

08018934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b086      	sub	sp, #24
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801893c:	2300      	movs	r3, #0
 801893e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d101      	bne.n	801894a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8018946:	2301      	movs	r3, #1
 8018948:	e29b      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	f003 0301 	and.w	r3, r3, #1
 8018952:	2b00      	cmp	r3, #0
 8018954:	f000 8087 	beq.w	8018a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018958:	4b96      	ldr	r3, [pc, #600]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 801895a:	689b      	ldr	r3, [r3, #8]
 801895c:	f003 030c 	and.w	r3, r3, #12
 8018960:	2b04      	cmp	r3, #4
 8018962:	d00c      	beq.n	801897e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018964:	4b93      	ldr	r3, [pc, #588]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018966:	689b      	ldr	r3, [r3, #8]
 8018968:	f003 030c 	and.w	r3, r3, #12
 801896c:	2b08      	cmp	r3, #8
 801896e:	d112      	bne.n	8018996 <HAL_RCC_OscConfig+0x62>
 8018970:	4b90      	ldr	r3, [pc, #576]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018972:	685b      	ldr	r3, [r3, #4]
 8018974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801897c:	d10b      	bne.n	8018996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801897e:	4b8d      	ldr	r3, [pc, #564]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018986:	2b00      	cmp	r3, #0
 8018988:	d06c      	beq.n	8018a64 <HAL_RCC_OscConfig+0x130>
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	685b      	ldr	r3, [r3, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d168      	bne.n	8018a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8018992:	2301      	movs	r3, #1
 8018994:	e275      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801899e:	d106      	bne.n	80189ae <HAL_RCC_OscConfig+0x7a>
 80189a0:	4b84      	ldr	r3, [pc, #528]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4a83      	ldr	r2, [pc, #524]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80189aa:	6013      	str	r3, [r2, #0]
 80189ac:	e02e      	b.n	8018a0c <HAL_RCC_OscConfig+0xd8>
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d10c      	bne.n	80189d0 <HAL_RCC_OscConfig+0x9c>
 80189b6:	4b7f      	ldr	r3, [pc, #508]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	4a7e      	ldr	r2, [pc, #504]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80189c0:	6013      	str	r3, [r2, #0]
 80189c2:	4b7c      	ldr	r3, [pc, #496]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	4a7b      	ldr	r2, [pc, #492]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80189cc:	6013      	str	r3, [r2, #0]
 80189ce:	e01d      	b.n	8018a0c <HAL_RCC_OscConfig+0xd8>
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80189d8:	d10c      	bne.n	80189f4 <HAL_RCC_OscConfig+0xc0>
 80189da:	4b76      	ldr	r3, [pc, #472]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	4a75      	ldr	r2, [pc, #468]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80189e4:	6013      	str	r3, [r2, #0]
 80189e6:	4b73      	ldr	r3, [pc, #460]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	4a72      	ldr	r2, [pc, #456]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80189f0:	6013      	str	r3, [r2, #0]
 80189f2:	e00b      	b.n	8018a0c <HAL_RCC_OscConfig+0xd8>
 80189f4:	4b6f      	ldr	r3, [pc, #444]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	4a6e      	ldr	r2, [pc, #440]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 80189fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80189fe:	6013      	str	r3, [r2, #0]
 8018a00:	4b6c      	ldr	r3, [pc, #432]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	4a6b      	ldr	r2, [pc, #428]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d013      	beq.n	8018a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a14:	f7fc fd0c 	bl	8015430 <HAL_GetTick>
 8018a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018a1a:	e008      	b.n	8018a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018a1c:	f7fc fd08 	bl	8015430 <HAL_GetTick>
 8018a20:	4602      	mov	r2, r0
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	1ad3      	subs	r3, r2, r3
 8018a26:	2b64      	cmp	r3, #100	; 0x64
 8018a28:	d901      	bls.n	8018a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018a2a:	2303      	movs	r3, #3
 8018a2c:	e229      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018a2e:	4b61      	ldr	r3, [pc, #388]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d0f0      	beq.n	8018a1c <HAL_RCC_OscConfig+0xe8>
 8018a3a:	e014      	b.n	8018a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a3c:	f7fc fcf8 	bl	8015430 <HAL_GetTick>
 8018a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018a42:	e008      	b.n	8018a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018a44:	f7fc fcf4 	bl	8015430 <HAL_GetTick>
 8018a48:	4602      	mov	r2, r0
 8018a4a:	693b      	ldr	r3, [r7, #16]
 8018a4c:	1ad3      	subs	r3, r2, r3
 8018a4e:	2b64      	cmp	r3, #100	; 0x64
 8018a50:	d901      	bls.n	8018a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8018a52:	2303      	movs	r3, #3
 8018a54:	e215      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018a56:	4b57      	ldr	r3, [pc, #348]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d1f0      	bne.n	8018a44 <HAL_RCC_OscConfig+0x110>
 8018a62:	e000      	b.n	8018a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	f003 0302 	and.w	r3, r3, #2
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d069      	beq.n	8018b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018a72:	4b50      	ldr	r3, [pc, #320]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a74:	689b      	ldr	r3, [r3, #8]
 8018a76:	f003 030c 	and.w	r3, r3, #12
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d00b      	beq.n	8018a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018a7e:	4b4d      	ldr	r3, [pc, #308]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a80:	689b      	ldr	r3, [r3, #8]
 8018a82:	f003 030c 	and.w	r3, r3, #12
 8018a86:	2b08      	cmp	r3, #8
 8018a88:	d11c      	bne.n	8018ac4 <HAL_RCC_OscConfig+0x190>
 8018a8a:	4b4a      	ldr	r3, [pc, #296]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d116      	bne.n	8018ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018a96:	4b47      	ldr	r3, [pc, #284]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	f003 0302 	and.w	r3, r3, #2
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d005      	beq.n	8018aae <HAL_RCC_OscConfig+0x17a>
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	68db      	ldr	r3, [r3, #12]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d001      	beq.n	8018aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8018aaa:	2301      	movs	r3, #1
 8018aac:	e1e9      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018aae:	4b41      	ldr	r3, [pc, #260]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	691b      	ldr	r3, [r3, #16]
 8018aba:	00db      	lsls	r3, r3, #3
 8018abc:	493d      	ldr	r1, [pc, #244]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018abe:	4313      	orrs	r3, r2
 8018ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018ac2:	e040      	b.n	8018b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	68db      	ldr	r3, [r3, #12]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d023      	beq.n	8018b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018acc:	4b39      	ldr	r3, [pc, #228]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	4a38      	ldr	r2, [pc, #224]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018ad2:	f043 0301 	orr.w	r3, r3, #1
 8018ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018ad8:	f7fc fcaa 	bl	8015430 <HAL_GetTick>
 8018adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018ade:	e008      	b.n	8018af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018ae0:	f7fc fca6 	bl	8015430 <HAL_GetTick>
 8018ae4:	4602      	mov	r2, r0
 8018ae6:	693b      	ldr	r3, [r7, #16]
 8018ae8:	1ad3      	subs	r3, r2, r3
 8018aea:	2b02      	cmp	r3, #2
 8018aec:	d901      	bls.n	8018af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8018aee:	2303      	movs	r3, #3
 8018af0:	e1c7      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018af2:	4b30      	ldr	r3, [pc, #192]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	f003 0302 	and.w	r3, r3, #2
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d0f0      	beq.n	8018ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018afe:	4b2d      	ldr	r3, [pc, #180]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	691b      	ldr	r3, [r3, #16]
 8018b0a:	00db      	lsls	r3, r3, #3
 8018b0c:	4929      	ldr	r1, [pc, #164]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b0e:	4313      	orrs	r3, r2
 8018b10:	600b      	str	r3, [r1, #0]
 8018b12:	e018      	b.n	8018b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018b14:	4b27      	ldr	r3, [pc, #156]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	4a26      	ldr	r2, [pc, #152]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b1a:	f023 0301 	bic.w	r3, r3, #1
 8018b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018b20:	f7fc fc86 	bl	8015430 <HAL_GetTick>
 8018b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018b26:	e008      	b.n	8018b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018b28:	f7fc fc82 	bl	8015430 <HAL_GetTick>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	693b      	ldr	r3, [r7, #16]
 8018b30:	1ad3      	subs	r3, r2, r3
 8018b32:	2b02      	cmp	r3, #2
 8018b34:	d901      	bls.n	8018b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8018b36:	2303      	movs	r3, #3
 8018b38:	e1a3      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018b3a:	4b1e      	ldr	r3, [pc, #120]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	f003 0302 	and.w	r3, r3, #2
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d1f0      	bne.n	8018b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f003 0308 	and.w	r3, r3, #8
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d038      	beq.n	8018bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	695b      	ldr	r3, [r3, #20]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d019      	beq.n	8018b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018b5a:	4b16      	ldr	r3, [pc, #88]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b5e:	4a15      	ldr	r2, [pc, #84]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b60:	f043 0301 	orr.w	r3, r3, #1
 8018b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b66:	f7fc fc63 	bl	8015430 <HAL_GetTick>
 8018b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018b6c:	e008      	b.n	8018b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018b6e:	f7fc fc5f 	bl	8015430 <HAL_GetTick>
 8018b72:	4602      	mov	r2, r0
 8018b74:	693b      	ldr	r3, [r7, #16]
 8018b76:	1ad3      	subs	r3, r2, r3
 8018b78:	2b02      	cmp	r3, #2
 8018b7a:	d901      	bls.n	8018b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8018b7c:	2303      	movs	r3, #3
 8018b7e:	e180      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018b80:	4b0c      	ldr	r3, [pc, #48]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b84:	f003 0302 	and.w	r3, r3, #2
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d0f0      	beq.n	8018b6e <HAL_RCC_OscConfig+0x23a>
 8018b8c:	e01a      	b.n	8018bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018b8e:	4b09      	ldr	r3, [pc, #36]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b92:	4a08      	ldr	r2, [pc, #32]	; (8018bb4 <HAL_RCC_OscConfig+0x280>)
 8018b94:	f023 0301 	bic.w	r3, r3, #1
 8018b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b9a:	f7fc fc49 	bl	8015430 <HAL_GetTick>
 8018b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018ba0:	e00a      	b.n	8018bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018ba2:	f7fc fc45 	bl	8015430 <HAL_GetTick>
 8018ba6:	4602      	mov	r2, r0
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	1ad3      	subs	r3, r2, r3
 8018bac:	2b02      	cmp	r3, #2
 8018bae:	d903      	bls.n	8018bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8018bb0:	2303      	movs	r3, #3
 8018bb2:	e166      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
 8018bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018bb8:	4b92      	ldr	r3, [pc, #584]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018bbc:	f003 0302 	and.w	r3, r3, #2
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d1ee      	bne.n	8018ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	f003 0304 	and.w	r3, r3, #4
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	f000 80a4 	beq.w	8018d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018bd2:	4b8c      	ldr	r3, [pc, #560]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d10d      	bne.n	8018bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8018bde:	4b89      	ldr	r3, [pc, #548]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018be2:	4a88      	ldr	r2, [pc, #544]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018be8:	6413      	str	r3, [r2, #64]	; 0x40
 8018bea:	4b86      	ldr	r3, [pc, #536]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018bf2:	60bb      	str	r3, [r7, #8]
 8018bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018bfa:	4b83      	ldr	r3, [pc, #524]	; (8018e08 <HAL_RCC_OscConfig+0x4d4>)
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d118      	bne.n	8018c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8018c06:	4b80      	ldr	r3, [pc, #512]	; (8018e08 <HAL_RCC_OscConfig+0x4d4>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a7f      	ldr	r2, [pc, #508]	; (8018e08 <HAL_RCC_OscConfig+0x4d4>)
 8018c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018c12:	f7fc fc0d 	bl	8015430 <HAL_GetTick>
 8018c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018c18:	e008      	b.n	8018c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018c1a:	f7fc fc09 	bl	8015430 <HAL_GetTick>
 8018c1e:	4602      	mov	r2, r0
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	1ad3      	subs	r3, r2, r3
 8018c24:	2b64      	cmp	r3, #100	; 0x64
 8018c26:	d901      	bls.n	8018c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8018c28:	2303      	movs	r3, #3
 8018c2a:	e12a      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018c2c:	4b76      	ldr	r3, [pc, #472]	; (8018e08 <HAL_RCC_OscConfig+0x4d4>)
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d0f0      	beq.n	8018c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	689b      	ldr	r3, [r3, #8]
 8018c3c:	2b01      	cmp	r3, #1
 8018c3e:	d106      	bne.n	8018c4e <HAL_RCC_OscConfig+0x31a>
 8018c40:	4b70      	ldr	r3, [pc, #448]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c44:	4a6f      	ldr	r2, [pc, #444]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c46:	f043 0301 	orr.w	r3, r3, #1
 8018c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8018c4c:	e02d      	b.n	8018caa <HAL_RCC_OscConfig+0x376>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	689b      	ldr	r3, [r3, #8]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d10c      	bne.n	8018c70 <HAL_RCC_OscConfig+0x33c>
 8018c56:	4b6b      	ldr	r3, [pc, #428]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c5a:	4a6a      	ldr	r2, [pc, #424]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c5c:	f023 0301 	bic.w	r3, r3, #1
 8018c60:	6713      	str	r3, [r2, #112]	; 0x70
 8018c62:	4b68      	ldr	r3, [pc, #416]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c66:	4a67      	ldr	r2, [pc, #412]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c68:	f023 0304 	bic.w	r3, r3, #4
 8018c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8018c6e:	e01c      	b.n	8018caa <HAL_RCC_OscConfig+0x376>
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	689b      	ldr	r3, [r3, #8]
 8018c74:	2b05      	cmp	r3, #5
 8018c76:	d10c      	bne.n	8018c92 <HAL_RCC_OscConfig+0x35e>
 8018c78:	4b62      	ldr	r3, [pc, #392]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c7c:	4a61      	ldr	r2, [pc, #388]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c7e:	f043 0304 	orr.w	r3, r3, #4
 8018c82:	6713      	str	r3, [r2, #112]	; 0x70
 8018c84:	4b5f      	ldr	r3, [pc, #380]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c88:	4a5e      	ldr	r2, [pc, #376]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c8a:	f043 0301 	orr.w	r3, r3, #1
 8018c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8018c90:	e00b      	b.n	8018caa <HAL_RCC_OscConfig+0x376>
 8018c92:	4b5c      	ldr	r3, [pc, #368]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c96:	4a5b      	ldr	r2, [pc, #364]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018c98:	f023 0301 	bic.w	r3, r3, #1
 8018c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8018c9e:	4b59      	ldr	r3, [pc, #356]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ca2:	4a58      	ldr	r2, [pc, #352]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018ca4:	f023 0304 	bic.w	r3, r3, #4
 8018ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	689b      	ldr	r3, [r3, #8]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d015      	beq.n	8018cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018cb2:	f7fc fbbd 	bl	8015430 <HAL_GetTick>
 8018cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018cb8:	e00a      	b.n	8018cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018cba:	f7fc fbb9 	bl	8015430 <HAL_GetTick>
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	693b      	ldr	r3, [r7, #16]
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8018cc8:	4293      	cmp	r3, r2
 8018cca:	d901      	bls.n	8018cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8018ccc:	2303      	movs	r3, #3
 8018cce:	e0d8      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018cd0:	4b4c      	ldr	r3, [pc, #304]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cd4:	f003 0302 	and.w	r3, r3, #2
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d0ee      	beq.n	8018cba <HAL_RCC_OscConfig+0x386>
 8018cdc:	e014      	b.n	8018d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018cde:	f7fc fba7 	bl	8015430 <HAL_GetTick>
 8018ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018ce4:	e00a      	b.n	8018cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018ce6:	f7fc fba3 	bl	8015430 <HAL_GetTick>
 8018cea:	4602      	mov	r2, r0
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	1ad3      	subs	r3, r2, r3
 8018cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8018cf4:	4293      	cmp	r3, r2
 8018cf6:	d901      	bls.n	8018cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8018cf8:	2303      	movs	r3, #3
 8018cfa:	e0c2      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018cfc:	4b41      	ldr	r3, [pc, #260]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d00:	f003 0302 	and.w	r3, r3, #2
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d1ee      	bne.n	8018ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8018d08:	7dfb      	ldrb	r3, [r7, #23]
 8018d0a:	2b01      	cmp	r3, #1
 8018d0c:	d105      	bne.n	8018d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018d0e:	4b3d      	ldr	r3, [pc, #244]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d12:	4a3c      	ldr	r2, [pc, #240]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	699b      	ldr	r3, [r3, #24]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f000 80ae 	beq.w	8018e80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018d24:	4b37      	ldr	r3, [pc, #220]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d26:	689b      	ldr	r3, [r3, #8]
 8018d28:	f003 030c 	and.w	r3, r3, #12
 8018d2c:	2b08      	cmp	r3, #8
 8018d2e:	d06d      	beq.n	8018e0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	699b      	ldr	r3, [r3, #24]
 8018d34:	2b02      	cmp	r3, #2
 8018d36:	d14b      	bne.n	8018dd0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018d38:	4b32      	ldr	r3, [pc, #200]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	4a31      	ldr	r2, [pc, #196]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d44:	f7fc fb74 	bl	8015430 <HAL_GetTick>
 8018d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018d4a:	e008      	b.n	8018d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d4c:	f7fc fb70 	bl	8015430 <HAL_GetTick>
 8018d50:	4602      	mov	r2, r0
 8018d52:	693b      	ldr	r3, [r7, #16]
 8018d54:	1ad3      	subs	r3, r2, r3
 8018d56:	2b02      	cmp	r3, #2
 8018d58:	d901      	bls.n	8018d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8018d5a:	2303      	movs	r3, #3
 8018d5c:	e091      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018d5e:	4b29      	ldr	r3, [pc, #164]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d1f0      	bne.n	8018d4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	69da      	ldr	r2, [r3, #28]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6a1b      	ldr	r3, [r3, #32]
 8018d72:	431a      	orrs	r2, r3
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d78:	019b      	lsls	r3, r3, #6
 8018d7a:	431a      	orrs	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d80:	085b      	lsrs	r3, r3, #1
 8018d82:	3b01      	subs	r3, #1
 8018d84:	041b      	lsls	r3, r3, #16
 8018d86:	431a      	orrs	r2, r3
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d8c:	061b      	lsls	r3, r3, #24
 8018d8e:	431a      	orrs	r2, r3
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d94:	071b      	lsls	r3, r3, #28
 8018d96:	491b      	ldr	r1, [pc, #108]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d98:	4313      	orrs	r3, r2
 8018d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018d9c:	4b19      	ldr	r3, [pc, #100]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	4a18      	ldr	r2, [pc, #96]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018da8:	f7fc fb42 	bl	8015430 <HAL_GetTick>
 8018dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018dae:	e008      	b.n	8018dc2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018db0:	f7fc fb3e 	bl	8015430 <HAL_GetTick>
 8018db4:	4602      	mov	r2, r0
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	1ad3      	subs	r3, r2, r3
 8018dba:	2b02      	cmp	r3, #2
 8018dbc:	d901      	bls.n	8018dc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8018dbe:	2303      	movs	r3, #3
 8018dc0:	e05f      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018dc2:	4b10      	ldr	r3, [pc, #64]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d0f0      	beq.n	8018db0 <HAL_RCC_OscConfig+0x47c>
 8018dce:	e057      	b.n	8018e80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018dd0:	4b0c      	ldr	r3, [pc, #48]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	4a0b      	ldr	r2, [pc, #44]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018ddc:	f7fc fb28 	bl	8015430 <HAL_GetTick>
 8018de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018de2:	e008      	b.n	8018df6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018de4:	f7fc fb24 	bl	8015430 <HAL_GetTick>
 8018de8:	4602      	mov	r2, r0
 8018dea:	693b      	ldr	r3, [r7, #16]
 8018dec:	1ad3      	subs	r3, r2, r3
 8018dee:	2b02      	cmp	r3, #2
 8018df0:	d901      	bls.n	8018df6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8018df2:	2303      	movs	r3, #3
 8018df4:	e045      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018df6:	4b03      	ldr	r3, [pc, #12]	; (8018e04 <HAL_RCC_OscConfig+0x4d0>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d1f0      	bne.n	8018de4 <HAL_RCC_OscConfig+0x4b0>
 8018e02:	e03d      	b.n	8018e80 <HAL_RCC_OscConfig+0x54c>
 8018e04:	40023800 	.word	0x40023800
 8018e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8018e0c:	4b1f      	ldr	r3, [pc, #124]	; (8018e8c <HAL_RCC_OscConfig+0x558>)
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	699b      	ldr	r3, [r3, #24]
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d030      	beq.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d129      	bne.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d122      	bne.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8018e36:	68fa      	ldr	r2, [r7, #12]
 8018e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018e3c:	4013      	ands	r3, r2
 8018e3e:	687a      	ldr	r2, [r7, #4]
 8018e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018e44:	4293      	cmp	r3, r2
 8018e46:	d119      	bne.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e52:	085b      	lsrs	r3, r3, #1
 8018e54:	3b01      	subs	r3, #1
 8018e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8018e58:	429a      	cmp	r2, r3
 8018e5a:	d10f      	bne.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d107      	bne.n	8018e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	d001      	beq.n	8018e80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	e000      	b.n	8018e82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8018e80:	2300      	movs	r3, #0
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	3718      	adds	r7, #24
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}
 8018e8a:	bf00      	nop
 8018e8c:	40023800 	.word	0x40023800

08018e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d101      	bne.n	8018ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	e0d0      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018ea8:	4b6a      	ldr	r3, [pc, #424]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	f003 030f 	and.w	r3, r3, #15
 8018eb0:	683a      	ldr	r2, [r7, #0]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d910      	bls.n	8018ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018eb6:	4b67      	ldr	r3, [pc, #412]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	f023 020f 	bic.w	r2, r3, #15
 8018ebe:	4965      	ldr	r1, [pc, #404]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	4313      	orrs	r3, r2
 8018ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018ec6:	4b63      	ldr	r3, [pc, #396]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	f003 030f 	and.w	r3, r3, #15
 8018ece:	683a      	ldr	r2, [r7, #0]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d001      	beq.n	8018ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e0b8      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	f003 0302 	and.w	r3, r3, #2
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d020      	beq.n	8018f26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	f003 0304 	and.w	r3, r3, #4
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d005      	beq.n	8018efc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018ef0:	4b59      	ldr	r3, [pc, #356]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018ef2:	689b      	ldr	r3, [r3, #8]
 8018ef4:	4a58      	ldr	r2, [pc, #352]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	f003 0308 	and.w	r3, r3, #8
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d005      	beq.n	8018f14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018f08:	4b53      	ldr	r3, [pc, #332]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f0a:	689b      	ldr	r3, [r3, #8]
 8018f0c:	4a52      	ldr	r2, [pc, #328]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018f14:	4b50      	ldr	r3, [pc, #320]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f16:	689b      	ldr	r3, [r3, #8]
 8018f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	689b      	ldr	r3, [r3, #8]
 8018f20:	494d      	ldr	r1, [pc, #308]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f22:	4313      	orrs	r3, r2
 8018f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f003 0301 	and.w	r3, r3, #1
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d040      	beq.n	8018fb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	685b      	ldr	r3, [r3, #4]
 8018f36:	2b01      	cmp	r3, #1
 8018f38:	d107      	bne.n	8018f4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018f3a:	4b47      	ldr	r3, [pc, #284]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d115      	bne.n	8018f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018f46:	2301      	movs	r3, #1
 8018f48:	e07f      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	2b02      	cmp	r3, #2
 8018f50:	d107      	bne.n	8018f62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018f52:	4b41      	ldr	r3, [pc, #260]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d109      	bne.n	8018f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018f5e:	2301      	movs	r3, #1
 8018f60:	e073      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018f62:	4b3d      	ldr	r3, [pc, #244]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f003 0302 	and.w	r3, r3, #2
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d101      	bne.n	8018f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018f6e:	2301      	movs	r3, #1
 8018f70:	e06b      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018f72:	4b39      	ldr	r3, [pc, #228]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f74:	689b      	ldr	r3, [r3, #8]
 8018f76:	f023 0203 	bic.w	r2, r3, #3
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	685b      	ldr	r3, [r3, #4]
 8018f7e:	4936      	ldr	r1, [pc, #216]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018f80:	4313      	orrs	r3, r2
 8018f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018f84:	f7fc fa54 	bl	8015430 <HAL_GetTick>
 8018f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018f8a:	e00a      	b.n	8018fa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018f8c:	f7fc fa50 	bl	8015430 <HAL_GetTick>
 8018f90:	4602      	mov	r2, r0
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8018f9a:	4293      	cmp	r3, r2
 8018f9c:	d901      	bls.n	8018fa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8018f9e:	2303      	movs	r3, #3
 8018fa0:	e053      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018fa2:	4b2d      	ldr	r3, [pc, #180]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018fa4:	689b      	ldr	r3, [r3, #8]
 8018fa6:	f003 020c 	and.w	r2, r3, #12
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d1eb      	bne.n	8018f8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8018fb4:	4b27      	ldr	r3, [pc, #156]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	f003 030f 	and.w	r3, r3, #15
 8018fbc:	683a      	ldr	r2, [r7, #0]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d210      	bcs.n	8018fe4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018fc2:	4b24      	ldr	r3, [pc, #144]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	f023 020f 	bic.w	r2, r3, #15
 8018fca:	4922      	ldr	r1, [pc, #136]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	4313      	orrs	r3, r2
 8018fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018fd2:	4b20      	ldr	r3, [pc, #128]	; (8019054 <HAL_RCC_ClockConfig+0x1c4>)
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	f003 030f 	and.w	r3, r3, #15
 8018fda:	683a      	ldr	r2, [r7, #0]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	d001      	beq.n	8018fe4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8018fe0:	2301      	movs	r3, #1
 8018fe2:	e032      	b.n	801904a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	f003 0304 	and.w	r3, r3, #4
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d008      	beq.n	8019002 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018ff0:	4b19      	ldr	r3, [pc, #100]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018ff2:	689b      	ldr	r3, [r3, #8]
 8018ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	68db      	ldr	r3, [r3, #12]
 8018ffc:	4916      	ldr	r1, [pc, #88]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8018ffe:	4313      	orrs	r3, r2
 8019000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	f003 0308 	and.w	r3, r3, #8
 801900a:	2b00      	cmp	r3, #0
 801900c:	d009      	beq.n	8019022 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801900e:	4b12      	ldr	r3, [pc, #72]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 8019010:	689b      	ldr	r3, [r3, #8]
 8019012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	691b      	ldr	r3, [r3, #16]
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	490e      	ldr	r1, [pc, #56]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 801901e:	4313      	orrs	r3, r2
 8019020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8019022:	f000 f821 	bl	8019068 <HAL_RCC_GetSysClockFreq>
 8019026:	4602      	mov	r2, r0
 8019028:	4b0b      	ldr	r3, [pc, #44]	; (8019058 <HAL_RCC_ClockConfig+0x1c8>)
 801902a:	689b      	ldr	r3, [r3, #8]
 801902c:	091b      	lsrs	r3, r3, #4
 801902e:	f003 030f 	and.w	r3, r3, #15
 8019032:	490a      	ldr	r1, [pc, #40]	; (801905c <HAL_RCC_ClockConfig+0x1cc>)
 8019034:	5ccb      	ldrb	r3, [r1, r3]
 8019036:	fa22 f303 	lsr.w	r3, r2, r3
 801903a:	4a09      	ldr	r2, [pc, #36]	; (8019060 <HAL_RCC_ClockConfig+0x1d0>)
 801903c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801903e:	4b09      	ldr	r3, [pc, #36]	; (8019064 <HAL_RCC_ClockConfig+0x1d4>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	4618      	mov	r0, r3
 8019044:	f7fc f9b0 	bl	80153a8 <HAL_InitTick>

  return HAL_OK;
 8019048:	2300      	movs	r3, #0
}
 801904a:	4618      	mov	r0, r3
 801904c:	3710      	adds	r7, #16
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	40023c00 	.word	0x40023c00
 8019058:	40023800 	.word	0x40023800
 801905c:	08028aa8 	.word	0x08028aa8
 8019060:	2000011c 	.word	0x2000011c
 8019064:	20000120 	.word	0x20000120

08019068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801906c:	b090      	sub	sp, #64	; 0x40
 801906e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8019070:	2300      	movs	r3, #0
 8019072:	637b      	str	r3, [r7, #52]	; 0x34
 8019074:	2300      	movs	r3, #0
 8019076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019078:	2300      	movs	r3, #0
 801907a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801907c:	2300      	movs	r3, #0
 801907e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019080:	4b59      	ldr	r3, [pc, #356]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8019082:	689b      	ldr	r3, [r3, #8]
 8019084:	f003 030c 	and.w	r3, r3, #12
 8019088:	2b08      	cmp	r3, #8
 801908a:	d00d      	beq.n	80190a8 <HAL_RCC_GetSysClockFreq+0x40>
 801908c:	2b08      	cmp	r3, #8
 801908e:	f200 80a1 	bhi.w	80191d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8019092:	2b00      	cmp	r3, #0
 8019094:	d002      	beq.n	801909c <HAL_RCC_GetSysClockFreq+0x34>
 8019096:	2b04      	cmp	r3, #4
 8019098:	d003      	beq.n	80190a2 <HAL_RCC_GetSysClockFreq+0x3a>
 801909a:	e09b      	b.n	80191d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801909c:	4b53      	ldr	r3, [pc, #332]	; (80191ec <HAL_RCC_GetSysClockFreq+0x184>)
 801909e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80190a0:	e09b      	b.n	80191da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80190a2:	4b53      	ldr	r3, [pc, #332]	; (80191f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80190a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80190a6:	e098      	b.n	80191da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80190a8:	4b4f      	ldr	r3, [pc, #316]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80190b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80190b2:	4b4d      	ldr	r3, [pc, #308]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d028      	beq.n	8019110 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80190be:	4b4a      	ldr	r3, [pc, #296]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80190c0:	685b      	ldr	r3, [r3, #4]
 80190c2:	099b      	lsrs	r3, r3, #6
 80190c4:	2200      	movs	r2, #0
 80190c6:	623b      	str	r3, [r7, #32]
 80190c8:	627a      	str	r2, [r7, #36]	; 0x24
 80190ca:	6a3b      	ldr	r3, [r7, #32]
 80190cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80190d0:	2100      	movs	r1, #0
 80190d2:	4b47      	ldr	r3, [pc, #284]	; (80191f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80190d4:	fb03 f201 	mul.w	r2, r3, r1
 80190d8:	2300      	movs	r3, #0
 80190da:	fb00 f303 	mul.w	r3, r0, r3
 80190de:	4413      	add	r3, r2
 80190e0:	4a43      	ldr	r2, [pc, #268]	; (80191f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80190e2:	fba0 1202 	umull	r1, r2, r0, r2
 80190e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80190e8:	460a      	mov	r2, r1
 80190ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80190ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190ee:	4413      	add	r3, r2
 80190f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80190f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190f4:	2200      	movs	r2, #0
 80190f6:	61bb      	str	r3, [r7, #24]
 80190f8:	61fa      	str	r2, [r7, #28]
 80190fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80190fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8019102:	f7e7 f905 	bl	8000310 <__aeabi_uldivmod>
 8019106:	4602      	mov	r2, r0
 8019108:	460b      	mov	r3, r1
 801910a:	4613      	mov	r3, r2
 801910c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801910e:	e053      	b.n	80191b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019110:	4b35      	ldr	r3, [pc, #212]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	099b      	lsrs	r3, r3, #6
 8019116:	2200      	movs	r2, #0
 8019118:	613b      	str	r3, [r7, #16]
 801911a:	617a      	str	r2, [r7, #20]
 801911c:	693b      	ldr	r3, [r7, #16]
 801911e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8019122:	f04f 0b00 	mov.w	fp, #0
 8019126:	4652      	mov	r2, sl
 8019128:	465b      	mov	r3, fp
 801912a:	f04f 0000 	mov.w	r0, #0
 801912e:	f04f 0100 	mov.w	r1, #0
 8019132:	0159      	lsls	r1, r3, #5
 8019134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019138:	0150      	lsls	r0, r2, #5
 801913a:	4602      	mov	r2, r0
 801913c:	460b      	mov	r3, r1
 801913e:	ebb2 080a 	subs.w	r8, r2, sl
 8019142:	eb63 090b 	sbc.w	r9, r3, fp
 8019146:	f04f 0200 	mov.w	r2, #0
 801914a:	f04f 0300 	mov.w	r3, #0
 801914e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8019152:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8019156:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801915a:	ebb2 0408 	subs.w	r4, r2, r8
 801915e:	eb63 0509 	sbc.w	r5, r3, r9
 8019162:	f04f 0200 	mov.w	r2, #0
 8019166:	f04f 0300 	mov.w	r3, #0
 801916a:	00eb      	lsls	r3, r5, #3
 801916c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019170:	00e2      	lsls	r2, r4, #3
 8019172:	4614      	mov	r4, r2
 8019174:	461d      	mov	r5, r3
 8019176:	eb14 030a 	adds.w	r3, r4, sl
 801917a:	603b      	str	r3, [r7, #0]
 801917c:	eb45 030b 	adc.w	r3, r5, fp
 8019180:	607b      	str	r3, [r7, #4]
 8019182:	f04f 0200 	mov.w	r2, #0
 8019186:	f04f 0300 	mov.w	r3, #0
 801918a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801918e:	4629      	mov	r1, r5
 8019190:	028b      	lsls	r3, r1, #10
 8019192:	4621      	mov	r1, r4
 8019194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019198:	4621      	mov	r1, r4
 801919a:	028a      	lsls	r2, r1, #10
 801919c:	4610      	mov	r0, r2
 801919e:	4619      	mov	r1, r3
 80191a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191a2:	2200      	movs	r2, #0
 80191a4:	60bb      	str	r3, [r7, #8]
 80191a6:	60fa      	str	r2, [r7, #12]
 80191a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80191ac:	f7e7 f8b0 	bl	8000310 <__aeabi_uldivmod>
 80191b0:	4602      	mov	r2, r0
 80191b2:	460b      	mov	r3, r1
 80191b4:	4613      	mov	r3, r2
 80191b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80191b8:	4b0b      	ldr	r3, [pc, #44]	; (80191e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	0c1b      	lsrs	r3, r3, #16
 80191be:	f003 0303 	and.w	r3, r3, #3
 80191c2:	3301      	adds	r3, #1
 80191c4:	005b      	lsls	r3, r3, #1
 80191c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80191c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80191ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80191d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80191d2:	e002      	b.n	80191da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80191d4:	4b05      	ldr	r3, [pc, #20]	; (80191ec <HAL_RCC_GetSysClockFreq+0x184>)
 80191d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80191d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80191da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80191dc:	4618      	mov	r0, r3
 80191de:	3740      	adds	r7, #64	; 0x40
 80191e0:	46bd      	mov	sp, r7
 80191e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80191e6:	bf00      	nop
 80191e8:	40023800 	.word	0x40023800
 80191ec:	00f42400 	.word	0x00f42400
 80191f0:	00b71b00 	.word	0x00b71b00

080191f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80191f4:	b480      	push	{r7}
 80191f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80191f8:	4b03      	ldr	r3, [pc, #12]	; (8019208 <HAL_RCC_GetHCLKFreq+0x14>)
 80191fa:	681b      	ldr	r3, [r3, #0]
}
 80191fc:	4618      	mov	r0, r3
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr
 8019206:	bf00      	nop
 8019208:	2000011c 	.word	0x2000011c

0801920c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019210:	f7ff fff0 	bl	80191f4 <HAL_RCC_GetHCLKFreq>
 8019214:	4602      	mov	r2, r0
 8019216:	4b05      	ldr	r3, [pc, #20]	; (801922c <HAL_RCC_GetPCLK1Freq+0x20>)
 8019218:	689b      	ldr	r3, [r3, #8]
 801921a:	0a9b      	lsrs	r3, r3, #10
 801921c:	f003 0307 	and.w	r3, r3, #7
 8019220:	4903      	ldr	r1, [pc, #12]	; (8019230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019222:	5ccb      	ldrb	r3, [r1, r3]
 8019224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019228:	4618      	mov	r0, r3
 801922a:	bd80      	pop	{r7, pc}
 801922c:	40023800 	.word	0x40023800
 8019230:	08028ab8 	.word	0x08028ab8

08019234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019238:	f7ff ffdc 	bl	80191f4 <HAL_RCC_GetHCLKFreq>
 801923c:	4602      	mov	r2, r0
 801923e:	4b05      	ldr	r3, [pc, #20]	; (8019254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019240:	689b      	ldr	r3, [r3, #8]
 8019242:	0b5b      	lsrs	r3, r3, #13
 8019244:	f003 0307 	and.w	r3, r3, #7
 8019248:	4903      	ldr	r1, [pc, #12]	; (8019258 <HAL_RCC_GetPCLK2Freq+0x24>)
 801924a:	5ccb      	ldrb	r3, [r1, r3]
 801924c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019250:	4618      	mov	r0, r3
 8019252:	bd80      	pop	{r7, pc}
 8019254:	40023800 	.word	0x40023800
 8019258:	08028ab8 	.word	0x08028ab8

0801925c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b088      	sub	sp, #32
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8019264:	2300      	movs	r3, #0
 8019266:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8019268:	2300      	movs	r3, #0
 801926a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801926c:	2300      	movs	r3, #0
 801926e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8019270:	2300      	movs	r3, #0
 8019272:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8019274:	2300      	movs	r3, #0
 8019276:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	f003 0301 	and.w	r3, r3, #1
 8019280:	2b00      	cmp	r3, #0
 8019282:	d012      	beq.n	80192aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8019284:	4b69      	ldr	r3, [pc, #420]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019286:	689b      	ldr	r3, [r3, #8]
 8019288:	4a68      	ldr	r2, [pc, #416]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801928a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801928e:	6093      	str	r3, [r2, #8]
 8019290:	4b66      	ldr	r3, [pc, #408]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019292:	689a      	ldr	r2, [r3, #8]
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019298:	4964      	ldr	r1, [pc, #400]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801929a:	4313      	orrs	r3, r2
 801929c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d101      	bne.n	80192aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80192a6:	2301      	movs	r3, #1
 80192a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d017      	beq.n	80192e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80192b6:	4b5d      	ldr	r3, [pc, #372]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80192bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192c4:	4959      	ldr	r1, [pc, #356]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192c6:	4313      	orrs	r3, r2
 80192c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80192d4:	d101      	bne.n	80192da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80192d6:	2301      	movs	r3, #1
 80192d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d101      	bne.n	80192e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80192e2:	2301      	movs	r3, #1
 80192e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d017      	beq.n	8019322 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80192f2:	4b4e      	ldr	r3, [pc, #312]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80192f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019300:	494a      	ldr	r1, [pc, #296]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019302:	4313      	orrs	r3, r2
 8019304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019310:	d101      	bne.n	8019316 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8019312:	2301      	movs	r3, #1
 8019314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801931a:	2b00      	cmp	r3, #0
 801931c:	d101      	bne.n	8019322 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801931e:	2301      	movs	r3, #1
 8019320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801932a:	2b00      	cmp	r3, #0
 801932c:	d001      	beq.n	8019332 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801932e:	2301      	movs	r3, #1
 8019330:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f003 0320 	and.w	r3, r3, #32
 801933a:	2b00      	cmp	r3, #0
 801933c:	f000 808b 	beq.w	8019456 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019340:	4b3a      	ldr	r3, [pc, #232]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019344:	4a39      	ldr	r2, [pc, #228]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801934a:	6413      	str	r3, [r2, #64]	; 0x40
 801934c:	4b37      	ldr	r3, [pc, #220]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019354:	60bb      	str	r3, [r7, #8]
 8019356:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019358:	4b35      	ldr	r3, [pc, #212]	; (8019430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	4a34      	ldr	r2, [pc, #208]	; (8019430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801935e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019364:	f7fc f864 	bl	8015430 <HAL_GetTick>
 8019368:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801936a:	e008      	b.n	801937e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801936c:	f7fc f860 	bl	8015430 <HAL_GetTick>
 8019370:	4602      	mov	r2, r0
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	1ad3      	subs	r3, r2, r3
 8019376:	2b64      	cmp	r3, #100	; 0x64
 8019378:	d901      	bls.n	801937e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801937a:	2303      	movs	r3, #3
 801937c:	e38f      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801937e:	4b2c      	ldr	r3, [pc, #176]	; (8019430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019386:	2b00      	cmp	r3, #0
 8019388:	d0f0      	beq.n	801936c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801938a:	4b28      	ldr	r3, [pc, #160]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801938e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019392:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d035      	beq.n	8019406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801939e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80193a2:	693a      	ldr	r2, [r7, #16]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d02e      	beq.n	8019406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80193a8:	4b20      	ldr	r3, [pc, #128]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80193b2:	4b1e      	ldr	r3, [pc, #120]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193b6:	4a1d      	ldr	r2, [pc, #116]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80193bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80193be:	4b1b      	ldr	r3, [pc, #108]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193c2:	4a1a      	ldr	r2, [pc, #104]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80193c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80193ca:	4a18      	ldr	r2, [pc, #96]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193cc:	693b      	ldr	r3, [r7, #16]
 80193ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80193d0:	4b16      	ldr	r3, [pc, #88]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193d4:	f003 0301 	and.w	r3, r3, #1
 80193d8:	2b01      	cmp	r3, #1
 80193da:	d114      	bne.n	8019406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80193dc:	f7fc f828 	bl	8015430 <HAL_GetTick>
 80193e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193e2:	e00a      	b.n	80193fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80193e4:	f7fc f824 	bl	8015430 <HAL_GetTick>
 80193e8:	4602      	mov	r2, r0
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	1ad3      	subs	r3, r2, r3
 80193ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80193f2:	4293      	cmp	r3, r2
 80193f4:	d901      	bls.n	80193fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80193f6:	2303      	movs	r3, #3
 80193f8:	e351      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193fa:	4b0c      	ldr	r3, [pc, #48]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193fe:	f003 0302 	and.w	r3, r3, #2
 8019402:	2b00      	cmp	r3, #0
 8019404:	d0ee      	beq.n	80193e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801940a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801940e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019412:	d111      	bne.n	8019438 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8019414:	4b05      	ldr	r3, [pc, #20]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019416:	689b      	ldr	r3, [r3, #8]
 8019418:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019420:	4b04      	ldr	r3, [pc, #16]	; (8019434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8019422:	400b      	ands	r3, r1
 8019424:	4901      	ldr	r1, [pc, #4]	; (801942c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019426:	4313      	orrs	r3, r2
 8019428:	608b      	str	r3, [r1, #8]
 801942a:	e00b      	b.n	8019444 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801942c:	40023800 	.word	0x40023800
 8019430:	40007000 	.word	0x40007000
 8019434:	0ffffcff 	.word	0x0ffffcff
 8019438:	4bac      	ldr	r3, [pc, #688]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801943a:	689b      	ldr	r3, [r3, #8]
 801943c:	4aab      	ldr	r2, [pc, #684]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801943e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019442:	6093      	str	r3, [r2, #8]
 8019444:	4ba9      	ldr	r3, [pc, #676]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801944c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019450:	49a6      	ldr	r1, [pc, #664]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019452:	4313      	orrs	r3, r2
 8019454:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	f003 0310 	and.w	r3, r3, #16
 801945e:	2b00      	cmp	r3, #0
 8019460:	d010      	beq.n	8019484 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8019462:	4ba2      	ldr	r3, [pc, #648]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019468:	4aa0      	ldr	r2, [pc, #640]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801946a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801946e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8019472:	4b9e      	ldr	r3, [pc, #632]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019474:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801947c:	499b      	ldr	r1, [pc, #620]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801947e:	4313      	orrs	r3, r2
 8019480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801948c:	2b00      	cmp	r3, #0
 801948e:	d00a      	beq.n	80194a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019490:	4b96      	ldr	r3, [pc, #600]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801949e:	4993      	ldr	r1, [pc, #588]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194a0:	4313      	orrs	r3, r2
 80194a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d00a      	beq.n	80194c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80194b2:	4b8e      	ldr	r3, [pc, #568]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80194b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80194c0:	498a      	ldr	r1, [pc, #552]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194c2:	4313      	orrs	r3, r2
 80194c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d00a      	beq.n	80194ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80194d4:	4b85      	ldr	r3, [pc, #532]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80194da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194e2:	4982      	ldr	r1, [pc, #520]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194e4:	4313      	orrs	r3, r2
 80194e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d00a      	beq.n	801950c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80194f6:	4b7d      	ldr	r3, [pc, #500]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80194fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019504:	4979      	ldr	r1, [pc, #484]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019506:	4313      	orrs	r3, r2
 8019508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019514:	2b00      	cmp	r3, #0
 8019516:	d00a      	beq.n	801952e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019518:	4b74      	ldr	r3, [pc, #464]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801951a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801951e:	f023 0203 	bic.w	r2, r3, #3
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019526:	4971      	ldr	r1, [pc, #452]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019528:	4313      	orrs	r3, r2
 801952a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019536:	2b00      	cmp	r3, #0
 8019538:	d00a      	beq.n	8019550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801953a:	4b6c      	ldr	r3, [pc, #432]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801953c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019540:	f023 020c 	bic.w	r2, r3, #12
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019548:	4968      	ldr	r1, [pc, #416]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801954a:	4313      	orrs	r3, r2
 801954c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019558:	2b00      	cmp	r3, #0
 801955a:	d00a      	beq.n	8019572 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801955c:	4b63      	ldr	r3, [pc, #396]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801955e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019562:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801956a:	4960      	ldr	r1, [pc, #384]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801956c:	4313      	orrs	r3, r2
 801956e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801957a:	2b00      	cmp	r3, #0
 801957c:	d00a      	beq.n	8019594 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801957e:	4b5b      	ldr	r3, [pc, #364]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019584:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801958c:	4957      	ldr	r1, [pc, #348]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801958e:	4313      	orrs	r3, r2
 8019590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801959c:	2b00      	cmp	r3, #0
 801959e:	d00a      	beq.n	80195b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80195a0:	4b52      	ldr	r3, [pc, #328]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195ae:	494f      	ldr	r1, [pc, #316]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195b0:	4313      	orrs	r3, r2
 80195b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d00a      	beq.n	80195d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80195c2:	4b4a      	ldr	r3, [pc, #296]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195d0:	4946      	ldr	r1, [pc, #280]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195d2:	4313      	orrs	r3, r2
 80195d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d00a      	beq.n	80195fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80195e4:	4b41      	ldr	r3, [pc, #260]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195f2:	493e      	ldr	r1, [pc, #248]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195f4:	4313      	orrs	r3, r2
 80195f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019602:	2b00      	cmp	r3, #0
 8019604:	d00a      	beq.n	801961c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8019606:	4b39      	ldr	r3, [pc, #228]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801960c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019614:	4935      	ldr	r1, [pc, #212]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019616:	4313      	orrs	r3, r2
 8019618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019624:	2b00      	cmp	r3, #0
 8019626:	d00a      	beq.n	801963e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019628:	4b30      	ldr	r3, [pc, #192]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801962e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019636:	492d      	ldr	r1, [pc, #180]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019638:	4313      	orrs	r3, r2
 801963a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019646:	2b00      	cmp	r3, #0
 8019648:	d011      	beq.n	801966e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801964a:	4b28      	ldr	r3, [pc, #160]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019650:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019658:	4924      	ldr	r1, [pc, #144]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801965a:	4313      	orrs	r3, r2
 801965c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019668:	d101      	bne.n	801966e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801966a:	2301      	movs	r3, #1
 801966c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f003 0308 	and.w	r3, r3, #8
 8019676:	2b00      	cmp	r3, #0
 8019678:	d001      	beq.n	801967e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801967a:	2301      	movs	r3, #1
 801967c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019686:	2b00      	cmp	r3, #0
 8019688:	d00a      	beq.n	80196a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801968a:	4b18      	ldr	r3, [pc, #96]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801968c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019690:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019698:	4914      	ldr	r1, [pc, #80]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801969a:	4313      	orrs	r3, r2
 801969c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d00b      	beq.n	80196c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80196ac:	4b0f      	ldr	r3, [pc, #60]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80196b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80196bc:	490b      	ldr	r1, [pc, #44]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196be:	4313      	orrs	r3, r2
 80196c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d00f      	beq.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80196d0:	4b06      	ldr	r3, [pc, #24]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80196d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80196e0:	4902      	ldr	r1, [pc, #8]	; (80196ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196e2:	4313      	orrs	r3, r2
 80196e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80196e8:	e002      	b.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80196ea:	bf00      	nop
 80196ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d00b      	beq.n	8019714 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80196fc:	4b8a      	ldr	r3, [pc, #552]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80196fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019702:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801970c:	4986      	ldr	r1, [pc, #536]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801970e:	4313      	orrs	r3, r2
 8019710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801971c:	2b00      	cmp	r3, #0
 801971e:	d00b      	beq.n	8019738 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019720:	4b81      	ldr	r3, [pc, #516]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019726:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019730:	497d      	ldr	r1, [pc, #500]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019732:	4313      	orrs	r3, r2
 8019734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019738:	69fb      	ldr	r3, [r7, #28]
 801973a:	2b01      	cmp	r3, #1
 801973c:	d006      	beq.n	801974c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019746:	2b00      	cmp	r3, #0
 8019748:	f000 80d6 	beq.w	80198f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801974c:	4b76      	ldr	r3, [pc, #472]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	4a75      	ldr	r2, [pc, #468]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019758:	f7fb fe6a 	bl	8015430 <HAL_GetTick>
 801975c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801975e:	e008      	b.n	8019772 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019760:	f7fb fe66 	bl	8015430 <HAL_GetTick>
 8019764:	4602      	mov	r2, r0
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	2b64      	cmp	r3, #100	; 0x64
 801976c:	d901      	bls.n	8019772 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801976e:	2303      	movs	r3, #3
 8019770:	e195      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019772:	4b6d      	ldr	r3, [pc, #436]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801977a:	2b00      	cmp	r3, #0
 801977c:	d1f0      	bne.n	8019760 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	f003 0301 	and.w	r3, r3, #1
 8019786:	2b00      	cmp	r3, #0
 8019788:	d021      	beq.n	80197ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801978e:	2b00      	cmp	r3, #0
 8019790:	d11d      	bne.n	80197ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019792:	4b65      	ldr	r3, [pc, #404]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019798:	0c1b      	lsrs	r3, r3, #16
 801979a:	f003 0303 	and.w	r3, r3, #3
 801979e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80197a0:	4b61      	ldr	r3, [pc, #388]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80197a6:	0e1b      	lsrs	r3, r3, #24
 80197a8:	f003 030f 	and.w	r3, r3, #15
 80197ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	685b      	ldr	r3, [r3, #4]
 80197b2:	019a      	lsls	r2, r3, #6
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	041b      	lsls	r3, r3, #16
 80197b8:	431a      	orrs	r2, r3
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	061b      	lsls	r3, r3, #24
 80197be:	431a      	orrs	r2, r3
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	689b      	ldr	r3, [r3, #8]
 80197c4:	071b      	lsls	r3, r3, #28
 80197c6:	4958      	ldr	r1, [pc, #352]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197c8:	4313      	orrs	r3, r2
 80197ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d004      	beq.n	80197e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80197e2:	d00a      	beq.n	80197fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d02e      	beq.n	801984e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80197f8:	d129      	bne.n	801984e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80197fa:	4b4b      	ldr	r3, [pc, #300]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019800:	0c1b      	lsrs	r3, r3, #16
 8019802:	f003 0303 	and.w	r3, r3, #3
 8019806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019808:	4b47      	ldr	r3, [pc, #284]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801980a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801980e:	0f1b      	lsrs	r3, r3, #28
 8019810:	f003 0307 	and.w	r3, r3, #7
 8019814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	685b      	ldr	r3, [r3, #4]
 801981a:	019a      	lsls	r2, r3, #6
 801981c:	693b      	ldr	r3, [r7, #16]
 801981e:	041b      	lsls	r3, r3, #16
 8019820:	431a      	orrs	r2, r3
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	68db      	ldr	r3, [r3, #12]
 8019826:	061b      	lsls	r3, r3, #24
 8019828:	431a      	orrs	r2, r3
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	071b      	lsls	r3, r3, #28
 801982e:	493e      	ldr	r1, [pc, #248]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019830:	4313      	orrs	r3, r2
 8019832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019836:	4b3c      	ldr	r3, [pc, #240]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801983c:	f023 021f 	bic.w	r2, r3, #31
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019844:	3b01      	subs	r3, #1
 8019846:	4938      	ldr	r1, [pc, #224]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019848:	4313      	orrs	r3, r2
 801984a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019856:	2b00      	cmp	r3, #0
 8019858:	d01d      	beq.n	8019896 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801985a:	4b33      	ldr	r3, [pc, #204]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801985c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019860:	0e1b      	lsrs	r3, r3, #24
 8019862:	f003 030f 	and.w	r3, r3, #15
 8019866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019868:	4b2f      	ldr	r3, [pc, #188]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801986a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801986e:	0f1b      	lsrs	r3, r3, #28
 8019870:	f003 0307 	and.w	r3, r3, #7
 8019874:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	685b      	ldr	r3, [r3, #4]
 801987a:	019a      	lsls	r2, r3, #6
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	691b      	ldr	r3, [r3, #16]
 8019880:	041b      	lsls	r3, r3, #16
 8019882:	431a      	orrs	r2, r3
 8019884:	693b      	ldr	r3, [r7, #16]
 8019886:	061b      	lsls	r3, r3, #24
 8019888:	431a      	orrs	r2, r3
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	071b      	lsls	r3, r3, #28
 801988e:	4926      	ldr	r1, [pc, #152]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019890:	4313      	orrs	r3, r2
 8019892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d011      	beq.n	80198c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	685b      	ldr	r3, [r3, #4]
 80198a6:	019a      	lsls	r2, r3, #6
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	691b      	ldr	r3, [r3, #16]
 80198ac:	041b      	lsls	r3, r3, #16
 80198ae:	431a      	orrs	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	68db      	ldr	r3, [r3, #12]
 80198b4:	061b      	lsls	r3, r3, #24
 80198b6:	431a      	orrs	r2, r3
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	689b      	ldr	r3, [r3, #8]
 80198bc:	071b      	lsls	r3, r3, #28
 80198be:	491a      	ldr	r1, [pc, #104]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198c0:	4313      	orrs	r3, r2
 80198c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80198c6:	4b18      	ldr	r3, [pc, #96]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	4a17      	ldr	r2, [pc, #92]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80198d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80198d2:	f7fb fdad 	bl	8015430 <HAL_GetTick>
 80198d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80198d8:	e008      	b.n	80198ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80198da:	f7fb fda9 	bl	8015430 <HAL_GetTick>
 80198de:	4602      	mov	r2, r0
 80198e0:	697b      	ldr	r3, [r7, #20]
 80198e2:	1ad3      	subs	r3, r2, r3
 80198e4:	2b64      	cmp	r3, #100	; 0x64
 80198e6:	d901      	bls.n	80198ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80198e8:	2303      	movs	r3, #3
 80198ea:	e0d8      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80198ec:	4b0e      	ldr	r3, [pc, #56]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d0f0      	beq.n	80198da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80198f8:	69bb      	ldr	r3, [r7, #24]
 80198fa:	2b01      	cmp	r3, #1
 80198fc:	f040 80ce 	bne.w	8019a9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019900:	4b09      	ldr	r3, [pc, #36]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	4a08      	ldr	r2, [pc, #32]	; (8019928 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801990a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801990c:	f7fb fd90 	bl	8015430 <HAL_GetTick>
 8019910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019912:	e00b      	b.n	801992c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019914:	f7fb fd8c 	bl	8015430 <HAL_GetTick>
 8019918:	4602      	mov	r2, r0
 801991a:	697b      	ldr	r3, [r7, #20]
 801991c:	1ad3      	subs	r3, r2, r3
 801991e:	2b64      	cmp	r3, #100	; 0x64
 8019920:	d904      	bls.n	801992c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019922:	2303      	movs	r3, #3
 8019924:	e0bb      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8019926:	bf00      	nop
 8019928:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801992c:	4b5e      	ldr	r3, [pc, #376]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019938:	d0ec      	beq.n	8019914 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019942:	2b00      	cmp	r3, #0
 8019944:	d003      	beq.n	801994e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801994a:	2b00      	cmp	r3, #0
 801994c:	d009      	beq.n	8019962 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019956:	2b00      	cmp	r3, #0
 8019958:	d02e      	beq.n	80199b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801995e:	2b00      	cmp	r3, #0
 8019960:	d12a      	bne.n	80199b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019962:	4b51      	ldr	r3, [pc, #324]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019968:	0c1b      	lsrs	r3, r3, #16
 801996a:	f003 0303 	and.w	r3, r3, #3
 801996e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019970:	4b4d      	ldr	r3, [pc, #308]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019976:	0f1b      	lsrs	r3, r3, #28
 8019978:	f003 0307 	and.w	r3, r3, #7
 801997c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	695b      	ldr	r3, [r3, #20]
 8019982:	019a      	lsls	r2, r3, #6
 8019984:	693b      	ldr	r3, [r7, #16]
 8019986:	041b      	lsls	r3, r3, #16
 8019988:	431a      	orrs	r2, r3
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	699b      	ldr	r3, [r3, #24]
 801998e:	061b      	lsls	r3, r3, #24
 8019990:	431a      	orrs	r2, r3
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	071b      	lsls	r3, r3, #28
 8019996:	4944      	ldr	r1, [pc, #272]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019998:	4313      	orrs	r3, r2
 801999a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801999e:	4b42      	ldr	r3, [pc, #264]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199ac:	3b01      	subs	r3, #1
 80199ae:	021b      	lsls	r3, r3, #8
 80199b0:	493d      	ldr	r1, [pc, #244]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199b2:	4313      	orrs	r3, r2
 80199b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d022      	beq.n	8019a0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80199cc:	d11d      	bne.n	8019a0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80199ce:	4b36      	ldr	r3, [pc, #216]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80199d4:	0e1b      	lsrs	r3, r3, #24
 80199d6:	f003 030f 	and.w	r3, r3, #15
 80199da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80199dc:	4b32      	ldr	r3, [pc, #200]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80199e2:	0f1b      	lsrs	r3, r3, #28
 80199e4:	f003 0307 	and.w	r3, r3, #7
 80199e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	695b      	ldr	r3, [r3, #20]
 80199ee:	019a      	lsls	r2, r3, #6
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	6a1b      	ldr	r3, [r3, #32]
 80199f4:	041b      	lsls	r3, r3, #16
 80199f6:	431a      	orrs	r2, r3
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	061b      	lsls	r3, r3, #24
 80199fc:	431a      	orrs	r2, r3
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	071b      	lsls	r3, r3, #28
 8019a02:	4929      	ldr	r1, [pc, #164]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a04:	4313      	orrs	r3, r2
 8019a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f003 0308 	and.w	r3, r3, #8
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d028      	beq.n	8019a68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019a16:	4b24      	ldr	r3, [pc, #144]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a1c:	0e1b      	lsrs	r3, r3, #24
 8019a1e:	f003 030f 	and.w	r3, r3, #15
 8019a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019a24:	4b20      	ldr	r3, [pc, #128]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a2a:	0c1b      	lsrs	r3, r3, #16
 8019a2c:	f003 0303 	and.w	r3, r3, #3
 8019a30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	695b      	ldr	r3, [r3, #20]
 8019a36:	019a      	lsls	r2, r3, #6
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	041b      	lsls	r3, r3, #16
 8019a3c:	431a      	orrs	r2, r3
 8019a3e:	693b      	ldr	r3, [r7, #16]
 8019a40:	061b      	lsls	r3, r3, #24
 8019a42:	431a      	orrs	r2, r3
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	69db      	ldr	r3, [r3, #28]
 8019a48:	071b      	lsls	r3, r3, #28
 8019a4a:	4917      	ldr	r1, [pc, #92]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a4c:	4313      	orrs	r3, r2
 8019a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8019a52:	4b15      	ldr	r3, [pc, #84]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a60:	4911      	ldr	r1, [pc, #68]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a62:	4313      	orrs	r3, r2
 8019a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8019a68:	4b0f      	ldr	r3, [pc, #60]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4a0e      	ldr	r2, [pc, #56]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019a74:	f7fb fcdc 	bl	8015430 <HAL_GetTick>
 8019a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019a7a:	e008      	b.n	8019a8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019a7c:	f7fb fcd8 	bl	8015430 <HAL_GetTick>
 8019a80:	4602      	mov	r2, r0
 8019a82:	697b      	ldr	r3, [r7, #20]
 8019a84:	1ad3      	subs	r3, r2, r3
 8019a86:	2b64      	cmp	r3, #100	; 0x64
 8019a88:	d901      	bls.n	8019a8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019a8a:	2303      	movs	r3, #3
 8019a8c:	e007      	b.n	8019a9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019a8e:	4b06      	ldr	r3, [pc, #24]	; (8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019a9a:	d1ef      	bne.n	8019a7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8019a9c:	2300      	movs	r3, #0
}
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	3720      	adds	r7, #32
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	40023800 	.word	0x40023800

08019aac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b082      	sub	sp, #8
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d101      	bne.n	8019abe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8019aba:	2301      	movs	r3, #1
 8019abc:	e01c      	b.n	8019af8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	795b      	ldrb	r3, [r3, #5]
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d105      	bne.n	8019ad4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2200      	movs	r2, #0
 8019acc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8019ace:	6878      	ldr	r0, [r7, #4]
 8019ad0:	f7f9 ff3c 	bl	801394c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	2202      	movs	r2, #2
 8019ad8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	681a      	ldr	r2, [r3, #0]
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	f042 0204 	orr.w	r2, r2, #4
 8019ae8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2201      	movs	r2, #1
 8019aee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2200      	movs	r2, #0
 8019af4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8019af6:	2300      	movs	r3, #0
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3708      	adds	r7, #8
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b084      	sub	sp, #16
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	791b      	ldrb	r3, [r3, #4]
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d101      	bne.n	8019b1a <HAL_RNG_GenerateRandomNumber+0x1a>
 8019b16:	2302      	movs	r3, #2
 8019b18:	e044      	b.n	8019ba4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	2201      	movs	r2, #1
 8019b1e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	795b      	ldrb	r3, [r3, #5]
 8019b24:	b2db      	uxtb	r3, r3
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d133      	bne.n	8019b92 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	2202      	movs	r2, #2
 8019b2e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019b30:	f7fb fc7e 	bl	8015430 <HAL_GetTick>
 8019b34:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019b36:	e018      	b.n	8019b6a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8019b38:	f7fb fc7a 	bl	8015430 <HAL_GetTick>
 8019b3c:	4602      	mov	r2, r0
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	1ad3      	subs	r3, r2, r3
 8019b42:	2b02      	cmp	r3, #2
 8019b44:	d911      	bls.n	8019b6a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	f003 0301 	and.w	r3, r3, #1
 8019b50:	2b01      	cmp	r3, #1
 8019b52:	d00a      	beq.n	8019b6a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2201      	movs	r2, #1
 8019b58:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2202      	movs	r2, #2
 8019b5e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	2200      	movs	r2, #0
 8019b64:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8019b66:	2301      	movs	r3, #1
 8019b68:	e01c      	b.n	8019ba4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	f003 0301 	and.w	r3, r3, #1
 8019b74:	2b01      	cmp	r3, #1
 8019b76:	d1df      	bne.n	8019b38 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	689a      	ldr	r2, [r3, #8]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	68da      	ldr	r2, [r3, #12]
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	2201      	movs	r2, #1
 8019b8e:	715a      	strb	r2, [r3, #5]
 8019b90:	e004      	b.n	8019b9c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2204      	movs	r2, #4
 8019b96:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	711a      	strb	r2, [r3, #4]

  return status;
 8019ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3710      	adds	r7, #16
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b082      	sub	sp, #8
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	330c      	adds	r3, #12
 8019bb8:	4619      	mov	r1, r3
 8019bba:	6878      	ldr	r0, [r7, #4]
 8019bbc:	f7ff ffa0 	bl	8019b00 <HAL_RNG_GenerateRandomNumber>
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d102      	bne.n	8019bcc <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	68db      	ldr	r3, [r3, #12]
 8019bca:	e000      	b.n	8019bce <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8019bcc:	2300      	movs	r3, #0
  }
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3708      	adds	r7, #8
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}

08019bd6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019bd6:	b580      	push	{r7, lr}
 8019bd8:	b084      	sub	sp, #16
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d101      	bne.n	8019be8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019be4:	2301      	movs	r3, #1
 8019be6:	e09d      	b.n	8019d24 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d108      	bne.n	8019c02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019bf8:	d009      	beq.n	8019c0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	61da      	str	r2, [r3, #28]
 8019c00:	e005      	b.n	8019c0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2200      	movs	r2, #0
 8019c06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	2200      	movs	r2, #0
 8019c12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d106      	bne.n	8019c2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2200      	movs	r2, #0
 8019c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019c28:	6878      	ldr	r0, [r7, #4]
 8019c2a:	f7f9 ff17 	bl	8013a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2202      	movs	r2, #2
 8019c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019c44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019c4e:	d902      	bls.n	8019c56 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8019c50:	2300      	movs	r3, #0
 8019c52:	60fb      	str	r3, [r7, #12]
 8019c54:	e002      	b.n	8019c5c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019c5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	68db      	ldr	r3, [r3, #12]
 8019c60:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8019c64:	d007      	beq.n	8019c76 <HAL_SPI_Init+0xa0>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	68db      	ldr	r3, [r3, #12]
 8019c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019c6e:	d002      	beq.n	8019c76 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2200      	movs	r2, #0
 8019c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	689b      	ldr	r3, [r3, #8]
 8019c82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8019c86:	431a      	orrs	r2, r3
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	691b      	ldr	r3, [r3, #16]
 8019c8c:	f003 0302 	and.w	r3, r3, #2
 8019c90:	431a      	orrs	r2, r3
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	695b      	ldr	r3, [r3, #20]
 8019c96:	f003 0301 	and.w	r3, r3, #1
 8019c9a:	431a      	orrs	r2, r3
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	699b      	ldr	r3, [r3, #24]
 8019ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ca4:	431a      	orrs	r2, r3
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	69db      	ldr	r3, [r3, #28]
 8019caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019cae:	431a      	orrs	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	6a1b      	ldr	r3, [r3, #32]
 8019cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019cb8:	ea42 0103 	orr.w	r1, r2, r3
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	430a      	orrs	r2, r1
 8019cca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	699b      	ldr	r3, [r3, #24]
 8019cd0:	0c1b      	lsrs	r3, r3, #16
 8019cd2:	f003 0204 	and.w	r2, r3, #4
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cda:	f003 0310 	and.w	r3, r3, #16
 8019cde:	431a      	orrs	r2, r3
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ce4:	f003 0308 	and.w	r3, r3, #8
 8019ce8:	431a      	orrs	r2, r3
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	68db      	ldr	r3, [r3, #12]
 8019cee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019cf2:	ea42 0103 	orr.w	r1, r2, r3
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	430a      	orrs	r2, r1
 8019d02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	69da      	ldr	r2, [r3, #28]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019d12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2200      	movs	r2, #0
 8019d18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8019d22:	2300      	movs	r3, #0
}
 8019d24:	4618      	mov	r0, r3
 8019d26:	3710      	adds	r7, #16
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd80      	pop	{r7, pc}

08019d2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b088      	sub	sp, #32
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	60f8      	str	r0, [r7, #12]
 8019d34:	60b9      	str	r1, [r7, #8]
 8019d36:	603b      	str	r3, [r7, #0]
 8019d38:	4613      	mov	r3, r2
 8019d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019d46:	2b01      	cmp	r3, #1
 8019d48:	d101      	bne.n	8019d4e <HAL_SPI_Transmit+0x22>
 8019d4a:	2302      	movs	r3, #2
 8019d4c:	e158      	b.n	801a000 <HAL_SPI_Transmit+0x2d4>
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	2201      	movs	r2, #1
 8019d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019d56:	f7fb fb6b 	bl	8015430 <HAL_GetTick>
 8019d5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8019d5c:	88fb      	ldrh	r3, [r7, #6]
 8019d5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019d66:	b2db      	uxtb	r3, r3
 8019d68:	2b01      	cmp	r3, #1
 8019d6a:	d002      	beq.n	8019d72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8019d6c:	2302      	movs	r3, #2
 8019d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019d70:	e13d      	b.n	8019fee <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8019d72:	68bb      	ldr	r3, [r7, #8]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d002      	beq.n	8019d7e <HAL_SPI_Transmit+0x52>
 8019d78:	88fb      	ldrh	r3, [r7, #6]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d102      	bne.n	8019d84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8019d7e:	2301      	movs	r3, #1
 8019d80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019d82:	e134      	b.n	8019fee <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	2203      	movs	r2, #3
 8019d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	2200      	movs	r2, #0
 8019d90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	68ba      	ldr	r2, [r7, #8]
 8019d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	88fa      	ldrh	r2, [r7, #6]
 8019d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	88fa      	ldrh	r2, [r7, #6]
 8019da2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	2200      	movs	r2, #0
 8019da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	2200      	movs	r2, #0
 8019dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	2200      	movs	r2, #0
 8019db6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	2200      	movs	r2, #0
 8019dbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	689b      	ldr	r3, [r3, #8]
 8019dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019dce:	d10f      	bne.n	8019df0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	681a      	ldr	r2, [r3, #0]
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	681a      	ldr	r2, [r3, #0]
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019dfa:	2b40      	cmp	r3, #64	; 0x40
 8019dfc:	d007      	beq.n	8019e0e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	681a      	ldr	r2, [r3, #0]
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019e0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019e16:	d94b      	bls.n	8019eb0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d002      	beq.n	8019e26 <HAL_SPI_Transmit+0xfa>
 8019e20:	8afb      	ldrh	r3, [r7, #22]
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d13e      	bne.n	8019ea4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e2a:	881a      	ldrh	r2, [r3, #0]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e36:	1c9a      	adds	r2, r3, #2
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	3b01      	subs	r3, #1
 8019e44:	b29a      	uxth	r2, r3
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8019e4a:	e02b      	b.n	8019ea4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	689b      	ldr	r3, [r3, #8]
 8019e52:	f003 0302 	and.w	r3, r3, #2
 8019e56:	2b02      	cmp	r3, #2
 8019e58:	d112      	bne.n	8019e80 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e5e:	881a      	ldrh	r2, [r3, #0]
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e6a:	1c9a      	adds	r2, r3, #2
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	3b01      	subs	r3, #1
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019e7e:	e011      	b.n	8019ea4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019e80:	f7fb fad6 	bl	8015430 <HAL_GetTick>
 8019e84:	4602      	mov	r2, r0
 8019e86:	69bb      	ldr	r3, [r7, #24]
 8019e88:	1ad3      	subs	r3, r2, r3
 8019e8a:	683a      	ldr	r2, [r7, #0]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d803      	bhi.n	8019e98 <HAL_SPI_Transmit+0x16c>
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e96:	d102      	bne.n	8019e9e <HAL_SPI_Transmit+0x172>
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d102      	bne.n	8019ea4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8019e9e:	2303      	movs	r3, #3
 8019ea0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019ea2:	e0a4      	b.n	8019fee <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d1ce      	bne.n	8019e4c <HAL_SPI_Transmit+0x120>
 8019eae:	e07c      	b.n	8019faa <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d002      	beq.n	8019ebe <HAL_SPI_Transmit+0x192>
 8019eb8:	8afb      	ldrh	r3, [r7, #22]
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d170      	bne.n	8019fa0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	2b01      	cmp	r3, #1
 8019ec6:	d912      	bls.n	8019eee <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ecc:	881a      	ldrh	r2, [r3, #0]
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ed8:	1c9a      	adds	r2, r3, #2
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ee2:	b29b      	uxth	r3, r3
 8019ee4:	3b02      	subs	r3, #2
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019eec:	e058      	b.n	8019fa0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	330c      	adds	r3, #12
 8019ef8:	7812      	ldrb	r2, [r2, #0]
 8019efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f00:	1c5a      	adds	r2, r3, #1
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f0a:	b29b      	uxth	r3, r3
 8019f0c:	3b01      	subs	r3, #1
 8019f0e:	b29a      	uxth	r2, r3
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8019f14:	e044      	b.n	8019fa0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	689b      	ldr	r3, [r3, #8]
 8019f1c:	f003 0302 	and.w	r3, r3, #2
 8019f20:	2b02      	cmp	r3, #2
 8019f22:	d12b      	bne.n	8019f7c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	d912      	bls.n	8019f54 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f32:	881a      	ldrh	r2, [r3, #0]
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f3e:	1c9a      	adds	r2, r3, #2
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f48:	b29b      	uxth	r3, r3
 8019f4a:	3b02      	subs	r3, #2
 8019f4c:	b29a      	uxth	r2, r3
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019f52:	e025      	b.n	8019fa0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	330c      	adds	r3, #12
 8019f5e:	7812      	ldrb	r2, [r2, #0]
 8019f60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f66:	1c5a      	adds	r2, r3, #1
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f70:	b29b      	uxth	r3, r3
 8019f72:	3b01      	subs	r3, #1
 8019f74:	b29a      	uxth	r2, r3
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019f7a:	e011      	b.n	8019fa0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019f7c:	f7fb fa58 	bl	8015430 <HAL_GetTick>
 8019f80:	4602      	mov	r2, r0
 8019f82:	69bb      	ldr	r3, [r7, #24]
 8019f84:	1ad3      	subs	r3, r2, r3
 8019f86:	683a      	ldr	r2, [r7, #0]
 8019f88:	429a      	cmp	r2, r3
 8019f8a:	d803      	bhi.n	8019f94 <HAL_SPI_Transmit+0x268>
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f92:	d102      	bne.n	8019f9a <HAL_SPI_Transmit+0x26e>
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d102      	bne.n	8019fa0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8019f9a:	2303      	movs	r3, #3
 8019f9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019f9e:	e026      	b.n	8019fee <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019fa4:	b29b      	uxth	r3, r3
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d1b5      	bne.n	8019f16 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019faa:	69ba      	ldr	r2, [r7, #24]
 8019fac:	6839      	ldr	r1, [r7, #0]
 8019fae:	68f8      	ldr	r0, [r7, #12]
 8019fb0:	f000 fd08 	bl	801a9c4 <SPI_EndRxTxTransaction>
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d002      	beq.n	8019fc0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	2220      	movs	r2, #32
 8019fbe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	689b      	ldr	r3, [r3, #8]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d10a      	bne.n	8019fde <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8019fc8:	2300      	movs	r3, #0
 8019fca:	613b      	str	r3, [r7, #16]
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	68db      	ldr	r3, [r3, #12]
 8019fd2:	613b      	str	r3, [r7, #16]
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	689b      	ldr	r3, [r3, #8]
 8019fda:	613b      	str	r3, [r7, #16]
 8019fdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d002      	beq.n	8019fec <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8019fe6:	2301      	movs	r3, #1
 8019fe8:	77fb      	strb	r3, [r7, #31]
 8019fea:	e000      	b.n	8019fee <HAL_SPI_Transmit+0x2c2>
  }

error:
 8019fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	2201      	movs	r2, #1
 8019ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 801a000:	4618      	mov	r0, r3
 801a002:	3720      	adds	r7, #32
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af02      	add	r7, sp, #8
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	603b      	str	r3, [r7, #0]
 801a014:	4613      	mov	r3, r2
 801a016:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a018:	2300      	movs	r3, #0
 801a01a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a024:	d112      	bne.n	801a04c <HAL_SPI_Receive+0x44>
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	689b      	ldr	r3, [r3, #8]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d10e      	bne.n	801a04c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	2204      	movs	r2, #4
 801a032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a036:	88fa      	ldrh	r2, [r7, #6]
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	9300      	str	r3, [sp, #0]
 801a03c:	4613      	mov	r3, r2
 801a03e:	68ba      	ldr	r2, [r7, #8]
 801a040:	68b9      	ldr	r1, [r7, #8]
 801a042:	68f8      	ldr	r0, [r7, #12]
 801a044:	f000 f910 	bl	801a268 <HAL_SPI_TransmitReceive>
 801a048:	4603      	mov	r3, r0
 801a04a:	e109      	b.n	801a260 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a052:	2b01      	cmp	r3, #1
 801a054:	d101      	bne.n	801a05a <HAL_SPI_Receive+0x52>
 801a056:	2302      	movs	r3, #2
 801a058:	e102      	b.n	801a260 <HAL_SPI_Receive+0x258>
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2201      	movs	r2, #1
 801a05e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a062:	f7fb f9e5 	bl	8015430 <HAL_GetTick>
 801a066:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a06e:	b2db      	uxtb	r3, r3
 801a070:	2b01      	cmp	r3, #1
 801a072:	d002      	beq.n	801a07a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a074:	2302      	movs	r3, #2
 801a076:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a078:	e0e9      	b.n	801a24e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d002      	beq.n	801a086 <HAL_SPI_Receive+0x7e>
 801a080:	88fb      	ldrh	r3, [r7, #6]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d102      	bne.n	801a08c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a086:	2301      	movs	r3, #1
 801a088:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a08a:	e0e0      	b.n	801a24e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	2204      	movs	r2, #4
 801a090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	2200      	movs	r2, #0
 801a098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	68ba      	ldr	r2, [r7, #8]
 801a09e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	88fa      	ldrh	r2, [r7, #6]
 801a0a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	88fa      	ldrh	r2, [r7, #6]
 801a0ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2200      	movs	r2, #0
 801a0c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	68db      	ldr	r3, [r3, #12]
 801a0d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a0d6:	d908      	bls.n	801a0ea <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	685a      	ldr	r2, [r3, #4]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a0e6:	605a      	str	r2, [r3, #4]
 801a0e8:	e007      	b.n	801a0fa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	685a      	ldr	r2, [r3, #4]
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a0f8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	689b      	ldr	r3, [r3, #8]
 801a0fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a102:	d10f      	bne.n	801a124 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	681a      	ldr	r2, [r3, #0]
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	681a      	ldr	r2, [r3, #0]
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a122:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a12e:	2b40      	cmp	r3, #64	; 0x40
 801a130:	d007      	beq.n	801a142 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	681a      	ldr	r2, [r3, #0]
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a140:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	68db      	ldr	r3, [r3, #12]
 801a146:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a14a:	d867      	bhi.n	801a21c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a14c:	e030      	b.n	801a1b0 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	689b      	ldr	r3, [r3, #8]
 801a154:	f003 0301 	and.w	r3, r3, #1
 801a158:	2b01      	cmp	r3, #1
 801a15a:	d117      	bne.n	801a18c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	f103 020c 	add.w	r2, r3, #12
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a168:	7812      	ldrb	r2, [r2, #0]
 801a16a:	b2d2      	uxtb	r2, r2
 801a16c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a172:	1c5a      	adds	r2, r3, #1
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a17e:	b29b      	uxth	r3, r3
 801a180:	3b01      	subs	r3, #1
 801a182:	b29a      	uxth	r2, r3
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a18a:	e011      	b.n	801a1b0 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a18c:	f7fb f950 	bl	8015430 <HAL_GetTick>
 801a190:	4602      	mov	r2, r0
 801a192:	693b      	ldr	r3, [r7, #16]
 801a194:	1ad3      	subs	r3, r2, r3
 801a196:	683a      	ldr	r2, [r7, #0]
 801a198:	429a      	cmp	r2, r3
 801a19a:	d803      	bhi.n	801a1a4 <HAL_SPI_Receive+0x19c>
 801a19c:	683b      	ldr	r3, [r7, #0]
 801a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1a2:	d102      	bne.n	801a1aa <HAL_SPI_Receive+0x1a2>
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d102      	bne.n	801a1b0 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a1aa:	2303      	movs	r3, #3
 801a1ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a1ae:	e04e      	b.n	801a24e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d1c8      	bne.n	801a14e <HAL_SPI_Receive+0x146>
 801a1bc:	e034      	b.n	801a228 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	689b      	ldr	r3, [r3, #8]
 801a1c4:	f003 0301 	and.w	r3, r3, #1
 801a1c8:	2b01      	cmp	r3, #1
 801a1ca:	d115      	bne.n	801a1f8 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	68da      	ldr	r2, [r3, #12]
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1d6:	b292      	uxth	r2, r2
 801a1d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1de:	1c9a      	adds	r2, r3, #2
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a1ea:	b29b      	uxth	r3, r3
 801a1ec:	3b01      	subs	r3, #1
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a1f6:	e011      	b.n	801a21c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a1f8:	f7fb f91a 	bl	8015430 <HAL_GetTick>
 801a1fc:	4602      	mov	r2, r0
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	1ad3      	subs	r3, r2, r3
 801a202:	683a      	ldr	r2, [r7, #0]
 801a204:	429a      	cmp	r2, r3
 801a206:	d803      	bhi.n	801a210 <HAL_SPI_Receive+0x208>
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a20e:	d102      	bne.n	801a216 <HAL_SPI_Receive+0x20e>
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d102      	bne.n	801a21c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a216:	2303      	movs	r3, #3
 801a218:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a21a:	e018      	b.n	801a24e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a222:	b29b      	uxth	r3, r3
 801a224:	2b00      	cmp	r3, #0
 801a226:	d1ca      	bne.n	801a1be <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a228:	693a      	ldr	r2, [r7, #16]
 801a22a:	6839      	ldr	r1, [r7, #0]
 801a22c:	68f8      	ldr	r0, [r7, #12]
 801a22e:	f000 fb4d 	bl	801a8cc <SPI_EndRxTransaction>
 801a232:	4603      	mov	r3, r0
 801a234:	2b00      	cmp	r3, #0
 801a236:	d002      	beq.n	801a23e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	2220      	movs	r2, #32
 801a23c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a242:	2b00      	cmp	r3, #0
 801a244:	d002      	beq.n	801a24c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a246:	2301      	movs	r3, #1
 801a248:	75fb      	strb	r3, [r7, #23]
 801a24a:	e000      	b.n	801a24e <HAL_SPI_Receive+0x246>
  }

error :
 801a24c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2201      	movs	r2, #1
 801a252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	2200      	movs	r2, #0
 801a25a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a25e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a260:	4618      	mov	r0, r3
 801a262:	3718      	adds	r7, #24
 801a264:	46bd      	mov	sp, r7
 801a266:	bd80      	pop	{r7, pc}

0801a268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b08a      	sub	sp, #40	; 0x28
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	60f8      	str	r0, [r7, #12]
 801a270:	60b9      	str	r1, [r7, #8]
 801a272:	607a      	str	r2, [r7, #4]
 801a274:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a276:	2301      	movs	r3, #1
 801a278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a27a:	2300      	movs	r3, #0
 801a27c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a286:	2b01      	cmp	r3, #1
 801a288:	d101      	bne.n	801a28e <HAL_SPI_TransmitReceive+0x26>
 801a28a:	2302      	movs	r3, #2
 801a28c:	e1fb      	b.n	801a686 <HAL_SPI_TransmitReceive+0x41e>
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	2201      	movs	r2, #1
 801a292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a296:	f7fb f8cb 	bl	8015430 <HAL_GetTick>
 801a29a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a2a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a2aa:	887b      	ldrh	r3, [r7, #2]
 801a2ac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a2ae:	887b      	ldrh	r3, [r7, #2]
 801a2b0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a2b2:	7efb      	ldrb	r3, [r7, #27]
 801a2b4:	2b01      	cmp	r3, #1
 801a2b6:	d00e      	beq.n	801a2d6 <HAL_SPI_TransmitReceive+0x6e>
 801a2b8:	697b      	ldr	r3, [r7, #20]
 801a2ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a2be:	d106      	bne.n	801a2ce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	689b      	ldr	r3, [r3, #8]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d102      	bne.n	801a2ce <HAL_SPI_TransmitReceive+0x66>
 801a2c8:	7efb      	ldrb	r3, [r7, #27]
 801a2ca:	2b04      	cmp	r3, #4
 801a2cc:	d003      	beq.n	801a2d6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a2ce:	2302      	movs	r3, #2
 801a2d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a2d4:	e1cd      	b.n	801a672 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d005      	beq.n	801a2e8 <HAL_SPI_TransmitReceive+0x80>
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d002      	beq.n	801a2e8 <HAL_SPI_TransmitReceive+0x80>
 801a2e2:	887b      	ldrh	r3, [r7, #2]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d103      	bne.n	801a2f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a2ee:	e1c0      	b.n	801a672 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	2b04      	cmp	r3, #4
 801a2fa:	d003      	beq.n	801a304 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	2205      	movs	r2, #5
 801a300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	2200      	movs	r2, #0
 801a308:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	687a      	ldr	r2, [r7, #4]
 801a30e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	887a      	ldrh	r2, [r7, #2]
 801a314:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	887a      	ldrh	r2, [r7, #2]
 801a31c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	68ba      	ldr	r2, [r7, #8]
 801a324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	887a      	ldrh	r2, [r7, #2]
 801a32a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	887a      	ldrh	r2, [r7, #2]
 801a330:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	2200      	movs	r2, #0
 801a336:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	2200      	movs	r2, #0
 801a33c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	68db      	ldr	r3, [r3, #12]
 801a342:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a346:	d802      	bhi.n	801a34e <HAL_SPI_TransmitReceive+0xe6>
 801a348:	8a3b      	ldrh	r3, [r7, #16]
 801a34a:	2b01      	cmp	r3, #1
 801a34c:	d908      	bls.n	801a360 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	685a      	ldr	r2, [r3, #4]
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a35c:	605a      	str	r2, [r3, #4]
 801a35e:	e007      	b.n	801a370 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	685a      	ldr	r2, [r3, #4]
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a36e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a37a:	2b40      	cmp	r3, #64	; 0x40
 801a37c:	d007      	beq.n	801a38e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a38c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	68db      	ldr	r3, [r3, #12]
 801a392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a396:	d97c      	bls.n	801a492 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	685b      	ldr	r3, [r3, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d002      	beq.n	801a3a6 <HAL_SPI_TransmitReceive+0x13e>
 801a3a0:	8a7b      	ldrh	r3, [r7, #18]
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d169      	bne.n	801a47a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3aa:	881a      	ldrh	r2, [r3, #0]
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3b6:	1c9a      	adds	r2, r3, #2
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a3c0:	b29b      	uxth	r3, r3
 801a3c2:	3b01      	subs	r3, #1
 801a3c4:	b29a      	uxth	r2, r3
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a3ca:	e056      	b.n	801a47a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	689b      	ldr	r3, [r3, #8]
 801a3d2:	f003 0302 	and.w	r3, r3, #2
 801a3d6:	2b02      	cmp	r3, #2
 801a3d8:	d11b      	bne.n	801a412 <HAL_SPI_TransmitReceive+0x1aa>
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a3de:	b29b      	uxth	r3, r3
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d016      	beq.n	801a412 <HAL_SPI_TransmitReceive+0x1aa>
 801a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e6:	2b01      	cmp	r3, #1
 801a3e8:	d113      	bne.n	801a412 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3ee:	881a      	ldrh	r2, [r3, #0]
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3fa:	1c9a      	adds	r2, r3, #2
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a404:	b29b      	uxth	r3, r3
 801a406:	3b01      	subs	r3, #1
 801a408:	b29a      	uxth	r2, r3
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a40e:	2300      	movs	r3, #0
 801a410:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	689b      	ldr	r3, [r3, #8]
 801a418:	f003 0301 	and.w	r3, r3, #1
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	d11c      	bne.n	801a45a <HAL_SPI_TransmitReceive+0x1f2>
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a426:	b29b      	uxth	r3, r3
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d016      	beq.n	801a45a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	68da      	ldr	r2, [r3, #12]
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a436:	b292      	uxth	r2, r2
 801a438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a43e:	1c9a      	adds	r2, r3, #2
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	3b01      	subs	r3, #1
 801a44e:	b29a      	uxth	r2, r3
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a456:	2301      	movs	r3, #1
 801a458:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801a45a:	f7fa ffe9 	bl	8015430 <HAL_GetTick>
 801a45e:	4602      	mov	r2, r0
 801a460:	69fb      	ldr	r3, [r7, #28]
 801a462:	1ad3      	subs	r3, r2, r3
 801a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a466:	429a      	cmp	r2, r3
 801a468:	d807      	bhi.n	801a47a <HAL_SPI_TransmitReceive+0x212>
 801a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a470:	d003      	beq.n	801a47a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801a472:	2303      	movs	r3, #3
 801a474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a478:	e0fb      	b.n	801a672 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a47e:	b29b      	uxth	r3, r3
 801a480:	2b00      	cmp	r3, #0
 801a482:	d1a3      	bne.n	801a3cc <HAL_SPI_TransmitReceive+0x164>
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d19d      	bne.n	801a3cc <HAL_SPI_TransmitReceive+0x164>
 801a490:	e0df      	b.n	801a652 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	685b      	ldr	r3, [r3, #4]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d003      	beq.n	801a4a2 <HAL_SPI_TransmitReceive+0x23a>
 801a49a:	8a7b      	ldrh	r3, [r7, #18]
 801a49c:	2b01      	cmp	r3, #1
 801a49e:	f040 80cb 	bne.w	801a638 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	2b01      	cmp	r3, #1
 801a4aa:	d912      	bls.n	801a4d2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4b0:	881a      	ldrh	r2, [r3, #0]
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4bc:	1c9a      	adds	r2, r3, #2
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	3b02      	subs	r3, #2
 801a4ca:	b29a      	uxth	r2, r3
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a4d0:	e0b2      	b.n	801a638 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	330c      	adds	r3, #12
 801a4dc:	7812      	ldrb	r2, [r2, #0]
 801a4de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4e4:	1c5a      	adds	r2, r3, #1
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4ee:	b29b      	uxth	r3, r3
 801a4f0:	3b01      	subs	r3, #1
 801a4f2:	b29a      	uxth	r2, r3
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a4f8:	e09e      	b.n	801a638 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	689b      	ldr	r3, [r3, #8]
 801a500:	f003 0302 	and.w	r3, r3, #2
 801a504:	2b02      	cmp	r3, #2
 801a506:	d134      	bne.n	801a572 <HAL_SPI_TransmitReceive+0x30a>
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a50c:	b29b      	uxth	r3, r3
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d02f      	beq.n	801a572 <HAL_SPI_TransmitReceive+0x30a>
 801a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a514:	2b01      	cmp	r3, #1
 801a516:	d12c      	bne.n	801a572 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	2b01      	cmp	r3, #1
 801a520:	d912      	bls.n	801a548 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a526:	881a      	ldrh	r2, [r3, #0]
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a532:	1c9a      	adds	r2, r3, #2
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	3b02      	subs	r3, #2
 801a540:	b29a      	uxth	r2, r3
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a546:	e012      	b.n	801a56e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	330c      	adds	r3, #12
 801a552:	7812      	ldrb	r2, [r2, #0]
 801a554:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a55a:	1c5a      	adds	r2, r3, #1
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a564:	b29b      	uxth	r3, r3
 801a566:	3b01      	subs	r3, #1
 801a568:	b29a      	uxth	r2, r3
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a56e:	2300      	movs	r3, #0
 801a570:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	689b      	ldr	r3, [r3, #8]
 801a578:	f003 0301 	and.w	r3, r3, #1
 801a57c:	2b01      	cmp	r3, #1
 801a57e:	d148      	bne.n	801a612 <HAL_SPI_TransmitReceive+0x3aa>
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a586:	b29b      	uxth	r3, r3
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d042      	beq.n	801a612 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a592:	b29b      	uxth	r3, r3
 801a594:	2b01      	cmp	r3, #1
 801a596:	d923      	bls.n	801a5e0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	68da      	ldr	r2, [r3, #12]
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5a2:	b292      	uxth	r2, r2
 801a5a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5aa:	1c9a      	adds	r2, r3, #2
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	3b02      	subs	r3, #2
 801a5ba:	b29a      	uxth	r2, r3
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a5c8:	b29b      	uxth	r3, r3
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	d81f      	bhi.n	801a60e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	685a      	ldr	r2, [r3, #4]
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a5dc:	605a      	str	r2, [r3, #4]
 801a5de:	e016      	b.n	801a60e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	f103 020c 	add.w	r2, r3, #12
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5ec:	7812      	ldrb	r2, [r2, #0]
 801a5ee:	b2d2      	uxtb	r2, r2
 801a5f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5f6:	1c5a      	adds	r2, r3, #1
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a602:	b29b      	uxth	r3, r3
 801a604:	3b01      	subs	r3, #1
 801a606:	b29a      	uxth	r2, r3
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a60e:	2301      	movs	r3, #1
 801a610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a612:	f7fa ff0d 	bl	8015430 <HAL_GetTick>
 801a616:	4602      	mov	r2, r0
 801a618:	69fb      	ldr	r3, [r7, #28]
 801a61a:	1ad3      	subs	r3, r2, r3
 801a61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a61e:	429a      	cmp	r2, r3
 801a620:	d803      	bhi.n	801a62a <HAL_SPI_TransmitReceive+0x3c2>
 801a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a628:	d102      	bne.n	801a630 <HAL_SPI_TransmitReceive+0x3c8>
 801a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d103      	bne.n	801a638 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801a630:	2303      	movs	r3, #3
 801a632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a636:	e01c      	b.n	801a672 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	2b00      	cmp	r3, #0
 801a640:	f47f af5b 	bne.w	801a4fa <HAL_SPI_TransmitReceive+0x292>
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a64a:	b29b      	uxth	r3, r3
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	f47f af54 	bne.w	801a4fa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a652:	69fa      	ldr	r2, [r7, #28]
 801a654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a656:	68f8      	ldr	r0, [r7, #12]
 801a658:	f000 f9b4 	bl	801a9c4 <SPI_EndRxTxTransaction>
 801a65c:	4603      	mov	r3, r0
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d006      	beq.n	801a670 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801a662:	2301      	movs	r3, #1
 801a664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2220      	movs	r2, #32
 801a66c:	661a      	str	r2, [r3, #96]	; 0x60
 801a66e:	e000      	b.n	801a672 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801a670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	2201      	movs	r2, #1
 801a676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	2200      	movs	r2, #0
 801a67e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801a686:	4618      	mov	r0, r3
 801a688:	3728      	adds	r7, #40	; 0x28
 801a68a:	46bd      	mov	sp, r7
 801a68c:	bd80      	pop	{r7, pc}
	...

0801a690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b088      	sub	sp, #32
 801a694:	af00      	add	r7, sp, #0
 801a696:	60f8      	str	r0, [r7, #12]
 801a698:	60b9      	str	r1, [r7, #8]
 801a69a:	603b      	str	r3, [r7, #0]
 801a69c:	4613      	mov	r3, r2
 801a69e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a6a0:	f7fa fec6 	bl	8015430 <HAL_GetTick>
 801a6a4:	4602      	mov	r2, r0
 801a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a8:	1a9b      	subs	r3, r3, r2
 801a6aa:	683a      	ldr	r2, [r7, #0]
 801a6ac:	4413      	add	r3, r2
 801a6ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a6b0:	f7fa febe 	bl	8015430 <HAL_GetTick>
 801a6b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a6b6:	4b39      	ldr	r3, [pc, #228]	; (801a79c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	015b      	lsls	r3, r3, #5
 801a6bc:	0d1b      	lsrs	r3, r3, #20
 801a6be:	69fa      	ldr	r2, [r7, #28]
 801a6c0:	fb02 f303 	mul.w	r3, r2, r3
 801a6c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a6c6:	e054      	b.n	801a772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6ce:	d050      	beq.n	801a772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a6d0:	f7fa feae 	bl	8015430 <HAL_GetTick>
 801a6d4:	4602      	mov	r2, r0
 801a6d6:	69bb      	ldr	r3, [r7, #24]
 801a6d8:	1ad3      	subs	r3, r2, r3
 801a6da:	69fa      	ldr	r2, [r7, #28]
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	d902      	bls.n	801a6e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 801a6e0:	69fb      	ldr	r3, [r7, #28]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d13d      	bne.n	801a762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	685a      	ldr	r2, [r3, #4]
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a6f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	685b      	ldr	r3, [r3, #4]
 801a6fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a6fe:	d111      	bne.n	801a724 <SPI_WaitFlagStateUntilTimeout+0x94>
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	689b      	ldr	r3, [r3, #8]
 801a704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a708:	d004      	beq.n	801a714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	689b      	ldr	r3, [r3, #8]
 801a70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a712:	d107      	bne.n	801a724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	681a      	ldr	r2, [r3, #0]
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a72c:	d10f      	bne.n	801a74e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	681a      	ldr	r2, [r3, #0]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a73c:	601a      	str	r2, [r3, #0]
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	681a      	ldr	r2, [r3, #0]
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a74c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	2201      	movs	r2, #1
 801a752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	2200      	movs	r2, #0
 801a75a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a75e:	2303      	movs	r3, #3
 801a760:	e017      	b.n	801a792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d101      	bne.n	801a76c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801a768:	2300      	movs	r3, #0
 801a76a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	3b01      	subs	r3, #1
 801a770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	689a      	ldr	r2, [r3, #8]
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	4013      	ands	r3, r2
 801a77c:	68ba      	ldr	r2, [r7, #8]
 801a77e:	429a      	cmp	r2, r3
 801a780:	bf0c      	ite	eq
 801a782:	2301      	moveq	r3, #1
 801a784:	2300      	movne	r3, #0
 801a786:	b2db      	uxtb	r3, r3
 801a788:	461a      	mov	r2, r3
 801a78a:	79fb      	ldrb	r3, [r7, #7]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d19b      	bne.n	801a6c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801a790:	2300      	movs	r3, #0
}
 801a792:	4618      	mov	r0, r3
 801a794:	3720      	adds	r7, #32
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}
 801a79a:	bf00      	nop
 801a79c:	2000011c 	.word	0x2000011c

0801a7a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b08a      	sub	sp, #40	; 0x28
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	60f8      	str	r0, [r7, #12]
 801a7a8:	60b9      	str	r1, [r7, #8]
 801a7aa:	607a      	str	r2, [r7, #4]
 801a7ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a7b2:	f7fa fe3d 	bl	8015430 <HAL_GetTick>
 801a7b6:	4602      	mov	r2, r0
 801a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ba:	1a9b      	subs	r3, r3, r2
 801a7bc:	683a      	ldr	r2, [r7, #0]
 801a7be:	4413      	add	r3, r2
 801a7c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801a7c2:	f7fa fe35 	bl	8015430 <HAL_GetTick>
 801a7c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	330c      	adds	r3, #12
 801a7ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a7d0:	4b3d      	ldr	r3, [pc, #244]	; (801a8c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801a7d2:	681a      	ldr	r2, [r3, #0]
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	009b      	lsls	r3, r3, #2
 801a7d8:	4413      	add	r3, r2
 801a7da:	00da      	lsls	r2, r3, #3
 801a7dc:	1ad3      	subs	r3, r2, r3
 801a7de:	0d1b      	lsrs	r3, r3, #20
 801a7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a7e2:	fb02 f303 	mul.w	r3, r2, r3
 801a7e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801a7e8:	e060      	b.n	801a8ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801a7f0:	d107      	bne.n	801a802 <SPI_WaitFifoStateUntilTimeout+0x62>
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d104      	bne.n	801a802 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801a7f8:	69fb      	ldr	r3, [r7, #28]
 801a7fa:	781b      	ldrb	r3, [r3, #0]
 801a7fc:	b2db      	uxtb	r3, r3
 801a7fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801a800:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a808:	d050      	beq.n	801a8ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a80a:	f7fa fe11 	bl	8015430 <HAL_GetTick>
 801a80e:	4602      	mov	r2, r0
 801a810:	6a3b      	ldr	r3, [r7, #32]
 801a812:	1ad3      	subs	r3, r2, r3
 801a814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a816:	429a      	cmp	r2, r3
 801a818:	d902      	bls.n	801a820 <SPI_WaitFifoStateUntilTimeout+0x80>
 801a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d13d      	bne.n	801a89c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	685a      	ldr	r2, [r3, #4]
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a82e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	685b      	ldr	r3, [r3, #4]
 801a834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a838:	d111      	bne.n	801a85e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	689b      	ldr	r3, [r3, #8]
 801a83e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a842:	d004      	beq.n	801a84e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	689b      	ldr	r3, [r3, #8]
 801a848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a84c:	d107      	bne.n	801a85e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	681a      	ldr	r2, [r3, #0]
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a85c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a866:	d10f      	bne.n	801a888 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a876:	601a      	str	r2, [r3, #0]
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	681a      	ldr	r2, [r3, #0]
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a886:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	2201      	movs	r2, #1
 801a88c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	2200      	movs	r2, #0
 801a894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a898:	2303      	movs	r3, #3
 801a89a:	e010      	b.n	801a8be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a89c:	69bb      	ldr	r3, [r7, #24]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d101      	bne.n	801a8a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801a8a6:	69bb      	ldr	r3, [r7, #24]
 801a8a8:	3b01      	subs	r3, #1
 801a8aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	689a      	ldr	r2, [r3, #8]
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	4013      	ands	r3, r2
 801a8b6:	687a      	ldr	r2, [r7, #4]
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	d196      	bne.n	801a7ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801a8bc:	2300      	movs	r3, #0
}
 801a8be:	4618      	mov	r0, r3
 801a8c0:	3728      	adds	r7, #40	; 0x28
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	bd80      	pop	{r7, pc}
 801a8c6:	bf00      	nop
 801a8c8:	2000011c 	.word	0x2000011c

0801a8cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b088      	sub	sp, #32
 801a8d0:	af02      	add	r7, sp, #8
 801a8d2:	60f8      	str	r0, [r7, #12]
 801a8d4:	60b9      	str	r1, [r7, #8]
 801a8d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	685b      	ldr	r3, [r3, #4]
 801a8dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a8e0:	d111      	bne.n	801a906 <SPI_EndRxTransaction+0x3a>
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	689b      	ldr	r3, [r3, #8]
 801a8e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a8ea:	d004      	beq.n	801a8f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	689b      	ldr	r3, [r3, #8]
 801a8f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a8f4:	d107      	bne.n	801a906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	681a      	ldr	r2, [r3, #0]
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a904:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	685b      	ldr	r3, [r3, #4]
 801a90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a90e:	d112      	bne.n	801a936 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	9300      	str	r3, [sp, #0]
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	2200      	movs	r2, #0
 801a918:	2180      	movs	r1, #128	; 0x80
 801a91a:	68f8      	ldr	r0, [r7, #12]
 801a91c:	f7ff feb8 	bl	801a690 <SPI_WaitFlagStateUntilTimeout>
 801a920:	4603      	mov	r3, r0
 801a922:	2b00      	cmp	r3, #0
 801a924:	d021      	beq.n	801a96a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a92a:	f043 0220 	orr.w	r2, r3, #32
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801a932:	2303      	movs	r3, #3
 801a934:	e03d      	b.n	801a9b2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801a936:	4b21      	ldr	r3, [pc, #132]	; (801a9bc <SPI_EndRxTransaction+0xf0>)
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	4a21      	ldr	r2, [pc, #132]	; (801a9c0 <SPI_EndRxTransaction+0xf4>)
 801a93c:	fba2 2303 	umull	r2, r3, r2, r3
 801a940:	0d5b      	lsrs	r3, r3, #21
 801a942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a946:	fb02 f303 	mul.w	r3, r2, r3
 801a94a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801a94c:	697b      	ldr	r3, [r7, #20]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d00a      	beq.n	801a968 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	3b01      	subs	r3, #1
 801a956:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	689b      	ldr	r3, [r3, #8]
 801a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a962:	2b80      	cmp	r3, #128	; 0x80
 801a964:	d0f2      	beq.n	801a94c <SPI_EndRxTransaction+0x80>
 801a966:	e000      	b.n	801a96a <SPI_EndRxTransaction+0x9e>
        break;
 801a968:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	685b      	ldr	r3, [r3, #4]
 801a96e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a972:	d11d      	bne.n	801a9b0 <SPI_EndRxTransaction+0xe4>
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	689b      	ldr	r3, [r3, #8]
 801a978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a97c:	d004      	beq.n	801a988 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	689b      	ldr	r3, [r3, #8]
 801a982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a986:	d113      	bne.n	801a9b0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	9300      	str	r3, [sp, #0]
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	2200      	movs	r2, #0
 801a990:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a994:	68f8      	ldr	r0, [r7, #12]
 801a996:	f7ff ff03 	bl	801a7a0 <SPI_WaitFifoStateUntilTimeout>
 801a99a:	4603      	mov	r3, r0
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d007      	beq.n	801a9b0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9a4:	f043 0220 	orr.w	r2, r3, #32
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801a9ac:	2303      	movs	r3, #3
 801a9ae:	e000      	b.n	801a9b2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801a9b0:	2300      	movs	r3, #0
}
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	3718      	adds	r7, #24
 801a9b6:	46bd      	mov	sp, r7
 801a9b8:	bd80      	pop	{r7, pc}
 801a9ba:	bf00      	nop
 801a9bc:	2000011c 	.word	0x2000011c
 801a9c0:	165e9f81 	.word	0x165e9f81

0801a9c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b088      	sub	sp, #32
 801a9c8:	af02      	add	r7, sp, #8
 801a9ca:	60f8      	str	r0, [r7, #12]
 801a9cc:	60b9      	str	r1, [r7, #8]
 801a9ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	9300      	str	r3, [sp, #0]
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801a9dc:	68f8      	ldr	r0, [r7, #12]
 801a9de:	f7ff fedf 	bl	801a7a0 <SPI_WaitFifoStateUntilTimeout>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d007      	beq.n	801a9f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9ec:	f043 0220 	orr.w	r2, r3, #32
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a9f4:	2303      	movs	r3, #3
 801a9f6:	e046      	b.n	801aa86 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801a9f8:	4b25      	ldr	r3, [pc, #148]	; (801aa90 <SPI_EndRxTxTransaction+0xcc>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	4a25      	ldr	r2, [pc, #148]	; (801aa94 <SPI_EndRxTxTransaction+0xd0>)
 801a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 801aa02:	0d5b      	lsrs	r3, r3, #21
 801aa04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa08:	fb02 f303 	mul.w	r3, r2, r3
 801aa0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aa16:	d112      	bne.n	801aa3e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	9300      	str	r3, [sp, #0]
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	2200      	movs	r2, #0
 801aa20:	2180      	movs	r1, #128	; 0x80
 801aa22:	68f8      	ldr	r0, [r7, #12]
 801aa24:	f7ff fe34 	bl	801a690 <SPI_WaitFlagStateUntilTimeout>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d016      	beq.n	801aa5c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa32:	f043 0220 	orr.w	r2, r3, #32
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801aa3a:	2303      	movs	r3, #3
 801aa3c:	e023      	b.n	801aa86 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d00a      	beq.n	801aa5a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801aa44:	697b      	ldr	r3, [r7, #20]
 801aa46:	3b01      	subs	r3, #1
 801aa48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	689b      	ldr	r3, [r3, #8]
 801aa50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa54:	2b80      	cmp	r3, #128	; 0x80
 801aa56:	d0f2      	beq.n	801aa3e <SPI_EndRxTxTransaction+0x7a>
 801aa58:	e000      	b.n	801aa5c <SPI_EndRxTxTransaction+0x98>
        break;
 801aa5a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	2200      	movs	r2, #0
 801aa64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801aa68:	68f8      	ldr	r0, [r7, #12]
 801aa6a:	f7ff fe99 	bl	801a7a0 <SPI_WaitFifoStateUntilTimeout>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d007      	beq.n	801aa84 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa78:	f043 0220 	orr.w	r2, r3, #32
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801aa80:	2303      	movs	r3, #3
 801aa82:	e000      	b.n	801aa86 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801aa84:	2300      	movs	r3, #0
}
 801aa86:	4618      	mov	r0, r3
 801aa88:	3718      	adds	r7, #24
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
 801aa8e:	bf00      	nop
 801aa90:	2000011c 	.word	0x2000011c
 801aa94:	165e9f81 	.word	0x165e9f81

0801aa98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b082      	sub	sp, #8
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	691b      	ldr	r3, [r3, #16]
 801aaa6:	f003 0302 	and.w	r3, r3, #2
 801aaaa:	2b02      	cmp	r3, #2
 801aaac:	d128      	bne.n	801ab00 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	68db      	ldr	r3, [r3, #12]
 801aab4:	f003 0302 	and.w	r3, r3, #2
 801aab8:	2b02      	cmp	r3, #2
 801aaba:	d121      	bne.n	801ab00 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	f06f 0202 	mvn.w	r2, #2
 801aac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	2201      	movs	r2, #1
 801aaca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	699b      	ldr	r3, [r3, #24]
 801aad2:	f003 0303 	and.w	r3, r3, #3
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d005      	beq.n	801aae6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aae0:	6878      	ldr	r0, [r7, #4]
 801aae2:	4798      	blx	r3
 801aae4:	e009      	b.n	801aafa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aaec:	6878      	ldr	r0, [r7, #4]
 801aaee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2200      	movs	r2, #0
 801aafe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	691b      	ldr	r3, [r3, #16]
 801ab06:	f003 0304 	and.w	r3, r3, #4
 801ab0a:	2b04      	cmp	r3, #4
 801ab0c:	d128      	bne.n	801ab60 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	68db      	ldr	r3, [r3, #12]
 801ab14:	f003 0304 	and.w	r3, r3, #4
 801ab18:	2b04      	cmp	r3, #4
 801ab1a:	d121      	bne.n	801ab60 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	f06f 0204 	mvn.w	r2, #4
 801ab24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	2202      	movs	r2, #2
 801ab2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	699b      	ldr	r3, [r3, #24]
 801ab32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d005      	beq.n	801ab46 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ab40:	6878      	ldr	r0, [r7, #4]
 801ab42:	4798      	blx	r3
 801ab44:	e009      	b.n	801ab5a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ab4c:	6878      	ldr	r0, [r7, #4]
 801ab4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ab56:	6878      	ldr	r0, [r7, #4]
 801ab58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	691b      	ldr	r3, [r3, #16]
 801ab66:	f003 0308 	and.w	r3, r3, #8
 801ab6a:	2b08      	cmp	r3, #8
 801ab6c:	d128      	bne.n	801abc0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	68db      	ldr	r3, [r3, #12]
 801ab74:	f003 0308 	and.w	r3, r3, #8
 801ab78:	2b08      	cmp	r3, #8
 801ab7a:	d121      	bne.n	801abc0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	f06f 0208 	mvn.w	r2, #8
 801ab84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	2204      	movs	r2, #4
 801ab8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	69db      	ldr	r3, [r3, #28]
 801ab92:	f003 0303 	and.w	r3, r3, #3
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d005      	beq.n	801aba6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aba0:	6878      	ldr	r0, [r7, #4]
 801aba2:	4798      	blx	r3
 801aba4:	e009      	b.n	801abba <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801abb6:	6878      	ldr	r0, [r7, #4]
 801abb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2200      	movs	r2, #0
 801abbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	691b      	ldr	r3, [r3, #16]
 801abc6:	f003 0310 	and.w	r3, r3, #16
 801abca:	2b10      	cmp	r3, #16
 801abcc:	d128      	bne.n	801ac20 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	68db      	ldr	r3, [r3, #12]
 801abd4:	f003 0310 	and.w	r3, r3, #16
 801abd8:	2b10      	cmp	r3, #16
 801abda:	d121      	bne.n	801ac20 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	f06f 0210 	mvn.w	r2, #16
 801abe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2208      	movs	r2, #8
 801abea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	69db      	ldr	r3, [r3, #28]
 801abf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d005      	beq.n	801ac06 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ac00:	6878      	ldr	r0, [r7, #4]
 801ac02:	4798      	blx	r3
 801ac04:	e009      	b.n	801ac1a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ac16:	6878      	ldr	r0, [r7, #4]
 801ac18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	691b      	ldr	r3, [r3, #16]
 801ac26:	f003 0301 	and.w	r3, r3, #1
 801ac2a:	2b01      	cmp	r3, #1
 801ac2c:	d110      	bne.n	801ac50 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	68db      	ldr	r3, [r3, #12]
 801ac34:	f003 0301 	and.w	r3, r3, #1
 801ac38:	2b01      	cmp	r3, #1
 801ac3a:	d109      	bne.n	801ac50 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f06f 0201 	mvn.w	r2, #1
 801ac44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ac4c:	6878      	ldr	r0, [r7, #4]
 801ac4e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	691b      	ldr	r3, [r3, #16]
 801ac56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac5a:	2b80      	cmp	r3, #128	; 0x80
 801ac5c:	d110      	bne.n	801ac80 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	68db      	ldr	r3, [r3, #12]
 801ac64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac68:	2b80      	cmp	r3, #128	; 0x80
 801ac6a:	d109      	bne.n	801ac80 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801ac74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801ac7c:	6878      	ldr	r0, [r7, #4]
 801ac7e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	691b      	ldr	r3, [r3, #16]
 801ac86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ac8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac8e:	d110      	bne.n	801acb2 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	68db      	ldr	r3, [r3, #12]
 801ac96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac9a:	2b80      	cmp	r3, #128	; 0x80
 801ac9c:	d109      	bne.n	801acb2 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801aca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801acae:	6878      	ldr	r0, [r7, #4]
 801acb0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	691b      	ldr	r3, [r3, #16]
 801acb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acbc:	2b40      	cmp	r3, #64	; 0x40
 801acbe:	d110      	bne.n	801ace2 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	68db      	ldr	r3, [r3, #12]
 801acc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acca:	2b40      	cmp	r3, #64	; 0x40
 801accc:	d109      	bne.n	801ace2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801acd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801acde:	6878      	ldr	r0, [r7, #4]
 801ace0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	691b      	ldr	r3, [r3, #16]
 801ace8:	f003 0320 	and.w	r3, r3, #32
 801acec:	2b20      	cmp	r3, #32
 801acee:	d110      	bne.n	801ad12 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	68db      	ldr	r3, [r3, #12]
 801acf6:	f003 0320 	and.w	r3, r3, #32
 801acfa:	2b20      	cmp	r3, #32
 801acfc:	d109      	bne.n	801ad12 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f06f 0220 	mvn.w	r2, #32
 801ad06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ad0e:	6878      	ldr	r0, [r7, #4]
 801ad10:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ad12:	bf00      	nop
 801ad14:	3708      	adds	r7, #8
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
	...

0801ad1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d101      	bne.n	801ad2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	e04e      	b.n	801adcc <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d114      	bne.n	801ad60 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	2200      	movs	r2, #0
 801ad3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801ad3e:	6878      	ldr	r0, [r7, #4]
 801ad40:	f000 fc1c 	bl	801b57c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d103      	bne.n	801ad56 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	4a20      	ldr	r2, [pc, #128]	; (801add4 <HAL_UART_Init+0xb8>)
 801ad52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad5c:	6878      	ldr	r0, [r7, #4]
 801ad5e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	2224      	movs	r2, #36	; 0x24
 801ad64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	681a      	ldr	r2, [r3, #0]
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	f022 0201 	bic.w	r2, r2, #1
 801ad74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f000 fc46 	bl	801b608 <UART_SetConfig>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	2b01      	cmp	r3, #1
 801ad80:	d101      	bne.n	801ad86 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801ad82:	2301      	movs	r3, #1
 801ad84:	e022      	b.n	801adcc <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d002      	beq.n	801ad94 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f000 fe9e 	bl	801bad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	685a      	ldr	r2, [r3, #4]
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801ada2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	689a      	ldr	r2, [r3, #8]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801adb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	f042 0201 	orr.w	r2, r2, #1
 801adc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801adc4:	6878      	ldr	r0, [r7, #4]
 801adc6:	f000 ff25 	bl	801bc14 <UART_CheckIdleState>
 801adca:	4603      	mov	r3, r0
}
 801adcc:	4618      	mov	r0, r3
 801adce:	3708      	adds	r7, #8
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}
 801add4:	08014829 	.word	0x08014829

0801add8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b08a      	sub	sp, #40	; 0x28
 801addc:	af02      	add	r7, sp, #8
 801adde:	60f8      	str	r0, [r7, #12]
 801ade0:	60b9      	str	r1, [r7, #8]
 801ade2:	603b      	str	r3, [r7, #0]
 801ade4:	4613      	mov	r3, r2
 801ade6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801adec:	2b20      	cmp	r3, #32
 801adee:	d171      	bne.n	801aed4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d002      	beq.n	801adfc <HAL_UART_Transmit+0x24>
 801adf6:	88fb      	ldrh	r3, [r7, #6]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d101      	bne.n	801ae00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801adfc:	2301      	movs	r3, #1
 801adfe:	e06a      	b.n	801aed6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	2200      	movs	r2, #0
 801ae04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	2221      	movs	r2, #33	; 0x21
 801ae0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ae0e:	f7fa fb0f 	bl	8015430 <HAL_GetTick>
 801ae12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	88fa      	ldrh	r2, [r7, #6]
 801ae18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	88fa      	ldrh	r2, [r7, #6]
 801ae20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	689b      	ldr	r3, [r3, #8]
 801ae28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ae2c:	d108      	bne.n	801ae40 <HAL_UART_Transmit+0x68>
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	691b      	ldr	r3, [r3, #16]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d104      	bne.n	801ae40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801ae36:	2300      	movs	r3, #0
 801ae38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	61bb      	str	r3, [r7, #24]
 801ae3e:	e003      	b.n	801ae48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ae44:	2300      	movs	r3, #0
 801ae46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ae48:	e02c      	b.n	801aea4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	9300      	str	r3, [sp, #0]
 801ae4e:	697b      	ldr	r3, [r7, #20]
 801ae50:	2200      	movs	r2, #0
 801ae52:	2180      	movs	r1, #128	; 0x80
 801ae54:	68f8      	ldr	r0, [r7, #12]
 801ae56:	f000 ff2a 	bl	801bcae <UART_WaitOnFlagUntilTimeout>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d001      	beq.n	801ae64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801ae60:	2303      	movs	r3, #3
 801ae62:	e038      	b.n	801aed6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801ae64:	69fb      	ldr	r3, [r7, #28]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d10b      	bne.n	801ae82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ae6a:	69bb      	ldr	r3, [r7, #24]
 801ae6c:	881b      	ldrh	r3, [r3, #0]
 801ae6e:	461a      	mov	r2, r3
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ae78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801ae7a:	69bb      	ldr	r3, [r7, #24]
 801ae7c:	3302      	adds	r3, #2
 801ae7e:	61bb      	str	r3, [r7, #24]
 801ae80:	e007      	b.n	801ae92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ae82:	69fb      	ldr	r3, [r7, #28]
 801ae84:	781a      	ldrb	r2, [r3, #0]
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801ae8c:	69fb      	ldr	r3, [r7, #28]
 801ae8e:	3301      	adds	r3, #1
 801ae90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	3b01      	subs	r3, #1
 801ae9c:	b29a      	uxth	r2, r3
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801aeaa:	b29b      	uxth	r3, r3
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d1cc      	bne.n	801ae4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	9300      	str	r3, [sp, #0]
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	2140      	movs	r1, #64	; 0x40
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f000 fef7 	bl	801bcae <UART_WaitOnFlagUntilTimeout>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d001      	beq.n	801aeca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801aec6:	2303      	movs	r3, #3
 801aec8:	e005      	b.n	801aed6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2220      	movs	r2, #32
 801aece:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801aed0:	2300      	movs	r3, #0
 801aed2:	e000      	b.n	801aed6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801aed4:	2302      	movs	r3, #2
  }
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3720      	adds	r7, #32
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}
	...

0801aee0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b0ba      	sub	sp, #232	; 0xe8
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	69db      	ldr	r3, [r3, #28]
 801aeee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	689b      	ldr	r3, [r3, #8]
 801af02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801af06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801af0a:	f640 030f 	movw	r3, #2063	; 0x80f
 801af0e:	4013      	ands	r3, r2
 801af10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801af14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d115      	bne.n	801af48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801af1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801af20:	f003 0320 	and.w	r3, r3, #32
 801af24:	2b00      	cmp	r3, #0
 801af26:	d00f      	beq.n	801af48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801af28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801af2c:	f003 0320 	and.w	r3, r3, #32
 801af30:	2b00      	cmp	r3, #0
 801af32:	d009      	beq.n	801af48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801af38:	2b00      	cmp	r3, #0
 801af3a:	f000 82b8 	beq.w	801b4ae <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801af42:	6878      	ldr	r0, [r7, #4]
 801af44:	4798      	blx	r3
      }
      return;
 801af46:	e2b2      	b.n	801b4ae <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801af48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	f000 811d 	beq.w	801b18c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801af52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801af56:	f003 0301 	and.w	r3, r3, #1
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d106      	bne.n	801af6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801af5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801af62:	4b88      	ldr	r3, [pc, #544]	; (801b184 <HAL_UART_IRQHandler+0x2a4>)
 801af64:	4013      	ands	r3, r2
 801af66:	2b00      	cmp	r3, #0
 801af68:	f000 8110 	beq.w	801b18c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801af6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801af70:	f003 0301 	and.w	r3, r3, #1
 801af74:	2b00      	cmp	r3, #0
 801af76:	d011      	beq.n	801af9c <HAL_UART_IRQHandler+0xbc>
 801af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801af7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af80:	2b00      	cmp	r3, #0
 801af82:	d00b      	beq.n	801af9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	2201      	movs	r2, #1
 801af8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801af92:	f043 0201 	orr.w	r2, r3, #1
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afa0:	f003 0302 	and.w	r3, r3, #2
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d011      	beq.n	801afcc <HAL_UART_IRQHandler+0xec>
 801afa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801afac:	f003 0301 	and.w	r3, r3, #1
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d00b      	beq.n	801afcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	2202      	movs	r2, #2
 801afba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801afc2:	f043 0204 	orr.w	r2, r3, #4
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801afcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afd0:	f003 0304 	and.w	r3, r3, #4
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d011      	beq.n	801affc <HAL_UART_IRQHandler+0x11c>
 801afd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801afdc:	f003 0301 	and.w	r3, r3, #1
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d00b      	beq.n	801affc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	2204      	movs	r2, #4
 801afea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aff2:	f043 0202 	orr.w	r2, r3, #2
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801affc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b000:	f003 0308 	and.w	r3, r3, #8
 801b004:	2b00      	cmp	r3, #0
 801b006:	d017      	beq.n	801b038 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b00c:	f003 0320 	and.w	r3, r3, #32
 801b010:	2b00      	cmp	r3, #0
 801b012:	d105      	bne.n	801b020 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b018:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d00b      	beq.n	801b038 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	2208      	movs	r2, #8
 801b026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b02e:	f043 0208 	orr.w	r2, r3, #8
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b040:	2b00      	cmp	r3, #0
 801b042:	d012      	beq.n	801b06a <HAL_UART_IRQHandler+0x18a>
 801b044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d00c      	beq.n	801b06a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b060:	f043 0220 	orr.w	r2, r3, #32
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b070:	2b00      	cmp	r3, #0
 801b072:	f000 821e 	beq.w	801b4b2 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b07a:	f003 0320 	and.w	r3, r3, #32
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d00d      	beq.n	801b09e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b086:	f003 0320 	and.w	r3, r3, #32
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d007      	beq.n	801b09e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b092:	2b00      	cmp	r3, #0
 801b094:	d003      	beq.n	801b09e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	689b      	ldr	r3, [r3, #8]
 801b0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0b2:	2b40      	cmp	r3, #64	; 0x40
 801b0b4:	d005      	beq.n	801b0c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b0b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b0ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d053      	beq.n	801b16a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b0c2:	6878      	ldr	r0, [r7, #4]
 801b0c4:	f000 ff80 	bl	801bfc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	689b      	ldr	r3, [r3, #8]
 801b0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0d2:	2b40      	cmp	r3, #64	; 0x40
 801b0d4:	d143      	bne.n	801b15e <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	3308      	adds	r3, #8
 801b0dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b0e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b0e4:	e853 3f00 	ldrex	r3, [r3]
 801b0e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b0f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	3308      	adds	r3, #8
 801b0fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b102:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b10a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b112:	e841 2300 	strex	r3, r2, [r1]
 801b116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b11a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d1d9      	bne.n	801b0d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b126:	2b00      	cmp	r3, #0
 801b128:	d013      	beq.n	801b152 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b12e:	4a16      	ldr	r2, [pc, #88]	; (801b188 <HAL_UART_IRQHandler+0x2a8>)
 801b130:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b136:	4618      	mov	r0, r3
 801b138:	f7fb f98a 	bl	8016450 <HAL_DMA_Abort_IT>
 801b13c:	4603      	mov	r3, r0
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d01d      	beq.n	801b17e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b148:	687a      	ldr	r2, [r7, #4]
 801b14a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b14c:	4610      	mov	r0, r2
 801b14e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b150:	e015      	b.n	801b17e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b15c:	e00f      	b.n	801b17e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b168:	e009      	b.n	801b17e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b170:	6878      	ldr	r0, [r7, #4]
 801b172:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	2200      	movs	r2, #0
 801b178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b17c:	e199      	b.n	801b4b2 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b17e:	bf00      	nop
    return;
 801b180:	e197      	b.n	801b4b2 <HAL_UART_IRQHandler+0x5d2>
 801b182:	bf00      	nop
 801b184:	04000120 	.word	0x04000120
 801b188:	0801c091 	.word	0x0801c091

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b190:	2b01      	cmp	r3, #1
 801b192:	f040 8150 	bne.w	801b436 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b19a:	f003 0310 	and.w	r3, r3, #16
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	f000 8149 	beq.w	801b436 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b1a8:	f003 0310 	and.w	r3, r3, #16
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	f000 8142 	beq.w	801b436 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	2210      	movs	r2, #16
 801b1b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	689b      	ldr	r3, [r3, #8]
 801b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b1c4:	2b40      	cmp	r3, #64	; 0x40
 801b1c6:	f040 80b8 	bne.w	801b33a <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b1d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	f000 816b 	beq.w	801b4b6 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b1ea:	429a      	cmp	r2, r3
 801b1ec:	f080 8163 	bcs.w	801b4b6 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b1f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1fe:	69db      	ldr	r3, [r3, #28]
 801b200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b204:	f000 8086 	beq.w	801b314 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b214:	e853 3f00 	ldrex	r3, [r3]
 801b218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b21c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	461a      	mov	r2, r3
 801b22e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b236:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b23a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b23e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b242:	e841 2300 	strex	r3, r2, [r1]
 801b246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b24a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d1da      	bne.n	801b208 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	3308      	adds	r3, #8
 801b258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b25c:	e853 3f00 	ldrex	r3, [r3]
 801b260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b264:	f023 0301 	bic.w	r3, r3, #1
 801b268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	3308      	adds	r3, #8
 801b272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b27a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b27c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b27e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b282:	e841 2300 	strex	r3, r2, [r1]
 801b286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d1e1      	bne.n	801b252 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	3308      	adds	r3, #8
 801b294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b298:	e853 3f00 	ldrex	r3, [r3]
 801b29c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	3308      	adds	r3, #8
 801b2ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b2b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b2b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b2b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b2ba:	e841 2300 	strex	r3, r2, [r1]
 801b2be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d1e3      	bne.n	801b28e <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	2220      	movs	r2, #32
 801b2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	2200      	movs	r2, #0
 801b2d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2dc:	e853 3f00 	ldrex	r3, [r3]
 801b2e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b2e4:	f023 0310 	bic.w	r3, r3, #16
 801b2e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	461a      	mov	r2, r3
 801b2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b2f6:	65bb      	str	r3, [r7, #88]	; 0x58
 801b2f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b2fe:	e841 2300 	strex	r3, r2, [r1]
 801b302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b306:	2b00      	cmp	r3, #0
 801b308:	d1e4      	bne.n	801b2d4 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b30e:	4618      	mov	r0, r3
 801b310:	f7fb f82e 	bl	8016370 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2202      	movs	r2, #2
 801b318:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b320:	687a      	ldr	r2, [r7, #4]
 801b322:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801b32c:	b292      	uxth	r2, r2
 801b32e:	1a8a      	subs	r2, r1, r2
 801b330:	b292      	uxth	r2, r2
 801b332:	4611      	mov	r1, r2
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b338:	e0bd      	b.n	801b4b6 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b346:	b29b      	uxth	r3, r3
 801b348:	1ad3      	subs	r3, r2, r3
 801b34a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b354:	b29b      	uxth	r3, r3
 801b356:	2b00      	cmp	r3, #0
 801b358:	f000 80af 	beq.w	801b4ba <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801b35c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b360:	2b00      	cmp	r3, #0
 801b362:	f000 80aa 	beq.w	801b4ba <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b36e:	e853 3f00 	ldrex	r3, [r3]
 801b372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b37a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	461a      	mov	r2, r3
 801b384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b388:	647b      	str	r3, [r7, #68]	; 0x44
 801b38a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b38c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b390:	e841 2300 	strex	r3, r2, [r1]
 801b394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d1e4      	bne.n	801b366 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	3308      	adds	r3, #8
 801b3a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a6:	e853 3f00 	ldrex	r3, [r3]
 801b3aa:	623b      	str	r3, [r7, #32]
   return(result);
 801b3ac:	6a3b      	ldr	r3, [r7, #32]
 801b3ae:	f023 0301 	bic.w	r3, r3, #1
 801b3b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	3308      	adds	r3, #8
 801b3bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b3c0:	633a      	str	r2, [r7, #48]	; 0x30
 801b3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b3c8:	e841 2300 	strex	r3, r2, [r1]
 801b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d1e3      	bne.n	801b39c <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	2220      	movs	r2, #32
 801b3d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	2200      	movs	r2, #0
 801b3e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	2200      	movs	r2, #0
 801b3e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3ee:	693b      	ldr	r3, [r7, #16]
 801b3f0:	e853 3f00 	ldrex	r3, [r3]
 801b3f4:	60fb      	str	r3, [r7, #12]
   return(result);
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	f023 0310 	bic.w	r3, r3, #16
 801b3fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	461a      	mov	r2, r3
 801b406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b40a:	61fb      	str	r3, [r7, #28]
 801b40c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b40e:	69b9      	ldr	r1, [r7, #24]
 801b410:	69fa      	ldr	r2, [r7, #28]
 801b412:	e841 2300 	strex	r3, r2, [r1]
 801b416:	617b      	str	r3, [r7, #20]
   return(result);
 801b418:	697b      	ldr	r3, [r7, #20]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d1e4      	bne.n	801b3e8 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2202      	movs	r2, #2
 801b422:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b42a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801b42e:	4611      	mov	r1, r2
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b434:	e041      	b.n	801b4ba <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b43a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d010      	beq.n	801b464 <HAL_UART_IRQHandler+0x584>
 801b442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d00a      	beq.n	801b464 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801b456:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b45e:	6878      	ldr	r0, [r7, #4]
 801b460:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b462:	e02d      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d00e      	beq.n	801b48e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d008      	beq.n	801b48e <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b480:	2b00      	cmp	r3, #0
 801b482:	d01c      	beq.n	801b4be <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	4798      	blx	r3
    }
    return;
 801b48c:	e017      	b.n	801b4be <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b496:	2b00      	cmp	r3, #0
 801b498:	d012      	beq.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
 801b49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d00c      	beq.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801b4a6:	6878      	ldr	r0, [r7, #4]
 801b4a8:	f000 fe0a 	bl	801c0c0 <UART_EndTransmit_IT>
    return;
 801b4ac:	e008      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b4ae:	bf00      	nop
 801b4b0:	e006      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b4b2:	bf00      	nop
 801b4b4:	e004      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b4b6:	bf00      	nop
 801b4b8:	e002      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b4ba:	bf00      	nop
 801b4bc:	e000      	b.n	801b4c0 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b4be:	bf00      	nop
  }

}
 801b4c0:	37e8      	adds	r7, #232	; 0xe8
 801b4c2:	46bd      	mov	sp, r7
 801b4c4:	bd80      	pop	{r7, pc}
 801b4c6:	bf00      	nop

0801b4c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b4c8:	b480      	push	{r7}
 801b4ca:	b083      	sub	sp, #12
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b4d0:	bf00      	nop
 801b4d2:	370c      	adds	r7, #12
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4da:	4770      	bx	lr

0801b4dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b4dc:	b480      	push	{r7}
 801b4de:	b083      	sub	sp, #12
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b4e4:	bf00      	nop
 801b4e6:	370c      	adds	r7, #12
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ee:	4770      	bx	lr

0801b4f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b4f0:	b480      	push	{r7}
 801b4f2:	b083      	sub	sp, #12
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801b4f8:	bf00      	nop
 801b4fa:	370c      	adds	r7, #12
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b502:	4770      	bx	lr

0801b504 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b504:	b480      	push	{r7}
 801b506:	b083      	sub	sp, #12
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b50c:	bf00      	nop
 801b50e:	370c      	adds	r7, #12
 801b510:	46bd      	mov	sp, r7
 801b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b516:	4770      	bx	lr

0801b518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b518:	b480      	push	{r7}
 801b51a:	b083      	sub	sp, #12
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b520:	bf00      	nop
 801b522:	370c      	adds	r7, #12
 801b524:	46bd      	mov	sp, r7
 801b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52a:	4770      	bx	lr

0801b52c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b52c:	b480      	push	{r7}
 801b52e:	b083      	sub	sp, #12
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b534:	bf00      	nop
 801b536:	370c      	adds	r7, #12
 801b538:	46bd      	mov	sp, r7
 801b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53e:	4770      	bx	lr

0801b540 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b540:	b480      	push	{r7}
 801b542:	b083      	sub	sp, #12
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b548:	bf00      	nop
 801b54a:	370c      	adds	r7, #12
 801b54c:	46bd      	mov	sp, r7
 801b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b552:	4770      	bx	lr

0801b554 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b554:	b480      	push	{r7}
 801b556:	b083      	sub	sp, #12
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b55c:	bf00      	nop
 801b55e:	370c      	adds	r7, #12
 801b560:	46bd      	mov	sp, r7
 801b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b566:	4770      	bx	lr

0801b568 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b568:	b480      	push	{r7}
 801b56a:	b083      	sub	sp, #12
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b570:	bf00      	nop
 801b572:	370c      	adds	r7, #12
 801b574:	46bd      	mov	sp, r7
 801b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b57a:	4770      	bx	lr

0801b57c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b57c:	b480      	push	{r7}
 801b57e:	b083      	sub	sp, #12
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	4a16      	ldr	r2, [pc, #88]	; (801b5e0 <UART_InitCallbacksToDefault+0x64>)
 801b588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	4a15      	ldr	r2, [pc, #84]	; (801b5e4 <UART_InitCallbacksToDefault+0x68>)
 801b590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4a14      	ldr	r2, [pc, #80]	; (801b5e8 <UART_InitCallbacksToDefault+0x6c>)
 801b598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	4a13      	ldr	r2, [pc, #76]	; (801b5ec <UART_InitCallbacksToDefault+0x70>)
 801b5a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	4a12      	ldr	r2, [pc, #72]	; (801b5f0 <UART_InitCallbacksToDefault+0x74>)
 801b5a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	4a11      	ldr	r2, [pc, #68]	; (801b5f4 <UART_InitCallbacksToDefault+0x78>)
 801b5b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	4a10      	ldr	r2, [pc, #64]	; (801b5f8 <UART_InitCallbacksToDefault+0x7c>)
 801b5b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	4a0f      	ldr	r2, [pc, #60]	; (801b5fc <UART_InitCallbacksToDefault+0x80>)
 801b5c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	4a0e      	ldr	r2, [pc, #56]	; (801b600 <UART_InitCallbacksToDefault+0x84>)
 801b5c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	4a0d      	ldr	r2, [pc, #52]	; (801b604 <UART_InitCallbacksToDefault+0x88>)
 801b5d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801b5d4:	bf00      	nop
 801b5d6:	370c      	adds	r7, #12
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5de:	4770      	bx	lr
 801b5e0:	0801b4dd 	.word	0x0801b4dd
 801b5e4:	0801b4c9 	.word	0x0801b4c9
 801b5e8:	0801b505 	.word	0x0801b505
 801b5ec:	0801b4f1 	.word	0x0801b4f1
 801b5f0:	0801b519 	.word	0x0801b519
 801b5f4:	0801b52d 	.word	0x0801b52d
 801b5f8:	0801b541 	.word	0x0801b541
 801b5fc:	0801b555 	.word	0x0801b555
 801b600:	0801b569 	.word	0x0801b569
 801b604:	08014b8d 	.word	0x08014b8d

0801b608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b088      	sub	sp, #32
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b610:	2300      	movs	r3, #0
 801b612:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	689a      	ldr	r2, [r3, #8]
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	691b      	ldr	r3, [r3, #16]
 801b61c:	431a      	orrs	r2, r3
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	695b      	ldr	r3, [r3, #20]
 801b622:	431a      	orrs	r2, r3
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	69db      	ldr	r3, [r3, #28]
 801b628:	4313      	orrs	r3, r2
 801b62a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	681a      	ldr	r2, [r3, #0]
 801b632:	4ba6      	ldr	r3, [pc, #664]	; (801b8cc <UART_SetConfig+0x2c4>)
 801b634:	4013      	ands	r3, r2
 801b636:	687a      	ldr	r2, [r7, #4]
 801b638:	6812      	ldr	r2, [r2, #0]
 801b63a:	6979      	ldr	r1, [r7, #20]
 801b63c:	430b      	orrs	r3, r1
 801b63e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	685b      	ldr	r3, [r3, #4]
 801b646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	68da      	ldr	r2, [r3, #12]
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	430a      	orrs	r2, r1
 801b654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	699b      	ldr	r3, [r3, #24]
 801b65a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6a1b      	ldr	r3, [r3, #32]
 801b660:	697a      	ldr	r2, [r7, #20]
 801b662:	4313      	orrs	r3, r2
 801b664:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	689b      	ldr	r3, [r3, #8]
 801b66c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	697a      	ldr	r2, [r7, #20]
 801b676:	430a      	orrs	r2, r1
 801b678:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	4a94      	ldr	r2, [pc, #592]	; (801b8d0 <UART_SetConfig+0x2c8>)
 801b680:	4293      	cmp	r3, r2
 801b682:	d120      	bne.n	801b6c6 <UART_SetConfig+0xbe>
 801b684:	4b93      	ldr	r3, [pc, #588]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b68a:	f003 0303 	and.w	r3, r3, #3
 801b68e:	2b03      	cmp	r3, #3
 801b690:	d816      	bhi.n	801b6c0 <UART_SetConfig+0xb8>
 801b692:	a201      	add	r2, pc, #4	; (adr r2, 801b698 <UART_SetConfig+0x90>)
 801b694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b698:	0801b6a9 	.word	0x0801b6a9
 801b69c:	0801b6b5 	.word	0x0801b6b5
 801b6a0:	0801b6af 	.word	0x0801b6af
 801b6a4:	0801b6bb 	.word	0x0801b6bb
 801b6a8:	2301      	movs	r3, #1
 801b6aa:	77fb      	strb	r3, [r7, #31]
 801b6ac:	e150      	b.n	801b950 <UART_SetConfig+0x348>
 801b6ae:	2302      	movs	r3, #2
 801b6b0:	77fb      	strb	r3, [r7, #31]
 801b6b2:	e14d      	b.n	801b950 <UART_SetConfig+0x348>
 801b6b4:	2304      	movs	r3, #4
 801b6b6:	77fb      	strb	r3, [r7, #31]
 801b6b8:	e14a      	b.n	801b950 <UART_SetConfig+0x348>
 801b6ba:	2308      	movs	r3, #8
 801b6bc:	77fb      	strb	r3, [r7, #31]
 801b6be:	e147      	b.n	801b950 <UART_SetConfig+0x348>
 801b6c0:	2310      	movs	r3, #16
 801b6c2:	77fb      	strb	r3, [r7, #31]
 801b6c4:	e144      	b.n	801b950 <UART_SetConfig+0x348>
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	4a83      	ldr	r2, [pc, #524]	; (801b8d8 <UART_SetConfig+0x2d0>)
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	d132      	bne.n	801b736 <UART_SetConfig+0x12e>
 801b6d0:	4b80      	ldr	r3, [pc, #512]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b6d6:	f003 030c 	and.w	r3, r3, #12
 801b6da:	2b0c      	cmp	r3, #12
 801b6dc:	d828      	bhi.n	801b730 <UART_SetConfig+0x128>
 801b6de:	a201      	add	r2, pc, #4	; (adr r2, 801b6e4 <UART_SetConfig+0xdc>)
 801b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6e4:	0801b719 	.word	0x0801b719
 801b6e8:	0801b731 	.word	0x0801b731
 801b6ec:	0801b731 	.word	0x0801b731
 801b6f0:	0801b731 	.word	0x0801b731
 801b6f4:	0801b725 	.word	0x0801b725
 801b6f8:	0801b731 	.word	0x0801b731
 801b6fc:	0801b731 	.word	0x0801b731
 801b700:	0801b731 	.word	0x0801b731
 801b704:	0801b71f 	.word	0x0801b71f
 801b708:	0801b731 	.word	0x0801b731
 801b70c:	0801b731 	.word	0x0801b731
 801b710:	0801b731 	.word	0x0801b731
 801b714:	0801b72b 	.word	0x0801b72b
 801b718:	2300      	movs	r3, #0
 801b71a:	77fb      	strb	r3, [r7, #31]
 801b71c:	e118      	b.n	801b950 <UART_SetConfig+0x348>
 801b71e:	2302      	movs	r3, #2
 801b720:	77fb      	strb	r3, [r7, #31]
 801b722:	e115      	b.n	801b950 <UART_SetConfig+0x348>
 801b724:	2304      	movs	r3, #4
 801b726:	77fb      	strb	r3, [r7, #31]
 801b728:	e112      	b.n	801b950 <UART_SetConfig+0x348>
 801b72a:	2308      	movs	r3, #8
 801b72c:	77fb      	strb	r3, [r7, #31]
 801b72e:	e10f      	b.n	801b950 <UART_SetConfig+0x348>
 801b730:	2310      	movs	r3, #16
 801b732:	77fb      	strb	r3, [r7, #31]
 801b734:	e10c      	b.n	801b950 <UART_SetConfig+0x348>
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	4a68      	ldr	r2, [pc, #416]	; (801b8dc <UART_SetConfig+0x2d4>)
 801b73c:	4293      	cmp	r3, r2
 801b73e:	d120      	bne.n	801b782 <UART_SetConfig+0x17a>
 801b740:	4b64      	ldr	r3, [pc, #400]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b746:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b74a:	2b30      	cmp	r3, #48	; 0x30
 801b74c:	d013      	beq.n	801b776 <UART_SetConfig+0x16e>
 801b74e:	2b30      	cmp	r3, #48	; 0x30
 801b750:	d814      	bhi.n	801b77c <UART_SetConfig+0x174>
 801b752:	2b20      	cmp	r3, #32
 801b754:	d009      	beq.n	801b76a <UART_SetConfig+0x162>
 801b756:	2b20      	cmp	r3, #32
 801b758:	d810      	bhi.n	801b77c <UART_SetConfig+0x174>
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d002      	beq.n	801b764 <UART_SetConfig+0x15c>
 801b75e:	2b10      	cmp	r3, #16
 801b760:	d006      	beq.n	801b770 <UART_SetConfig+0x168>
 801b762:	e00b      	b.n	801b77c <UART_SetConfig+0x174>
 801b764:	2300      	movs	r3, #0
 801b766:	77fb      	strb	r3, [r7, #31]
 801b768:	e0f2      	b.n	801b950 <UART_SetConfig+0x348>
 801b76a:	2302      	movs	r3, #2
 801b76c:	77fb      	strb	r3, [r7, #31]
 801b76e:	e0ef      	b.n	801b950 <UART_SetConfig+0x348>
 801b770:	2304      	movs	r3, #4
 801b772:	77fb      	strb	r3, [r7, #31]
 801b774:	e0ec      	b.n	801b950 <UART_SetConfig+0x348>
 801b776:	2308      	movs	r3, #8
 801b778:	77fb      	strb	r3, [r7, #31]
 801b77a:	e0e9      	b.n	801b950 <UART_SetConfig+0x348>
 801b77c:	2310      	movs	r3, #16
 801b77e:	77fb      	strb	r3, [r7, #31]
 801b780:	e0e6      	b.n	801b950 <UART_SetConfig+0x348>
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	4a56      	ldr	r2, [pc, #344]	; (801b8e0 <UART_SetConfig+0x2d8>)
 801b788:	4293      	cmp	r3, r2
 801b78a:	d120      	bne.n	801b7ce <UART_SetConfig+0x1c6>
 801b78c:	4b51      	ldr	r3, [pc, #324]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b796:	2bc0      	cmp	r3, #192	; 0xc0
 801b798:	d013      	beq.n	801b7c2 <UART_SetConfig+0x1ba>
 801b79a:	2bc0      	cmp	r3, #192	; 0xc0
 801b79c:	d814      	bhi.n	801b7c8 <UART_SetConfig+0x1c0>
 801b79e:	2b80      	cmp	r3, #128	; 0x80
 801b7a0:	d009      	beq.n	801b7b6 <UART_SetConfig+0x1ae>
 801b7a2:	2b80      	cmp	r3, #128	; 0x80
 801b7a4:	d810      	bhi.n	801b7c8 <UART_SetConfig+0x1c0>
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d002      	beq.n	801b7b0 <UART_SetConfig+0x1a8>
 801b7aa:	2b40      	cmp	r3, #64	; 0x40
 801b7ac:	d006      	beq.n	801b7bc <UART_SetConfig+0x1b4>
 801b7ae:	e00b      	b.n	801b7c8 <UART_SetConfig+0x1c0>
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	77fb      	strb	r3, [r7, #31]
 801b7b4:	e0cc      	b.n	801b950 <UART_SetConfig+0x348>
 801b7b6:	2302      	movs	r3, #2
 801b7b8:	77fb      	strb	r3, [r7, #31]
 801b7ba:	e0c9      	b.n	801b950 <UART_SetConfig+0x348>
 801b7bc:	2304      	movs	r3, #4
 801b7be:	77fb      	strb	r3, [r7, #31]
 801b7c0:	e0c6      	b.n	801b950 <UART_SetConfig+0x348>
 801b7c2:	2308      	movs	r3, #8
 801b7c4:	77fb      	strb	r3, [r7, #31]
 801b7c6:	e0c3      	b.n	801b950 <UART_SetConfig+0x348>
 801b7c8:	2310      	movs	r3, #16
 801b7ca:	77fb      	strb	r3, [r7, #31]
 801b7cc:	e0c0      	b.n	801b950 <UART_SetConfig+0x348>
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	4a44      	ldr	r2, [pc, #272]	; (801b8e4 <UART_SetConfig+0x2dc>)
 801b7d4:	4293      	cmp	r3, r2
 801b7d6:	d125      	bne.n	801b824 <UART_SetConfig+0x21c>
 801b7d8:	4b3e      	ldr	r3, [pc, #248]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b7e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b7e6:	d017      	beq.n	801b818 <UART_SetConfig+0x210>
 801b7e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b7ec:	d817      	bhi.n	801b81e <UART_SetConfig+0x216>
 801b7ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7f2:	d00b      	beq.n	801b80c <UART_SetConfig+0x204>
 801b7f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7f8:	d811      	bhi.n	801b81e <UART_SetConfig+0x216>
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d003      	beq.n	801b806 <UART_SetConfig+0x1fe>
 801b7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b802:	d006      	beq.n	801b812 <UART_SetConfig+0x20a>
 801b804:	e00b      	b.n	801b81e <UART_SetConfig+0x216>
 801b806:	2300      	movs	r3, #0
 801b808:	77fb      	strb	r3, [r7, #31]
 801b80a:	e0a1      	b.n	801b950 <UART_SetConfig+0x348>
 801b80c:	2302      	movs	r3, #2
 801b80e:	77fb      	strb	r3, [r7, #31]
 801b810:	e09e      	b.n	801b950 <UART_SetConfig+0x348>
 801b812:	2304      	movs	r3, #4
 801b814:	77fb      	strb	r3, [r7, #31]
 801b816:	e09b      	b.n	801b950 <UART_SetConfig+0x348>
 801b818:	2308      	movs	r3, #8
 801b81a:	77fb      	strb	r3, [r7, #31]
 801b81c:	e098      	b.n	801b950 <UART_SetConfig+0x348>
 801b81e:	2310      	movs	r3, #16
 801b820:	77fb      	strb	r3, [r7, #31]
 801b822:	e095      	b.n	801b950 <UART_SetConfig+0x348>
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	4a2f      	ldr	r2, [pc, #188]	; (801b8e8 <UART_SetConfig+0x2e0>)
 801b82a:	4293      	cmp	r3, r2
 801b82c:	d125      	bne.n	801b87a <UART_SetConfig+0x272>
 801b82e:	4b29      	ldr	r3, [pc, #164]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801b838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801b83c:	d017      	beq.n	801b86e <UART_SetConfig+0x266>
 801b83e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801b842:	d817      	bhi.n	801b874 <UART_SetConfig+0x26c>
 801b844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b848:	d00b      	beq.n	801b862 <UART_SetConfig+0x25a>
 801b84a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b84e:	d811      	bhi.n	801b874 <UART_SetConfig+0x26c>
 801b850:	2b00      	cmp	r3, #0
 801b852:	d003      	beq.n	801b85c <UART_SetConfig+0x254>
 801b854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b858:	d006      	beq.n	801b868 <UART_SetConfig+0x260>
 801b85a:	e00b      	b.n	801b874 <UART_SetConfig+0x26c>
 801b85c:	2301      	movs	r3, #1
 801b85e:	77fb      	strb	r3, [r7, #31]
 801b860:	e076      	b.n	801b950 <UART_SetConfig+0x348>
 801b862:	2302      	movs	r3, #2
 801b864:	77fb      	strb	r3, [r7, #31]
 801b866:	e073      	b.n	801b950 <UART_SetConfig+0x348>
 801b868:	2304      	movs	r3, #4
 801b86a:	77fb      	strb	r3, [r7, #31]
 801b86c:	e070      	b.n	801b950 <UART_SetConfig+0x348>
 801b86e:	2308      	movs	r3, #8
 801b870:	77fb      	strb	r3, [r7, #31]
 801b872:	e06d      	b.n	801b950 <UART_SetConfig+0x348>
 801b874:	2310      	movs	r3, #16
 801b876:	77fb      	strb	r3, [r7, #31]
 801b878:	e06a      	b.n	801b950 <UART_SetConfig+0x348>
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	4a1b      	ldr	r2, [pc, #108]	; (801b8ec <UART_SetConfig+0x2e4>)
 801b880:	4293      	cmp	r3, r2
 801b882:	d138      	bne.n	801b8f6 <UART_SetConfig+0x2ee>
 801b884:	4b13      	ldr	r3, [pc, #76]	; (801b8d4 <UART_SetConfig+0x2cc>)
 801b886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b88a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801b88e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b892:	d017      	beq.n	801b8c4 <UART_SetConfig+0x2bc>
 801b894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b898:	d82a      	bhi.n	801b8f0 <UART_SetConfig+0x2e8>
 801b89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b89e:	d00b      	beq.n	801b8b8 <UART_SetConfig+0x2b0>
 801b8a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b8a4:	d824      	bhi.n	801b8f0 <UART_SetConfig+0x2e8>
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d003      	beq.n	801b8b2 <UART_SetConfig+0x2aa>
 801b8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b8ae:	d006      	beq.n	801b8be <UART_SetConfig+0x2b6>
 801b8b0:	e01e      	b.n	801b8f0 <UART_SetConfig+0x2e8>
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	77fb      	strb	r3, [r7, #31]
 801b8b6:	e04b      	b.n	801b950 <UART_SetConfig+0x348>
 801b8b8:	2302      	movs	r3, #2
 801b8ba:	77fb      	strb	r3, [r7, #31]
 801b8bc:	e048      	b.n	801b950 <UART_SetConfig+0x348>
 801b8be:	2304      	movs	r3, #4
 801b8c0:	77fb      	strb	r3, [r7, #31]
 801b8c2:	e045      	b.n	801b950 <UART_SetConfig+0x348>
 801b8c4:	2308      	movs	r3, #8
 801b8c6:	77fb      	strb	r3, [r7, #31]
 801b8c8:	e042      	b.n	801b950 <UART_SetConfig+0x348>
 801b8ca:	bf00      	nop
 801b8cc:	efff69f3 	.word	0xefff69f3
 801b8d0:	40011000 	.word	0x40011000
 801b8d4:	40023800 	.word	0x40023800
 801b8d8:	40004400 	.word	0x40004400
 801b8dc:	40004800 	.word	0x40004800
 801b8e0:	40004c00 	.word	0x40004c00
 801b8e4:	40005000 	.word	0x40005000
 801b8e8:	40011400 	.word	0x40011400
 801b8ec:	40007800 	.word	0x40007800
 801b8f0:	2310      	movs	r3, #16
 801b8f2:	77fb      	strb	r3, [r7, #31]
 801b8f4:	e02c      	b.n	801b950 <UART_SetConfig+0x348>
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	4a72      	ldr	r2, [pc, #456]	; (801bac4 <UART_SetConfig+0x4bc>)
 801b8fc:	4293      	cmp	r3, r2
 801b8fe:	d125      	bne.n	801b94c <UART_SetConfig+0x344>
 801b900:	4b71      	ldr	r3, [pc, #452]	; (801bac8 <UART_SetConfig+0x4c0>)
 801b902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b906:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b90a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801b90e:	d017      	beq.n	801b940 <UART_SetConfig+0x338>
 801b910:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801b914:	d817      	bhi.n	801b946 <UART_SetConfig+0x33e>
 801b916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b91a:	d00b      	beq.n	801b934 <UART_SetConfig+0x32c>
 801b91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b920:	d811      	bhi.n	801b946 <UART_SetConfig+0x33e>
 801b922:	2b00      	cmp	r3, #0
 801b924:	d003      	beq.n	801b92e <UART_SetConfig+0x326>
 801b926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b92a:	d006      	beq.n	801b93a <UART_SetConfig+0x332>
 801b92c:	e00b      	b.n	801b946 <UART_SetConfig+0x33e>
 801b92e:	2300      	movs	r3, #0
 801b930:	77fb      	strb	r3, [r7, #31]
 801b932:	e00d      	b.n	801b950 <UART_SetConfig+0x348>
 801b934:	2302      	movs	r3, #2
 801b936:	77fb      	strb	r3, [r7, #31]
 801b938:	e00a      	b.n	801b950 <UART_SetConfig+0x348>
 801b93a:	2304      	movs	r3, #4
 801b93c:	77fb      	strb	r3, [r7, #31]
 801b93e:	e007      	b.n	801b950 <UART_SetConfig+0x348>
 801b940:	2308      	movs	r3, #8
 801b942:	77fb      	strb	r3, [r7, #31]
 801b944:	e004      	b.n	801b950 <UART_SetConfig+0x348>
 801b946:	2310      	movs	r3, #16
 801b948:	77fb      	strb	r3, [r7, #31]
 801b94a:	e001      	b.n	801b950 <UART_SetConfig+0x348>
 801b94c:	2310      	movs	r3, #16
 801b94e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	69db      	ldr	r3, [r3, #28]
 801b954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b958:	d15b      	bne.n	801ba12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801b95a:	7ffb      	ldrb	r3, [r7, #31]
 801b95c:	2b08      	cmp	r3, #8
 801b95e:	d828      	bhi.n	801b9b2 <UART_SetConfig+0x3aa>
 801b960:	a201      	add	r2, pc, #4	; (adr r2, 801b968 <UART_SetConfig+0x360>)
 801b962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b966:	bf00      	nop
 801b968:	0801b98d 	.word	0x0801b98d
 801b96c:	0801b995 	.word	0x0801b995
 801b970:	0801b99d 	.word	0x0801b99d
 801b974:	0801b9b3 	.word	0x0801b9b3
 801b978:	0801b9a3 	.word	0x0801b9a3
 801b97c:	0801b9b3 	.word	0x0801b9b3
 801b980:	0801b9b3 	.word	0x0801b9b3
 801b984:	0801b9b3 	.word	0x0801b9b3
 801b988:	0801b9ab 	.word	0x0801b9ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b98c:	f7fd fc3e 	bl	801920c <HAL_RCC_GetPCLK1Freq>
 801b990:	61b8      	str	r0, [r7, #24]
        break;
 801b992:	e013      	b.n	801b9bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b994:	f7fd fc4e 	bl	8019234 <HAL_RCC_GetPCLK2Freq>
 801b998:	61b8      	str	r0, [r7, #24]
        break;
 801b99a:	e00f      	b.n	801b9bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b99c:	4b4b      	ldr	r3, [pc, #300]	; (801bacc <UART_SetConfig+0x4c4>)
 801b99e:	61bb      	str	r3, [r7, #24]
        break;
 801b9a0:	e00c      	b.n	801b9bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b9a2:	f7fd fb61 	bl	8019068 <HAL_RCC_GetSysClockFreq>
 801b9a6:	61b8      	str	r0, [r7, #24]
        break;
 801b9a8:	e008      	b.n	801b9bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b9aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b9ae:	61bb      	str	r3, [r7, #24]
        break;
 801b9b0:	e004      	b.n	801b9bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	77bb      	strb	r3, [r7, #30]
        break;
 801b9ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b9bc:	69bb      	ldr	r3, [r7, #24]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d074      	beq.n	801baac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b9c2:	69bb      	ldr	r3, [r7, #24]
 801b9c4:	005a      	lsls	r2, r3, #1
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	685b      	ldr	r3, [r3, #4]
 801b9ca:	085b      	lsrs	r3, r3, #1
 801b9cc:	441a      	add	r2, r3
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	685b      	ldr	r3, [r3, #4]
 801b9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b9d8:	693b      	ldr	r3, [r7, #16]
 801b9da:	2b0f      	cmp	r3, #15
 801b9dc:	d916      	bls.n	801ba0c <UART_SetConfig+0x404>
 801b9de:	693b      	ldr	r3, [r7, #16]
 801b9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b9e4:	d212      	bcs.n	801ba0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b9e6:	693b      	ldr	r3, [r7, #16]
 801b9e8:	b29b      	uxth	r3, r3
 801b9ea:	f023 030f 	bic.w	r3, r3, #15
 801b9ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	085b      	lsrs	r3, r3, #1
 801b9f4:	b29b      	uxth	r3, r3
 801b9f6:	f003 0307 	and.w	r3, r3, #7
 801b9fa:	b29a      	uxth	r2, r3
 801b9fc:	89fb      	ldrh	r3, [r7, #14]
 801b9fe:	4313      	orrs	r3, r2
 801ba00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	89fa      	ldrh	r2, [r7, #14]
 801ba08:	60da      	str	r2, [r3, #12]
 801ba0a:	e04f      	b.n	801baac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801ba0c:	2301      	movs	r3, #1
 801ba0e:	77bb      	strb	r3, [r7, #30]
 801ba10:	e04c      	b.n	801baac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801ba12:	7ffb      	ldrb	r3, [r7, #31]
 801ba14:	2b08      	cmp	r3, #8
 801ba16:	d828      	bhi.n	801ba6a <UART_SetConfig+0x462>
 801ba18:	a201      	add	r2, pc, #4	; (adr r2, 801ba20 <UART_SetConfig+0x418>)
 801ba1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba1e:	bf00      	nop
 801ba20:	0801ba45 	.word	0x0801ba45
 801ba24:	0801ba4d 	.word	0x0801ba4d
 801ba28:	0801ba55 	.word	0x0801ba55
 801ba2c:	0801ba6b 	.word	0x0801ba6b
 801ba30:	0801ba5b 	.word	0x0801ba5b
 801ba34:	0801ba6b 	.word	0x0801ba6b
 801ba38:	0801ba6b 	.word	0x0801ba6b
 801ba3c:	0801ba6b 	.word	0x0801ba6b
 801ba40:	0801ba63 	.word	0x0801ba63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ba44:	f7fd fbe2 	bl	801920c <HAL_RCC_GetPCLK1Freq>
 801ba48:	61b8      	str	r0, [r7, #24]
        break;
 801ba4a:	e013      	b.n	801ba74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ba4c:	f7fd fbf2 	bl	8019234 <HAL_RCC_GetPCLK2Freq>
 801ba50:	61b8      	str	r0, [r7, #24]
        break;
 801ba52:	e00f      	b.n	801ba74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ba54:	4b1d      	ldr	r3, [pc, #116]	; (801bacc <UART_SetConfig+0x4c4>)
 801ba56:	61bb      	str	r3, [r7, #24]
        break;
 801ba58:	e00c      	b.n	801ba74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ba5a:	f7fd fb05 	bl	8019068 <HAL_RCC_GetSysClockFreq>
 801ba5e:	61b8      	str	r0, [r7, #24]
        break;
 801ba60:	e008      	b.n	801ba74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ba62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ba66:	61bb      	str	r3, [r7, #24]
        break;
 801ba68:	e004      	b.n	801ba74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801ba6e:	2301      	movs	r3, #1
 801ba70:	77bb      	strb	r3, [r7, #30]
        break;
 801ba72:	bf00      	nop
    }

    if (pclk != 0U)
 801ba74:	69bb      	ldr	r3, [r7, #24]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d018      	beq.n	801baac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	685b      	ldr	r3, [r3, #4]
 801ba7e:	085a      	lsrs	r2, r3, #1
 801ba80:	69bb      	ldr	r3, [r7, #24]
 801ba82:	441a      	add	r2, r3
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ba8e:	693b      	ldr	r3, [r7, #16]
 801ba90:	2b0f      	cmp	r3, #15
 801ba92:	d909      	bls.n	801baa8 <UART_SetConfig+0x4a0>
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba9a:	d205      	bcs.n	801baa8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	b29a      	uxth	r2, r3
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	60da      	str	r2, [r3, #12]
 801baa6:	e001      	b.n	801baac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801baa8:	2301      	movs	r3, #1
 801baaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	2200      	movs	r2, #0
 801bab0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	2200      	movs	r2, #0
 801bab6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801bab8:	7fbb      	ldrb	r3, [r7, #30]
}
 801baba:	4618      	mov	r0, r3
 801babc:	3720      	adds	r7, #32
 801babe:	46bd      	mov	sp, r7
 801bac0:	bd80      	pop	{r7, pc}
 801bac2:	bf00      	nop
 801bac4:	40007c00 	.word	0x40007c00
 801bac8:	40023800 	.word	0x40023800
 801bacc:	00f42400 	.word	0x00f42400

0801bad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801bad0:	b480      	push	{r7}
 801bad2:	b083      	sub	sp, #12
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801badc:	f003 0301 	and.w	r3, r3, #1
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d00a      	beq.n	801bafa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	430a      	orrs	r2, r1
 801baf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bafe:	f003 0302 	and.w	r3, r3, #2
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d00a      	beq.n	801bb1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	685b      	ldr	r3, [r3, #4]
 801bb0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	430a      	orrs	r2, r1
 801bb1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb20:	f003 0304 	and.w	r3, r3, #4
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d00a      	beq.n	801bb3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	685b      	ldr	r3, [r3, #4]
 801bb2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	430a      	orrs	r2, r1
 801bb3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb42:	f003 0308 	and.w	r3, r3, #8
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d00a      	beq.n	801bb60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	685b      	ldr	r3, [r3, #4]
 801bb50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	430a      	orrs	r2, r1
 801bb5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb64:	f003 0310 	and.w	r3, r3, #16
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d00a      	beq.n	801bb82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	689b      	ldr	r3, [r3, #8]
 801bb72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	430a      	orrs	r2, r1
 801bb80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb86:	f003 0320 	and.w	r3, r3, #32
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d00a      	beq.n	801bba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	689b      	ldr	r3, [r3, #8]
 801bb94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	430a      	orrs	r2, r1
 801bba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d01a      	beq.n	801bbe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	685b      	ldr	r3, [r3, #4]
 801bbb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	430a      	orrs	r2, r1
 801bbc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bbce:	d10a      	bne.n	801bbe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	685b      	ldr	r3, [r3, #4]
 801bbd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	430a      	orrs	r2, r1
 801bbe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d00a      	beq.n	801bc08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	685b      	ldr	r3, [r3, #4]
 801bbf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	430a      	orrs	r2, r1
 801bc06:	605a      	str	r2, [r3, #4]
  }
}
 801bc08:	bf00      	nop
 801bc0a:	370c      	adds	r7, #12
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc12:	4770      	bx	lr

0801bc14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b086      	sub	sp, #24
 801bc18:	af02      	add	r7, sp, #8
 801bc1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	2200      	movs	r2, #0
 801bc20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bc24:	f7f9 fc04 	bl	8015430 <HAL_GetTick>
 801bc28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	f003 0308 	and.w	r3, r3, #8
 801bc34:	2b08      	cmp	r3, #8
 801bc36:	d10e      	bne.n	801bc56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bc38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	2200      	movs	r2, #0
 801bc42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bc46:	6878      	ldr	r0, [r7, #4]
 801bc48:	f000 f831 	bl	801bcae <UART_WaitOnFlagUntilTimeout>
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d001      	beq.n	801bc56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bc52:	2303      	movs	r3, #3
 801bc54:	e027      	b.n	801bca6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	f003 0304 	and.w	r3, r3, #4
 801bc60:	2b04      	cmp	r3, #4
 801bc62:	d10e      	bne.n	801bc82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bc64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bc68:	9300      	str	r3, [sp, #0]
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801bc72:	6878      	ldr	r0, [r7, #4]
 801bc74:	f000 f81b 	bl	801bcae <UART_WaitOnFlagUntilTimeout>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d001      	beq.n	801bc82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bc7e:	2303      	movs	r3, #3
 801bc80:	e011      	b.n	801bca6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	2220      	movs	r2, #32
 801bc86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	2220      	movs	r2, #32
 801bc8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2200      	movs	r2, #0
 801bc94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	2200      	movs	r2, #0
 801bc9a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801bca4:	2300      	movs	r3, #0
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	3710      	adds	r7, #16
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bd80      	pop	{r7, pc}

0801bcae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bcae:	b580      	push	{r7, lr}
 801bcb0:	b09c      	sub	sp, #112	; 0x70
 801bcb2:	af00      	add	r7, sp, #0
 801bcb4:	60f8      	str	r0, [r7, #12]
 801bcb6:	60b9      	str	r1, [r7, #8]
 801bcb8:	603b      	str	r3, [r7, #0]
 801bcba:	4613      	mov	r3, r2
 801bcbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bcbe:	e0a7      	b.n	801be10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bcc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcc6:	f000 80a3 	beq.w	801be10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bcca:	f7f9 fbb1 	bl	8015430 <HAL_GetTick>
 801bcce:	4602      	mov	r2, r0
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	1ad3      	subs	r3, r2, r3
 801bcd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	d302      	bcc.n	801bce0 <UART_WaitOnFlagUntilTimeout+0x32>
 801bcda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d13f      	bne.n	801bd60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bce8:	e853 3f00 	ldrex	r3, [r3]
 801bcec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801bcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bcf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801bcf4:	667b      	str	r3, [r7, #100]	; 0x64
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bcfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bd00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801bd04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bd06:	e841 2300 	strex	r3, r2, [r1]
 801bd0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801bd0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d1e6      	bne.n	801bce0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	3308      	adds	r3, #8
 801bd18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd1c:	e853 3f00 	ldrex	r3, [r3]
 801bd20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd24:	f023 0301 	bic.w	r3, r3, #1
 801bd28:	663b      	str	r3, [r7, #96]	; 0x60
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	3308      	adds	r3, #8
 801bd30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bd32:	64ba      	str	r2, [r7, #72]	; 0x48
 801bd34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bd38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bd3a:	e841 2300 	strex	r3, r2, [r1]
 801bd3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801bd40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1e5      	bne.n	801bd12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	2220      	movs	r2, #32
 801bd4a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	2220      	movs	r2, #32
 801bd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	2200      	movs	r2, #0
 801bd58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801bd5c:	2303      	movs	r3, #3
 801bd5e:	e068      	b.n	801be32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	f003 0304 	and.w	r3, r3, #4
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d050      	beq.n	801be10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	69db      	ldr	r3, [r3, #28]
 801bd74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bd7c:	d148      	bne.n	801be10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bd86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd90:	e853 3f00 	ldrex	r3, [r3]
 801bd94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801bd9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	461a      	mov	r2, r3
 801bda4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bda6:	637b      	str	r3, [r7, #52]	; 0x34
 801bda8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bdac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bdae:	e841 2300 	strex	r3, r2, [r1]
 801bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d1e6      	bne.n	801bd88 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	3308      	adds	r3, #8
 801bdc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdc2:	697b      	ldr	r3, [r7, #20]
 801bdc4:	e853 3f00 	ldrex	r3, [r3]
 801bdc8:	613b      	str	r3, [r7, #16]
   return(result);
 801bdca:	693b      	ldr	r3, [r7, #16]
 801bdcc:	f023 0301 	bic.w	r3, r3, #1
 801bdd0:	66bb      	str	r3, [r7, #104]	; 0x68
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	3308      	adds	r3, #8
 801bdd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bdda:	623a      	str	r2, [r7, #32]
 801bddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdde:	69f9      	ldr	r1, [r7, #28]
 801bde0:	6a3a      	ldr	r2, [r7, #32]
 801bde2:	e841 2300 	strex	r3, r2, [r1]
 801bde6:	61bb      	str	r3, [r7, #24]
   return(result);
 801bde8:	69bb      	ldr	r3, [r7, #24]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d1e5      	bne.n	801bdba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	2220      	movs	r2, #32
 801bdf2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	2220      	movs	r2, #32
 801bdf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2220      	movs	r2, #32
 801be00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	2200      	movs	r2, #0
 801be08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801be0c:	2303      	movs	r3, #3
 801be0e:	e010      	b.n	801be32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	69da      	ldr	r2, [r3, #28]
 801be16:	68bb      	ldr	r3, [r7, #8]
 801be18:	4013      	ands	r3, r2
 801be1a:	68ba      	ldr	r2, [r7, #8]
 801be1c:	429a      	cmp	r2, r3
 801be1e:	bf0c      	ite	eq
 801be20:	2301      	moveq	r3, #1
 801be22:	2300      	movne	r3, #0
 801be24:	b2db      	uxtb	r3, r3
 801be26:	461a      	mov	r2, r3
 801be28:	79fb      	ldrb	r3, [r7, #7]
 801be2a:	429a      	cmp	r2, r3
 801be2c:	f43f af48 	beq.w	801bcc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801be30:	2300      	movs	r3, #0
}
 801be32:	4618      	mov	r0, r3
 801be34:	3770      	adds	r7, #112	; 0x70
 801be36:	46bd      	mov	sp, r7
 801be38:	bd80      	pop	{r7, pc}
	...

0801be3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801be3c:	b480      	push	{r7}
 801be3e:	b097      	sub	sp, #92	; 0x5c
 801be40:	af00      	add	r7, sp, #0
 801be42:	60f8      	str	r0, [r7, #12]
 801be44:	60b9      	str	r1, [r7, #8]
 801be46:	4613      	mov	r3, r2
 801be48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	68ba      	ldr	r2, [r7, #8]
 801be4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	88fa      	ldrh	r2, [r7, #6]
 801be54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	88fa      	ldrh	r2, [r7, #6]
 801be5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	2200      	movs	r2, #0
 801be64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	689b      	ldr	r3, [r3, #8]
 801be6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801be6e:	d10e      	bne.n	801be8e <UART_Start_Receive_IT+0x52>
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	691b      	ldr	r3, [r3, #16]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d105      	bne.n	801be84 <UART_Start_Receive_IT+0x48>
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801be7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801be82:	e02d      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	22ff      	movs	r2, #255	; 0xff
 801be88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801be8c:	e028      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	689b      	ldr	r3, [r3, #8]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d10d      	bne.n	801beb2 <UART_Start_Receive_IT+0x76>
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	691b      	ldr	r3, [r3, #16]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d104      	bne.n	801bea8 <UART_Start_Receive_IT+0x6c>
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	22ff      	movs	r2, #255	; 0xff
 801bea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bea6:	e01b      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	227f      	movs	r2, #127	; 0x7f
 801beac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801beb0:	e016      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	689b      	ldr	r3, [r3, #8]
 801beb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801beba:	d10d      	bne.n	801bed8 <UART_Start_Receive_IT+0x9c>
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	691b      	ldr	r3, [r3, #16]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d104      	bne.n	801bece <UART_Start_Receive_IT+0x92>
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	227f      	movs	r2, #127	; 0x7f
 801bec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801becc:	e008      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	223f      	movs	r2, #63	; 0x3f
 801bed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bed6:	e003      	b.n	801bee0 <UART_Start_Receive_IT+0xa4>
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	2200      	movs	r2, #0
 801bedc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	2200      	movs	r2, #0
 801bee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	2222      	movs	r2, #34	; 0x22
 801beec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	3308      	adds	r3, #8
 801bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801befa:	e853 3f00 	ldrex	r3, [r3]
 801befe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf02:	f043 0301 	orr.w	r3, r3, #1
 801bf06:	657b      	str	r3, [r7, #84]	; 0x54
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	3308      	adds	r3, #8
 801bf0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bf10:	64ba      	str	r2, [r7, #72]	; 0x48
 801bf12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bf18:	e841 2300 	strex	r3, r2, [r1]
 801bf1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801bf1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1e5      	bne.n	801bef0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	689b      	ldr	r3, [r3, #8]
 801bf28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bf2c:	d107      	bne.n	801bf3e <UART_Start_Receive_IT+0x102>
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	691b      	ldr	r3, [r3, #16]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d103      	bne.n	801bf3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	4a21      	ldr	r2, [pc, #132]	; (801bfc0 <UART_Start_Receive_IT+0x184>)
 801bf3a:	669a      	str	r2, [r3, #104]	; 0x68
 801bf3c:	e002      	b.n	801bf44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	4a20      	ldr	r2, [pc, #128]	; (801bfc4 <UART_Start_Receive_IT+0x188>)
 801bf42:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	691b      	ldr	r3, [r3, #16]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d019      	beq.n	801bf80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf54:	e853 3f00 	ldrex	r3, [r3]
 801bf58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801bf60:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	461a      	mov	r2, r3
 801bf68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf6a:	637b      	str	r3, [r7, #52]	; 0x34
 801bf6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bf70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf72:	e841 2300 	strex	r3, r2, [r1]
 801bf76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d1e6      	bne.n	801bf4c <UART_Start_Receive_IT+0x110>
 801bf7e:	e018      	b.n	801bfb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf86:	697b      	ldr	r3, [r7, #20]
 801bf88:	e853 3f00 	ldrex	r3, [r3]
 801bf8c:	613b      	str	r3, [r7, #16]
   return(result);
 801bf8e:	693b      	ldr	r3, [r7, #16]
 801bf90:	f043 0320 	orr.w	r3, r3, #32
 801bf94:	653b      	str	r3, [r7, #80]	; 0x50
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf9e:	623b      	str	r3, [r7, #32]
 801bfa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfa2:	69f9      	ldr	r1, [r7, #28]
 801bfa4:	6a3a      	ldr	r2, [r7, #32]
 801bfa6:	e841 2300 	strex	r3, r2, [r1]
 801bfaa:	61bb      	str	r3, [r7, #24]
   return(result);
 801bfac:	69bb      	ldr	r3, [r7, #24]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d1e6      	bne.n	801bf80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801bfb2:	2300      	movs	r3, #0
}
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	375c      	adds	r7, #92	; 0x5c
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfbe:	4770      	bx	lr
 801bfc0:	0801c287 	.word	0x0801c287
 801bfc4:	0801c119 	.word	0x0801c119

0801bfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b095      	sub	sp, #84	; 0x54
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bfd8:	e853 3f00 	ldrex	r3, [r3]
 801bfdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bfe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	461a      	mov	r2, r3
 801bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfee:	643b      	str	r3, [r7, #64]	; 0x40
 801bff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bff6:	e841 2300 	strex	r3, r2, [r1]
 801bffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d1e6      	bne.n	801bfd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	3308      	adds	r3, #8
 801c008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c00a:	6a3b      	ldr	r3, [r7, #32]
 801c00c:	e853 3f00 	ldrex	r3, [r3]
 801c010:	61fb      	str	r3, [r7, #28]
   return(result);
 801c012:	69fb      	ldr	r3, [r7, #28]
 801c014:	f023 0301 	bic.w	r3, r3, #1
 801c018:	64bb      	str	r3, [r7, #72]	; 0x48
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	3308      	adds	r3, #8
 801c020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c022:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c02a:	e841 2300 	strex	r3, r2, [r1]
 801c02e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c032:	2b00      	cmp	r3, #0
 801c034:	d1e5      	bne.n	801c002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d118      	bne.n	801c070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	e853 3f00 	ldrex	r3, [r3]
 801c04a:	60bb      	str	r3, [r7, #8]
   return(result);
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	f023 0310 	bic.w	r3, r3, #16
 801c052:	647b      	str	r3, [r7, #68]	; 0x44
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	461a      	mov	r2, r3
 801c05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c05c:	61bb      	str	r3, [r7, #24]
 801c05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c060:	6979      	ldr	r1, [r7, #20]
 801c062:	69ba      	ldr	r2, [r7, #24]
 801c064:	e841 2300 	strex	r3, r2, [r1]
 801c068:	613b      	str	r3, [r7, #16]
   return(result);
 801c06a:	693b      	ldr	r3, [r7, #16]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d1e6      	bne.n	801c03e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	2220      	movs	r2, #32
 801c074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	2200      	movs	r2, #0
 801c07c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	2200      	movs	r2, #0
 801c082:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c084:	bf00      	nop
 801c086:	3754      	adds	r7, #84	; 0x54
 801c088:	46bd      	mov	sp, r7
 801c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c08e:	4770      	bx	lr

0801c090 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c090:	b580      	push	{r7, lr}
 801c092:	b084      	sub	sp, #16
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c09c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	2200      	movs	r2, #0
 801c0aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c0b4:	68f8      	ldr	r0, [r7, #12]
 801c0b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c0b8:	bf00      	nop
 801c0ba:	3710      	adds	r7, #16
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	bd80      	pop	{r7, pc}

0801c0c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b088      	sub	sp, #32
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	e853 3f00 	ldrex	r3, [r3]
 801c0d4:	60bb      	str	r3, [r7, #8]
   return(result);
 801c0d6:	68bb      	ldr	r3, [r7, #8]
 801c0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c0dc:	61fb      	str	r3, [r7, #28]
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	461a      	mov	r2, r3
 801c0e4:	69fb      	ldr	r3, [r7, #28]
 801c0e6:	61bb      	str	r3, [r7, #24]
 801c0e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0ea:	6979      	ldr	r1, [r7, #20]
 801c0ec:	69ba      	ldr	r2, [r7, #24]
 801c0ee:	e841 2300 	strex	r3, r2, [r1]
 801c0f2:	613b      	str	r3, [r7, #16]
   return(result);
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d1e6      	bne.n	801c0c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	2220      	movs	r2, #32
 801c0fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	2200      	movs	r2, #0
 801c104:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c110:	bf00      	nop
 801c112:	3720      	adds	r7, #32
 801c114:	46bd      	mov	sp, r7
 801c116:	bd80      	pop	{r7, pc}

0801c118 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b096      	sub	sp, #88	; 0x58
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c126:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c130:	2b22      	cmp	r3, #34	; 0x22
 801c132:	f040 809c 	bne.w	801c26e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c13c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c140:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c144:	b2d9      	uxtb	r1, r3
 801c146:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c14a:	b2da      	uxtb	r2, r3
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c150:	400a      	ands	r2, r1
 801c152:	b2d2      	uxtb	r2, r2
 801c154:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c15a:	1c5a      	adds	r2, r3, #1
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c166:	b29b      	uxth	r3, r3
 801c168:	3b01      	subs	r3, #1
 801c16a:	b29a      	uxth	r2, r3
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c178:	b29b      	uxth	r3, r3
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d17f      	bne.n	801c27e <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c186:	e853 3f00 	ldrex	r3, [r3]
 801c18a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c18e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c192:	653b      	str	r3, [r7, #80]	; 0x50
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	461a      	mov	r2, r3
 801c19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c19c:	647b      	str	r3, [r7, #68]	; 0x44
 801c19e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c1a4:	e841 2300 	strex	r3, r2, [r1]
 801c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d1e6      	bne.n	801c17e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	3308      	adds	r3, #8
 801c1b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ba:	e853 3f00 	ldrex	r3, [r3]
 801c1be:	623b      	str	r3, [r7, #32]
   return(result);
 801c1c0:	6a3b      	ldr	r3, [r7, #32]
 801c1c2:	f023 0301 	bic.w	r3, r3, #1
 801c1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	3308      	adds	r3, #8
 801c1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c1d0:	633a      	str	r2, [r7, #48]	; 0x30
 801c1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1d8:	e841 2300 	strex	r3, r2, [r1]
 801c1dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d1e5      	bne.n	801c1b0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	2220      	movs	r2, #32
 801c1e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	2200      	movs	r2, #0
 801c1f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	d130      	bne.n	801c262 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	2200      	movs	r2, #0
 801c204:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c20c:	693b      	ldr	r3, [r7, #16]
 801c20e:	e853 3f00 	ldrex	r3, [r3]
 801c212:	60fb      	str	r3, [r7, #12]
   return(result);
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	f023 0310 	bic.w	r3, r3, #16
 801c21a:	64bb      	str	r3, [r7, #72]	; 0x48
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	461a      	mov	r2, r3
 801c222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c224:	61fb      	str	r3, [r7, #28]
 801c226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c228:	69b9      	ldr	r1, [r7, #24]
 801c22a:	69fa      	ldr	r2, [r7, #28]
 801c22c:	e841 2300 	strex	r3, r2, [r1]
 801c230:	617b      	str	r3, [r7, #20]
   return(result);
 801c232:	697b      	ldr	r3, [r7, #20]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d1e6      	bne.n	801c206 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	69db      	ldr	r3, [r3, #28]
 801c23e:	f003 0310 	and.w	r3, r3, #16
 801c242:	2b10      	cmp	r3, #16
 801c244:	d103      	bne.n	801c24e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	2210      	movs	r2, #16
 801c24c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c254:	687a      	ldr	r2, [r7, #4]
 801c256:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c25a:	4611      	mov	r1, r2
 801c25c:	6878      	ldr	r0, [r7, #4]
 801c25e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c260:	e00d      	b.n	801c27e <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c268:	6878      	ldr	r0, [r7, #4]
 801c26a:	4798      	blx	r3
}
 801c26c:	e007      	b.n	801c27e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	699a      	ldr	r2, [r3, #24]
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f042 0208 	orr.w	r2, r2, #8
 801c27c:	619a      	str	r2, [r3, #24]
}
 801c27e:	bf00      	nop
 801c280:	3758      	adds	r7, #88	; 0x58
 801c282:	46bd      	mov	sp, r7
 801c284:	bd80      	pop	{r7, pc}

0801c286 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c286:	b580      	push	{r7, lr}
 801c288:	b096      	sub	sp, #88	; 0x58
 801c28a:	af00      	add	r7, sp, #0
 801c28c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c294:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c29e:	2b22      	cmp	r3, #34	; 0x22
 801c2a0:	f040 809c 	bne.w	801c3dc <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c2b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c2b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c2b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c2bc:	4013      	ands	r3, r2
 801c2be:	b29a      	uxth	r2, r3
 801c2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c2c8:	1c9a      	adds	r2, r3, #2
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	3b01      	subs	r3, #1
 801c2d8:	b29a      	uxth	r2, r3
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d17f      	bne.n	801c3ec <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2f4:	e853 3f00 	ldrex	r3, [r3]
 801c2f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c300:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	461a      	mov	r2, r3
 801c308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c30a:	643b      	str	r3, [r7, #64]	; 0x40
 801c30c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c30e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c312:	e841 2300 	strex	r3, r2, [r1]
 801c316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d1e6      	bne.n	801c2ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	3308      	adds	r3, #8
 801c324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c326:	6a3b      	ldr	r3, [r7, #32]
 801c328:	e853 3f00 	ldrex	r3, [r3]
 801c32c:	61fb      	str	r3, [r7, #28]
   return(result);
 801c32e:	69fb      	ldr	r3, [r7, #28]
 801c330:	f023 0301 	bic.w	r3, r3, #1
 801c334:	64bb      	str	r3, [r7, #72]	; 0x48
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	3308      	adds	r3, #8
 801c33c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c33e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c346:	e841 2300 	strex	r3, r2, [r1]
 801c34a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d1e5      	bne.n	801c31e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2220      	movs	r2, #32
 801c356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	2200      	movs	r2, #0
 801c35e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	2200      	movs	r2, #0
 801c364:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c36a:	2b01      	cmp	r3, #1
 801c36c:	d130      	bne.n	801c3d0 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2200      	movs	r2, #0
 801c372:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	e853 3f00 	ldrex	r3, [r3]
 801c380:	60bb      	str	r3, [r7, #8]
   return(result);
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	f023 0310 	bic.w	r3, r3, #16
 801c388:	647b      	str	r3, [r7, #68]	; 0x44
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	461a      	mov	r2, r3
 801c390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c392:	61bb      	str	r3, [r7, #24]
 801c394:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c396:	6979      	ldr	r1, [r7, #20]
 801c398:	69ba      	ldr	r2, [r7, #24]
 801c39a:	e841 2300 	strex	r3, r2, [r1]
 801c39e:	613b      	str	r3, [r7, #16]
   return(result);
 801c3a0:	693b      	ldr	r3, [r7, #16]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d1e6      	bne.n	801c374 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	69db      	ldr	r3, [r3, #28]
 801c3ac:	f003 0310 	and.w	r3, r3, #16
 801c3b0:	2b10      	cmp	r3, #16
 801c3b2:	d103      	bne.n	801c3bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2210      	movs	r2, #16
 801c3ba:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c3c8:	4611      	mov	r1, r2
 801c3ca:	6878      	ldr	r0, [r7, #4]
 801c3cc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c3ce:	e00d      	b.n	801c3ec <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c3d6:	6878      	ldr	r0, [r7, #4]
 801c3d8:	4798      	blx	r3
}
 801c3da:	e007      	b.n	801c3ec <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	699a      	ldr	r2, [r3, #24]
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	f042 0208 	orr.w	r2, r2, #8
 801c3ea:	619a      	str	r2, [r3, #24]
}
 801c3ec:	bf00      	nop
 801c3ee:	3758      	adds	r7, #88	; 0x58
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	bd80      	pop	{r7, pc}

0801c3f4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b08c      	sub	sp, #48	; 0x30
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	60f8      	str	r0, [r7, #12]
 801c3fc:	60b9      	str	r1, [r7, #8]
 801c3fe:	4613      	mov	r3, r2
 801c400:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c408:	2b20      	cmp	r3, #32
 801c40a:	d142      	bne.n	801c492 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801c40c:	68bb      	ldr	r3, [r7, #8]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d002      	beq.n	801c418 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801c412:	88fb      	ldrh	r3, [r7, #6]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d101      	bne.n	801c41c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801c418:	2301      	movs	r3, #1
 801c41a:	e03b      	b.n	801c494 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	2201      	movs	r2, #1
 801c420:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2200      	movs	r2, #0
 801c426:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801c428:	88fb      	ldrh	r3, [r7, #6]
 801c42a:	461a      	mov	r2, r3
 801c42c:	68b9      	ldr	r1, [r7, #8]
 801c42e:	68f8      	ldr	r0, [r7, #12]
 801c430:	f7ff fd04 	bl	801be3c <UART_Start_Receive_IT>
 801c434:	4603      	mov	r3, r0
 801c436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801c43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d124      	bne.n	801c48c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c446:	2b01      	cmp	r3, #1
 801c448:	d11d      	bne.n	801c486 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	2210      	movs	r2, #16
 801c450:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	e853 3f00 	ldrex	r3, [r3]
 801c45e:	617b      	str	r3, [r7, #20]
   return(result);
 801c460:	697b      	ldr	r3, [r7, #20]
 801c462:	f043 0310 	orr.w	r3, r3, #16
 801c466:	62bb      	str	r3, [r7, #40]	; 0x28
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	461a      	mov	r2, r3
 801c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c470:	627b      	str	r3, [r7, #36]	; 0x24
 801c472:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c474:	6a39      	ldr	r1, [r7, #32]
 801c476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c478:	e841 2300 	strex	r3, r2, [r1]
 801c47c:	61fb      	str	r3, [r7, #28]
   return(result);
 801c47e:	69fb      	ldr	r3, [r7, #28]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d1e6      	bne.n	801c452 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801c484:	e002      	b.n	801c48c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c486:	2301      	movs	r3, #1
 801c488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c48c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c490:	e000      	b.n	801c494 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c492:	2302      	movs	r3, #2
  }
}
 801c494:	4618      	mov	r0, r3
 801c496:	3730      	adds	r7, #48	; 0x30
 801c498:	46bd      	mov	sp, r7
 801c49a:	bd80      	pop	{r7, pc}

0801c49c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b084      	sub	sp, #16
 801c4a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801c4a2:	4b2f      	ldr	r3, [pc, #188]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c4a4:	22c0      	movs	r2, #192	; 0xc0
 801c4a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801c4a8:	4b2d      	ldr	r3, [pc, #180]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c4aa:	22a8      	movs	r2, #168	; 0xa8
 801c4ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801c4ae:	4b2c      	ldr	r3, [pc, #176]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c4b0:	220c      	movs	r2, #12
 801c4b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801c4b4:	4b2a      	ldr	r3, [pc, #168]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c4b6:	2264      	movs	r2, #100	; 0x64
 801c4b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801c4ba:	4b2a      	ldr	r3, [pc, #168]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c4bc:	22ff      	movs	r2, #255	; 0xff
 801c4be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801c4c0:	4b28      	ldr	r3, [pc, #160]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c4c2:	22ff      	movs	r2, #255	; 0xff
 801c4c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801c4c6:	4b27      	ldr	r3, [pc, #156]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c4c8:	22ff      	movs	r2, #255	; 0xff
 801c4ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801c4cc:	4b25      	ldr	r3, [pc, #148]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801c4d2:	4b25      	ldr	r3, [pc, #148]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c4d4:	22c0      	movs	r2, #192	; 0xc0
 801c4d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801c4d8:	4b23      	ldr	r3, [pc, #140]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c4da:	22a8      	movs	r2, #168	; 0xa8
 801c4dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801c4de:	4b22      	ldr	r3, [pc, #136]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c4e0:	220c      	movs	r2, #12
 801c4e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801c4e4:	4b20      	ldr	r3, [pc, #128]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c4e6:	2201      	movs	r2, #1
 801c4e8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801c4ea:	4b20      	ldr	r3, [pc, #128]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c4ec:	781b      	ldrb	r3, [r3, #0]
 801c4ee:	2b01      	cmp	r3, #1
 801c4f0:	d002      	beq.n	801c4f8 <MX_LWIP_Init+0x5c>
 801c4f2:	2b02      	cmp	r3, #2
 801c4f4:	d03c      	beq.n	801c570 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801c4f6:	e162      	b.n	801c7be <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801c4f8:	4b1c      	ldr	r3, [pc, #112]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c4fa:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801c4fe:	4b18      	ldr	r3, [pc, #96]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c500:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c502:	4b1a      	ldr	r3, [pc, #104]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c504:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801c508:	4b15      	ldr	r3, [pc, #84]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c50a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c50c:	4b17      	ldr	r3, [pc, #92]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c50e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801c512:	4b13      	ldr	r3, [pc, #76]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c514:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801c516:	4b15      	ldr	r3, [pc, #84]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c518:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801c51c:	4b10      	ldr	r3, [pc, #64]	; (801c560 <MX_LWIP_Init+0xc4>)
 801c51e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c520:	4b10      	ldr	r3, [pc, #64]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c522:	22ff      	movs	r2, #255	; 0xff
 801c524:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c526:	4b0f      	ldr	r3, [pc, #60]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c528:	22ff      	movs	r2, #255	; 0xff
 801c52a:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c52c:	4b0d      	ldr	r3, [pc, #52]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c52e:	22ff      	movs	r2, #255	; 0xff
 801c530:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c532:	4b0c      	ldr	r3, [pc, #48]	; (801c564 <MX_LWIP_Init+0xc8>)
 801c534:	2200      	movs	r2, #0
 801c536:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801c538:	4b0c      	ldr	r3, [pc, #48]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c53a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801c53e:	4b0a      	ldr	r3, [pc, #40]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c540:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c542:	4b0a      	ldr	r3, [pc, #40]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c544:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801c548:	4b07      	ldr	r3, [pc, #28]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c54a:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c54c:	4b07      	ldr	r3, [pc, #28]	; (801c56c <MX_LWIP_Init+0xd0>)
 801c54e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801c552:	4b05      	ldr	r3, [pc, #20]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c554:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c556:	4b04      	ldr	r3, [pc, #16]	; (801c568 <MX_LWIP_Init+0xcc>)
 801c558:	2201      	movs	r2, #1
 801c55a:	70da      	strb	r2, [r3, #3]
		break;
 801c55c:	e03b      	b.n	801c5d6 <MX_LWIP_Init+0x13a>
 801c55e:	bf00      	nop
 801c560:	2000bdc8 	.word	0x2000bdc8
 801c564:	2000bdcc 	.word	0x2000bdcc
 801c568:	2000bdd0 	.word	0x2000bdd0
 801c56c:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801c570:	4b94      	ldr	r3, [pc, #592]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c572:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801c576:	4b94      	ldr	r3, [pc, #592]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c578:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c57a:	4b92      	ldr	r3, [pc, #584]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c57c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801c580:	4b91      	ldr	r3, [pc, #580]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c582:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c584:	4b8f      	ldr	r3, [pc, #572]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c586:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801c58a:	4b8f      	ldr	r3, [pc, #572]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c58c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801c58e:	4b8d      	ldr	r3, [pc, #564]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c590:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801c594:	4b8c      	ldr	r3, [pc, #560]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c596:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c598:	4b8c      	ldr	r3, [pc, #560]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c59a:	22ff      	movs	r2, #255	; 0xff
 801c59c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c59e:	4b8b      	ldr	r3, [pc, #556]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c5a0:	22ff      	movs	r2, #255	; 0xff
 801c5a2:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c5a4:	4b89      	ldr	r3, [pc, #548]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c5a6:	22ff      	movs	r2, #255	; 0xff
 801c5a8:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c5aa:	4b88      	ldr	r3, [pc, #544]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801c5b0:	4b84      	ldr	r3, [pc, #528]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c5b2:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801c5b6:	4b86      	ldr	r3, [pc, #536]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c5b8:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c5ba:	4b82      	ldr	r3, [pc, #520]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c5bc:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801c5c0:	4b83      	ldr	r3, [pc, #524]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c5c2:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c5c4:	4b7f      	ldr	r3, [pc, #508]	; (801c7c4 <MX_LWIP_Init+0x328>)
 801c5c6:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801c5ca:	4b81      	ldr	r3, [pc, #516]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c5cc:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c5ce:	4b80      	ldr	r3, [pc, #512]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c5d0:	2201      	movs	r2, #1
 801c5d2:	70da      	strb	r2, [r3, #3]
		break;
 801c5d4:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801c5d6:	f000 fd2e 	bl	801d036 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801c5da:	4b7b      	ldr	r3, [pc, #492]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c5dc:	781b      	ldrb	r3, [r3, #0]
 801c5de:	061a      	lsls	r2, r3, #24
 801c5e0:	4b79      	ldr	r3, [pc, #484]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c5e2:	785b      	ldrb	r3, [r3, #1]
 801c5e4:	041b      	lsls	r3, r3, #16
 801c5e6:	431a      	orrs	r2, r3
 801c5e8:	4b77      	ldr	r3, [pc, #476]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c5ea:	789b      	ldrb	r3, [r3, #2]
 801c5ec:	021b      	lsls	r3, r3, #8
 801c5ee:	4313      	orrs	r3, r2
 801c5f0:	4a75      	ldr	r2, [pc, #468]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c5f2:	78d2      	ldrb	r2, [r2, #3]
 801c5f4:	4313      	orrs	r3, r2
 801c5f6:	061a      	lsls	r2, r3, #24
 801c5f8:	4b73      	ldr	r3, [pc, #460]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c5fa:	781b      	ldrb	r3, [r3, #0]
 801c5fc:	0619      	lsls	r1, r3, #24
 801c5fe:	4b72      	ldr	r3, [pc, #456]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c600:	785b      	ldrb	r3, [r3, #1]
 801c602:	041b      	lsls	r3, r3, #16
 801c604:	4319      	orrs	r1, r3
 801c606:	4b70      	ldr	r3, [pc, #448]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c608:	789b      	ldrb	r3, [r3, #2]
 801c60a:	021b      	lsls	r3, r3, #8
 801c60c:	430b      	orrs	r3, r1
 801c60e:	496e      	ldr	r1, [pc, #440]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c610:	78c9      	ldrb	r1, [r1, #3]
 801c612:	430b      	orrs	r3, r1
 801c614:	021b      	lsls	r3, r3, #8
 801c616:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c61a:	431a      	orrs	r2, r3
 801c61c:	4b6a      	ldr	r3, [pc, #424]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c61e:	781b      	ldrb	r3, [r3, #0]
 801c620:	0619      	lsls	r1, r3, #24
 801c622:	4b69      	ldr	r3, [pc, #420]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c624:	785b      	ldrb	r3, [r3, #1]
 801c626:	041b      	lsls	r3, r3, #16
 801c628:	4319      	orrs	r1, r3
 801c62a:	4b67      	ldr	r3, [pc, #412]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c62c:	789b      	ldrb	r3, [r3, #2]
 801c62e:	021b      	lsls	r3, r3, #8
 801c630:	430b      	orrs	r3, r1
 801c632:	4965      	ldr	r1, [pc, #404]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c634:	78c9      	ldrb	r1, [r1, #3]
 801c636:	430b      	orrs	r3, r1
 801c638:	0a1b      	lsrs	r3, r3, #8
 801c63a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c63e:	431a      	orrs	r2, r3
 801c640:	4b61      	ldr	r3, [pc, #388]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	0619      	lsls	r1, r3, #24
 801c646:	4b60      	ldr	r3, [pc, #384]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c648:	785b      	ldrb	r3, [r3, #1]
 801c64a:	041b      	lsls	r3, r3, #16
 801c64c:	4319      	orrs	r1, r3
 801c64e:	4b5e      	ldr	r3, [pc, #376]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c650:	789b      	ldrb	r3, [r3, #2]
 801c652:	021b      	lsls	r3, r3, #8
 801c654:	430b      	orrs	r3, r1
 801c656:	495c      	ldr	r1, [pc, #368]	; (801c7c8 <MX_LWIP_Init+0x32c>)
 801c658:	78c9      	ldrb	r1, [r1, #3]
 801c65a:	430b      	orrs	r3, r1
 801c65c:	0e1b      	lsrs	r3, r3, #24
 801c65e:	4313      	orrs	r3, r2
 801c660:	4a5c      	ldr	r2, [pc, #368]	; (801c7d4 <MX_LWIP_Init+0x338>)
 801c662:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801c664:	4b59      	ldr	r3, [pc, #356]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c666:	781b      	ldrb	r3, [r3, #0]
 801c668:	061a      	lsls	r2, r3, #24
 801c66a:	4b58      	ldr	r3, [pc, #352]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c66c:	785b      	ldrb	r3, [r3, #1]
 801c66e:	041b      	lsls	r3, r3, #16
 801c670:	431a      	orrs	r2, r3
 801c672:	4b56      	ldr	r3, [pc, #344]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c674:	789b      	ldrb	r3, [r3, #2]
 801c676:	021b      	lsls	r3, r3, #8
 801c678:	4313      	orrs	r3, r2
 801c67a:	4a54      	ldr	r2, [pc, #336]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c67c:	78d2      	ldrb	r2, [r2, #3]
 801c67e:	4313      	orrs	r3, r2
 801c680:	061a      	lsls	r2, r3, #24
 801c682:	4b52      	ldr	r3, [pc, #328]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c684:	781b      	ldrb	r3, [r3, #0]
 801c686:	0619      	lsls	r1, r3, #24
 801c688:	4b50      	ldr	r3, [pc, #320]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c68a:	785b      	ldrb	r3, [r3, #1]
 801c68c:	041b      	lsls	r3, r3, #16
 801c68e:	4319      	orrs	r1, r3
 801c690:	4b4e      	ldr	r3, [pc, #312]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c692:	789b      	ldrb	r3, [r3, #2]
 801c694:	021b      	lsls	r3, r3, #8
 801c696:	430b      	orrs	r3, r1
 801c698:	494c      	ldr	r1, [pc, #304]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c69a:	78c9      	ldrb	r1, [r1, #3]
 801c69c:	430b      	orrs	r3, r1
 801c69e:	021b      	lsls	r3, r3, #8
 801c6a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c6a4:	431a      	orrs	r2, r3
 801c6a6:	4b49      	ldr	r3, [pc, #292]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	0619      	lsls	r1, r3, #24
 801c6ac:	4b47      	ldr	r3, [pc, #284]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6ae:	785b      	ldrb	r3, [r3, #1]
 801c6b0:	041b      	lsls	r3, r3, #16
 801c6b2:	4319      	orrs	r1, r3
 801c6b4:	4b45      	ldr	r3, [pc, #276]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6b6:	789b      	ldrb	r3, [r3, #2]
 801c6b8:	021b      	lsls	r3, r3, #8
 801c6ba:	430b      	orrs	r3, r1
 801c6bc:	4943      	ldr	r1, [pc, #268]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6be:	78c9      	ldrb	r1, [r1, #3]
 801c6c0:	430b      	orrs	r3, r1
 801c6c2:	0a1b      	lsrs	r3, r3, #8
 801c6c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c6c8:	431a      	orrs	r2, r3
 801c6ca:	4b40      	ldr	r3, [pc, #256]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6cc:	781b      	ldrb	r3, [r3, #0]
 801c6ce:	0619      	lsls	r1, r3, #24
 801c6d0:	4b3e      	ldr	r3, [pc, #248]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6d2:	785b      	ldrb	r3, [r3, #1]
 801c6d4:	041b      	lsls	r3, r3, #16
 801c6d6:	4319      	orrs	r1, r3
 801c6d8:	4b3c      	ldr	r3, [pc, #240]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6da:	789b      	ldrb	r3, [r3, #2]
 801c6dc:	021b      	lsls	r3, r3, #8
 801c6de:	430b      	orrs	r3, r1
 801c6e0:	493a      	ldr	r1, [pc, #232]	; (801c7cc <MX_LWIP_Init+0x330>)
 801c6e2:	78c9      	ldrb	r1, [r1, #3]
 801c6e4:	430b      	orrs	r3, r1
 801c6e6:	0e1b      	lsrs	r3, r3, #24
 801c6e8:	4313      	orrs	r3, r2
 801c6ea:	4a3b      	ldr	r2, [pc, #236]	; (801c7d8 <MX_LWIP_Init+0x33c>)
 801c6ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801c6ee:	4b38      	ldr	r3, [pc, #224]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c6f0:	781b      	ldrb	r3, [r3, #0]
 801c6f2:	061a      	lsls	r2, r3, #24
 801c6f4:	4b36      	ldr	r3, [pc, #216]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c6f6:	785b      	ldrb	r3, [r3, #1]
 801c6f8:	041b      	lsls	r3, r3, #16
 801c6fa:	431a      	orrs	r2, r3
 801c6fc:	4b34      	ldr	r3, [pc, #208]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c6fe:	789b      	ldrb	r3, [r3, #2]
 801c700:	021b      	lsls	r3, r3, #8
 801c702:	4313      	orrs	r3, r2
 801c704:	4a32      	ldr	r2, [pc, #200]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c706:	78d2      	ldrb	r2, [r2, #3]
 801c708:	4313      	orrs	r3, r2
 801c70a:	061a      	lsls	r2, r3, #24
 801c70c:	4b30      	ldr	r3, [pc, #192]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c70e:	781b      	ldrb	r3, [r3, #0]
 801c710:	0619      	lsls	r1, r3, #24
 801c712:	4b2f      	ldr	r3, [pc, #188]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c714:	785b      	ldrb	r3, [r3, #1]
 801c716:	041b      	lsls	r3, r3, #16
 801c718:	4319      	orrs	r1, r3
 801c71a:	4b2d      	ldr	r3, [pc, #180]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c71c:	789b      	ldrb	r3, [r3, #2]
 801c71e:	021b      	lsls	r3, r3, #8
 801c720:	430b      	orrs	r3, r1
 801c722:	492b      	ldr	r1, [pc, #172]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c724:	78c9      	ldrb	r1, [r1, #3]
 801c726:	430b      	orrs	r3, r1
 801c728:	021b      	lsls	r3, r3, #8
 801c72a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c72e:	431a      	orrs	r2, r3
 801c730:	4b27      	ldr	r3, [pc, #156]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c732:	781b      	ldrb	r3, [r3, #0]
 801c734:	0619      	lsls	r1, r3, #24
 801c736:	4b26      	ldr	r3, [pc, #152]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c738:	785b      	ldrb	r3, [r3, #1]
 801c73a:	041b      	lsls	r3, r3, #16
 801c73c:	4319      	orrs	r1, r3
 801c73e:	4b24      	ldr	r3, [pc, #144]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c740:	789b      	ldrb	r3, [r3, #2]
 801c742:	021b      	lsls	r3, r3, #8
 801c744:	430b      	orrs	r3, r1
 801c746:	4922      	ldr	r1, [pc, #136]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c748:	78c9      	ldrb	r1, [r1, #3]
 801c74a:	430b      	orrs	r3, r1
 801c74c:	0a1b      	lsrs	r3, r3, #8
 801c74e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c752:	431a      	orrs	r2, r3
 801c754:	4b1e      	ldr	r3, [pc, #120]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	0619      	lsls	r1, r3, #24
 801c75a:	4b1d      	ldr	r3, [pc, #116]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c75c:	785b      	ldrb	r3, [r3, #1]
 801c75e:	041b      	lsls	r3, r3, #16
 801c760:	4319      	orrs	r1, r3
 801c762:	4b1b      	ldr	r3, [pc, #108]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c764:	789b      	ldrb	r3, [r3, #2]
 801c766:	021b      	lsls	r3, r3, #8
 801c768:	430b      	orrs	r3, r1
 801c76a:	4919      	ldr	r1, [pc, #100]	; (801c7d0 <MX_LWIP_Init+0x334>)
 801c76c:	78c9      	ldrb	r1, [r1, #3]
 801c76e:	430b      	orrs	r3, r1
 801c770:	0e1b      	lsrs	r3, r3, #24
 801c772:	4313      	orrs	r3, r2
 801c774:	4a19      	ldr	r2, [pc, #100]	; (801c7dc <MX_LWIP_Init+0x340>)
 801c776:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801c778:	4b19      	ldr	r3, [pc, #100]	; (801c7e0 <MX_LWIP_Init+0x344>)
 801c77a:	9302      	str	r3, [sp, #8]
 801c77c:	4b19      	ldr	r3, [pc, #100]	; (801c7e4 <MX_LWIP_Init+0x348>)
 801c77e:	9301      	str	r3, [sp, #4]
 801c780:	2300      	movs	r3, #0
 801c782:	9300      	str	r3, [sp, #0]
 801c784:	4b15      	ldr	r3, [pc, #84]	; (801c7dc <MX_LWIP_Init+0x340>)
 801c786:	4a14      	ldr	r2, [pc, #80]	; (801c7d8 <MX_LWIP_Init+0x33c>)
 801c788:	4912      	ldr	r1, [pc, #72]	; (801c7d4 <MX_LWIP_Init+0x338>)
 801c78a:	4817      	ldr	r0, [pc, #92]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c78c:	f001 f984 	bl	801da98 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801c790:	4815      	ldr	r0, [pc, #84]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c792:	f001 fb35 	bl	801de00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801c796:	4b14      	ldr	r3, [pc, #80]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c798:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c79c:	089b      	lsrs	r3, r3, #2
 801c79e:	f003 0301 	and.w	r3, r3, #1
 801c7a2:	b2db      	uxtb	r3, r3
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d003      	beq.n	801c7b0 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801c7a8:	480f      	ldr	r0, [pc, #60]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c7aa:	f001 fb39 	bl	801de20 <netif_set_up>
 801c7ae:	e002      	b.n	801c7b6 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801c7b0:	480d      	ldr	r0, [pc, #52]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c7b2:	f001 fba1 	bl	801def8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801c7b6:	490d      	ldr	r1, [pc, #52]	; (801c7ec <MX_LWIP_Init+0x350>)
 801c7b8:	480b      	ldr	r0, [pc, #44]	; (801c7e8 <MX_LWIP_Init+0x34c>)
 801c7ba:	f001 fc33 	bl	801e024 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	bd80      	pop	{r7, pc}
 801c7c2:	bf00      	nop
 801c7c4:	20000304 	.word	0x20000304
 801c7c8:	2000bdc8 	.word	0x2000bdc8
 801c7cc:	2000bdcc 	.word	0x2000bdcc
 801c7d0:	2000bdd0 	.word	0x2000bdd0
 801c7d4:	2000bdbc 	.word	0x2000bdbc
 801c7d8:	2000bdc0 	.word	0x2000bdc0
 801c7dc:	2000bdc4 	.word	0x2000bdc4
 801c7e0:	08021de1 	.word	0x08021de1
 801c7e4:	0801cb55 	.word	0x0801cb55
 801c7e8:	2000bd7c 	.word	0x2000bd7c
 801c7ec:	0801c841 	.word	0x0801c841

0801c7f0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	b082      	sub	sp, #8
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801c7f8:	f7f8 fe1a 	bl	8015430 <HAL_GetTick>
 801c7fc:	4602      	mov	r2, r0
 801c7fe:	4b08      	ldr	r3, [pc, #32]	; (801c820 <Ethernet_Link_Periodic_Handle+0x30>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	1ad3      	subs	r3, r2, r3
 801c804:	2b63      	cmp	r3, #99	; 0x63
 801c806:	d907      	bls.n	801c818 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801c808:	f7f8 fe12 	bl	8015430 <HAL_GetTick>
 801c80c:	4603      	mov	r3, r0
 801c80e:	4a04      	ldr	r2, [pc, #16]	; (801c820 <Ethernet_Link_Periodic_Handle+0x30>)
 801c810:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801c812:	6878      	ldr	r0, [r7, #4]
 801c814:	f000 fafc 	bl	801ce10 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801c818:	bf00      	nop
 801c81a:	3708      	adds	r7, #8
 801c81c:	46bd      	mov	sp, r7
 801c81e:	bd80      	pop	{r7, pc}
 801c820:	2000bd78 	.word	0x2000bd78

0801c824 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801c828:	4804      	ldr	r0, [pc, #16]	; (801c83c <MX_LWIP_Process+0x18>)
 801c82a:	f000 f973 	bl	801cb14 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801c82e:	f002 fb6f 	bl	801ef10 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801c832:	4802      	ldr	r0, [pc, #8]	; (801c83c <MX_LWIP_Process+0x18>)
 801c834:	f7ff ffdc 	bl	801c7f0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801c838:	bf00      	nop
 801c83a:	bd80      	pop	{r7, pc}
 801c83c:	2000bd7c 	.word	0x2000bd7c

0801c840 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801c840:	b480      	push	{r7}
 801c842:	b083      	sub	sp, #12
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801c848:	bf00      	nop
 801c84a:	370c      	adds	r7, #12
 801c84c:	46bd      	mov	sp, r7
 801c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c852:	4770      	bx	lr

0801c854 <SCB_InvalidateDCache_by_Addr>:
{
 801c854:	b480      	push	{r7}
 801c856:	b087      	sub	sp, #28
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
 801c85c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801c866:	2320      	movs	r3, #32
 801c868:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801c86a:	f3bf 8f4f 	dsb	sy
}
 801c86e:	bf00      	nop
    while (op_size > 0) {
 801c870:	e00b      	b.n	801c88a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801c872:	4a0d      	ldr	r2, [pc, #52]	; (801c8a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	693a      	ldr	r2, [r7, #16]
 801c87e:	4413      	add	r3, r2
 801c880:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801c882:	697a      	ldr	r2, [r7, #20]
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	1ad3      	subs	r3, r2, r3
 801c888:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801c88a:	697b      	ldr	r3, [r7, #20]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	dcf0      	bgt.n	801c872 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801c890:	f3bf 8f4f 	dsb	sy
}
 801c894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c896:	f3bf 8f6f 	isb	sy
}
 801c89a:	bf00      	nop
}
 801c89c:	bf00      	nop
 801c89e:	371c      	adds	r7, #28
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a6:	4770      	bx	lr
 801c8a8:	e000ed00 	.word	0xe000ed00

0801c8ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b084      	sub	sp, #16
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801c8b8:	4b40      	ldr	r3, [pc, #256]	; (801c9bc <low_level_init+0x110>)
 801c8ba:	4a41      	ldr	r2, [pc, #260]	; (801c9c0 <low_level_init+0x114>)
 801c8bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x3C;
 801c8be:	233c      	movs	r3, #60	; 0x3c
 801c8c0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x9C;
 801c8c2:	239c      	movs	r3, #156	; 0x9c
 801c8c4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x0F;
 801c8c6:	230f      	movs	r3, #15
 801c8c8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xE4;
 801c8ca:	23e4      	movs	r3, #228	; 0xe4
 801c8cc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x7D;
 801c8ce:	237d      	movs	r3, #125	; 0x7d
 801c8d0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x3E;
 801c8d2:	233e      	movs	r3, #62	; 0x3e
 801c8d4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801c8d6:	4a39      	ldr	r2, [pc, #228]	; (801c9bc <low_level_init+0x110>)
 801c8d8:	f107 0308 	add.w	r3, r7, #8
 801c8dc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801c8de:	4b37      	ldr	r3, [pc, #220]	; (801c9bc <low_level_init+0x110>)
 801c8e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801c8e4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801c8e6:	4b35      	ldr	r3, [pc, #212]	; (801c9bc <low_level_init+0x110>)
 801c8e8:	4a36      	ldr	r2, [pc, #216]	; (801c9c4 <low_level_init+0x118>)
 801c8ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801c8ec:	4b33      	ldr	r3, [pc, #204]	; (801c9bc <low_level_init+0x110>)
 801c8ee:	4a36      	ldr	r2, [pc, #216]	; (801c9c8 <low_level_init+0x11c>)
 801c8f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801c8f2:	4b32      	ldr	r3, [pc, #200]	; (801c9bc <low_level_init+0x110>)
 801c8f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801c8f8:	615a      	str	r2, [r3, #20]
//	default:
//		return;
//	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801c8fa:	4830      	ldr	r0, [pc, #192]	; (801c9bc <low_level_init+0x110>)
 801c8fc:	f7f9 fdca 	bl	8016494 <HAL_ETH_Init>
 801c900:	4603      	mov	r3, r0
 801c902:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801c904:	2238      	movs	r2, #56	; 0x38
 801c906:	2100      	movs	r1, #0
 801c908:	4830      	ldr	r0, [pc, #192]	; (801c9cc <low_level_init+0x120>)
 801c90a:	f005 fbab 	bl	8022064 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801c90e:	4b2f      	ldr	r3, [pc, #188]	; (801c9cc <low_level_init+0x120>)
 801c910:	2221      	movs	r2, #33	; 0x21
 801c912:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801c914:	4b2d      	ldr	r3, [pc, #180]	; (801c9cc <low_level_init+0x120>)
 801c916:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801c91a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801c91c:	4b2b      	ldr	r3, [pc, #172]	; (801c9cc <low_level_init+0x120>)
 801c91e:	2200      	movs	r2, #0
 801c920:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801c922:	482b      	ldr	r0, [pc, #172]	; (801c9d0 <low_level_init+0x124>)
 801c924:	f000 ff38 	bl	801d798 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	2206      	movs	r2, #6
 801c92c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801c930:	4b22      	ldr	r3, [pc, #136]	; (801c9bc <low_level_init+0x110>)
 801c932:	685b      	ldr	r3, [r3, #4]
 801c934:	781a      	ldrb	r2, [r3, #0]
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801c93c:	4b1f      	ldr	r3, [pc, #124]	; (801c9bc <low_level_init+0x110>)
 801c93e:	685b      	ldr	r3, [r3, #4]
 801c940:	785a      	ldrb	r2, [r3, #1]
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801c948:	4b1c      	ldr	r3, [pc, #112]	; (801c9bc <low_level_init+0x110>)
 801c94a:	685b      	ldr	r3, [r3, #4]
 801c94c:	789a      	ldrb	r2, [r3, #2]
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801c954:	4b19      	ldr	r3, [pc, #100]	; (801c9bc <low_level_init+0x110>)
 801c956:	685b      	ldr	r3, [r3, #4]
 801c958:	78da      	ldrb	r2, [r3, #3]
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801c960:	4b16      	ldr	r3, [pc, #88]	; (801c9bc <low_level_init+0x110>)
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	791a      	ldrb	r2, [r3, #4]
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801c96c:	4b13      	ldr	r3, [pc, #76]	; (801c9bc <low_level_init+0x110>)
 801c96e:	685b      	ldr	r3, [r3, #4]
 801c970:	795a      	ldrb	r2, [r3, #5]
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801c97e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c986:	f043 030a 	orr.w	r3, r3, #10
 801c98a:	b2da      	uxtb	r2, r3
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801c992:	4910      	ldr	r1, [pc, #64]	; (801c9d4 <low_level_init+0x128>)
 801c994:	4810      	ldr	r0, [pc, #64]	; (801c9d8 <low_level_init+0x12c>)
 801c996:	f7f8 fb8a 	bl	80150ae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801c99a:	480f      	ldr	r0, [pc, #60]	; (801c9d8 <low_level_init+0x12c>)
 801c99c:	f7f8 fbb9 	bl	8015112 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801c9a0:	7bfb      	ldrb	r3, [r7, #15]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d103      	bne.n	801c9ae <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801c9a6:	6878      	ldr	r0, [r7, #4]
 801c9a8:	f000 fa32 	bl	801ce10 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801c9ac:	e001      	b.n	801c9b2 <low_level_init+0x106>
    Error_Handler();
 801c9ae:	f7f6 ffb3 	bl	8013918 <Error_Handler>
}
 801c9b2:	bf00      	nop
 801c9b4:	3710      	adds	r7, #16
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	bd80      	pop	{r7, pc}
 801c9ba:	bf00      	nop
 801c9bc:	200106d0 	.word	0x200106d0
 801c9c0:	40028000 	.word	0x40028000
 801c9c4:	20000244 	.word	0x20000244
 801c9c8:	200001a4 	.word	0x200001a4
 801c9cc:	20010780 	.word	0x20010780
 801c9d0:	08028ac0 	.word	0x08028ac0
 801c9d4:	20000128 	.word	0x20000128
 801c9d8:	200107b8 	.word	0x200107b8

0801c9dc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b092      	sub	sp, #72	; 0x48
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801c9ee:	2300      	movs	r3, #0
 801c9f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801c9f4:	f107 030c 	add.w	r3, r7, #12
 801c9f8:	2230      	movs	r2, #48	; 0x30
 801c9fa:	2100      	movs	r1, #0
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	f005 fb31 	bl	8022064 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801ca02:	f107 030c 	add.w	r3, r7, #12
 801ca06:	2230      	movs	r2, #48	; 0x30
 801ca08:	2100      	movs	r1, #0
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	f005 fb2a 	bl	8022064 <memset>

  for(q = p; q != NULL; q = q->next)
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	643b      	str	r3, [r7, #64]	; 0x40
 801ca14:	e045      	b.n	801caa2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801ca16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca18:	2b03      	cmp	r3, #3
 801ca1a:	d902      	bls.n	801ca22 <low_level_output+0x46>
      return ERR_IF;
 801ca1c:	f06f 030b 	mvn.w	r3, #11
 801ca20:	e055      	b.n	801cace <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca24:	6859      	ldr	r1, [r3, #4]
 801ca26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca28:	4613      	mov	r3, r2
 801ca2a:	005b      	lsls	r3, r3, #1
 801ca2c:	4413      	add	r3, r2
 801ca2e:	009b      	lsls	r3, r3, #2
 801ca30:	3348      	adds	r3, #72	; 0x48
 801ca32:	443b      	add	r3, r7
 801ca34:	3b3c      	subs	r3, #60	; 0x3c
 801ca36:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801ca38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca3a:	895b      	ldrh	r3, [r3, #10]
 801ca3c:	4619      	mov	r1, r3
 801ca3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca40:	4613      	mov	r3, r2
 801ca42:	005b      	lsls	r3, r3, #1
 801ca44:	4413      	add	r3, r2
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	3348      	adds	r3, #72	; 0x48
 801ca4a:	443b      	add	r3, r7
 801ca4c:	3b38      	subs	r3, #56	; 0x38
 801ca4e:	6019      	str	r1, [r3, #0]

    if(i>0)
 801ca50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d011      	beq.n	801ca7a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801ca56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca58:	1e5a      	subs	r2, r3, #1
 801ca5a:	f107 000c 	add.w	r0, r7, #12
 801ca5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ca60:	460b      	mov	r3, r1
 801ca62:	005b      	lsls	r3, r3, #1
 801ca64:	440b      	add	r3, r1
 801ca66:	009b      	lsls	r3, r3, #2
 801ca68:	18c1      	adds	r1, r0, r3
 801ca6a:	4613      	mov	r3, r2
 801ca6c:	005b      	lsls	r3, r3, #1
 801ca6e:	4413      	add	r3, r2
 801ca70:	009b      	lsls	r3, r3, #2
 801ca72:	3348      	adds	r3, #72	; 0x48
 801ca74:	443b      	add	r3, r7
 801ca76:	3b34      	subs	r3, #52	; 0x34
 801ca78:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801ca7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d109      	bne.n	801ca96 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801ca82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca84:	4613      	mov	r3, r2
 801ca86:	005b      	lsls	r3, r3, #1
 801ca88:	4413      	add	r3, r2
 801ca8a:	009b      	lsls	r3, r3, #2
 801ca8c:	3348      	adds	r3, #72	; 0x48
 801ca8e:	443b      	add	r3, r7
 801ca90:	3b34      	subs	r3, #52	; 0x34
 801ca92:	2200      	movs	r2, #0
 801ca94:	601a      	str	r2, [r3, #0]
    }

    i++;
 801ca96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca98:	3301      	adds	r3, #1
 801ca9a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801ca9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	643b      	str	r3, [r7, #64]	; 0x40
 801caa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d1b6      	bne.n	801ca16 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	891b      	ldrh	r3, [r3, #8]
 801caac:	461a      	mov	r2, r3
 801caae:	4b0a      	ldr	r3, [pc, #40]	; (801cad8 <low_level_output+0xfc>)
 801cab0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801cab2:	4a09      	ldr	r2, [pc, #36]	; (801cad8 <low_level_output+0xfc>)
 801cab4:	f107 030c 	add.w	r3, r7, #12
 801cab8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801caba:	4a07      	ldr	r2, [pc, #28]	; (801cad8 <low_level_output+0xfc>)
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801cac0:	2214      	movs	r2, #20
 801cac2:	4905      	ldr	r1, [pc, #20]	; (801cad8 <low_level_output+0xfc>)
 801cac4:	4805      	ldr	r0, [pc, #20]	; (801cadc <low_level_output+0x100>)
 801cac6:	f7f9 fe19 	bl	80166fc <HAL_ETH_Transmit>

  return errval;
 801caca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801cace:	4618      	mov	r0, r3
 801cad0:	3748      	adds	r7, #72	; 0x48
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd80      	pop	{r7, pc}
 801cad6:	bf00      	nop
 801cad8:	20010780 	.word	0x20010780
 801cadc:	200106d0 	.word	0x200106d0

0801cae0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801cae0:	b580      	push	{r7, lr}
 801cae2:	b084      	sub	sp, #16
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801cae8:	2300      	movs	r3, #0
 801caea:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801caec:	4b07      	ldr	r3, [pc, #28]	; (801cb0c <low_level_input+0x2c>)
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d105      	bne.n	801cb00 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801caf4:	f107 030c 	add.w	r3, r7, #12
 801caf8:	4619      	mov	r1, r3
 801cafa:	4805      	ldr	r0, [pc, #20]	; (801cb10 <low_level_input+0x30>)
 801cafc:	f7f9 fe92 	bl	8016824 <HAL_ETH_ReadData>
  }

  return p;
 801cb00:	68fb      	ldr	r3, [r7, #12]
}
 801cb02:	4618      	mov	r0, r3
 801cb04:	3710      	adds	r7, #16
 801cb06:	46bd      	mov	sp, r7
 801cb08:	bd80      	pop	{r7, pc}
 801cb0a:	bf00      	nop
 801cb0c:	200106cc 	.word	0x200106cc
 801cb10:	200106d0 	.word	0x200106d0

0801cb14 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801cb14:	b580      	push	{r7, lr}
 801cb16:	b084      	sub	sp, #16
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801cb20:	6878      	ldr	r0, [r7, #4]
 801cb22:	f7ff ffdd 	bl	801cae0 <low_level_input>
 801cb26:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d00a      	beq.n	801cb44 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	691b      	ldr	r3, [r3, #16]
 801cb32:	6879      	ldr	r1, [r7, #4]
 801cb34:	68f8      	ldr	r0, [r7, #12]
 801cb36:	4798      	blx	r3
 801cb38:	4603      	mov	r3, r0
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d002      	beq.n	801cb44 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	f001 fe40 	bl	801e7c4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d1ea      	bne.n	801cb20 <ethernetif_input+0xc>
}
 801cb4a:	bf00      	nop
 801cb4c:	bf00      	nop
 801cb4e:	3710      	adds	r7, #16
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}

0801cb54 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d106      	bne.n	801cb70 <ethernetif_init+0x1c>
 801cb62:	4b0e      	ldr	r3, [pc, #56]	; (801cb9c <ethernetif_init+0x48>)
 801cb64:	f240 1287 	movw	r2, #391	; 0x187
 801cb68:	490d      	ldr	r1, [pc, #52]	; (801cba0 <ethernetif_init+0x4c>)
 801cb6a:	480e      	ldr	r0, [pc, #56]	; (801cba4 <ethernetif_init+0x50>)
 801cb6c:	f005 fb62 	bl	8022234 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	2273      	movs	r2, #115	; 0x73
 801cb74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	2274      	movs	r2, #116	; 0x74
 801cb7c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	4a09      	ldr	r2, [pc, #36]	; (801cba8 <ethernetif_init+0x54>)
 801cb84:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	4a08      	ldr	r2, [pc, #32]	; (801cbac <ethernetif_init+0x58>)
 801cb8a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801cb8c:	6878      	ldr	r0, [r7, #4]
 801cb8e:	f7ff fe8d 	bl	801c8ac <low_level_init>

  return ERR_OK;
 801cb92:	2300      	movs	r3, #0
}
 801cb94:	4618      	mov	r0, r3
 801cb96:	3708      	adds	r7, #8
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	bd80      	pop	{r7, pc}
 801cb9c:	08027018 	.word	0x08027018
 801cba0:	08027034 	.word	0x08027034
 801cba4:	08027044 	.word	0x08027044
 801cba8:	08020171 	.word	0x08020171
 801cbac:	0801c9dd 	.word	0x0801c9dd

0801cbb0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b084      	sub	sp, #16
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801cbbc:	68f9      	ldr	r1, [r7, #12]
 801cbbe:	4807      	ldr	r0, [pc, #28]	; (801cbdc <pbuf_free_custom+0x2c>)
 801cbc0:	f000 fecc 	bl	801d95c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801cbc4:	4b06      	ldr	r3, [pc, #24]	; (801cbe0 <pbuf_free_custom+0x30>)
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	2b01      	cmp	r3, #1
 801cbca:	d102      	bne.n	801cbd2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801cbcc:	4b04      	ldr	r3, [pc, #16]	; (801cbe0 <pbuf_free_custom+0x30>)
 801cbce:	2200      	movs	r2, #0
 801cbd0:	701a      	strb	r2, [r3, #0]
  }
}
 801cbd2:	bf00      	nop
 801cbd4:	3710      	adds	r7, #16
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	bd80      	pop	{r7, pc}
 801cbda:	bf00      	nop
 801cbdc:	08028ac0 	.word	0x08028ac0
 801cbe0:	200106cc 	.word	0x200106cc

0801cbe4 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801cbe8:	f7f8 fc22 	bl	8015430 <HAL_GetTick>
 801cbec:	4603      	mov	r3, r0
}
 801cbee:	4618      	mov	r0, r3
 801cbf0:	bd80      	pop	{r7, pc}
	...

0801cbf4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b08e      	sub	sp, #56	; 0x38
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cbfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc00:	2200      	movs	r2, #0
 801cc02:	601a      	str	r2, [r3, #0]
 801cc04:	605a      	str	r2, [r3, #4]
 801cc06:	609a      	str	r2, [r3, #8]
 801cc08:	60da      	str	r2, [r3, #12]
 801cc0a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	4a52      	ldr	r2, [pc, #328]	; (801cd5c <HAL_ETH_MspInit+0x168>)
 801cc12:	4293      	cmp	r3, r2
 801cc14:	f040 809e 	bne.w	801cd54 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801cc18:	4b51      	ldr	r3, [pc, #324]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc1c:	4a50      	ldr	r2, [pc, #320]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801cc22:	6313      	str	r3, [r2, #48]	; 0x30
 801cc24:	4b4e      	ldr	r3, [pc, #312]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cc2c:	623b      	str	r3, [r7, #32]
 801cc2e:	6a3b      	ldr	r3, [r7, #32]
 801cc30:	4b4b      	ldr	r3, [pc, #300]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc34:	4a4a      	ldr	r2, [pc, #296]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801cc3a:	6313      	str	r3, [r2, #48]	; 0x30
 801cc3c:	4b48      	ldr	r3, [pc, #288]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801cc44:	61fb      	str	r3, [r7, #28]
 801cc46:	69fb      	ldr	r3, [r7, #28]
 801cc48:	4b45      	ldr	r3, [pc, #276]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc4c:	4a44      	ldr	r2, [pc, #272]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cc52:	6313      	str	r3, [r2, #48]	; 0x30
 801cc54:	4b42      	ldr	r3, [pc, #264]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801cc5c:	61bb      	str	r3, [r7, #24]
 801cc5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801cc60:	4b3f      	ldr	r3, [pc, #252]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc64:	4a3e      	ldr	r2, [pc, #248]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc66:	f043 0304 	orr.w	r3, r3, #4
 801cc6a:	6313      	str	r3, [r2, #48]	; 0x30
 801cc6c:	4b3c      	ldr	r3, [pc, #240]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc70:	f003 0304 	and.w	r3, r3, #4
 801cc74:	617b      	str	r3, [r7, #20]
 801cc76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cc78:	4b39      	ldr	r3, [pc, #228]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc7c:	4a38      	ldr	r2, [pc, #224]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc7e:	f043 0301 	orr.w	r3, r3, #1
 801cc82:	6313      	str	r3, [r2, #48]	; 0x30
 801cc84:	4b36      	ldr	r3, [pc, #216]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc88:	f003 0301 	and.w	r3, r3, #1
 801cc8c:	613b      	str	r3, [r7, #16]
 801cc8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801cc90:	4b33      	ldr	r3, [pc, #204]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc94:	4a32      	ldr	r2, [pc, #200]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc96:	f043 0302 	orr.w	r3, r3, #2
 801cc9a:	6313      	str	r3, [r2, #48]	; 0x30
 801cc9c:	4b30      	ldr	r3, [pc, #192]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801cc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cca0:	f003 0302 	and.w	r3, r3, #2
 801cca4:	60fb      	str	r3, [r7, #12]
 801cca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801cca8:	4b2d      	ldr	r3, [pc, #180]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801ccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccac:	4a2c      	ldr	r2, [pc, #176]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801ccae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccb2:	6313      	str	r3, [r2, #48]	; 0x30
 801ccb4:	4b2a      	ldr	r3, [pc, #168]	; (801cd60 <HAL_ETH_MspInit+0x16c>)
 801ccb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ccbc:	60bb      	str	r3, [r7, #8]
 801ccbe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801ccc0:	2332      	movs	r3, #50	; 0x32
 801ccc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ccc4:	2302      	movs	r3, #2
 801ccc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cccc:	2303      	movs	r3, #3
 801ccce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801ccd0:	230b      	movs	r3, #11
 801ccd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ccd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ccd8:	4619      	mov	r1, r3
 801ccda:	4822      	ldr	r0, [pc, #136]	; (801cd64 <HAL_ETH_MspInit+0x170>)
 801ccdc:	f7fa fdc0 	bl	8017860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801cce0:	2386      	movs	r3, #134	; 0x86
 801cce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cce4:	2302      	movs	r3, #2
 801cce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cce8:	2300      	movs	r3, #0
 801ccea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ccec:	2303      	movs	r3, #3
 801ccee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801ccf0:	230b      	movs	r3, #11
 801ccf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ccf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ccf8:	4619      	mov	r1, r3
 801ccfa:	481b      	ldr	r0, [pc, #108]	; (801cd68 <HAL_ETH_MspInit+0x174>)
 801ccfc:	f7fa fdb0 	bl	8017860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801cd00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cd04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd06:	2302      	movs	r3, #2
 801cd08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd0e:	2303      	movs	r3, #3
 801cd10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cd12:	230b      	movs	r3, #11
 801cd14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801cd16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd1a:	4619      	mov	r1, r3
 801cd1c:	4813      	ldr	r0, [pc, #76]	; (801cd6c <HAL_ETH_MspInit+0x178>)
 801cd1e:	f7fa fd9f 	bl	8017860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801cd22:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801cd26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd28:	2302      	movs	r3, #2
 801cd2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd30:	2303      	movs	r3, #3
 801cd32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cd34:	230b      	movs	r3, #11
 801cd36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801cd38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd3c:	4619      	mov	r1, r3
 801cd3e:	480c      	ldr	r0, [pc, #48]	; (801cd70 <HAL_ETH_MspInit+0x17c>)
 801cd40:	f7fa fd8e 	bl	8017860 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801cd44:	2200      	movs	r2, #0
 801cd46:	2101      	movs	r1, #1
 801cd48:	203d      	movs	r0, #61	; 0x3d
 801cd4a:	f7f9 fa5e 	bl	801620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801cd4e:	203d      	movs	r0, #61	; 0x3d
 801cd50:	f7f9 fa77 	bl	8016242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801cd54:	bf00      	nop
 801cd56:	3738      	adds	r7, #56	; 0x38
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	bd80      	pop	{r7, pc}
 801cd5c:	40028000 	.word	0x40028000
 801cd60:	40023800 	.word	0x40023800
 801cd64:	40020800 	.word	0x40020800
 801cd68:	40020000 	.word	0x40020000
 801cd6c:	40020400 	.word	0x40020400
 801cd70:	40021800 	.word	0x40021800

0801cd74 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801cd78:	4802      	ldr	r0, [pc, #8]	; (801cd84 <ETH_PHY_IO_Init+0x10>)
 801cd7a:	f7fa f917 	bl	8016fac <HAL_ETH_SetMDIOClockRange>

  return 0;
 801cd7e:	2300      	movs	r3, #0
}
 801cd80:	4618      	mov	r0, r3
 801cd82:	bd80      	pop	{r7, pc}
 801cd84:	200106d0 	.word	0x200106d0

0801cd88 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801cd88:	b480      	push	{r7}
 801cd8a:	af00      	add	r7, sp, #0
  return 0;
 801cd8c:	2300      	movs	r3, #0
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	46bd      	mov	sp, r7
 801cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd96:	4770      	bx	lr

0801cd98 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b084      	sub	sp, #16
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	60f8      	str	r0, [r7, #12]
 801cda0:	60b9      	str	r1, [r7, #8]
 801cda2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	68ba      	ldr	r2, [r7, #8]
 801cda8:	68f9      	ldr	r1, [r7, #12]
 801cdaa:	4807      	ldr	r0, [pc, #28]	; (801cdc8 <ETH_PHY_IO_ReadReg+0x30>)
 801cdac:	f7f9 ff66 	bl	8016c7c <HAL_ETH_ReadPHYRegister>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d002      	beq.n	801cdbc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801cdb6:	f04f 33ff 	mov.w	r3, #4294967295
 801cdba:	e000      	b.n	801cdbe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801cdbc:	2300      	movs	r3, #0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3710      	adds	r7, #16
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	bd80      	pop	{r7, pc}
 801cdc6:	bf00      	nop
 801cdc8:	200106d0 	.word	0x200106d0

0801cdcc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b084      	sub	sp, #16
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	60f8      	str	r0, [r7, #12]
 801cdd4:	60b9      	str	r1, [r7, #8]
 801cdd6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	68ba      	ldr	r2, [r7, #8]
 801cddc:	68f9      	ldr	r1, [r7, #12]
 801cdde:	4807      	ldr	r0, [pc, #28]	; (801cdfc <ETH_PHY_IO_WriteReg+0x30>)
 801cde0:	f7f9 ff97 	bl	8016d12 <HAL_ETH_WritePHYRegister>
 801cde4:	4603      	mov	r3, r0
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d002      	beq.n	801cdf0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801cdea:	f04f 33ff 	mov.w	r3, #4294967295
 801cdee:	e000      	b.n	801cdf2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801cdf0:	2300      	movs	r3, #0
}
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	3710      	adds	r7, #16
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	bd80      	pop	{r7, pc}
 801cdfa:	bf00      	nop
 801cdfc:	200106d0 	.word	0x200106d0

0801ce00 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801ce04:	f7f8 fb14 	bl	8015430 <HAL_GetTick>
 801ce08:	4603      	mov	r3, r0
}
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	bd80      	pop	{r7, pc}
	...

0801ce10 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b0a0      	sub	sp, #128	; 0x80
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801ce18:	f107 030c 	add.w	r3, r7, #12
 801ce1c:	2264      	movs	r2, #100	; 0x64
 801ce1e:	2100      	movs	r1, #0
 801ce20:	4618      	mov	r0, r3
 801ce22:	f005 f91f 	bl	8022064 <memset>
  int32_t PHYLinkState = 0;
 801ce26:	2300      	movs	r3, #0
 801ce28:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ce2e:	2300      	movs	r3, #0
 801ce30:	67bb      	str	r3, [r7, #120]	; 0x78
 801ce32:	2300      	movs	r3, #0
 801ce34:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801ce36:	483a      	ldr	r0, [pc, #232]	; (801cf20 <ethernet_link_check_state+0x110>)
 801ce38:	f7f8 fa13 	bl	8015262 <DP83848_GetLinkState>
 801ce3c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce44:	089b      	lsrs	r3, r3, #2
 801ce46:	f003 0301 	and.w	r3, r3, #1
 801ce4a:	b2db      	uxtb	r3, r3
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d00c      	beq.n	801ce6a <ethernet_link_check_state+0x5a>
 801ce50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	dc09      	bgt.n	801ce6a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801ce56:	4833      	ldr	r0, [pc, #204]	; (801cf24 <ethernet_link_check_state+0x114>)
 801ce58:	f7f9 fbf7 	bl	801664a <HAL_ETH_Stop>
    netif_set_down(netif);
 801ce5c:	6878      	ldr	r0, [r7, #4]
 801ce5e:	f001 f84b 	bl	801def8 <netif_set_down>
    netif_set_link_down(netif);
 801ce62:	6878      	ldr	r0, [r7, #4]
 801ce64:	f001 f8ae 	bl	801dfc4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801ce68:	e055      	b.n	801cf16 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce70:	f003 0304 	and.w	r3, r3, #4
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d14e      	bne.n	801cf16 <ethernet_link_check_state+0x106>
 801ce78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce7a:	2b01      	cmp	r3, #1
 801ce7c:	dd4b      	ble.n	801cf16 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801ce7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce80:	3b02      	subs	r3, #2
 801ce82:	2b03      	cmp	r3, #3
 801ce84:	d82a      	bhi.n	801cedc <ethernet_link_check_state+0xcc>
 801ce86:	a201      	add	r2, pc, #4	; (adr r2, 801ce8c <ethernet_link_check_state+0x7c>)
 801ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce8c:	0801ce9d 	.word	0x0801ce9d
 801ce90:	0801ceaf 	.word	0x0801ceaf
 801ce94:	0801cebf 	.word	0x0801cebf
 801ce98:	0801cecf 	.word	0x0801cecf
      duplex = ETH_FULLDUPLEX_MODE;
 801ce9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cea0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801cea2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801cea6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cea8:	2301      	movs	r3, #1
 801ceaa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ceac:	e017      	b.n	801cede <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801ceae:	2300      	movs	r3, #0
 801ceb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801ceb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ceb6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ceb8:	2301      	movs	r3, #1
 801ceba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cebc:	e00f      	b.n	801cede <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801cebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cec2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801cec4:	2300      	movs	r3, #0
 801cec6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cec8:	2301      	movs	r3, #1
 801ceca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cecc:	e007      	b.n	801cede <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801cece:	2300      	movs	r3, #0
 801ced0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801ced2:	2300      	movs	r3, #0
 801ced4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ced6:	2301      	movs	r3, #1
 801ced8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ceda:	e000      	b.n	801cede <ethernet_link_check_state+0xce>
      break;
 801cedc:	bf00      	nop
    if(linkchanged)
 801cede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d018      	beq.n	801cf16 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801cee4:	f107 030c 	add.w	r3, r7, #12
 801cee8:	4619      	mov	r1, r3
 801ceea:	480e      	ldr	r0, [pc, #56]	; (801cf24 <ethernet_link_check_state+0x114>)
 801ceec:	f7f9 ff5a 	bl	8016da4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801cef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cef2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801cef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cef6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801cef8:	f107 030c 	add.w	r3, r7, #12
 801cefc:	4619      	mov	r1, r3
 801cefe:	4809      	ldr	r0, [pc, #36]	; (801cf24 <ethernet_link_check_state+0x114>)
 801cf00:	f7fa f83a 	bl	8016f78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801cf04:	4807      	ldr	r0, [pc, #28]	; (801cf24 <ethernet_link_check_state+0x114>)
 801cf06:	f7f9 fb41 	bl	801658c <HAL_ETH_Start>
      netif_set_up(netif);
 801cf0a:	6878      	ldr	r0, [r7, #4]
 801cf0c:	f000 ff88 	bl	801de20 <netif_set_up>
      netif_set_link_up(netif);
 801cf10:	6878      	ldr	r0, [r7, #4]
 801cf12:	f001 f823 	bl	801df5c <netif_set_link_up>
}
 801cf16:	bf00      	nop
 801cf18:	3780      	adds	r7, #128	; 0x80
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	bd80      	pop	{r7, pc}
 801cf1e:	bf00      	nop
 801cf20:	200107b8 	.word	0x200107b8
 801cf24:	200106d0 	.word	0x200106d0

0801cf28 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b086      	sub	sp, #24
 801cf2c:	af02      	add	r7, sp, #8
 801cf2e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801cf30:	4812      	ldr	r0, [pc, #72]	; (801cf7c <HAL_ETH_RxAllocateCallback+0x54>)
 801cf32:	f000 fca5 	bl	801d880 <memp_malloc_pool>
 801cf36:	60f8      	str	r0, [r7, #12]
	if (p)
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d014      	beq.n	801cf68 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	f103 0214 	add.w	r2, r3, #20
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	4a0d      	ldr	r2, [pc, #52]	; (801cf80 <HAL_ETH_RxAllocateCallback+0x58>)
 801cf4c:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801cf56:	9201      	str	r2, [sp, #4]
 801cf58:	9300      	str	r3, [sp, #0]
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	2241      	movs	r2, #65	; 0x41
 801cf5e:	2100      	movs	r1, #0
 801cf60:	2000      	movs	r0, #0
 801cf62:	f001 fa75 	bl	801e450 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801cf66:	e005      	b.n	801cf74 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801cf68:	4b06      	ldr	r3, [pc, #24]	; (801cf84 <HAL_ETH_RxAllocateCallback+0x5c>)
 801cf6a:	2201      	movs	r2, #1
 801cf6c:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	2200      	movs	r2, #0
 801cf72:	601a      	str	r2, [r3, #0]
}
 801cf74:	bf00      	nop
 801cf76:	3710      	adds	r7, #16
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}
 801cf7c:	08028ac0 	.word	0x08028ac0
 801cf80:	0801cbb1 	.word	0x0801cbb1
 801cf84:	200106cc 	.word	0x200106cc

0801cf88 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b088      	sub	sp, #32
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	60f8      	str	r0, [r7, #12]
 801cf90:	60b9      	str	r1, [r7, #8]
 801cf92:	607a      	str	r2, [r7, #4]
 801cf94:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801cf9a:	68bb      	ldr	r3, [r7, #8]
 801cf9c:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	3b14      	subs	r3, #20
 801cfa6:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801cfa8:	69fb      	ldr	r3, [r7, #28]
 801cfaa:	2200      	movs	r2, #0
 801cfac:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801cfae:	69fb      	ldr	r3, [r7, #28]
 801cfb0:	2200      	movs	r2, #0
 801cfb2:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801cfb4:	69fb      	ldr	r3, [r7, #28]
 801cfb6:	887a      	ldrh	r2, [r7, #2]
 801cfb8:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801cfba:	69bb      	ldr	r3, [r7, #24]
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d103      	bne.n	801cfca <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801cfc2:	69bb      	ldr	r3, [r7, #24]
 801cfc4:	69fa      	ldr	r2, [r7, #28]
 801cfc6:	601a      	str	r2, [r3, #0]
 801cfc8:	e003      	b.n	801cfd2 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801cfca:	697b      	ldr	r3, [r7, #20]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	69fa      	ldr	r2, [r7, #28]
 801cfd0:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	69fa      	ldr	r2, [r7, #28]
 801cfd6:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801cfd8:	69bb      	ldr	r3, [r7, #24]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	61fb      	str	r3, [r7, #28]
 801cfde:	e009      	b.n	801cff4 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801cfe0:	69fb      	ldr	r3, [r7, #28]
 801cfe2:	891a      	ldrh	r2, [r3, #8]
 801cfe4:	887b      	ldrh	r3, [r7, #2]
 801cfe6:	4413      	add	r3, r2
 801cfe8:	b29a      	uxth	r2, r3
 801cfea:	69fb      	ldr	r3, [r7, #28]
 801cfec:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801cfee:	69fb      	ldr	r3, [r7, #28]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	61fb      	str	r3, [r7, #28]
 801cff4:	69fb      	ldr	r3, [r7, #28]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d1f2      	bne.n	801cfe0 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801cffa:	887b      	ldrh	r3, [r7, #2]
 801cffc:	4619      	mov	r1, r3
 801cffe:	6878      	ldr	r0, [r7, #4]
 801d000:	f7ff fc28 	bl	801c854 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d004:	bf00      	nop
 801d006:	3720      	adds	r7, #32
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd80      	pop	{r7, pc}

0801d00c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d00c:	b480      	push	{r7}
 801d00e:	b083      	sub	sp, #12
 801d010:	af00      	add	r7, sp, #0
 801d012:	4603      	mov	r3, r0
 801d014:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d016:	88fb      	ldrh	r3, [r7, #6]
 801d018:	021b      	lsls	r3, r3, #8
 801d01a:	b21a      	sxth	r2, r3
 801d01c:	88fb      	ldrh	r3, [r7, #6]
 801d01e:	0a1b      	lsrs	r3, r3, #8
 801d020:	b29b      	uxth	r3, r3
 801d022:	b21b      	sxth	r3, r3
 801d024:	4313      	orrs	r3, r2
 801d026:	b21b      	sxth	r3, r3
 801d028:	b29b      	uxth	r3, r3
}
 801d02a:	4618      	mov	r0, r3
 801d02c:	370c      	adds	r7, #12
 801d02e:	46bd      	mov	sp, r7
 801d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d034:	4770      	bx	lr

0801d036 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d036:	b580      	push	{r7, lr}
 801d038:	b082      	sub	sp, #8
 801d03a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d03c:	2300      	movs	r3, #0
 801d03e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d040:	f000 f8d2 	bl	801d1e8 <mem_init>
  memp_init();
 801d044:	f000 fbd8 	bl	801d7f8 <memp_init>
  pbuf_init();
  netif_init();
 801d048:	f000 fcfc 	bl	801da44 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d04c:	f001 ff9a 	bl	801ef84 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d050:	f001 ff16 	bl	801ee80 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d054:	bf00      	nop
 801d056:	3708      	adds	r7, #8
 801d058:	46bd      	mov	sp, r7
 801d05a:	bd80      	pop	{r7, pc}

0801d05c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d05c:	b480      	push	{r7}
 801d05e:	b083      	sub	sp, #12
 801d060:	af00      	add	r7, sp, #0
 801d062:	4603      	mov	r3, r0
 801d064:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d066:	4b05      	ldr	r3, [pc, #20]	; (801d07c <ptr_to_mem+0x20>)
 801d068:	681a      	ldr	r2, [r3, #0]
 801d06a:	88fb      	ldrh	r3, [r7, #6]
 801d06c:	4413      	add	r3, r2
}
 801d06e:	4618      	mov	r0, r3
 801d070:	370c      	adds	r7, #12
 801d072:	46bd      	mov	sp, r7
 801d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d078:	4770      	bx	lr
 801d07a:	bf00      	nop
 801d07c:	20010e44 	.word	0x20010e44

0801d080 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d080:	b480      	push	{r7}
 801d082:	b083      	sub	sp, #12
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d088:	4b05      	ldr	r3, [pc, #20]	; (801d0a0 <mem_to_ptr+0x20>)
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	687a      	ldr	r2, [r7, #4]
 801d08e:	1ad3      	subs	r3, r2, r3
 801d090:	b29b      	uxth	r3, r3
}
 801d092:	4618      	mov	r0, r3
 801d094:	370c      	adds	r7, #12
 801d096:	46bd      	mov	sp, r7
 801d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d09c:	4770      	bx	lr
 801d09e:	bf00      	nop
 801d0a0:	20010e44 	.word	0x20010e44

0801d0a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d0a4:	b590      	push	{r4, r7, lr}
 801d0a6:	b085      	sub	sp, #20
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d0ac:	4b45      	ldr	r3, [pc, #276]	; (801d1c4 <plug_holes+0x120>)
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	687a      	ldr	r2, [r7, #4]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d206      	bcs.n	801d0c4 <plug_holes+0x20>
 801d0b6:	4b44      	ldr	r3, [pc, #272]	; (801d1c8 <plug_holes+0x124>)
 801d0b8:	f240 12df 	movw	r2, #479	; 0x1df
 801d0bc:	4943      	ldr	r1, [pc, #268]	; (801d1cc <plug_holes+0x128>)
 801d0be:	4844      	ldr	r0, [pc, #272]	; (801d1d0 <plug_holes+0x12c>)
 801d0c0:	f005 f8b8 	bl	8022234 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d0c4:	4b43      	ldr	r3, [pc, #268]	; (801d1d4 <plug_holes+0x130>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	687a      	ldr	r2, [r7, #4]
 801d0ca:	429a      	cmp	r2, r3
 801d0cc:	d306      	bcc.n	801d0dc <plug_holes+0x38>
 801d0ce:	4b3e      	ldr	r3, [pc, #248]	; (801d1c8 <plug_holes+0x124>)
 801d0d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d0d4:	4940      	ldr	r1, [pc, #256]	; (801d1d8 <plug_holes+0x134>)
 801d0d6:	483e      	ldr	r0, [pc, #248]	; (801d1d0 <plug_holes+0x12c>)
 801d0d8:	f005 f8ac 	bl	8022234 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	791b      	ldrb	r3, [r3, #4]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d006      	beq.n	801d0f2 <plug_holes+0x4e>
 801d0e4:	4b38      	ldr	r3, [pc, #224]	; (801d1c8 <plug_holes+0x124>)
 801d0e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d0ea:	493c      	ldr	r1, [pc, #240]	; (801d1dc <plug_holes+0x138>)
 801d0ec:	4838      	ldr	r0, [pc, #224]	; (801d1d0 <plug_holes+0x12c>)
 801d0ee:	f005 f8a1 	bl	8022234 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	881b      	ldrh	r3, [r3, #0]
 801d0f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d0fa:	d906      	bls.n	801d10a <plug_holes+0x66>
 801d0fc:	4b32      	ldr	r3, [pc, #200]	; (801d1c8 <plug_holes+0x124>)
 801d0fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d102:	4937      	ldr	r1, [pc, #220]	; (801d1e0 <plug_holes+0x13c>)
 801d104:	4832      	ldr	r0, [pc, #200]	; (801d1d0 <plug_holes+0x12c>)
 801d106:	f005 f895 	bl	8022234 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	881b      	ldrh	r3, [r3, #0]
 801d10e:	4618      	mov	r0, r3
 801d110:	f7ff ffa4 	bl	801d05c <ptr_to_mem>
 801d114:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d116:	687a      	ldr	r2, [r7, #4]
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	429a      	cmp	r2, r3
 801d11c:	d024      	beq.n	801d168 <plug_holes+0xc4>
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	791b      	ldrb	r3, [r3, #4]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d120      	bne.n	801d168 <plug_holes+0xc4>
 801d126:	4b2b      	ldr	r3, [pc, #172]	; (801d1d4 <plug_holes+0x130>)
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	68fa      	ldr	r2, [r7, #12]
 801d12c:	429a      	cmp	r2, r3
 801d12e:	d01b      	beq.n	801d168 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d130:	4b2c      	ldr	r3, [pc, #176]	; (801d1e4 <plug_holes+0x140>)
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	68fa      	ldr	r2, [r7, #12]
 801d136:	429a      	cmp	r2, r3
 801d138:	d102      	bne.n	801d140 <plug_holes+0x9c>
      lfree = mem;
 801d13a:	4a2a      	ldr	r2, [pc, #168]	; (801d1e4 <plug_holes+0x140>)
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	881a      	ldrh	r2, [r3, #0]
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	881b      	ldrh	r3, [r3, #0]
 801d14c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d150:	d00a      	beq.n	801d168 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	881b      	ldrh	r3, [r3, #0]
 801d156:	4618      	mov	r0, r3
 801d158:	f7ff ff80 	bl	801d05c <ptr_to_mem>
 801d15c:	4604      	mov	r4, r0
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f7ff ff8e 	bl	801d080 <mem_to_ptr>
 801d164:	4603      	mov	r3, r0
 801d166:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	885b      	ldrh	r3, [r3, #2]
 801d16c:	4618      	mov	r0, r3
 801d16e:	f7ff ff75 	bl	801d05c <ptr_to_mem>
 801d172:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d174:	68ba      	ldr	r2, [r7, #8]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	429a      	cmp	r2, r3
 801d17a:	d01f      	beq.n	801d1bc <plug_holes+0x118>
 801d17c:	68bb      	ldr	r3, [r7, #8]
 801d17e:	791b      	ldrb	r3, [r3, #4]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d11b      	bne.n	801d1bc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d184:	4b17      	ldr	r3, [pc, #92]	; (801d1e4 <plug_holes+0x140>)
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	687a      	ldr	r2, [r7, #4]
 801d18a:	429a      	cmp	r2, r3
 801d18c:	d102      	bne.n	801d194 <plug_holes+0xf0>
      lfree = pmem;
 801d18e:	4a15      	ldr	r2, [pc, #84]	; (801d1e4 <plug_holes+0x140>)
 801d190:	68bb      	ldr	r3, [r7, #8]
 801d192:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	881a      	ldrh	r2, [r3, #0]
 801d198:	68bb      	ldr	r3, [r7, #8]
 801d19a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	881b      	ldrh	r3, [r3, #0]
 801d1a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d1a4:	d00a      	beq.n	801d1bc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	881b      	ldrh	r3, [r3, #0]
 801d1aa:	4618      	mov	r0, r3
 801d1ac:	f7ff ff56 	bl	801d05c <ptr_to_mem>
 801d1b0:	4604      	mov	r4, r0
 801d1b2:	68b8      	ldr	r0, [r7, #8]
 801d1b4:	f7ff ff64 	bl	801d080 <mem_to_ptr>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d1bc:	bf00      	nop
 801d1be:	3714      	adds	r7, #20
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bd90      	pop	{r4, r7, pc}
 801d1c4:	20010e44 	.word	0x20010e44
 801d1c8:	0802706c 	.word	0x0802706c
 801d1cc:	0802709c 	.word	0x0802709c
 801d1d0:	080270b4 	.word	0x080270b4
 801d1d4:	20010e48 	.word	0x20010e48
 801d1d8:	080270dc 	.word	0x080270dc
 801d1dc:	080270f8 	.word	0x080270f8
 801d1e0:	08027114 	.word	0x08027114
 801d1e4:	20010e4c 	.word	0x20010e4c

0801d1e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b082      	sub	sp, #8
 801d1ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d1ee:	4b18      	ldr	r3, [pc, #96]	; (801d250 <mem_init+0x68>)
 801d1f0:	3303      	adds	r3, #3
 801d1f2:	f023 0303 	bic.w	r3, r3, #3
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	4b16      	ldr	r3, [pc, #88]	; (801d254 <mem_init+0x6c>)
 801d1fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d1fc:	4b15      	ldr	r3, [pc, #84]	; (801d254 <mem_init+0x6c>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d208:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	2200      	movs	r2, #0
 801d20e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	2200      	movs	r2, #0
 801d214:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d216:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d21a:	f7ff ff1f 	bl	801d05c <ptr_to_mem>
 801d21e:	4603      	mov	r3, r0
 801d220:	4a0d      	ldr	r2, [pc, #52]	; (801d258 <mem_init+0x70>)
 801d222:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d224:	4b0c      	ldr	r3, [pc, #48]	; (801d258 <mem_init+0x70>)
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	2201      	movs	r2, #1
 801d22a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d22c:	4b0a      	ldr	r3, [pc, #40]	; (801d258 <mem_init+0x70>)
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d234:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d236:	4b08      	ldr	r3, [pc, #32]	; (801d258 <mem_init+0x70>)
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d23e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d240:	4b04      	ldr	r3, [pc, #16]	; (801d254 <mem_init+0x6c>)
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	4a05      	ldr	r2, [pc, #20]	; (801d25c <mem_init+0x74>)
 801d246:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d248:	bf00      	nop
 801d24a:	3708      	adds	r7, #8
 801d24c:	46bd      	mov	sp, r7
 801d24e:	bd80      	pop	{r7, pc}
 801d250:	200107f0 	.word	0x200107f0
 801d254:	20010e44 	.word	0x20010e44
 801d258:	20010e48 	.word	0x20010e48
 801d25c:	20010e4c 	.word	0x20010e4c

0801d260 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b086      	sub	sp, #24
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	f7ff ff09 	bl	801d080 <mem_to_ptr>
 801d26e:	4603      	mov	r3, r0
 801d270:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	881b      	ldrh	r3, [r3, #0]
 801d276:	4618      	mov	r0, r3
 801d278:	f7ff fef0 	bl	801d05c <ptr_to_mem>
 801d27c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	885b      	ldrh	r3, [r3, #2]
 801d282:	4618      	mov	r0, r3
 801d284:	f7ff feea 	bl	801d05c <ptr_to_mem>
 801d288:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	881b      	ldrh	r3, [r3, #0]
 801d28e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d292:	d818      	bhi.n	801d2c6 <mem_link_valid+0x66>
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	885b      	ldrh	r3, [r3, #2]
 801d298:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d29c:	d813      	bhi.n	801d2c6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d2a2:	8afa      	ldrh	r2, [r7, #22]
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	d004      	beq.n	801d2b2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	881b      	ldrh	r3, [r3, #0]
 801d2ac:	8afa      	ldrh	r2, [r7, #22]
 801d2ae:	429a      	cmp	r2, r3
 801d2b0:	d109      	bne.n	801d2c6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d2b2:	4b08      	ldr	r3, [pc, #32]	; (801d2d4 <mem_link_valid+0x74>)
 801d2b4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d2b6:	693a      	ldr	r2, [r7, #16]
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	d006      	beq.n	801d2ca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d2bc:	693b      	ldr	r3, [r7, #16]
 801d2be:	885b      	ldrh	r3, [r3, #2]
 801d2c0:	8afa      	ldrh	r2, [r7, #22]
 801d2c2:	429a      	cmp	r2, r3
 801d2c4:	d001      	beq.n	801d2ca <mem_link_valid+0x6a>
    return 0;
 801d2c6:	2300      	movs	r3, #0
 801d2c8:	e000      	b.n	801d2cc <mem_link_valid+0x6c>
  }
  return 1;
 801d2ca:	2301      	movs	r3, #1
}
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	3718      	adds	r7, #24
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bd80      	pop	{r7, pc}
 801d2d4:	20010e48 	.word	0x20010e48

0801d2d8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801d2d8:	b580      	push	{r7, lr}
 801d2da:	b084      	sub	sp, #16
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d04c      	beq.n	801d380 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	f003 0303 	and.w	r3, r3, #3
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d007      	beq.n	801d300 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801d2f0:	4b25      	ldr	r3, [pc, #148]	; (801d388 <mem_free+0xb0>)
 801d2f2:	f240 2273 	movw	r2, #627	; 0x273
 801d2f6:	4925      	ldr	r1, [pc, #148]	; (801d38c <mem_free+0xb4>)
 801d2f8:	4825      	ldr	r0, [pc, #148]	; (801d390 <mem_free+0xb8>)
 801d2fa:	f004 ff9b 	bl	8022234 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d2fe:	e040      	b.n	801d382 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	3b08      	subs	r3, #8
 801d304:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801d306:	4b23      	ldr	r3, [pc, #140]	; (801d394 <mem_free+0xbc>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	68fa      	ldr	r2, [r7, #12]
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d306      	bcc.n	801d31e <mem_free+0x46>
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	f103 020c 	add.w	r2, r3, #12
 801d316:	4b20      	ldr	r3, [pc, #128]	; (801d398 <mem_free+0xc0>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	429a      	cmp	r2, r3
 801d31c:	d907      	bls.n	801d32e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801d31e:	4b1a      	ldr	r3, [pc, #104]	; (801d388 <mem_free+0xb0>)
 801d320:	f240 227f 	movw	r2, #639	; 0x27f
 801d324:	491d      	ldr	r1, [pc, #116]	; (801d39c <mem_free+0xc4>)
 801d326:	481a      	ldr	r0, [pc, #104]	; (801d390 <mem_free+0xb8>)
 801d328:	f004 ff84 	bl	8022234 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d32c:	e029      	b.n	801d382 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	791b      	ldrb	r3, [r3, #4]
 801d332:	2b00      	cmp	r3, #0
 801d334:	d107      	bne.n	801d346 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801d336:	4b14      	ldr	r3, [pc, #80]	; (801d388 <mem_free+0xb0>)
 801d338:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801d33c:	4918      	ldr	r1, [pc, #96]	; (801d3a0 <mem_free+0xc8>)
 801d33e:	4814      	ldr	r0, [pc, #80]	; (801d390 <mem_free+0xb8>)
 801d340:	f004 ff78 	bl	8022234 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d344:	e01d      	b.n	801d382 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801d346:	68f8      	ldr	r0, [r7, #12]
 801d348:	f7ff ff8a 	bl	801d260 <mem_link_valid>
 801d34c:	4603      	mov	r3, r0
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d107      	bne.n	801d362 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801d352:	4b0d      	ldr	r3, [pc, #52]	; (801d388 <mem_free+0xb0>)
 801d354:	f240 2295 	movw	r2, #661	; 0x295
 801d358:	4912      	ldr	r1, [pc, #72]	; (801d3a4 <mem_free+0xcc>)
 801d35a:	480d      	ldr	r0, [pc, #52]	; (801d390 <mem_free+0xb8>)
 801d35c:	f004 ff6a 	bl	8022234 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d360:	e00f      	b.n	801d382 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	2200      	movs	r2, #0
 801d366:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801d368:	4b0f      	ldr	r3, [pc, #60]	; (801d3a8 <mem_free+0xd0>)
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	68fa      	ldr	r2, [r7, #12]
 801d36e:	429a      	cmp	r2, r3
 801d370:	d202      	bcs.n	801d378 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801d372:	4a0d      	ldr	r2, [pc, #52]	; (801d3a8 <mem_free+0xd0>)
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801d378:	68f8      	ldr	r0, [r7, #12]
 801d37a:	f7ff fe93 	bl	801d0a4 <plug_holes>
 801d37e:	e000      	b.n	801d382 <mem_free+0xaa>
    return;
 801d380:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801d382:	3710      	adds	r7, #16
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}
 801d388:	0802706c 	.word	0x0802706c
 801d38c:	08027140 	.word	0x08027140
 801d390:	080270b4 	.word	0x080270b4
 801d394:	20010e44 	.word	0x20010e44
 801d398:	20010e48 	.word	0x20010e48
 801d39c:	08027164 	.word	0x08027164
 801d3a0:	08027180 	.word	0x08027180
 801d3a4:	080271a8 	.word	0x080271a8
 801d3a8:	20010e4c 	.word	0x20010e4c

0801d3ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b088      	sub	sp, #32
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
 801d3b4:	460b      	mov	r3, r1
 801d3b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801d3b8:	887b      	ldrh	r3, [r7, #2]
 801d3ba:	3303      	adds	r3, #3
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	f023 0303 	bic.w	r3, r3, #3
 801d3c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801d3c4:	8bfb      	ldrh	r3, [r7, #30]
 801d3c6:	2b0b      	cmp	r3, #11
 801d3c8:	d801      	bhi.n	801d3ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801d3ca:	230c      	movs	r3, #12
 801d3cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801d3ce:	8bfb      	ldrh	r3, [r7, #30]
 801d3d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d3d4:	d803      	bhi.n	801d3de <mem_trim+0x32>
 801d3d6:	8bfa      	ldrh	r2, [r7, #30]
 801d3d8:	887b      	ldrh	r3, [r7, #2]
 801d3da:	429a      	cmp	r2, r3
 801d3dc:	d201      	bcs.n	801d3e2 <mem_trim+0x36>
    return NULL;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	e0cc      	b.n	801d57c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801d3e2:	4b68      	ldr	r3, [pc, #416]	; (801d584 <mem_trim+0x1d8>)
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	687a      	ldr	r2, [r7, #4]
 801d3e8:	429a      	cmp	r2, r3
 801d3ea:	d304      	bcc.n	801d3f6 <mem_trim+0x4a>
 801d3ec:	4b66      	ldr	r3, [pc, #408]	; (801d588 <mem_trim+0x1dc>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	687a      	ldr	r2, [r7, #4]
 801d3f2:	429a      	cmp	r2, r3
 801d3f4:	d306      	bcc.n	801d404 <mem_trim+0x58>
 801d3f6:	4b65      	ldr	r3, [pc, #404]	; (801d58c <mem_trim+0x1e0>)
 801d3f8:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d3fc:	4964      	ldr	r1, [pc, #400]	; (801d590 <mem_trim+0x1e4>)
 801d3fe:	4865      	ldr	r0, [pc, #404]	; (801d594 <mem_trim+0x1e8>)
 801d400:	f004 ff18 	bl	8022234 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801d404:	4b5f      	ldr	r3, [pc, #380]	; (801d584 <mem_trim+0x1d8>)
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	687a      	ldr	r2, [r7, #4]
 801d40a:	429a      	cmp	r2, r3
 801d40c:	d304      	bcc.n	801d418 <mem_trim+0x6c>
 801d40e:	4b5e      	ldr	r3, [pc, #376]	; (801d588 <mem_trim+0x1dc>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	687a      	ldr	r2, [r7, #4]
 801d414:	429a      	cmp	r2, r3
 801d416:	d301      	bcc.n	801d41c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	e0af      	b.n	801d57c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	3b08      	subs	r3, #8
 801d420:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801d422:	69b8      	ldr	r0, [r7, #24]
 801d424:	f7ff fe2c 	bl	801d080 <mem_to_ptr>
 801d428:	4603      	mov	r3, r0
 801d42a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801d42c:	69bb      	ldr	r3, [r7, #24]
 801d42e:	881a      	ldrh	r2, [r3, #0]
 801d430:	8afb      	ldrh	r3, [r7, #22]
 801d432:	1ad3      	subs	r3, r2, r3
 801d434:	b29b      	uxth	r3, r3
 801d436:	3b08      	subs	r3, #8
 801d438:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801d43a:	8bfa      	ldrh	r2, [r7, #30]
 801d43c:	8abb      	ldrh	r3, [r7, #20]
 801d43e:	429a      	cmp	r2, r3
 801d440:	d906      	bls.n	801d450 <mem_trim+0xa4>
 801d442:	4b52      	ldr	r3, [pc, #328]	; (801d58c <mem_trim+0x1e0>)
 801d444:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801d448:	4953      	ldr	r1, [pc, #332]	; (801d598 <mem_trim+0x1ec>)
 801d44a:	4852      	ldr	r0, [pc, #328]	; (801d594 <mem_trim+0x1e8>)
 801d44c:	f004 fef2 	bl	8022234 <iprintf>
  if (newsize > size) {
 801d450:	8bfa      	ldrh	r2, [r7, #30]
 801d452:	8abb      	ldrh	r3, [r7, #20]
 801d454:	429a      	cmp	r2, r3
 801d456:	d901      	bls.n	801d45c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801d458:	2300      	movs	r3, #0
 801d45a:	e08f      	b.n	801d57c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801d45c:	8bfa      	ldrh	r2, [r7, #30]
 801d45e:	8abb      	ldrh	r3, [r7, #20]
 801d460:	429a      	cmp	r2, r3
 801d462:	d101      	bne.n	801d468 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	e089      	b.n	801d57c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801d468:	69bb      	ldr	r3, [r7, #24]
 801d46a:	881b      	ldrh	r3, [r3, #0]
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7ff fdf5 	bl	801d05c <ptr_to_mem>
 801d472:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801d474:	693b      	ldr	r3, [r7, #16]
 801d476:	791b      	ldrb	r3, [r3, #4]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d13f      	bne.n	801d4fc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d47c:	69bb      	ldr	r3, [r7, #24]
 801d47e:	881b      	ldrh	r3, [r3, #0]
 801d480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d484:	d106      	bne.n	801d494 <mem_trim+0xe8>
 801d486:	4b41      	ldr	r3, [pc, #260]	; (801d58c <mem_trim+0x1e0>)
 801d488:	f240 22f5 	movw	r2, #757	; 0x2f5
 801d48c:	4943      	ldr	r1, [pc, #268]	; (801d59c <mem_trim+0x1f0>)
 801d48e:	4841      	ldr	r0, [pc, #260]	; (801d594 <mem_trim+0x1e8>)
 801d490:	f004 fed0 	bl	8022234 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801d494:	693b      	ldr	r3, [r7, #16]
 801d496:	881b      	ldrh	r3, [r3, #0]
 801d498:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d49a:	8afa      	ldrh	r2, [r7, #22]
 801d49c:	8bfb      	ldrh	r3, [r7, #30]
 801d49e:	4413      	add	r3, r2
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	3308      	adds	r3, #8
 801d4a4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801d4a6:	4b3e      	ldr	r3, [pc, #248]	; (801d5a0 <mem_trim+0x1f4>)
 801d4a8:	681b      	ldr	r3, [r3, #0]
 801d4aa:	693a      	ldr	r2, [r7, #16]
 801d4ac:	429a      	cmp	r2, r3
 801d4ae:	d106      	bne.n	801d4be <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801d4b0:	89fb      	ldrh	r3, [r7, #14]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7ff fdd2 	bl	801d05c <ptr_to_mem>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	4a39      	ldr	r2, [pc, #228]	; (801d5a0 <mem_trim+0x1f4>)
 801d4bc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801d4be:	89fb      	ldrh	r3, [r7, #14]
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f7ff fdcb 	bl	801d05c <ptr_to_mem>
 801d4c6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801d4c8:	693b      	ldr	r3, [r7, #16]
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801d4ce:	693b      	ldr	r3, [r7, #16]
 801d4d0:	89ba      	ldrh	r2, [r7, #12]
 801d4d2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801d4d4:	693b      	ldr	r3, [r7, #16]
 801d4d6:	8afa      	ldrh	r2, [r7, #22]
 801d4d8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801d4da:	69bb      	ldr	r3, [r7, #24]
 801d4dc:	89fa      	ldrh	r2, [r7, #14]
 801d4de:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d4e0:	693b      	ldr	r3, [r7, #16]
 801d4e2:	881b      	ldrh	r3, [r3, #0]
 801d4e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d4e8:	d047      	beq.n	801d57a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d4ea:	693b      	ldr	r3, [r7, #16]
 801d4ec:	881b      	ldrh	r3, [r3, #0]
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7ff fdb4 	bl	801d05c <ptr_to_mem>
 801d4f4:	4602      	mov	r2, r0
 801d4f6:	89fb      	ldrh	r3, [r7, #14]
 801d4f8:	8053      	strh	r3, [r2, #2]
 801d4fa:	e03e      	b.n	801d57a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801d4fc:	8bfb      	ldrh	r3, [r7, #30]
 801d4fe:	f103 0214 	add.w	r2, r3, #20
 801d502:	8abb      	ldrh	r3, [r7, #20]
 801d504:	429a      	cmp	r2, r3
 801d506:	d838      	bhi.n	801d57a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d508:	8afa      	ldrh	r2, [r7, #22]
 801d50a:	8bfb      	ldrh	r3, [r7, #30]
 801d50c:	4413      	add	r3, r2
 801d50e:	b29b      	uxth	r3, r3
 801d510:	3308      	adds	r3, #8
 801d512:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d514:	69bb      	ldr	r3, [r7, #24]
 801d516:	881b      	ldrh	r3, [r3, #0]
 801d518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d51c:	d106      	bne.n	801d52c <mem_trim+0x180>
 801d51e:	4b1b      	ldr	r3, [pc, #108]	; (801d58c <mem_trim+0x1e0>)
 801d520:	f240 3216 	movw	r2, #790	; 0x316
 801d524:	491d      	ldr	r1, [pc, #116]	; (801d59c <mem_trim+0x1f0>)
 801d526:	481b      	ldr	r0, [pc, #108]	; (801d594 <mem_trim+0x1e8>)
 801d528:	f004 fe84 	bl	8022234 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801d52c:	89fb      	ldrh	r3, [r7, #14]
 801d52e:	4618      	mov	r0, r3
 801d530:	f7ff fd94 	bl	801d05c <ptr_to_mem>
 801d534:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801d536:	4b1a      	ldr	r3, [pc, #104]	; (801d5a0 <mem_trim+0x1f4>)
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	693a      	ldr	r2, [r7, #16]
 801d53c:	429a      	cmp	r2, r3
 801d53e:	d202      	bcs.n	801d546 <mem_trim+0x19a>
      lfree = mem2;
 801d540:	4a17      	ldr	r2, [pc, #92]	; (801d5a0 <mem_trim+0x1f4>)
 801d542:	693b      	ldr	r3, [r7, #16]
 801d544:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801d546:	693b      	ldr	r3, [r7, #16]
 801d548:	2200      	movs	r2, #0
 801d54a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801d54c:	69bb      	ldr	r3, [r7, #24]
 801d54e:	881a      	ldrh	r2, [r3, #0]
 801d550:	693b      	ldr	r3, [r7, #16]
 801d552:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801d554:	693b      	ldr	r3, [r7, #16]
 801d556:	8afa      	ldrh	r2, [r7, #22]
 801d558:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801d55a:	69bb      	ldr	r3, [r7, #24]
 801d55c:	89fa      	ldrh	r2, [r7, #14]
 801d55e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d560:	693b      	ldr	r3, [r7, #16]
 801d562:	881b      	ldrh	r3, [r3, #0]
 801d564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d568:	d007      	beq.n	801d57a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d56a:	693b      	ldr	r3, [r7, #16]
 801d56c:	881b      	ldrh	r3, [r3, #0]
 801d56e:	4618      	mov	r0, r3
 801d570:	f7ff fd74 	bl	801d05c <ptr_to_mem>
 801d574:	4602      	mov	r2, r0
 801d576:	89fb      	ldrh	r3, [r7, #14]
 801d578:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801d57a:	687b      	ldr	r3, [r7, #4]
}
 801d57c:	4618      	mov	r0, r3
 801d57e:	3720      	adds	r7, #32
 801d580:	46bd      	mov	sp, r7
 801d582:	bd80      	pop	{r7, pc}
 801d584:	20010e44 	.word	0x20010e44
 801d588:	20010e48 	.word	0x20010e48
 801d58c:	0802706c 	.word	0x0802706c
 801d590:	080271dc 	.word	0x080271dc
 801d594:	080270b4 	.word	0x080270b4
 801d598:	080271f4 	.word	0x080271f4
 801d59c:	08027214 	.word	0x08027214
 801d5a0:	20010e4c 	.word	0x20010e4c

0801d5a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b088      	sub	sp, #32
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801d5ae:	88fb      	ldrh	r3, [r7, #6]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d101      	bne.n	801d5b8 <mem_malloc+0x14>
    return NULL;
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	e0d9      	b.n	801d76c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801d5b8:	88fb      	ldrh	r3, [r7, #6]
 801d5ba:	3303      	adds	r3, #3
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	f023 0303 	bic.w	r3, r3, #3
 801d5c2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801d5c4:	8bbb      	ldrh	r3, [r7, #28]
 801d5c6:	2b0b      	cmp	r3, #11
 801d5c8:	d801      	bhi.n	801d5ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801d5ca:	230c      	movs	r3, #12
 801d5cc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801d5ce:	8bbb      	ldrh	r3, [r7, #28]
 801d5d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d5d4:	d803      	bhi.n	801d5de <mem_malloc+0x3a>
 801d5d6:	8bba      	ldrh	r2, [r7, #28]
 801d5d8:	88fb      	ldrh	r3, [r7, #6]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d201      	bcs.n	801d5e2 <mem_malloc+0x3e>
    return NULL;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	e0c4      	b.n	801d76c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d5e2:	4b64      	ldr	r3, [pc, #400]	; (801d774 <mem_malloc+0x1d0>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ff fd4a 	bl	801d080 <mem_to_ptr>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	83fb      	strh	r3, [r7, #30]
 801d5f0:	e0b4      	b.n	801d75c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801d5f2:	8bfb      	ldrh	r3, [r7, #30]
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7ff fd31 	bl	801d05c <ptr_to_mem>
 801d5fa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801d5fc:	697b      	ldr	r3, [r7, #20]
 801d5fe:	791b      	ldrb	r3, [r3, #4]
 801d600:	2b00      	cmp	r3, #0
 801d602:	f040 80a4 	bne.w	801d74e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801d606:	697b      	ldr	r3, [r7, #20]
 801d608:	881b      	ldrh	r3, [r3, #0]
 801d60a:	461a      	mov	r2, r3
 801d60c:	8bfb      	ldrh	r3, [r7, #30]
 801d60e:	1ad3      	subs	r3, r2, r3
 801d610:	f1a3 0208 	sub.w	r2, r3, #8
 801d614:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801d616:	429a      	cmp	r2, r3
 801d618:	f0c0 8099 	bcc.w	801d74e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801d61c:	697b      	ldr	r3, [r7, #20]
 801d61e:	881b      	ldrh	r3, [r3, #0]
 801d620:	461a      	mov	r2, r3
 801d622:	8bfb      	ldrh	r3, [r7, #30]
 801d624:	1ad3      	subs	r3, r2, r3
 801d626:	f1a3 0208 	sub.w	r2, r3, #8
 801d62a:	8bbb      	ldrh	r3, [r7, #28]
 801d62c:	3314      	adds	r3, #20
 801d62e:	429a      	cmp	r2, r3
 801d630:	d333      	bcc.n	801d69a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801d632:	8bfa      	ldrh	r2, [r7, #30]
 801d634:	8bbb      	ldrh	r3, [r7, #28]
 801d636:	4413      	add	r3, r2
 801d638:	b29b      	uxth	r3, r3
 801d63a:	3308      	adds	r3, #8
 801d63c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801d63e:	8a7b      	ldrh	r3, [r7, #18]
 801d640:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d644:	d106      	bne.n	801d654 <mem_malloc+0xb0>
 801d646:	4b4c      	ldr	r3, [pc, #304]	; (801d778 <mem_malloc+0x1d4>)
 801d648:	f240 3287 	movw	r2, #903	; 0x387
 801d64c:	494b      	ldr	r1, [pc, #300]	; (801d77c <mem_malloc+0x1d8>)
 801d64e:	484c      	ldr	r0, [pc, #304]	; (801d780 <mem_malloc+0x1dc>)
 801d650:	f004 fdf0 	bl	8022234 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801d654:	8a7b      	ldrh	r3, [r7, #18]
 801d656:	4618      	mov	r0, r3
 801d658:	f7ff fd00 	bl	801d05c <ptr_to_mem>
 801d65c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	2200      	movs	r2, #0
 801d662:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801d664:	697b      	ldr	r3, [r7, #20]
 801d666:	881a      	ldrh	r2, [r3, #0]
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	8bfa      	ldrh	r2, [r7, #30]
 801d670:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801d672:	697b      	ldr	r3, [r7, #20]
 801d674:	8a7a      	ldrh	r2, [r7, #18]
 801d676:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801d678:	697b      	ldr	r3, [r7, #20]
 801d67a:	2201      	movs	r2, #1
 801d67c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	881b      	ldrh	r3, [r3, #0]
 801d682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d686:	d00b      	beq.n	801d6a0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	881b      	ldrh	r3, [r3, #0]
 801d68c:	4618      	mov	r0, r3
 801d68e:	f7ff fce5 	bl	801d05c <ptr_to_mem>
 801d692:	4602      	mov	r2, r0
 801d694:	8a7b      	ldrh	r3, [r7, #18]
 801d696:	8053      	strh	r3, [r2, #2]
 801d698:	e002      	b.n	801d6a0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801d69a:	697b      	ldr	r3, [r7, #20]
 801d69c:	2201      	movs	r2, #1
 801d69e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801d6a0:	4b34      	ldr	r3, [pc, #208]	; (801d774 <mem_malloc+0x1d0>)
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	697a      	ldr	r2, [r7, #20]
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d127      	bne.n	801d6fa <mem_malloc+0x156>
          struct mem *cur = lfree;
 801d6aa:	4b32      	ldr	r3, [pc, #200]	; (801d774 <mem_malloc+0x1d0>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801d6b0:	e005      	b.n	801d6be <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801d6b2:	69bb      	ldr	r3, [r7, #24]
 801d6b4:	881b      	ldrh	r3, [r3, #0]
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ff fcd0 	bl	801d05c <ptr_to_mem>
 801d6bc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801d6be:	69bb      	ldr	r3, [r7, #24]
 801d6c0:	791b      	ldrb	r3, [r3, #4]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d004      	beq.n	801d6d0 <mem_malloc+0x12c>
 801d6c6:	4b2f      	ldr	r3, [pc, #188]	; (801d784 <mem_malloc+0x1e0>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	69ba      	ldr	r2, [r7, #24]
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	d1f0      	bne.n	801d6b2 <mem_malloc+0x10e>
          }
          lfree = cur;
 801d6d0:	4a28      	ldr	r2, [pc, #160]	; (801d774 <mem_malloc+0x1d0>)
 801d6d2:	69bb      	ldr	r3, [r7, #24]
 801d6d4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801d6d6:	4b27      	ldr	r3, [pc, #156]	; (801d774 <mem_malloc+0x1d0>)
 801d6d8:	681a      	ldr	r2, [r3, #0]
 801d6da:	4b2a      	ldr	r3, [pc, #168]	; (801d784 <mem_malloc+0x1e0>)
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	429a      	cmp	r2, r3
 801d6e0:	d00b      	beq.n	801d6fa <mem_malloc+0x156>
 801d6e2:	4b24      	ldr	r3, [pc, #144]	; (801d774 <mem_malloc+0x1d0>)
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	791b      	ldrb	r3, [r3, #4]
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d006      	beq.n	801d6fa <mem_malloc+0x156>
 801d6ec:	4b22      	ldr	r3, [pc, #136]	; (801d778 <mem_malloc+0x1d4>)
 801d6ee:	f240 32b5 	movw	r2, #949	; 0x3b5
 801d6f2:	4925      	ldr	r1, [pc, #148]	; (801d788 <mem_malloc+0x1e4>)
 801d6f4:	4822      	ldr	r0, [pc, #136]	; (801d780 <mem_malloc+0x1dc>)
 801d6f6:	f004 fd9d 	bl	8022234 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801d6fa:	8bba      	ldrh	r2, [r7, #28]
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	4413      	add	r3, r2
 801d700:	3308      	adds	r3, #8
 801d702:	4a20      	ldr	r2, [pc, #128]	; (801d784 <mem_malloc+0x1e0>)
 801d704:	6812      	ldr	r2, [r2, #0]
 801d706:	4293      	cmp	r3, r2
 801d708:	d906      	bls.n	801d718 <mem_malloc+0x174>
 801d70a:	4b1b      	ldr	r3, [pc, #108]	; (801d778 <mem_malloc+0x1d4>)
 801d70c:	f240 32b9 	movw	r2, #953	; 0x3b9
 801d710:	491e      	ldr	r1, [pc, #120]	; (801d78c <mem_malloc+0x1e8>)
 801d712:	481b      	ldr	r0, [pc, #108]	; (801d780 <mem_malloc+0x1dc>)
 801d714:	f004 fd8e 	bl	8022234 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	f003 0303 	and.w	r3, r3, #3
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d006      	beq.n	801d730 <mem_malloc+0x18c>
 801d722:	4b15      	ldr	r3, [pc, #84]	; (801d778 <mem_malloc+0x1d4>)
 801d724:	f240 32bb 	movw	r2, #955	; 0x3bb
 801d728:	4919      	ldr	r1, [pc, #100]	; (801d790 <mem_malloc+0x1ec>)
 801d72a:	4815      	ldr	r0, [pc, #84]	; (801d780 <mem_malloc+0x1dc>)
 801d72c:	f004 fd82 	bl	8022234 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801d730:	697b      	ldr	r3, [r7, #20]
 801d732:	f003 0303 	and.w	r3, r3, #3
 801d736:	2b00      	cmp	r3, #0
 801d738:	d006      	beq.n	801d748 <mem_malloc+0x1a4>
 801d73a:	4b0f      	ldr	r3, [pc, #60]	; (801d778 <mem_malloc+0x1d4>)
 801d73c:	f240 32bd 	movw	r2, #957	; 0x3bd
 801d740:	4914      	ldr	r1, [pc, #80]	; (801d794 <mem_malloc+0x1f0>)
 801d742:	480f      	ldr	r0, [pc, #60]	; (801d780 <mem_malloc+0x1dc>)
 801d744:	f004 fd76 	bl	8022234 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801d748:	697b      	ldr	r3, [r7, #20]
 801d74a:	3308      	adds	r3, #8
 801d74c:	e00e      	b.n	801d76c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801d74e:	8bfb      	ldrh	r3, [r7, #30]
 801d750:	4618      	mov	r0, r3
 801d752:	f7ff fc83 	bl	801d05c <ptr_to_mem>
 801d756:	4603      	mov	r3, r0
 801d758:	881b      	ldrh	r3, [r3, #0]
 801d75a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d75c:	8bfa      	ldrh	r2, [r7, #30]
 801d75e:	8bbb      	ldrh	r3, [r7, #28]
 801d760:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801d764:	429a      	cmp	r2, r3
 801d766:	f4ff af44 	bcc.w	801d5f2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801d76a:	2300      	movs	r3, #0
}
 801d76c:	4618      	mov	r0, r3
 801d76e:	3720      	adds	r7, #32
 801d770:	46bd      	mov	sp, r7
 801d772:	bd80      	pop	{r7, pc}
 801d774:	20010e4c 	.word	0x20010e4c
 801d778:	0802706c 	.word	0x0802706c
 801d77c:	08027214 	.word	0x08027214
 801d780:	080270b4 	.word	0x080270b4
 801d784:	20010e48 	.word	0x20010e48
 801d788:	08027228 	.word	0x08027228
 801d78c:	08027244 	.word	0x08027244
 801d790:	08027274 	.word	0x08027274
 801d794:	080272a4 	.word	0x080272a4

0801d798 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801d798:	b480      	push	{r7}
 801d79a:	b085      	sub	sp, #20
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	689b      	ldr	r3, [r3, #8]
 801d7a4:	2200      	movs	r2, #0
 801d7a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	685b      	ldr	r3, [r3, #4]
 801d7ac:	3303      	adds	r3, #3
 801d7ae:	f023 0303 	bic.w	r3, r3, #3
 801d7b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	60fb      	str	r3, [r7, #12]
 801d7b8:	e011      	b.n	801d7de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	689b      	ldr	r3, [r3, #8]
 801d7be:	681a      	ldr	r2, [r3, #0]
 801d7c0:	68bb      	ldr	r3, [r7, #8]
 801d7c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	689b      	ldr	r3, [r3, #8]
 801d7c8:	68ba      	ldr	r2, [r7, #8]
 801d7ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	881b      	ldrh	r3, [r3, #0]
 801d7d0:	461a      	mov	r2, r3
 801d7d2:	68bb      	ldr	r3, [r7, #8]
 801d7d4:	4413      	add	r3, r2
 801d7d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	3301      	adds	r3, #1
 801d7dc:	60fb      	str	r3, [r7, #12]
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	885b      	ldrh	r3, [r3, #2]
 801d7e2:	461a      	mov	r2, r3
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	4293      	cmp	r3, r2
 801d7e8:	dbe7      	blt.n	801d7ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801d7ea:	bf00      	nop
 801d7ec:	bf00      	nop
 801d7ee:	3714      	adds	r7, #20
 801d7f0:	46bd      	mov	sp, r7
 801d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7f6:	4770      	bx	lr

0801d7f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b082      	sub	sp, #8
 801d7fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801d7fe:	2300      	movs	r3, #0
 801d800:	80fb      	strh	r3, [r7, #6]
 801d802:	e009      	b.n	801d818 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801d804:	88fb      	ldrh	r3, [r7, #6]
 801d806:	4a08      	ldr	r2, [pc, #32]	; (801d828 <memp_init+0x30>)
 801d808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d80c:	4618      	mov	r0, r3
 801d80e:	f7ff ffc3 	bl	801d798 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801d812:	88fb      	ldrh	r3, [r7, #6]
 801d814:	3301      	adds	r3, #1
 801d816:	80fb      	strh	r3, [r7, #6]
 801d818:	88fb      	ldrh	r3, [r7, #6]
 801d81a:	2b05      	cmp	r3, #5
 801d81c:	d9f2      	bls.n	801d804 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801d81e:	bf00      	nop
 801d820:	bf00      	nop
 801d822:	3708      	adds	r7, #8
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}
 801d828:	08028b14 	.word	0x08028b14

0801d82c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b084      	sub	sp, #16
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	689b      	ldr	r3, [r3, #8]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d012      	beq.n	801d868 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	689b      	ldr	r3, [r3, #8]
 801d846:	68fa      	ldr	r2, [r7, #12]
 801d848:	6812      	ldr	r2, [r2, #0]
 801d84a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	f003 0303 	and.w	r3, r3, #3
 801d852:	2b00      	cmp	r3, #0
 801d854:	d006      	beq.n	801d864 <do_memp_malloc_pool+0x38>
 801d856:	4b07      	ldr	r3, [pc, #28]	; (801d874 <do_memp_malloc_pool+0x48>)
 801d858:	f44f 728c 	mov.w	r2, #280	; 0x118
 801d85c:	4906      	ldr	r1, [pc, #24]	; (801d878 <do_memp_malloc_pool+0x4c>)
 801d85e:	4807      	ldr	r0, [pc, #28]	; (801d87c <do_memp_malloc_pool+0x50>)
 801d860:	f004 fce8 	bl	8022234 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	e000      	b.n	801d86a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801d868:	2300      	movs	r3, #0
}
 801d86a:	4618      	mov	r0, r3
 801d86c:	3710      	adds	r7, #16
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}
 801d872:	bf00      	nop
 801d874:	080272c8 	.word	0x080272c8
 801d878:	080272f8 	.word	0x080272f8
 801d87c:	0802731c 	.word	0x0802731c

0801d880 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801d880:	b580      	push	{r7, lr}
 801d882:	b082      	sub	sp, #8
 801d884:	af00      	add	r7, sp, #0
 801d886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d106      	bne.n	801d89c <memp_malloc_pool+0x1c>
 801d88e:	4b0a      	ldr	r3, [pc, #40]	; (801d8b8 <memp_malloc_pool+0x38>)
 801d890:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801d894:	4909      	ldr	r1, [pc, #36]	; (801d8bc <memp_malloc_pool+0x3c>)
 801d896:	480a      	ldr	r0, [pc, #40]	; (801d8c0 <memp_malloc_pool+0x40>)
 801d898:	f004 fccc 	bl	8022234 <iprintf>
  if (desc == NULL) {
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d101      	bne.n	801d8a6 <memp_malloc_pool+0x26>
    return NULL;
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	e003      	b.n	801d8ae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801d8a6:	6878      	ldr	r0, [r7, #4]
 801d8a8:	f7ff ffc0 	bl	801d82c <do_memp_malloc_pool>
 801d8ac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	3708      	adds	r7, #8
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	bd80      	pop	{r7, pc}
 801d8b6:	bf00      	nop
 801d8b8:	080272c8 	.word	0x080272c8
 801d8bc:	08027344 	.word	0x08027344
 801d8c0:	0802731c 	.word	0x0802731c

0801d8c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b084      	sub	sp, #16
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	4603      	mov	r3, r0
 801d8cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801d8ce:	79fb      	ldrb	r3, [r7, #7]
 801d8d0:	2b05      	cmp	r3, #5
 801d8d2:	d908      	bls.n	801d8e6 <memp_malloc+0x22>
 801d8d4:	4b0a      	ldr	r3, [pc, #40]	; (801d900 <memp_malloc+0x3c>)
 801d8d6:	f240 1257 	movw	r2, #343	; 0x157
 801d8da:	490a      	ldr	r1, [pc, #40]	; (801d904 <memp_malloc+0x40>)
 801d8dc:	480a      	ldr	r0, [pc, #40]	; (801d908 <memp_malloc+0x44>)
 801d8de:	f004 fca9 	bl	8022234 <iprintf>
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	e008      	b.n	801d8f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801d8e6:	79fb      	ldrb	r3, [r7, #7]
 801d8e8:	4a08      	ldr	r2, [pc, #32]	; (801d90c <memp_malloc+0x48>)
 801d8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d8ee:	4618      	mov	r0, r3
 801d8f0:	f7ff ff9c 	bl	801d82c <do_memp_malloc_pool>
 801d8f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
}
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	3710      	adds	r7, #16
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd80      	pop	{r7, pc}
 801d900:	080272c8 	.word	0x080272c8
 801d904:	08027358 	.word	0x08027358
 801d908:	0802731c 	.word	0x0802731c
 801d90c:	08028b14 	.word	0x08028b14

0801d910 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b084      	sub	sp, #16
 801d914:	af00      	add	r7, sp, #0
 801d916:	6078      	str	r0, [r7, #4]
 801d918:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801d91a:	683b      	ldr	r3, [r7, #0]
 801d91c:	f003 0303 	and.w	r3, r3, #3
 801d920:	2b00      	cmp	r3, #0
 801d922:	d006      	beq.n	801d932 <do_memp_free_pool+0x22>
 801d924:	4b0a      	ldr	r3, [pc, #40]	; (801d950 <do_memp_free_pool+0x40>)
 801d926:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801d92a:	490a      	ldr	r1, [pc, #40]	; (801d954 <do_memp_free_pool+0x44>)
 801d92c:	480a      	ldr	r0, [pc, #40]	; (801d958 <do_memp_free_pool+0x48>)
 801d92e:	f004 fc81 	bl	8022234 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801d932:	683b      	ldr	r3, [r7, #0]
 801d934:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	689b      	ldr	r3, [r3, #8]
 801d93a:	681a      	ldr	r2, [r3, #0]
 801d93c:	68fb      	ldr	r3, [r7, #12]
 801d93e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	689b      	ldr	r3, [r3, #8]
 801d944:	68fa      	ldr	r2, [r7, #12]
 801d946:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801d948:	bf00      	nop
 801d94a:	3710      	adds	r7, #16
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}
 801d950:	080272c8 	.word	0x080272c8
 801d954:	08027378 	.word	0x08027378
 801d958:	0802731c 	.word	0x0802731c

0801d95c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801d95c:	b580      	push	{r7, lr}
 801d95e:	b082      	sub	sp, #8
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]
 801d964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d106      	bne.n	801d97a <memp_free_pool+0x1e>
 801d96c:	4b0a      	ldr	r3, [pc, #40]	; (801d998 <memp_free_pool+0x3c>)
 801d96e:	f240 1295 	movw	r2, #405	; 0x195
 801d972:	490a      	ldr	r1, [pc, #40]	; (801d99c <memp_free_pool+0x40>)
 801d974:	480a      	ldr	r0, [pc, #40]	; (801d9a0 <memp_free_pool+0x44>)
 801d976:	f004 fc5d 	bl	8022234 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d007      	beq.n	801d990 <memp_free_pool+0x34>
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d004      	beq.n	801d990 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801d986:	6839      	ldr	r1, [r7, #0]
 801d988:	6878      	ldr	r0, [r7, #4]
 801d98a:	f7ff ffc1 	bl	801d910 <do_memp_free_pool>
 801d98e:	e000      	b.n	801d992 <memp_free_pool+0x36>
    return;
 801d990:	bf00      	nop
}
 801d992:	3708      	adds	r7, #8
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}
 801d998:	080272c8 	.word	0x080272c8
 801d99c:	08027344 	.word	0x08027344
 801d9a0:	0802731c 	.word	0x0802731c

0801d9a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b082      	sub	sp, #8
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	6039      	str	r1, [r7, #0]
 801d9ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801d9b0:	79fb      	ldrb	r3, [r7, #7]
 801d9b2:	2b05      	cmp	r3, #5
 801d9b4:	d907      	bls.n	801d9c6 <memp_free+0x22>
 801d9b6:	4b0c      	ldr	r3, [pc, #48]	; (801d9e8 <memp_free+0x44>)
 801d9b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801d9bc:	490b      	ldr	r1, [pc, #44]	; (801d9ec <memp_free+0x48>)
 801d9be:	480c      	ldr	r0, [pc, #48]	; (801d9f0 <memp_free+0x4c>)
 801d9c0:	f004 fc38 	bl	8022234 <iprintf>
 801d9c4:	e00c      	b.n	801d9e0 <memp_free+0x3c>

  if (mem == NULL) {
 801d9c6:	683b      	ldr	r3, [r7, #0]
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d008      	beq.n	801d9de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801d9cc:	79fb      	ldrb	r3, [r7, #7]
 801d9ce:	4a09      	ldr	r2, [pc, #36]	; (801d9f4 <memp_free+0x50>)
 801d9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d9d4:	6839      	ldr	r1, [r7, #0]
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7ff ff9a 	bl	801d910 <do_memp_free_pool>
 801d9dc:	e000      	b.n	801d9e0 <memp_free+0x3c>
    return;
 801d9de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801d9e0:	3708      	adds	r7, #8
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	bd80      	pop	{r7, pc}
 801d9e6:	bf00      	nop
 801d9e8:	080272c8 	.word	0x080272c8
 801d9ec:	08027398 	.word	0x08027398
 801d9f0:	0802731c 	.word	0x0802731c
 801d9f4:	08028b14 	.word	0x08028b14

0801d9f8 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b082      	sub	sp, #8
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d105      	bne.n	801da12 <netif_loopif_init+0x1a>
 801da06:	4b0b      	ldr	r3, [pc, #44]	; (801da34 <netif_loopif_init+0x3c>)
 801da08:	2299      	movs	r2, #153	; 0x99
 801da0a:	490b      	ldr	r1, [pc, #44]	; (801da38 <netif_loopif_init+0x40>)
 801da0c:	480b      	ldr	r0, [pc, #44]	; (801da3c <netif_loopif_init+0x44>)
 801da0e:	f004 fc11 	bl	8022234 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	226c      	movs	r2, #108	; 0x6c
 801da16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	226f      	movs	r2, #111	; 0x6f
 801da1e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	4a06      	ldr	r2, [pc, #24]	; (801da40 <netif_loopif_init+0x48>)
 801da26:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801da28:	2300      	movs	r3, #0
}
 801da2a:	4618      	mov	r0, r3
 801da2c:	3708      	adds	r7, #8
 801da2e:	46bd      	mov	sp, r7
 801da30:	bd80      	pop	{r7, pc}
 801da32:	bf00      	nop
 801da34:	080273b4 	.word	0x080273b4
 801da38:	080273e8 	.word	0x080273e8
 801da3c:	0802740c 	.word	0x0802740c
 801da40:	0801e125 	.word	0x0801e125

0801da44 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801da44:	b580      	push	{r7, lr}
 801da46:	b088      	sub	sp, #32
 801da48:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801da4a:	4b0f      	ldr	r3, [pc, #60]	; (801da88 <netif_init+0x44>)
 801da4c:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801da4e:	4b0e      	ldr	r3, [pc, #56]	; (801da88 <netif_init+0x44>)
 801da50:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801da52:	23ff      	movs	r3, #255	; 0xff
 801da54:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801da56:	1d3b      	adds	r3, r7, #4
 801da58:	f107 0208 	add.w	r2, r7, #8
 801da5c:	f107 010c 	add.w	r1, r7, #12
 801da60:	480a      	ldr	r0, [pc, #40]	; (801da8c <netif_init+0x48>)
 801da62:	9002      	str	r0, [sp, #8]
 801da64:	480a      	ldr	r0, [pc, #40]	; (801da90 <netif_init+0x4c>)
 801da66:	9001      	str	r0, [sp, #4]
 801da68:	2000      	movs	r0, #0
 801da6a:	9000      	str	r0, [sp, #0]
 801da6c:	4809      	ldr	r0, [pc, #36]	; (801da94 <netif_init+0x50>)
 801da6e:	f000 f813 	bl	801da98 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801da72:	4808      	ldr	r0, [pc, #32]	; (801da94 <netif_init+0x50>)
 801da74:	f000 fa72 	bl	801df5c <netif_set_link_up>
  netif_set_up(&loop_netif);
 801da78:	4806      	ldr	r0, [pc, #24]	; (801da94 <netif_init+0x50>)
 801da7a:	f000 f9d1 	bl	801de20 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801da7e:	bf00      	nop
 801da80:	3710      	adds	r7, #16
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop
 801da88:	0100007f 	.word	0x0100007f
 801da8c:	08020bc1 	.word	0x08020bc1
 801da90:	0801d9f9 	.word	0x0801d9f9
 801da94:	20013df4 	.word	0x20013df4

0801da98 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801da98:	b580      	push	{r7, lr}
 801da9a:	b086      	sub	sp, #24
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	60f8      	str	r0, [r7, #12]
 801daa0:	60b9      	str	r1, [r7, #8]
 801daa2:	607a      	str	r2, [r7, #4]
 801daa4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801daa6:	68fb      	ldr	r3, [r7, #12]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d108      	bne.n	801dabe <netif_add+0x26>
 801daac:	4b5a      	ldr	r3, [pc, #360]	; (801dc18 <netif_add+0x180>)
 801daae:	f240 1227 	movw	r2, #295	; 0x127
 801dab2:	495a      	ldr	r1, [pc, #360]	; (801dc1c <netif_add+0x184>)
 801dab4:	485a      	ldr	r0, [pc, #360]	; (801dc20 <netif_add+0x188>)
 801dab6:	f004 fbbd 	bl	8022234 <iprintf>
 801daba:	2300      	movs	r3, #0
 801dabc:	e0a8      	b.n	801dc10 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d108      	bne.n	801dad6 <netif_add+0x3e>
 801dac4:	4b54      	ldr	r3, [pc, #336]	; (801dc18 <netif_add+0x180>)
 801dac6:	f44f 7294 	mov.w	r2, #296	; 0x128
 801daca:	4956      	ldr	r1, [pc, #344]	; (801dc24 <netif_add+0x18c>)
 801dacc:	4854      	ldr	r0, [pc, #336]	; (801dc20 <netif_add+0x188>)
 801dace:	f004 fbb1 	bl	8022234 <iprintf>
 801dad2:	2300      	movs	r3, #0
 801dad4:	e09c      	b.n	801dc10 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801dad6:	68bb      	ldr	r3, [r7, #8]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d101      	bne.n	801dae0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801dadc:	4b52      	ldr	r3, [pc, #328]	; (801dc28 <netif_add+0x190>)
 801dade:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d101      	bne.n	801daea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801dae6:	4b50      	ldr	r3, [pc, #320]	; (801dc28 <netif_add+0x190>)
 801dae8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801daea:	683b      	ldr	r3, [r7, #0]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d101      	bne.n	801daf4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801daf0:	4b4d      	ldr	r3, [pc, #308]	; (801dc28 <netif_add+0x190>)
 801daf2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	2200      	movs	r2, #0
 801daf8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	2200      	movs	r2, #0
 801dafe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	2200      	movs	r2, #0
 801db04:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	4a48      	ldr	r2, [pc, #288]	; (801dc2c <netif_add+0x194>)
 801db0a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	2200      	movs	r2, #0
 801db10:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	2200      	movs	r2, #0
 801db16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	2200      	movs	r2, #0
 801db1e:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	2200      	movs	r2, #0
 801db24:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	2200      	movs	r2, #0
 801db2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	6a3a      	ldr	r2, [r7, #32]
 801db30:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801db32:	4b3f      	ldr	r3, [pc, #252]	; (801dc30 <netif_add+0x198>)
 801db34:	781a      	ldrb	r2, [r3, #0]
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801db40:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801db42:	683b      	ldr	r3, [r7, #0]
 801db44:	687a      	ldr	r2, [r7, #4]
 801db46:	68b9      	ldr	r1, [r7, #8]
 801db48:	68f8      	ldr	r0, [r7, #12]
 801db4a:	f000 f90f 	bl	801dd6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db50:	68f8      	ldr	r0, [r7, #12]
 801db52:	4798      	blx	r3
 801db54:	4603      	mov	r3, r0
 801db56:	2b00      	cmp	r3, #0
 801db58:	d001      	beq.n	801db5e <netif_add+0xc6>
    return NULL;
 801db5a:	2300      	movs	r3, #0
 801db5c:	e058      	b.n	801dc10 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801db64:	2bff      	cmp	r3, #255	; 0xff
 801db66:	d103      	bne.n	801db70 <netif_add+0xd8>
        netif->num = 0;
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	2200      	movs	r2, #0
 801db6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801db70:	2300      	movs	r3, #0
 801db72:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801db74:	4b2f      	ldr	r3, [pc, #188]	; (801dc34 <netif_add+0x19c>)
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	617b      	str	r3, [r7, #20]
 801db7a:	e02b      	b.n	801dbd4 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801db7c:	697a      	ldr	r2, [r7, #20]
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	429a      	cmp	r2, r3
 801db82:	d106      	bne.n	801db92 <netif_add+0xfa>
 801db84:	4b24      	ldr	r3, [pc, #144]	; (801dc18 <netif_add+0x180>)
 801db86:	f240 128b 	movw	r2, #395	; 0x18b
 801db8a:	492b      	ldr	r1, [pc, #172]	; (801dc38 <netif_add+0x1a0>)
 801db8c:	4824      	ldr	r0, [pc, #144]	; (801dc20 <netif_add+0x188>)
 801db8e:	f004 fb51 	bl	8022234 <iprintf>
        num_netifs++;
 801db92:	693b      	ldr	r3, [r7, #16]
 801db94:	3301      	adds	r3, #1
 801db96:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801db98:	693b      	ldr	r3, [r7, #16]
 801db9a:	2bff      	cmp	r3, #255	; 0xff
 801db9c:	dd06      	ble.n	801dbac <netif_add+0x114>
 801db9e:	4b1e      	ldr	r3, [pc, #120]	; (801dc18 <netif_add+0x180>)
 801dba0:	f240 128d 	movw	r2, #397	; 0x18d
 801dba4:	4925      	ldr	r1, [pc, #148]	; (801dc3c <netif_add+0x1a4>)
 801dba6:	481e      	ldr	r0, [pc, #120]	; (801dc20 <netif_add+0x188>)
 801dba8:	f004 fb44 	bl	8022234 <iprintf>
        if (netif2->num == netif->num) {
 801dbac:	697b      	ldr	r3, [r7, #20]
 801dbae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbb8:	429a      	cmp	r2, r3
 801dbba:	d108      	bne.n	801dbce <netif_add+0x136>
          netif->num++;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbc2:	3301      	adds	r3, #1
 801dbc4:	b2da      	uxtb	r2, r3
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801dbcc:	e005      	b.n	801dbda <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801dbce:	697b      	ldr	r3, [r7, #20]
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	617b      	str	r3, [r7, #20]
 801dbd4:	697b      	ldr	r3, [r7, #20]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d1d0      	bne.n	801db7c <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801dbda:	697b      	ldr	r3, [r7, #20]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d1be      	bne.n	801db5e <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbe6:	2bfe      	cmp	r3, #254	; 0xfe
 801dbe8:	d103      	bne.n	801dbf2 <netif_add+0x15a>
    netif_num = 0;
 801dbea:	4b11      	ldr	r3, [pc, #68]	; (801dc30 <netif_add+0x198>)
 801dbec:	2200      	movs	r2, #0
 801dbee:	701a      	strb	r2, [r3, #0]
 801dbf0:	e006      	b.n	801dc00 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbf8:	3301      	adds	r3, #1
 801dbfa:	b2da      	uxtb	r2, r3
 801dbfc:	4b0c      	ldr	r3, [pc, #48]	; (801dc30 <netif_add+0x198>)
 801dbfe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801dc00:	4b0c      	ldr	r3, [pc, #48]	; (801dc34 <netif_add+0x19c>)
 801dc02:	681a      	ldr	r2, [r3, #0]
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801dc08:	4a0a      	ldr	r2, [pc, #40]	; (801dc34 <netif_add+0x19c>)
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801dc0e:	68fb      	ldr	r3, [r7, #12]
}
 801dc10:	4618      	mov	r0, r3
 801dc12:	3718      	adds	r7, #24
 801dc14:	46bd      	mov	sp, r7
 801dc16:	bd80      	pop	{r7, pc}
 801dc18:	080273b4 	.word	0x080273b4
 801dc1c:	0802746c 	.word	0x0802746c
 801dc20:	0802740c 	.word	0x0802740c
 801dc24:	08027488 	.word	0x08027488
 801dc28:	08028b3c 	.word	0x08028b3c
 801dc2c:	0801e143 	.word	0x0801e143
 801dc30:	20013df0 	.word	0x20013df0
 801dc34:	20013de8 	.word	0x20013de8
 801dc38:	080274ac 	.word	0x080274ac
 801dc3c:	080274c0 	.word	0x080274c0

0801dc40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b082      	sub	sp, #8
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
 801dc48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801dc4a:	6839      	ldr	r1, [r7, #0]
 801dc4c:	6878      	ldr	r0, [r7, #4]
 801dc4e:	f001 fe13 	bl	801f878 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801dc52:	bf00      	nop
 801dc54:	3708      	adds	r7, #8
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bd80      	pop	{r7, pc}
	...

0801dc5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b086      	sub	sp, #24
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	60f8      	str	r0, [r7, #12]
 801dc64:	60b9      	str	r1, [r7, #8]
 801dc66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d106      	bne.n	801dc7c <netif_do_set_ipaddr+0x20>
 801dc6e:	4b1d      	ldr	r3, [pc, #116]	; (801dce4 <netif_do_set_ipaddr+0x88>)
 801dc70:	f240 12cb 	movw	r2, #459	; 0x1cb
 801dc74:	491c      	ldr	r1, [pc, #112]	; (801dce8 <netif_do_set_ipaddr+0x8c>)
 801dc76:	481d      	ldr	r0, [pc, #116]	; (801dcec <netif_do_set_ipaddr+0x90>)
 801dc78:	f004 fadc 	bl	8022234 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d106      	bne.n	801dc90 <netif_do_set_ipaddr+0x34>
 801dc82:	4b18      	ldr	r3, [pc, #96]	; (801dce4 <netif_do_set_ipaddr+0x88>)
 801dc84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801dc88:	4917      	ldr	r1, [pc, #92]	; (801dce8 <netif_do_set_ipaddr+0x8c>)
 801dc8a:	4818      	ldr	r0, [pc, #96]	; (801dcec <netif_do_set_ipaddr+0x90>)
 801dc8c:	f004 fad2 	bl	8022234 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	681a      	ldr	r2, [r3, #0]
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	3304      	adds	r3, #4
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	429a      	cmp	r2, r3
 801dc9c:	d01c      	beq.n	801dcd8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801dc9e:	68bb      	ldr	r3, [r7, #8]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	3304      	adds	r3, #4
 801dca8:	681a      	ldr	r2, [r3, #0]
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801dcae:	f107 0314 	add.w	r3, r7, #20
 801dcb2:	4619      	mov	r1, r3
 801dcb4:	6878      	ldr	r0, [r7, #4]
 801dcb6:	f7ff ffc3 	bl	801dc40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801dcba:	68bb      	ldr	r3, [r7, #8]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d002      	beq.n	801dcc6 <netif_do_set_ipaddr+0x6a>
 801dcc0:	68bb      	ldr	r3, [r7, #8]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	e000      	b.n	801dcc8 <netif_do_set_ipaddr+0x6c>
 801dcc6:	2300      	movs	r3, #0
 801dcc8:	68fa      	ldr	r2, [r7, #12]
 801dcca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801dccc:	2101      	movs	r1, #1
 801dcce:	68f8      	ldr	r0, [r7, #12]
 801dcd0:	f000 f8d2 	bl	801de78 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801dcd4:	2301      	movs	r3, #1
 801dcd6:	e000      	b.n	801dcda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801dcd8:	2300      	movs	r3, #0
}
 801dcda:	4618      	mov	r0, r3
 801dcdc:	3718      	adds	r7, #24
 801dcde:	46bd      	mov	sp, r7
 801dce0:	bd80      	pop	{r7, pc}
 801dce2:	bf00      	nop
 801dce4:	080273b4 	.word	0x080273b4
 801dce8:	080274f0 	.word	0x080274f0
 801dcec:	0802740c 	.word	0x0802740c

0801dcf0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801dcf0:	b480      	push	{r7}
 801dcf2:	b085      	sub	sp, #20
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	60f8      	str	r0, [r7, #12]
 801dcf8:	60b9      	str	r1, [r7, #8]
 801dcfa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801dcfc:	68bb      	ldr	r3, [r7, #8]
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	3308      	adds	r3, #8
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	429a      	cmp	r2, r3
 801dd08:	d00a      	beq.n	801dd20 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801dd0a:	68bb      	ldr	r3, [r7, #8]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d002      	beq.n	801dd16 <netif_do_set_netmask+0x26>
 801dd10:	68bb      	ldr	r3, [r7, #8]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	e000      	b.n	801dd18 <netif_do_set_netmask+0x28>
 801dd16:	2300      	movs	r3, #0
 801dd18:	68fa      	ldr	r2, [r7, #12]
 801dd1a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801dd1c:	2301      	movs	r3, #1
 801dd1e:	e000      	b.n	801dd22 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801dd20:	2300      	movs	r3, #0
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	3714      	adds	r7, #20
 801dd26:	46bd      	mov	sp, r7
 801dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2c:	4770      	bx	lr

0801dd2e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801dd2e:	b480      	push	{r7}
 801dd30:	b085      	sub	sp, #20
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	60f8      	str	r0, [r7, #12]
 801dd36:	60b9      	str	r1, [r7, #8]
 801dd38:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801dd3a:	68bb      	ldr	r3, [r7, #8]
 801dd3c:	681a      	ldr	r2, [r3, #0]
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	330c      	adds	r3, #12
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	429a      	cmp	r2, r3
 801dd46:	d00a      	beq.n	801dd5e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801dd48:	68bb      	ldr	r3, [r7, #8]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d002      	beq.n	801dd54 <netif_do_set_gw+0x26>
 801dd4e:	68bb      	ldr	r3, [r7, #8]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	e000      	b.n	801dd56 <netif_do_set_gw+0x28>
 801dd54:	2300      	movs	r3, #0
 801dd56:	68fa      	ldr	r2, [r7, #12]
 801dd58:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	e000      	b.n	801dd60 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801dd5e:	2300      	movs	r3, #0
}
 801dd60:	4618      	mov	r0, r3
 801dd62:	3714      	adds	r7, #20
 801dd64:	46bd      	mov	sp, r7
 801dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6a:	4770      	bx	lr

0801dd6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b088      	sub	sp, #32
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	60b9      	str	r1, [r7, #8]
 801dd76:	607a      	str	r2, [r7, #4]
 801dd78:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801dd7e:	2300      	movs	r3, #0
 801dd80:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801dd82:	68bb      	ldr	r3, [r7, #8]
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d101      	bne.n	801dd8c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801dd88:	4b1c      	ldr	r3, [pc, #112]	; (801ddfc <netif_set_addr+0x90>)
 801dd8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d101      	bne.n	801dd96 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801dd92:	4b1a      	ldr	r3, [pc, #104]	; (801ddfc <netif_set_addr+0x90>)
 801dd94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801dd96:	683b      	ldr	r3, [r7, #0]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d101      	bne.n	801dda0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801dd9c:	4b17      	ldr	r3, [pc, #92]	; (801ddfc <netif_set_addr+0x90>)
 801dd9e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801dda0:	68bb      	ldr	r3, [r7, #8]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d003      	beq.n	801ddae <netif_set_addr+0x42>
 801dda6:	68bb      	ldr	r3, [r7, #8]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d101      	bne.n	801ddb2 <netif_set_addr+0x46>
 801ddae:	2301      	movs	r3, #1
 801ddb0:	e000      	b.n	801ddb4 <netif_set_addr+0x48>
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	617b      	str	r3, [r7, #20]
  if (remove) {
 801ddb6:	697b      	ldr	r3, [r7, #20]
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	d006      	beq.n	801ddca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801ddbc:	f107 0310 	add.w	r3, r7, #16
 801ddc0:	461a      	mov	r2, r3
 801ddc2:	68b9      	ldr	r1, [r7, #8]
 801ddc4:	68f8      	ldr	r0, [r7, #12]
 801ddc6:	f7ff ff49 	bl	801dc5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801ddca:	69fa      	ldr	r2, [r7, #28]
 801ddcc:	6879      	ldr	r1, [r7, #4]
 801ddce:	68f8      	ldr	r0, [r7, #12]
 801ddd0:	f7ff ff8e 	bl	801dcf0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801ddd4:	69ba      	ldr	r2, [r7, #24]
 801ddd6:	6839      	ldr	r1, [r7, #0]
 801ddd8:	68f8      	ldr	r0, [r7, #12]
 801ddda:	f7ff ffa8 	bl	801dd2e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801ddde:	697b      	ldr	r3, [r7, #20]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d106      	bne.n	801ddf2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801dde4:	f107 0310 	add.w	r3, r7, #16
 801dde8:	461a      	mov	r2, r3
 801ddea:	68b9      	ldr	r1, [r7, #8]
 801ddec:	68f8      	ldr	r0, [r7, #12]
 801ddee:	f7ff ff35 	bl	801dc5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801ddf2:	bf00      	nop
 801ddf4:	3720      	adds	r7, #32
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	bd80      	pop	{r7, pc}
 801ddfa:	bf00      	nop
 801ddfc:	08028b3c 	.word	0x08028b3c

0801de00 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801de00:	b480      	push	{r7}
 801de02:	b083      	sub	sp, #12
 801de04:	af00      	add	r7, sp, #0
 801de06:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801de08:	4a04      	ldr	r2, [pc, #16]	; (801de1c <netif_set_default+0x1c>)
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801de0e:	bf00      	nop
 801de10:	370c      	adds	r7, #12
 801de12:	46bd      	mov	sp, r7
 801de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de18:	4770      	bx	lr
 801de1a:	bf00      	nop
 801de1c:	20013dec 	.word	0x20013dec

0801de20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d107      	bne.n	801de3e <netif_set_up+0x1e>
 801de2e:	4b0f      	ldr	r3, [pc, #60]	; (801de6c <netif_set_up+0x4c>)
 801de30:	f44f 7254 	mov.w	r2, #848	; 0x350
 801de34:	490e      	ldr	r1, [pc, #56]	; (801de70 <netif_set_up+0x50>)
 801de36:	480f      	ldr	r0, [pc, #60]	; (801de74 <netif_set_up+0x54>)
 801de38:	f004 f9fc 	bl	8022234 <iprintf>
 801de3c:	e013      	b.n	801de66 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801de44:	f003 0301 	and.w	r3, r3, #1
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d10c      	bne.n	801de66 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801de52:	f043 0301 	orr.w	r3, r3, #1
 801de56:	b2da      	uxtb	r2, r3
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801de5e:	2103      	movs	r1, #3
 801de60:	6878      	ldr	r0, [r7, #4]
 801de62:	f000 f809 	bl	801de78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801de66:	3708      	adds	r7, #8
 801de68:	46bd      	mov	sp, r7
 801de6a:	bd80      	pop	{r7, pc}
 801de6c:	080273b4 	.word	0x080273b4
 801de70:	08027560 	.word	0x08027560
 801de74:	0802740c 	.word	0x0802740c

0801de78 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801de78:	b580      	push	{r7, lr}
 801de7a:	b082      	sub	sp, #8
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	6078      	str	r0, [r7, #4]
 801de80:	460b      	mov	r3, r1
 801de82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d106      	bne.n	801de98 <netif_issue_reports+0x20>
 801de8a:	4b18      	ldr	r3, [pc, #96]	; (801deec <netif_issue_reports+0x74>)
 801de8c:	f240 326d 	movw	r2, #877	; 0x36d
 801de90:	4917      	ldr	r1, [pc, #92]	; (801def0 <netif_issue_reports+0x78>)
 801de92:	4818      	ldr	r0, [pc, #96]	; (801def4 <netif_issue_reports+0x7c>)
 801de94:	f004 f9ce 	bl	8022234 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801de9e:	f003 0304 	and.w	r3, r3, #4
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d01e      	beq.n	801dee4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801deac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d017      	beq.n	801dee4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801deb4:	78fb      	ldrb	r3, [r7, #3]
 801deb6:	f003 0301 	and.w	r3, r3, #1
 801deba:	2b00      	cmp	r3, #0
 801debc:	d013      	beq.n	801dee6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	3304      	adds	r3, #4
 801dec2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d00e      	beq.n	801dee6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dece:	f003 0308 	and.w	r3, r3, #8
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d007      	beq.n	801dee6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	3304      	adds	r3, #4
 801deda:	4619      	mov	r1, r3
 801dedc:	6878      	ldr	r0, [r7, #4]
 801dede:	f002 fc35 	bl	802074c <etharp_request>
 801dee2:	e000      	b.n	801dee6 <netif_issue_reports+0x6e>
    return;
 801dee4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801dee6:	3708      	adds	r7, #8
 801dee8:	46bd      	mov	sp, r7
 801deea:	bd80      	pop	{r7, pc}
 801deec:	080273b4 	.word	0x080273b4
 801def0:	0802757c 	.word	0x0802757c
 801def4:	0802740c 	.word	0x0802740c

0801def8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801def8:	b580      	push	{r7, lr}
 801defa:	b082      	sub	sp, #8
 801defc:	af00      	add	r7, sp, #0
 801defe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	2b00      	cmp	r3, #0
 801df04:	d107      	bne.n	801df16 <netif_set_down+0x1e>
 801df06:	4b12      	ldr	r3, [pc, #72]	; (801df50 <netif_set_down+0x58>)
 801df08:	f240 329b 	movw	r2, #923	; 0x39b
 801df0c:	4911      	ldr	r1, [pc, #68]	; (801df54 <netif_set_down+0x5c>)
 801df0e:	4812      	ldr	r0, [pc, #72]	; (801df58 <netif_set_down+0x60>)
 801df10:	f004 f990 	bl	8022234 <iprintf>
 801df14:	e019      	b.n	801df4a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df1c:	f003 0301 	and.w	r3, r3, #1
 801df20:	2b00      	cmp	r3, #0
 801df22:	d012      	beq.n	801df4a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df2a:	f023 0301 	bic.w	r3, r3, #1
 801df2e:	b2da      	uxtb	r2, r3
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df3c:	f003 0308 	and.w	r3, r3, #8
 801df40:	2b00      	cmp	r3, #0
 801df42:	d002      	beq.n	801df4a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801df44:	6878      	ldr	r0, [r7, #4]
 801df46:	f001 ffbf 	bl	801fec8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801df4a:	3708      	adds	r7, #8
 801df4c:	46bd      	mov	sp, r7
 801df4e:	bd80      	pop	{r7, pc}
 801df50:	080273b4 	.word	0x080273b4
 801df54:	080275a0 	.word	0x080275a0
 801df58:	0802740c 	.word	0x0802740c

0801df5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b082      	sub	sp, #8
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d107      	bne.n	801df7a <netif_set_link_up+0x1e>
 801df6a:	4b13      	ldr	r3, [pc, #76]	; (801dfb8 <netif_set_link_up+0x5c>)
 801df6c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801df70:	4912      	ldr	r1, [pc, #72]	; (801dfbc <netif_set_link_up+0x60>)
 801df72:	4813      	ldr	r0, [pc, #76]	; (801dfc0 <netif_set_link_up+0x64>)
 801df74:	f004 f95e 	bl	8022234 <iprintf>
 801df78:	e01b      	b.n	801dfb2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df80:	f003 0304 	and.w	r3, r3, #4
 801df84:	2b00      	cmp	r3, #0
 801df86:	d114      	bne.n	801dfb2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df8e:	f043 0304 	orr.w	r3, r3, #4
 801df92:	b2da      	uxtb	r2, r3
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801df9a:	2103      	movs	r1, #3
 801df9c:	6878      	ldr	r0, [r7, #4]
 801df9e:	f7ff ff6b 	bl	801de78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	69db      	ldr	r3, [r3, #28]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d003      	beq.n	801dfb2 <netif_set_link_up+0x56>
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	69db      	ldr	r3, [r3, #28]
 801dfae:	6878      	ldr	r0, [r7, #4]
 801dfb0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801dfb2:	3708      	adds	r7, #8
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	bd80      	pop	{r7, pc}
 801dfb8:	080273b4 	.word	0x080273b4
 801dfbc:	080275c0 	.word	0x080275c0
 801dfc0:	0802740c 	.word	0x0802740c

0801dfc4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b082      	sub	sp, #8
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d107      	bne.n	801dfe2 <netif_set_link_down+0x1e>
 801dfd2:	4b11      	ldr	r3, [pc, #68]	; (801e018 <netif_set_link_down+0x54>)
 801dfd4:	f240 4206 	movw	r2, #1030	; 0x406
 801dfd8:	4910      	ldr	r1, [pc, #64]	; (801e01c <netif_set_link_down+0x58>)
 801dfda:	4811      	ldr	r0, [pc, #68]	; (801e020 <netif_set_link_down+0x5c>)
 801dfdc:	f004 f92a 	bl	8022234 <iprintf>
 801dfe0:	e017      	b.n	801e012 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dfe8:	f003 0304 	and.w	r3, r3, #4
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d010      	beq.n	801e012 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dff6:	f023 0304 	bic.w	r3, r3, #4
 801dffa:	b2da      	uxtb	r2, r3
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	69db      	ldr	r3, [r3, #28]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d003      	beq.n	801e012 <netif_set_link_down+0x4e>
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	69db      	ldr	r3, [r3, #28]
 801e00e:	6878      	ldr	r0, [r7, #4]
 801e010:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e012:	3708      	adds	r7, #8
 801e014:	46bd      	mov	sp, r7
 801e016:	bd80      	pop	{r7, pc}
 801e018:	080273b4 	.word	0x080273b4
 801e01c:	080275e4 	.word	0x080275e4
 801e020:	0802740c 	.word	0x0802740c

0801e024 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e024:	b480      	push	{r7}
 801e026:	b083      	sub	sp, #12
 801e028:	af00      	add	r7, sp, #0
 801e02a:	6078      	str	r0, [r7, #4]
 801e02c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d002      	beq.n	801e03a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	683a      	ldr	r2, [r7, #0]
 801e038:	61da      	str	r2, [r3, #28]
  }
}
 801e03a:	bf00      	nop
 801e03c:	370c      	adds	r7, #12
 801e03e:	46bd      	mov	sp, r7
 801e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e044:	4770      	bx	lr
	...

0801e048 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e048:	b580      	push	{r7, lr}
 801e04a:	b086      	sub	sp, #24
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
 801e050:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d106      	bne.n	801e066 <netif_loop_output+0x1e>
 801e058:	4b2d      	ldr	r3, [pc, #180]	; (801e110 <netif_loop_output+0xc8>)
 801e05a:	f240 424b 	movw	r2, #1099	; 0x44b
 801e05e:	492d      	ldr	r1, [pc, #180]	; (801e114 <netif_loop_output+0xcc>)
 801e060:	482d      	ldr	r0, [pc, #180]	; (801e118 <netif_loop_output+0xd0>)
 801e062:	f004 f8e7 	bl	8022234 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e066:	683b      	ldr	r3, [r7, #0]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d106      	bne.n	801e07a <netif_loop_output+0x32>
 801e06c:	4b28      	ldr	r3, [pc, #160]	; (801e110 <netif_loop_output+0xc8>)
 801e06e:	f240 424c 	movw	r2, #1100	; 0x44c
 801e072:	492a      	ldr	r1, [pc, #168]	; (801e11c <netif_loop_output+0xd4>)
 801e074:	4828      	ldr	r0, [pc, #160]	; (801e118 <netif_loop_output+0xd0>)
 801e076:	f004 f8dd 	bl	8022234 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e07a:	683b      	ldr	r3, [r7, #0]
 801e07c:	891b      	ldrh	r3, [r3, #8]
 801e07e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e082:	4619      	mov	r1, r3
 801e084:	200e      	movs	r0, #14
 801e086:	f000 f8bb 	bl	801e200 <pbuf_alloc>
 801e08a:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e08c:	693b      	ldr	r3, [r7, #16]
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d102      	bne.n	801e098 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e092:	f04f 33ff 	mov.w	r3, #4294967295
 801e096:	e037      	b.n	801e108 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e098:	6839      	ldr	r1, [r7, #0]
 801e09a:	6938      	ldr	r0, [r7, #16]
 801e09c:	f000 fcba 	bl	801ea14 <pbuf_copy>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	73fb      	strb	r3, [r7, #15]
 801e0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d005      	beq.n	801e0b8 <netif_loop_output+0x70>
    pbuf_free(r);
 801e0ac:	6938      	ldr	r0, [r7, #16]
 801e0ae:	f000 fb89 	bl	801e7c4 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e0b6:	e027      	b.n	801e108 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e0b8:	693b      	ldr	r3, [r7, #16]
 801e0ba:	617b      	str	r3, [r7, #20]
 801e0bc:	e002      	b.n	801e0c4 <netif_loop_output+0x7c>
 801e0be:	697b      	ldr	r3, [r7, #20]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	617b      	str	r3, [r7, #20]
 801e0c4:	697b      	ldr	r3, [r7, #20]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d1f8      	bne.n	801e0be <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d012      	beq.n	801e0fa <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d106      	bne.n	801e0ea <netif_loop_output+0xa2>
 801e0dc:	4b0c      	ldr	r3, [pc, #48]	; (801e110 <netif_loop_output+0xc8>)
 801e0de:	f240 4277 	movw	r2, #1143	; 0x477
 801e0e2:	490f      	ldr	r1, [pc, #60]	; (801e120 <netif_loop_output+0xd8>)
 801e0e4:	480c      	ldr	r0, [pc, #48]	; (801e118 <netif_loop_output+0xd0>)
 801e0e6:	f004 f8a5 	bl	8022234 <iprintf>
    netif->loop_last->next = r;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e0ee:	693a      	ldr	r2, [r7, #16]
 801e0f0:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	697a      	ldr	r2, [r7, #20]
 801e0f6:	63da      	str	r2, [r3, #60]	; 0x3c
 801e0f8:	e005      	b.n	801e106 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	693a      	ldr	r2, [r7, #16]
 801e0fe:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	697a      	ldr	r2, [r7, #20]
 801e104:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e106:	2300      	movs	r3, #0
}
 801e108:	4618      	mov	r0, r3
 801e10a:	3718      	adds	r7, #24
 801e10c:	46bd      	mov	sp, r7
 801e10e:	bd80      	pop	{r7, pc}
 801e110:	080273b4 	.word	0x080273b4
 801e114:	08027608 	.word	0x08027608
 801e118:	0802740c 	.word	0x0802740c
 801e11c:	0802762c 	.word	0x0802762c
 801e120:	0802764c 	.word	0x0802764c

0801e124 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e124:	b580      	push	{r7, lr}
 801e126:	b084      	sub	sp, #16
 801e128:	af00      	add	r7, sp, #0
 801e12a:	60f8      	str	r0, [r7, #12]
 801e12c:	60b9      	str	r1, [r7, #8]
 801e12e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e130:	68b9      	ldr	r1, [r7, #8]
 801e132:	68f8      	ldr	r0, [r7, #12]
 801e134:	f7ff ff88 	bl	801e048 <netif_loop_output>
 801e138:	4603      	mov	r3, r0
}
 801e13a:	4618      	mov	r0, r3
 801e13c:	3710      	adds	r7, #16
 801e13e:	46bd      	mov	sp, r7
 801e140:	bd80      	pop	{r7, pc}

0801e142 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e142:	b480      	push	{r7}
 801e144:	b085      	sub	sp, #20
 801e146:	af00      	add	r7, sp, #0
 801e148:	60f8      	str	r0, [r7, #12]
 801e14a:	60b9      	str	r1, [r7, #8]
 801e14c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e14e:	f06f 030b 	mvn.w	r3, #11
}
 801e152:	4618      	mov	r0, r3
 801e154:	3714      	adds	r7, #20
 801e156:	46bd      	mov	sp, r7
 801e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e15c:	4770      	bx	lr
	...

0801e160 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e160:	b480      	push	{r7}
 801e162:	b085      	sub	sp, #20
 801e164:	af00      	add	r7, sp, #0
 801e166:	4603      	mov	r3, r0
 801e168:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e16a:	79fb      	ldrb	r3, [r7, #7]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d013      	beq.n	801e198 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e170:	4b0d      	ldr	r3, [pc, #52]	; (801e1a8 <netif_get_by_index+0x48>)
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	60fb      	str	r3, [r7, #12]
 801e176:	e00c      	b.n	801e192 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e17e:	3301      	adds	r3, #1
 801e180:	b2db      	uxtb	r3, r3
 801e182:	79fa      	ldrb	r2, [r7, #7]
 801e184:	429a      	cmp	r2, r3
 801e186:	d101      	bne.n	801e18c <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	e006      	b.n	801e19a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	60fb      	str	r3, [r7, #12]
 801e192:	68fb      	ldr	r3, [r7, #12]
 801e194:	2b00      	cmp	r3, #0
 801e196:	d1ef      	bne.n	801e178 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e198:	2300      	movs	r3, #0
}
 801e19a:	4618      	mov	r0, r3
 801e19c:	3714      	adds	r7, #20
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a4:	4770      	bx	lr
 801e1a6:	bf00      	nop
 801e1a8:	20013de8 	.word	0x20013de8

0801e1ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e1ac:	b480      	push	{r7}
 801e1ae:	b085      	sub	sp, #20
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	60f8      	str	r0, [r7, #12]
 801e1b4:	60b9      	str	r1, [r7, #8]
 801e1b6:	4611      	mov	r1, r2
 801e1b8:	461a      	mov	r2, r3
 801e1ba:	460b      	mov	r3, r1
 801e1bc:	80fb      	strh	r3, [r7, #6]
 801e1be:	4613      	mov	r3, r2
 801e1c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	2200      	movs	r2, #0
 801e1c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	68ba      	ldr	r2, [r7, #8]
 801e1cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	88fa      	ldrh	r2, [r7, #6]
 801e1d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	88ba      	ldrh	r2, [r7, #4]
 801e1d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e1da:	8b3b      	ldrh	r3, [r7, #24]
 801e1dc:	b2da      	uxtb	r2, r3
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	7f3a      	ldrb	r2, [r7, #28]
 801e1e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	73da      	strb	r2, [r3, #15]
}
 801e1f4:	bf00      	nop
 801e1f6:	3714      	adds	r7, #20
 801e1f8:	46bd      	mov	sp, r7
 801e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1fe:	4770      	bx	lr

0801e200 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b08c      	sub	sp, #48	; 0x30
 801e204:	af02      	add	r7, sp, #8
 801e206:	4603      	mov	r3, r0
 801e208:	71fb      	strb	r3, [r7, #7]
 801e20a:	460b      	mov	r3, r1
 801e20c:	80bb      	strh	r3, [r7, #4]
 801e20e:	4613      	mov	r3, r2
 801e210:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e212:	79fb      	ldrb	r3, [r7, #7]
 801e214:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e216:	887b      	ldrh	r3, [r7, #2]
 801e218:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e21c:	d07d      	beq.n	801e31a <pbuf_alloc+0x11a>
 801e21e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e222:	f300 80c6 	bgt.w	801e3b2 <pbuf_alloc+0x1b2>
 801e226:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e22a:	d010      	beq.n	801e24e <pbuf_alloc+0x4e>
 801e22c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e230:	f300 80bf 	bgt.w	801e3b2 <pbuf_alloc+0x1b2>
 801e234:	2b01      	cmp	r3, #1
 801e236:	d002      	beq.n	801e23e <pbuf_alloc+0x3e>
 801e238:	2b41      	cmp	r3, #65	; 0x41
 801e23a:	f040 80ba 	bne.w	801e3b2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e23e:	887a      	ldrh	r2, [r7, #2]
 801e240:	88bb      	ldrh	r3, [r7, #4]
 801e242:	4619      	mov	r1, r3
 801e244:	2000      	movs	r0, #0
 801e246:	f000 f8cf 	bl	801e3e8 <pbuf_alloc_reference>
 801e24a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e24c:	e0bb      	b.n	801e3c6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e24e:	2300      	movs	r3, #0
 801e250:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e252:	2300      	movs	r3, #0
 801e254:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e256:	88bb      	ldrh	r3, [r7, #4]
 801e258:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e25a:	2005      	movs	r0, #5
 801e25c:	f7ff fb32 	bl	801d8c4 <memp_malloc>
 801e260:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e262:	693b      	ldr	r3, [r7, #16]
 801e264:	2b00      	cmp	r3, #0
 801e266:	d107      	bne.n	801e278 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d002      	beq.n	801e274 <pbuf_alloc+0x74>
            pbuf_free(p);
 801e26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e270:	f000 faa8 	bl	801e7c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e274:	2300      	movs	r3, #0
 801e276:	e0a7      	b.n	801e3c8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e27a:	3303      	adds	r3, #3
 801e27c:	b29b      	uxth	r3, r3
 801e27e:	f023 0303 	bic.w	r3, r3, #3
 801e282:	b29b      	uxth	r3, r3
 801e284:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e288:	b29b      	uxth	r3, r3
 801e28a:	8b7a      	ldrh	r2, [r7, #26]
 801e28c:	4293      	cmp	r3, r2
 801e28e:	bf28      	it	cs
 801e290:	4613      	movcs	r3, r2
 801e292:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e296:	3310      	adds	r3, #16
 801e298:	693a      	ldr	r2, [r7, #16]
 801e29a:	4413      	add	r3, r2
 801e29c:	3303      	adds	r3, #3
 801e29e:	f023 0303 	bic.w	r3, r3, #3
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	89f9      	ldrh	r1, [r7, #14]
 801e2a6:	8b7a      	ldrh	r2, [r7, #26]
 801e2a8:	2300      	movs	r3, #0
 801e2aa:	9301      	str	r3, [sp, #4]
 801e2ac:	887b      	ldrh	r3, [r7, #2]
 801e2ae:	9300      	str	r3, [sp, #0]
 801e2b0:	460b      	mov	r3, r1
 801e2b2:	4601      	mov	r1, r0
 801e2b4:	6938      	ldr	r0, [r7, #16]
 801e2b6:	f7ff ff79 	bl	801e1ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e2ba:	693b      	ldr	r3, [r7, #16]
 801e2bc:	685b      	ldr	r3, [r3, #4]
 801e2be:	f003 0303 	and.w	r3, r3, #3
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d006      	beq.n	801e2d4 <pbuf_alloc+0xd4>
 801e2c6:	4b42      	ldr	r3, [pc, #264]	; (801e3d0 <pbuf_alloc+0x1d0>)
 801e2c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e2cc:	4941      	ldr	r1, [pc, #260]	; (801e3d4 <pbuf_alloc+0x1d4>)
 801e2ce:	4842      	ldr	r0, [pc, #264]	; (801e3d8 <pbuf_alloc+0x1d8>)
 801e2d0:	f003 ffb0 	bl	8022234 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801e2d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e2d6:	3303      	adds	r3, #3
 801e2d8:	f023 0303 	bic.w	r3, r3, #3
 801e2dc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801e2e0:	d106      	bne.n	801e2f0 <pbuf_alloc+0xf0>
 801e2e2:	4b3b      	ldr	r3, [pc, #236]	; (801e3d0 <pbuf_alloc+0x1d0>)
 801e2e4:	f44f 7281 	mov.w	r2, #258	; 0x102
 801e2e8:	493c      	ldr	r1, [pc, #240]	; (801e3dc <pbuf_alloc+0x1dc>)
 801e2ea:	483b      	ldr	r0, [pc, #236]	; (801e3d8 <pbuf_alloc+0x1d8>)
 801e2ec:	f003 ffa2 	bl	8022234 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d102      	bne.n	801e2fc <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801e2f6:	693b      	ldr	r3, [r7, #16]
 801e2f8:	627b      	str	r3, [r7, #36]	; 0x24
 801e2fa:	e002      	b.n	801e302 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801e2fc:	69fb      	ldr	r3, [r7, #28]
 801e2fe:	693a      	ldr	r2, [r7, #16]
 801e300:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801e302:	693b      	ldr	r3, [r7, #16]
 801e304:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801e306:	8b7a      	ldrh	r2, [r7, #26]
 801e308:	89fb      	ldrh	r3, [r7, #14]
 801e30a:	1ad3      	subs	r3, r2, r3
 801e30c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801e30e:	2300      	movs	r3, #0
 801e310:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801e312:	8b7b      	ldrh	r3, [r7, #26]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d1a0      	bne.n	801e25a <pbuf_alloc+0x5a>
      break;
 801e318:	e055      	b.n	801e3c6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801e31a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e31c:	3303      	adds	r3, #3
 801e31e:	b29b      	uxth	r3, r3
 801e320:	f023 0303 	bic.w	r3, r3, #3
 801e324:	b29a      	uxth	r2, r3
 801e326:	88bb      	ldrh	r3, [r7, #4]
 801e328:	3303      	adds	r3, #3
 801e32a:	b29b      	uxth	r3, r3
 801e32c:	f023 0303 	bic.w	r3, r3, #3
 801e330:	b29b      	uxth	r3, r3
 801e332:	4413      	add	r3, r2
 801e334:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801e336:	8b3b      	ldrh	r3, [r7, #24]
 801e338:	3310      	adds	r3, #16
 801e33a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e33c:	8b3a      	ldrh	r2, [r7, #24]
 801e33e:	88bb      	ldrh	r3, [r7, #4]
 801e340:	3303      	adds	r3, #3
 801e342:	f023 0303 	bic.w	r3, r3, #3
 801e346:	429a      	cmp	r2, r3
 801e348:	d306      	bcc.n	801e358 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801e34a:	8afa      	ldrh	r2, [r7, #22]
 801e34c:	88bb      	ldrh	r3, [r7, #4]
 801e34e:	3303      	adds	r3, #3
 801e350:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e354:	429a      	cmp	r2, r3
 801e356:	d201      	bcs.n	801e35c <pbuf_alloc+0x15c>
        return NULL;
 801e358:	2300      	movs	r3, #0
 801e35a:	e035      	b.n	801e3c8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801e35c:	8afb      	ldrh	r3, [r7, #22]
 801e35e:	4618      	mov	r0, r3
 801e360:	f7ff f920 	bl	801d5a4 <mem_malloc>
 801e364:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d101      	bne.n	801e370 <pbuf_alloc+0x170>
        return NULL;
 801e36c:	2300      	movs	r3, #0
 801e36e:	e02b      	b.n	801e3c8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801e370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e372:	3310      	adds	r3, #16
 801e374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e376:	4413      	add	r3, r2
 801e378:	3303      	adds	r3, #3
 801e37a:	f023 0303 	bic.w	r3, r3, #3
 801e37e:	4618      	mov	r0, r3
 801e380:	88b9      	ldrh	r1, [r7, #4]
 801e382:	88ba      	ldrh	r2, [r7, #4]
 801e384:	2300      	movs	r3, #0
 801e386:	9301      	str	r3, [sp, #4]
 801e388:	887b      	ldrh	r3, [r7, #2]
 801e38a:	9300      	str	r3, [sp, #0]
 801e38c:	460b      	mov	r3, r1
 801e38e:	4601      	mov	r1, r0
 801e390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e392:	f7ff ff0b 	bl	801e1ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e398:	685b      	ldr	r3, [r3, #4]
 801e39a:	f003 0303 	and.w	r3, r3, #3
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d010      	beq.n	801e3c4 <pbuf_alloc+0x1c4>
 801e3a2:	4b0b      	ldr	r3, [pc, #44]	; (801e3d0 <pbuf_alloc+0x1d0>)
 801e3a4:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e3a8:	490d      	ldr	r1, [pc, #52]	; (801e3e0 <pbuf_alloc+0x1e0>)
 801e3aa:	480b      	ldr	r0, [pc, #44]	; (801e3d8 <pbuf_alloc+0x1d8>)
 801e3ac:	f003 ff42 	bl	8022234 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801e3b0:	e008      	b.n	801e3c4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801e3b2:	4b07      	ldr	r3, [pc, #28]	; (801e3d0 <pbuf_alloc+0x1d0>)
 801e3b4:	f240 1227 	movw	r2, #295	; 0x127
 801e3b8:	490a      	ldr	r1, [pc, #40]	; (801e3e4 <pbuf_alloc+0x1e4>)
 801e3ba:	4807      	ldr	r0, [pc, #28]	; (801e3d8 <pbuf_alloc+0x1d8>)
 801e3bc:	f003 ff3a 	bl	8022234 <iprintf>
      return NULL;
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	e001      	b.n	801e3c8 <pbuf_alloc+0x1c8>
      break;
 801e3c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e3c8:	4618      	mov	r0, r3
 801e3ca:	3728      	adds	r7, #40	; 0x28
 801e3cc:	46bd      	mov	sp, r7
 801e3ce:	bd80      	pop	{r7, pc}
 801e3d0:	080276ec 	.word	0x080276ec
 801e3d4:	0802771c 	.word	0x0802771c
 801e3d8:	0802774c 	.word	0x0802774c
 801e3dc:	08027774 	.word	0x08027774
 801e3e0:	080277a8 	.word	0x080277a8
 801e3e4:	080277d4 	.word	0x080277d4

0801e3e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801e3e8:	b580      	push	{r7, lr}
 801e3ea:	b086      	sub	sp, #24
 801e3ec:	af02      	add	r7, sp, #8
 801e3ee:	6078      	str	r0, [r7, #4]
 801e3f0:	460b      	mov	r3, r1
 801e3f2:	807b      	strh	r3, [r7, #2]
 801e3f4:	4613      	mov	r3, r2
 801e3f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801e3f8:	883b      	ldrh	r3, [r7, #0]
 801e3fa:	2b41      	cmp	r3, #65	; 0x41
 801e3fc:	d009      	beq.n	801e412 <pbuf_alloc_reference+0x2a>
 801e3fe:	883b      	ldrh	r3, [r7, #0]
 801e400:	2b01      	cmp	r3, #1
 801e402:	d006      	beq.n	801e412 <pbuf_alloc_reference+0x2a>
 801e404:	4b0f      	ldr	r3, [pc, #60]	; (801e444 <pbuf_alloc_reference+0x5c>)
 801e406:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801e40a:	490f      	ldr	r1, [pc, #60]	; (801e448 <pbuf_alloc_reference+0x60>)
 801e40c:	480f      	ldr	r0, [pc, #60]	; (801e44c <pbuf_alloc_reference+0x64>)
 801e40e:	f003 ff11 	bl	8022234 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801e412:	2004      	movs	r0, #4
 801e414:	f7ff fa56 	bl	801d8c4 <memp_malloc>
 801e418:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d101      	bne.n	801e424 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801e420:	2300      	movs	r3, #0
 801e422:	e00b      	b.n	801e43c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801e424:	8879      	ldrh	r1, [r7, #2]
 801e426:	887a      	ldrh	r2, [r7, #2]
 801e428:	2300      	movs	r3, #0
 801e42a:	9301      	str	r3, [sp, #4]
 801e42c:	883b      	ldrh	r3, [r7, #0]
 801e42e:	9300      	str	r3, [sp, #0]
 801e430:	460b      	mov	r3, r1
 801e432:	6879      	ldr	r1, [r7, #4]
 801e434:	68f8      	ldr	r0, [r7, #12]
 801e436:	f7ff feb9 	bl	801e1ac <pbuf_init_alloced_pbuf>
  return p;
 801e43a:	68fb      	ldr	r3, [r7, #12]
}
 801e43c:	4618      	mov	r0, r3
 801e43e:	3710      	adds	r7, #16
 801e440:	46bd      	mov	sp, r7
 801e442:	bd80      	pop	{r7, pc}
 801e444:	080276ec 	.word	0x080276ec
 801e448:	080277f0 	.word	0x080277f0
 801e44c:	0802774c 	.word	0x0802774c

0801e450 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801e450:	b580      	push	{r7, lr}
 801e452:	b088      	sub	sp, #32
 801e454:	af02      	add	r7, sp, #8
 801e456:	607b      	str	r3, [r7, #4]
 801e458:	4603      	mov	r3, r0
 801e45a:	73fb      	strb	r3, [r7, #15]
 801e45c:	460b      	mov	r3, r1
 801e45e:	81bb      	strh	r3, [r7, #12]
 801e460:	4613      	mov	r3, r2
 801e462:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801e464:	7bfb      	ldrb	r3, [r7, #15]
 801e466:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801e468:	8a7b      	ldrh	r3, [r7, #18]
 801e46a:	3303      	adds	r3, #3
 801e46c:	f023 0203 	bic.w	r2, r3, #3
 801e470:	89bb      	ldrh	r3, [r7, #12]
 801e472:	441a      	add	r2, r3
 801e474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e476:	429a      	cmp	r2, r3
 801e478:	d901      	bls.n	801e47e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801e47a:	2300      	movs	r3, #0
 801e47c:	e018      	b.n	801e4b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801e47e:	6a3b      	ldr	r3, [r7, #32]
 801e480:	2b00      	cmp	r3, #0
 801e482:	d007      	beq.n	801e494 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801e484:	8a7b      	ldrh	r3, [r7, #18]
 801e486:	3303      	adds	r3, #3
 801e488:	f023 0303 	bic.w	r3, r3, #3
 801e48c:	6a3a      	ldr	r2, [r7, #32]
 801e48e:	4413      	add	r3, r2
 801e490:	617b      	str	r3, [r7, #20]
 801e492:	e001      	b.n	801e498 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801e494:	2300      	movs	r3, #0
 801e496:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801e498:	6878      	ldr	r0, [r7, #4]
 801e49a:	89b9      	ldrh	r1, [r7, #12]
 801e49c:	89ba      	ldrh	r2, [r7, #12]
 801e49e:	2302      	movs	r3, #2
 801e4a0:	9301      	str	r3, [sp, #4]
 801e4a2:	897b      	ldrh	r3, [r7, #10]
 801e4a4:	9300      	str	r3, [sp, #0]
 801e4a6:	460b      	mov	r3, r1
 801e4a8:	6979      	ldr	r1, [r7, #20]
 801e4aa:	f7ff fe7f 	bl	801e1ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801e4ae:	687b      	ldr	r3, [r7, #4]
}
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	3718      	adds	r7, #24
 801e4b4:	46bd      	mov	sp, r7
 801e4b6:	bd80      	pop	{r7, pc}

0801e4b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b084      	sub	sp, #16
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]
 801e4c0:	460b      	mov	r3, r1
 801e4c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d106      	bne.n	801e4d8 <pbuf_realloc+0x20>
 801e4ca:	4b3a      	ldr	r3, [pc, #232]	; (801e5b4 <pbuf_realloc+0xfc>)
 801e4cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801e4d0:	4939      	ldr	r1, [pc, #228]	; (801e5b8 <pbuf_realloc+0x100>)
 801e4d2:	483a      	ldr	r0, [pc, #232]	; (801e5bc <pbuf_realloc+0x104>)
 801e4d4:	f003 feae 	bl	8022234 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	891b      	ldrh	r3, [r3, #8]
 801e4dc:	887a      	ldrh	r2, [r7, #2]
 801e4de:	429a      	cmp	r2, r3
 801e4e0:	d263      	bcs.n	801e5aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	891a      	ldrh	r2, [r3, #8]
 801e4e6:	887b      	ldrh	r3, [r7, #2]
 801e4e8:	1ad3      	subs	r3, r2, r3
 801e4ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801e4ec:	887b      	ldrh	r3, [r7, #2]
 801e4ee:	817b      	strh	r3, [r7, #10]
  q = p;
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801e4f4:	e018      	b.n	801e528 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801e4f6:	68fb      	ldr	r3, [r7, #12]
 801e4f8:	895b      	ldrh	r3, [r3, #10]
 801e4fa:	897a      	ldrh	r2, [r7, #10]
 801e4fc:	1ad3      	subs	r3, r2, r3
 801e4fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	891a      	ldrh	r2, [r3, #8]
 801e504:	893b      	ldrh	r3, [r7, #8]
 801e506:	1ad3      	subs	r3, r2, r3
 801e508:	b29a      	uxth	r2, r3
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d106      	bne.n	801e528 <pbuf_realloc+0x70>
 801e51a:	4b26      	ldr	r3, [pc, #152]	; (801e5b4 <pbuf_realloc+0xfc>)
 801e51c:	f240 12af 	movw	r2, #431	; 0x1af
 801e520:	4927      	ldr	r1, [pc, #156]	; (801e5c0 <pbuf_realloc+0x108>)
 801e522:	4826      	ldr	r0, [pc, #152]	; (801e5bc <pbuf_realloc+0x104>)
 801e524:	f003 fe86 	bl	8022234 <iprintf>
  while (rem_len > q->len) {
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	895b      	ldrh	r3, [r3, #10]
 801e52c:	897a      	ldrh	r2, [r7, #10]
 801e52e:	429a      	cmp	r2, r3
 801e530:	d8e1      	bhi.n	801e4f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	7b1b      	ldrb	r3, [r3, #12]
 801e536:	f003 030f 	and.w	r3, r3, #15
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d121      	bne.n	801e582 <pbuf_realloc+0xca>
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	895b      	ldrh	r3, [r3, #10]
 801e542:	897a      	ldrh	r2, [r7, #10]
 801e544:	429a      	cmp	r2, r3
 801e546:	d01c      	beq.n	801e582 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	7b5b      	ldrb	r3, [r3, #13]
 801e54c:	f003 0302 	and.w	r3, r3, #2
 801e550:	2b00      	cmp	r3, #0
 801e552:	d116      	bne.n	801e582 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	685a      	ldr	r2, [r3, #4]
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	1ad3      	subs	r3, r2, r3
 801e55c:	b29a      	uxth	r2, r3
 801e55e:	897b      	ldrh	r3, [r7, #10]
 801e560:	4413      	add	r3, r2
 801e562:	b29b      	uxth	r3, r3
 801e564:	4619      	mov	r1, r3
 801e566:	68f8      	ldr	r0, [r7, #12]
 801e568:	f7fe ff20 	bl	801d3ac <mem_trim>
 801e56c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	2b00      	cmp	r3, #0
 801e572:	d106      	bne.n	801e582 <pbuf_realloc+0xca>
 801e574:	4b0f      	ldr	r3, [pc, #60]	; (801e5b4 <pbuf_realloc+0xfc>)
 801e576:	f240 12bd 	movw	r2, #445	; 0x1bd
 801e57a:	4912      	ldr	r1, [pc, #72]	; (801e5c4 <pbuf_realloc+0x10c>)
 801e57c:	480f      	ldr	r0, [pc, #60]	; (801e5bc <pbuf_realloc+0x104>)
 801e57e:	f003 fe59 	bl	8022234 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	897a      	ldrh	r2, [r7, #10]
 801e586:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	895a      	ldrh	r2, [r3, #10]
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	2b00      	cmp	r3, #0
 801e596:	d004      	beq.n	801e5a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801e598:	68fb      	ldr	r3, [r7, #12]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	4618      	mov	r0, r3
 801e59e:	f000 f911 	bl	801e7c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	601a      	str	r2, [r3, #0]
 801e5a8:	e000      	b.n	801e5ac <pbuf_realloc+0xf4>
    return;
 801e5aa:	bf00      	nop

}
 801e5ac:	3710      	adds	r7, #16
 801e5ae:	46bd      	mov	sp, r7
 801e5b0:	bd80      	pop	{r7, pc}
 801e5b2:	bf00      	nop
 801e5b4:	080276ec 	.word	0x080276ec
 801e5b8:	08027804 	.word	0x08027804
 801e5bc:	0802774c 	.word	0x0802774c
 801e5c0:	0802781c 	.word	0x0802781c
 801e5c4:	08027834 	.word	0x08027834

0801e5c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b086      	sub	sp, #24
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	60f8      	str	r0, [r7, #12]
 801e5d0:	60b9      	str	r1, [r7, #8]
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d106      	bne.n	801e5ea <pbuf_add_header_impl+0x22>
 801e5dc:	4b2b      	ldr	r3, [pc, #172]	; (801e68c <pbuf_add_header_impl+0xc4>)
 801e5de:	f240 12df 	movw	r2, #479	; 0x1df
 801e5e2:	492b      	ldr	r1, [pc, #172]	; (801e690 <pbuf_add_header_impl+0xc8>)
 801e5e4:	482b      	ldr	r0, [pc, #172]	; (801e694 <pbuf_add_header_impl+0xcc>)
 801e5e6:	f003 fe25 	bl	8022234 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d003      	beq.n	801e5f8 <pbuf_add_header_impl+0x30>
 801e5f0:	68bb      	ldr	r3, [r7, #8]
 801e5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e5f6:	d301      	bcc.n	801e5fc <pbuf_add_header_impl+0x34>
    return 1;
 801e5f8:	2301      	movs	r3, #1
 801e5fa:	e043      	b.n	801e684 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801e5fc:	68bb      	ldr	r3, [r7, #8]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d101      	bne.n	801e606 <pbuf_add_header_impl+0x3e>
    return 0;
 801e602:	2300      	movs	r3, #0
 801e604:	e03e      	b.n	801e684 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801e606:	68bb      	ldr	r3, [r7, #8]
 801e608:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	891a      	ldrh	r2, [r3, #8]
 801e60e:	8a7b      	ldrh	r3, [r7, #18]
 801e610:	4413      	add	r3, r2
 801e612:	b29b      	uxth	r3, r3
 801e614:	8a7a      	ldrh	r2, [r7, #18]
 801e616:	429a      	cmp	r2, r3
 801e618:	d901      	bls.n	801e61e <pbuf_add_header_impl+0x56>
    return 1;
 801e61a:	2301      	movs	r3, #1
 801e61c:	e032      	b.n	801e684 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	7b1b      	ldrb	r3, [r3, #12]
 801e622:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801e624:	8a3b      	ldrh	r3, [r7, #16]
 801e626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d00c      	beq.n	801e648 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	685a      	ldr	r2, [r3, #4]
 801e632:	68bb      	ldr	r3, [r7, #8]
 801e634:	425b      	negs	r3, r3
 801e636:	4413      	add	r3, r2
 801e638:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	3310      	adds	r3, #16
 801e63e:	697a      	ldr	r2, [r7, #20]
 801e640:	429a      	cmp	r2, r3
 801e642:	d20d      	bcs.n	801e660 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801e644:	2301      	movs	r3, #1
 801e646:	e01d      	b.n	801e684 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801e648:	79fb      	ldrb	r3, [r7, #7]
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d006      	beq.n	801e65c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	685a      	ldr	r2, [r3, #4]
 801e652:	68bb      	ldr	r3, [r7, #8]
 801e654:	425b      	negs	r3, r3
 801e656:	4413      	add	r3, r2
 801e658:	617b      	str	r3, [r7, #20]
 801e65a:	e001      	b.n	801e660 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801e65c:	2301      	movs	r3, #1
 801e65e:	e011      	b.n	801e684 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	697a      	ldr	r2, [r7, #20]
 801e664:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	895a      	ldrh	r2, [r3, #10]
 801e66a:	8a7b      	ldrh	r3, [r7, #18]
 801e66c:	4413      	add	r3, r2
 801e66e:	b29a      	uxth	r2, r3
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	891a      	ldrh	r2, [r3, #8]
 801e678:	8a7b      	ldrh	r3, [r7, #18]
 801e67a:	4413      	add	r3, r2
 801e67c:	b29a      	uxth	r2, r3
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	811a      	strh	r2, [r3, #8]


  return 0;
 801e682:	2300      	movs	r3, #0
}
 801e684:	4618      	mov	r0, r3
 801e686:	3718      	adds	r7, #24
 801e688:	46bd      	mov	sp, r7
 801e68a:	bd80      	pop	{r7, pc}
 801e68c:	080276ec 	.word	0x080276ec
 801e690:	08027850 	.word	0x08027850
 801e694:	0802774c 	.word	0x0802774c

0801e698 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b082      	sub	sp, #8
 801e69c:	af00      	add	r7, sp, #0
 801e69e:	6078      	str	r0, [r7, #4]
 801e6a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	6839      	ldr	r1, [r7, #0]
 801e6a6:	6878      	ldr	r0, [r7, #4]
 801e6a8:	f7ff ff8e 	bl	801e5c8 <pbuf_add_header_impl>
 801e6ac:	4603      	mov	r3, r0
}
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	3708      	adds	r7, #8
 801e6b2:	46bd      	mov	sp, r7
 801e6b4:	bd80      	pop	{r7, pc}
	...

0801e6b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801e6b8:	b580      	push	{r7, lr}
 801e6ba:	b084      	sub	sp, #16
 801e6bc:	af00      	add	r7, sp, #0
 801e6be:	6078      	str	r0, [r7, #4]
 801e6c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d106      	bne.n	801e6d6 <pbuf_remove_header+0x1e>
 801e6c8:	4b20      	ldr	r3, [pc, #128]	; (801e74c <pbuf_remove_header+0x94>)
 801e6ca:	f240 224b 	movw	r2, #587	; 0x24b
 801e6ce:	4920      	ldr	r1, [pc, #128]	; (801e750 <pbuf_remove_header+0x98>)
 801e6d0:	4820      	ldr	r0, [pc, #128]	; (801e754 <pbuf_remove_header+0x9c>)
 801e6d2:	f003 fdaf 	bl	8022234 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d003      	beq.n	801e6e4 <pbuf_remove_header+0x2c>
 801e6dc:	683b      	ldr	r3, [r7, #0]
 801e6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e6e2:	d301      	bcc.n	801e6e8 <pbuf_remove_header+0x30>
    return 1;
 801e6e4:	2301      	movs	r3, #1
 801e6e6:	e02c      	b.n	801e742 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801e6e8:	683b      	ldr	r3, [r7, #0]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d101      	bne.n	801e6f2 <pbuf_remove_header+0x3a>
    return 0;
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	e027      	b.n	801e742 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801e6f2:	683b      	ldr	r3, [r7, #0]
 801e6f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	895b      	ldrh	r3, [r3, #10]
 801e6fa:	89fa      	ldrh	r2, [r7, #14]
 801e6fc:	429a      	cmp	r2, r3
 801e6fe:	d908      	bls.n	801e712 <pbuf_remove_header+0x5a>
 801e700:	4b12      	ldr	r3, [pc, #72]	; (801e74c <pbuf_remove_header+0x94>)
 801e702:	f240 2255 	movw	r2, #597	; 0x255
 801e706:	4914      	ldr	r1, [pc, #80]	; (801e758 <pbuf_remove_header+0xa0>)
 801e708:	4812      	ldr	r0, [pc, #72]	; (801e754 <pbuf_remove_header+0x9c>)
 801e70a:	f003 fd93 	bl	8022234 <iprintf>
 801e70e:	2301      	movs	r3, #1
 801e710:	e017      	b.n	801e742 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	685b      	ldr	r3, [r3, #4]
 801e716:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	685a      	ldr	r2, [r3, #4]
 801e71c:	683b      	ldr	r3, [r7, #0]
 801e71e:	441a      	add	r2, r3
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	895a      	ldrh	r2, [r3, #10]
 801e728:	89fb      	ldrh	r3, [r7, #14]
 801e72a:	1ad3      	subs	r3, r2, r3
 801e72c:	b29a      	uxth	r2, r3
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	891a      	ldrh	r2, [r3, #8]
 801e736:	89fb      	ldrh	r3, [r7, #14]
 801e738:	1ad3      	subs	r3, r2, r3
 801e73a:	b29a      	uxth	r2, r3
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801e740:	2300      	movs	r3, #0
}
 801e742:	4618      	mov	r0, r3
 801e744:	3710      	adds	r7, #16
 801e746:	46bd      	mov	sp, r7
 801e748:	bd80      	pop	{r7, pc}
 801e74a:	bf00      	nop
 801e74c:	080276ec 	.word	0x080276ec
 801e750:	08027850 	.word	0x08027850
 801e754:	0802774c 	.word	0x0802774c
 801e758:	0802785c 	.word	0x0802785c

0801e75c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801e75c:	b580      	push	{r7, lr}
 801e75e:	b082      	sub	sp, #8
 801e760:	af00      	add	r7, sp, #0
 801e762:	6078      	str	r0, [r7, #4]
 801e764:	460b      	mov	r3, r1
 801e766:	807b      	strh	r3, [r7, #2]
 801e768:	4613      	mov	r3, r2
 801e76a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801e76c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e770:	2b00      	cmp	r3, #0
 801e772:	da08      	bge.n	801e786 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801e774:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e778:	425b      	negs	r3, r3
 801e77a:	4619      	mov	r1, r3
 801e77c:	6878      	ldr	r0, [r7, #4]
 801e77e:	f7ff ff9b 	bl	801e6b8 <pbuf_remove_header>
 801e782:	4603      	mov	r3, r0
 801e784:	e007      	b.n	801e796 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801e786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e78a:	787a      	ldrb	r2, [r7, #1]
 801e78c:	4619      	mov	r1, r3
 801e78e:	6878      	ldr	r0, [r7, #4]
 801e790:	f7ff ff1a 	bl	801e5c8 <pbuf_add_header_impl>
 801e794:	4603      	mov	r3, r0
  }
}
 801e796:	4618      	mov	r0, r3
 801e798:	3708      	adds	r7, #8
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}

0801e79e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801e79e:	b580      	push	{r7, lr}
 801e7a0:	b082      	sub	sp, #8
 801e7a2:	af00      	add	r7, sp, #0
 801e7a4:	6078      	str	r0, [r7, #4]
 801e7a6:	460b      	mov	r3, r1
 801e7a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801e7aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e7ae:	2201      	movs	r2, #1
 801e7b0:	4619      	mov	r1, r3
 801e7b2:	6878      	ldr	r0, [r7, #4]
 801e7b4:	f7ff ffd2 	bl	801e75c <pbuf_header_impl>
 801e7b8:	4603      	mov	r3, r0
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	3708      	adds	r7, #8
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
	...

0801e7c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801e7c4:	b580      	push	{r7, lr}
 801e7c6:	b086      	sub	sp, #24
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d10b      	bne.n	801e7ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d106      	bne.n	801e7e6 <pbuf_free+0x22>
 801e7d8:	4b38      	ldr	r3, [pc, #224]	; (801e8bc <pbuf_free+0xf8>)
 801e7da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801e7de:	4938      	ldr	r1, [pc, #224]	; (801e8c0 <pbuf_free+0xfc>)
 801e7e0:	4838      	ldr	r0, [pc, #224]	; (801e8c4 <pbuf_free+0x100>)
 801e7e2:	f003 fd27 	bl	8022234 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	e063      	b.n	801e8b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801e7ee:	e05c      	b.n	801e8aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	7b9b      	ldrb	r3, [r3, #14]
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d106      	bne.n	801e806 <pbuf_free+0x42>
 801e7f8:	4b30      	ldr	r3, [pc, #192]	; (801e8bc <pbuf_free+0xf8>)
 801e7fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 801e7fe:	4932      	ldr	r1, [pc, #200]	; (801e8c8 <pbuf_free+0x104>)
 801e800:	4830      	ldr	r0, [pc, #192]	; (801e8c4 <pbuf_free+0x100>)
 801e802:	f003 fd17 	bl	8022234 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	7b9b      	ldrb	r3, [r3, #14]
 801e80a:	3b01      	subs	r3, #1
 801e80c:	b2da      	uxtb	r2, r3
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	739a      	strb	r2, [r3, #14]
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	7b9b      	ldrb	r3, [r3, #14]
 801e816:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801e818:	7dbb      	ldrb	r3, [r7, #22]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d143      	bne.n	801e8a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	7b1b      	ldrb	r3, [r3, #12]
 801e828:	f003 030f 	and.w	r3, r3, #15
 801e82c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	7b5b      	ldrb	r3, [r3, #13]
 801e832:	f003 0302 	and.w	r3, r3, #2
 801e836:	2b00      	cmp	r3, #0
 801e838:	d011      	beq.n	801e85e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801e83e:	68bb      	ldr	r3, [r7, #8]
 801e840:	691b      	ldr	r3, [r3, #16]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d106      	bne.n	801e854 <pbuf_free+0x90>
 801e846:	4b1d      	ldr	r3, [pc, #116]	; (801e8bc <pbuf_free+0xf8>)
 801e848:	f240 22ff 	movw	r2, #767	; 0x2ff
 801e84c:	491f      	ldr	r1, [pc, #124]	; (801e8cc <pbuf_free+0x108>)
 801e84e:	481d      	ldr	r0, [pc, #116]	; (801e8c4 <pbuf_free+0x100>)
 801e850:	f003 fcf0 	bl	8022234 <iprintf>
        pc->custom_free_function(p);
 801e854:	68bb      	ldr	r3, [r7, #8]
 801e856:	691b      	ldr	r3, [r3, #16]
 801e858:	6878      	ldr	r0, [r7, #4]
 801e85a:	4798      	blx	r3
 801e85c:	e01d      	b.n	801e89a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801e85e:	7bfb      	ldrb	r3, [r7, #15]
 801e860:	2b02      	cmp	r3, #2
 801e862:	d104      	bne.n	801e86e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801e864:	6879      	ldr	r1, [r7, #4]
 801e866:	2005      	movs	r0, #5
 801e868:	f7ff f89c 	bl	801d9a4 <memp_free>
 801e86c:	e015      	b.n	801e89a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801e86e:	7bfb      	ldrb	r3, [r7, #15]
 801e870:	2b01      	cmp	r3, #1
 801e872:	d104      	bne.n	801e87e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801e874:	6879      	ldr	r1, [r7, #4]
 801e876:	2004      	movs	r0, #4
 801e878:	f7ff f894 	bl	801d9a4 <memp_free>
 801e87c:	e00d      	b.n	801e89a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801e87e:	7bfb      	ldrb	r3, [r7, #15]
 801e880:	2b00      	cmp	r3, #0
 801e882:	d103      	bne.n	801e88c <pbuf_free+0xc8>
          mem_free(p);
 801e884:	6878      	ldr	r0, [r7, #4]
 801e886:	f7fe fd27 	bl	801d2d8 <mem_free>
 801e88a:	e006      	b.n	801e89a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801e88c:	4b0b      	ldr	r3, [pc, #44]	; (801e8bc <pbuf_free+0xf8>)
 801e88e:	f240 320f 	movw	r2, #783	; 0x30f
 801e892:	490f      	ldr	r1, [pc, #60]	; (801e8d0 <pbuf_free+0x10c>)
 801e894:	480b      	ldr	r0, [pc, #44]	; (801e8c4 <pbuf_free+0x100>)
 801e896:	f003 fccd 	bl	8022234 <iprintf>
        }
      }
      count++;
 801e89a:	7dfb      	ldrb	r3, [r7, #23]
 801e89c:	3301      	adds	r3, #1
 801e89e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801e8a0:	693b      	ldr	r3, [r7, #16]
 801e8a2:	607b      	str	r3, [r7, #4]
 801e8a4:	e001      	b.n	801e8aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d19f      	bne.n	801e7f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801e8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	3718      	adds	r7, #24
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}
 801e8ba:	bf00      	nop
 801e8bc:	080276ec 	.word	0x080276ec
 801e8c0:	08027850 	.word	0x08027850
 801e8c4:	0802774c 	.word	0x0802774c
 801e8c8:	0802787c 	.word	0x0802787c
 801e8cc:	08027894 	.word	0x08027894
 801e8d0:	080278b8 	.word	0x080278b8

0801e8d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b085      	sub	sp, #20
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801e8dc:	2300      	movs	r3, #0
 801e8de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801e8e0:	e005      	b.n	801e8ee <pbuf_clen+0x1a>
    ++len;
 801e8e2:	89fb      	ldrh	r3, [r7, #14]
 801e8e4:	3301      	adds	r3, #1
 801e8e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d1f6      	bne.n	801e8e2 <pbuf_clen+0xe>
  }
  return len;
 801e8f4:	89fb      	ldrh	r3, [r7, #14]
}
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	3714      	adds	r7, #20
 801e8fa:	46bd      	mov	sp, r7
 801e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e900:	4770      	bx	lr
	...

0801e904 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801e904:	b580      	push	{r7, lr}
 801e906:	b082      	sub	sp, #8
 801e908:	af00      	add	r7, sp, #0
 801e90a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d010      	beq.n	801e934 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	7b9b      	ldrb	r3, [r3, #14]
 801e916:	3301      	adds	r3, #1
 801e918:	b2da      	uxtb	r2, r3
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	7b9b      	ldrb	r3, [r3, #14]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d106      	bne.n	801e934 <pbuf_ref+0x30>
 801e926:	4b05      	ldr	r3, [pc, #20]	; (801e93c <pbuf_ref+0x38>)
 801e928:	f240 3242 	movw	r2, #834	; 0x342
 801e92c:	4904      	ldr	r1, [pc, #16]	; (801e940 <pbuf_ref+0x3c>)
 801e92e:	4805      	ldr	r0, [pc, #20]	; (801e944 <pbuf_ref+0x40>)
 801e930:	f003 fc80 	bl	8022234 <iprintf>
  }
}
 801e934:	bf00      	nop
 801e936:	3708      	adds	r7, #8
 801e938:	46bd      	mov	sp, r7
 801e93a:	bd80      	pop	{r7, pc}
 801e93c:	080276ec 	.word	0x080276ec
 801e940:	080278cc 	.word	0x080278cc
 801e944:	0802774c 	.word	0x0802774c

0801e948 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b084      	sub	sp, #16
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
 801e950:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d002      	beq.n	801e95e <pbuf_cat+0x16>
 801e958:	683b      	ldr	r3, [r7, #0]
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d107      	bne.n	801e96e <pbuf_cat+0x26>
 801e95e:	4b20      	ldr	r3, [pc, #128]	; (801e9e0 <pbuf_cat+0x98>)
 801e960:	f240 3259 	movw	r2, #857	; 0x359
 801e964:	491f      	ldr	r1, [pc, #124]	; (801e9e4 <pbuf_cat+0x9c>)
 801e966:	4820      	ldr	r0, [pc, #128]	; (801e9e8 <pbuf_cat+0xa0>)
 801e968:	f003 fc64 	bl	8022234 <iprintf>
 801e96c:	e034      	b.n	801e9d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	60fb      	str	r3, [r7, #12]
 801e972:	e00a      	b.n	801e98a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	891a      	ldrh	r2, [r3, #8]
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	891b      	ldrh	r3, [r3, #8]
 801e97c:	4413      	add	r3, r2
 801e97e:	b29a      	uxth	r2, r3
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	60fb      	str	r3, [r7, #12]
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d1f0      	bne.n	801e974 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	891a      	ldrh	r2, [r3, #8]
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	895b      	ldrh	r3, [r3, #10]
 801e99a:	429a      	cmp	r2, r3
 801e99c:	d006      	beq.n	801e9ac <pbuf_cat+0x64>
 801e99e:	4b10      	ldr	r3, [pc, #64]	; (801e9e0 <pbuf_cat+0x98>)
 801e9a0:	f240 3262 	movw	r2, #866	; 0x362
 801e9a4:	4911      	ldr	r1, [pc, #68]	; (801e9ec <pbuf_cat+0xa4>)
 801e9a6:	4810      	ldr	r0, [pc, #64]	; (801e9e8 <pbuf_cat+0xa0>)
 801e9a8:	f003 fc44 	bl	8022234 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d006      	beq.n	801e9c2 <pbuf_cat+0x7a>
 801e9b4:	4b0a      	ldr	r3, [pc, #40]	; (801e9e0 <pbuf_cat+0x98>)
 801e9b6:	f240 3263 	movw	r2, #867	; 0x363
 801e9ba:	490d      	ldr	r1, [pc, #52]	; (801e9f0 <pbuf_cat+0xa8>)
 801e9bc:	480a      	ldr	r0, [pc, #40]	; (801e9e8 <pbuf_cat+0xa0>)
 801e9be:	f003 fc39 	bl	8022234 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801e9c2:	68fb      	ldr	r3, [r7, #12]
 801e9c4:	891a      	ldrh	r2, [r3, #8]
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	891b      	ldrh	r3, [r3, #8]
 801e9ca:	4413      	add	r3, r2
 801e9cc:	b29a      	uxth	r2, r3
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	683a      	ldr	r2, [r7, #0]
 801e9d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801e9d8:	3710      	adds	r7, #16
 801e9da:	46bd      	mov	sp, r7
 801e9dc:	bd80      	pop	{r7, pc}
 801e9de:	bf00      	nop
 801e9e0:	080276ec 	.word	0x080276ec
 801e9e4:	080278e0 	.word	0x080278e0
 801e9e8:	0802774c 	.word	0x0802774c
 801e9ec:	08027918 	.word	0x08027918
 801e9f0:	08027948 	.word	0x08027948

0801e9f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
 801e9fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801e9fe:	6839      	ldr	r1, [r7, #0]
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f7ff ffa1 	bl	801e948 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801ea06:	6838      	ldr	r0, [r7, #0]
 801ea08:	f7ff ff7c 	bl	801e904 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801ea0c:	bf00      	nop
 801ea0e:	3708      	adds	r7, #8
 801ea10:	46bd      	mov	sp, r7
 801ea12:	bd80      	pop	{r7, pc}

0801ea14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b086      	sub	sp, #24
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
 801ea1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801ea1e:	2300      	movs	r3, #0
 801ea20:	617b      	str	r3, [r7, #20]
 801ea22:	2300      	movs	r3, #0
 801ea24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d008      	beq.n	801ea3e <pbuf_copy+0x2a>
 801ea2c:	683b      	ldr	r3, [r7, #0]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d005      	beq.n	801ea3e <pbuf_copy+0x2a>
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	891a      	ldrh	r2, [r3, #8]
 801ea36:	683b      	ldr	r3, [r7, #0]
 801ea38:	891b      	ldrh	r3, [r3, #8]
 801ea3a:	429a      	cmp	r2, r3
 801ea3c:	d209      	bcs.n	801ea52 <pbuf_copy+0x3e>
 801ea3e:	4b57      	ldr	r3, [pc, #348]	; (801eb9c <pbuf_copy+0x188>)
 801ea40:	f240 32c9 	movw	r2, #969	; 0x3c9
 801ea44:	4956      	ldr	r1, [pc, #344]	; (801eba0 <pbuf_copy+0x18c>)
 801ea46:	4857      	ldr	r0, [pc, #348]	; (801eba4 <pbuf_copy+0x190>)
 801ea48:	f003 fbf4 	bl	8022234 <iprintf>
 801ea4c:	f06f 030f 	mvn.w	r3, #15
 801ea50:	e09f      	b.n	801eb92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	895b      	ldrh	r3, [r3, #10]
 801ea56:	461a      	mov	r2, r3
 801ea58:	697b      	ldr	r3, [r7, #20]
 801ea5a:	1ad2      	subs	r2, r2, r3
 801ea5c:	683b      	ldr	r3, [r7, #0]
 801ea5e:	895b      	ldrh	r3, [r3, #10]
 801ea60:	4619      	mov	r1, r3
 801ea62:	693b      	ldr	r3, [r7, #16]
 801ea64:	1acb      	subs	r3, r1, r3
 801ea66:	429a      	cmp	r2, r3
 801ea68:	d306      	bcc.n	801ea78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801ea6a:	683b      	ldr	r3, [r7, #0]
 801ea6c:	895b      	ldrh	r3, [r3, #10]
 801ea6e:	461a      	mov	r2, r3
 801ea70:	693b      	ldr	r3, [r7, #16]
 801ea72:	1ad3      	subs	r3, r2, r3
 801ea74:	60fb      	str	r3, [r7, #12]
 801ea76:	e005      	b.n	801ea84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	895b      	ldrh	r3, [r3, #10]
 801ea7c:	461a      	mov	r2, r3
 801ea7e:	697b      	ldr	r3, [r7, #20]
 801ea80:	1ad3      	subs	r3, r2, r3
 801ea82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	685a      	ldr	r2, [r3, #4]
 801ea88:	697b      	ldr	r3, [r7, #20]
 801ea8a:	18d0      	adds	r0, r2, r3
 801ea8c:	683b      	ldr	r3, [r7, #0]
 801ea8e:	685a      	ldr	r2, [r3, #4]
 801ea90:	693b      	ldr	r3, [r7, #16]
 801ea92:	4413      	add	r3, r2
 801ea94:	68fa      	ldr	r2, [r7, #12]
 801ea96:	4619      	mov	r1, r3
 801ea98:	f003 fabc 	bl	8022014 <memcpy>
    offset_to += len;
 801ea9c:	697a      	ldr	r2, [r7, #20]
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	4413      	add	r3, r2
 801eaa2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801eaa4:	693a      	ldr	r2, [r7, #16]
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	4413      	add	r3, r2
 801eaaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	895b      	ldrh	r3, [r3, #10]
 801eab0:	461a      	mov	r2, r3
 801eab2:	697b      	ldr	r3, [r7, #20]
 801eab4:	4293      	cmp	r3, r2
 801eab6:	d906      	bls.n	801eac6 <pbuf_copy+0xb2>
 801eab8:	4b38      	ldr	r3, [pc, #224]	; (801eb9c <pbuf_copy+0x188>)
 801eaba:	f240 32d9 	movw	r2, #985	; 0x3d9
 801eabe:	493a      	ldr	r1, [pc, #232]	; (801eba8 <pbuf_copy+0x194>)
 801eac0:	4838      	ldr	r0, [pc, #224]	; (801eba4 <pbuf_copy+0x190>)
 801eac2:	f003 fbb7 	bl	8022234 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801eac6:	683b      	ldr	r3, [r7, #0]
 801eac8:	895b      	ldrh	r3, [r3, #10]
 801eaca:	461a      	mov	r2, r3
 801eacc:	693b      	ldr	r3, [r7, #16]
 801eace:	4293      	cmp	r3, r2
 801ead0:	d906      	bls.n	801eae0 <pbuf_copy+0xcc>
 801ead2:	4b32      	ldr	r3, [pc, #200]	; (801eb9c <pbuf_copy+0x188>)
 801ead4:	f240 32da 	movw	r2, #986	; 0x3da
 801ead8:	4934      	ldr	r1, [pc, #208]	; (801ebac <pbuf_copy+0x198>)
 801eada:	4832      	ldr	r0, [pc, #200]	; (801eba4 <pbuf_copy+0x190>)
 801eadc:	f003 fbaa 	bl	8022234 <iprintf>
    if (offset_from >= p_from->len) {
 801eae0:	683b      	ldr	r3, [r7, #0]
 801eae2:	895b      	ldrh	r3, [r3, #10]
 801eae4:	461a      	mov	r2, r3
 801eae6:	693b      	ldr	r3, [r7, #16]
 801eae8:	4293      	cmp	r3, r2
 801eaea:	d304      	bcc.n	801eaf6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801eaec:	2300      	movs	r3, #0
 801eaee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801eaf0:	683b      	ldr	r3, [r7, #0]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	895b      	ldrh	r3, [r3, #10]
 801eafa:	461a      	mov	r2, r3
 801eafc:	697b      	ldr	r3, [r7, #20]
 801eafe:	4293      	cmp	r3, r2
 801eb00:	d114      	bne.n	801eb2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801eb02:	2300      	movs	r3, #0
 801eb04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d10c      	bne.n	801eb2c <pbuf_copy+0x118>
 801eb12:	683b      	ldr	r3, [r7, #0]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d009      	beq.n	801eb2c <pbuf_copy+0x118>
 801eb18:	4b20      	ldr	r3, [pc, #128]	; (801eb9c <pbuf_copy+0x188>)
 801eb1a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801eb1e:	4924      	ldr	r1, [pc, #144]	; (801ebb0 <pbuf_copy+0x19c>)
 801eb20:	4820      	ldr	r0, [pc, #128]	; (801eba4 <pbuf_copy+0x190>)
 801eb22:	f003 fb87 	bl	8022234 <iprintf>
 801eb26:	f06f 030f 	mvn.w	r3, #15
 801eb2a:	e032      	b.n	801eb92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801eb2c:	683b      	ldr	r3, [r7, #0]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d013      	beq.n	801eb5a <pbuf_copy+0x146>
 801eb32:	683b      	ldr	r3, [r7, #0]
 801eb34:	895a      	ldrh	r2, [r3, #10]
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	891b      	ldrh	r3, [r3, #8]
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	d10d      	bne.n	801eb5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801eb3e:	683b      	ldr	r3, [r7, #0]
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d009      	beq.n	801eb5a <pbuf_copy+0x146>
 801eb46:	4b15      	ldr	r3, [pc, #84]	; (801eb9c <pbuf_copy+0x188>)
 801eb48:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801eb4c:	4919      	ldr	r1, [pc, #100]	; (801ebb4 <pbuf_copy+0x1a0>)
 801eb4e:	4815      	ldr	r0, [pc, #84]	; (801eba4 <pbuf_copy+0x190>)
 801eb50:	f003 fb70 	bl	8022234 <iprintf>
 801eb54:	f06f 0305 	mvn.w	r3, #5
 801eb58:	e01b      	b.n	801eb92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d013      	beq.n	801eb88 <pbuf_copy+0x174>
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	895a      	ldrh	r2, [r3, #10]
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	891b      	ldrh	r3, [r3, #8]
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	d10d      	bne.n	801eb88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d009      	beq.n	801eb88 <pbuf_copy+0x174>
 801eb74:	4b09      	ldr	r3, [pc, #36]	; (801eb9c <pbuf_copy+0x188>)
 801eb76:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801eb7a:	490e      	ldr	r1, [pc, #56]	; (801ebb4 <pbuf_copy+0x1a0>)
 801eb7c:	4809      	ldr	r0, [pc, #36]	; (801eba4 <pbuf_copy+0x190>)
 801eb7e:	f003 fb59 	bl	8022234 <iprintf>
 801eb82:	f06f 0305 	mvn.w	r3, #5
 801eb86:	e004      	b.n	801eb92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801eb88:	683b      	ldr	r3, [r7, #0]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	f47f af61 	bne.w	801ea52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801eb90:	2300      	movs	r3, #0
}
 801eb92:	4618      	mov	r0, r3
 801eb94:	3718      	adds	r7, #24
 801eb96:	46bd      	mov	sp, r7
 801eb98:	bd80      	pop	{r7, pc}
 801eb9a:	bf00      	nop
 801eb9c:	080276ec 	.word	0x080276ec
 801eba0:	08027994 	.word	0x08027994
 801eba4:	0802774c 	.word	0x0802774c
 801eba8:	080279c4 	.word	0x080279c4
 801ebac:	080279dc 	.word	0x080279dc
 801ebb0:	080279f8 	.word	0x080279f8
 801ebb4:	08027a08 	.word	0x08027a08

0801ebb8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801ebb8:	b580      	push	{r7, lr}
 801ebba:	b088      	sub	sp, #32
 801ebbc:	af00      	add	r7, sp, #0
 801ebbe:	60f8      	str	r0, [r7, #12]
 801ebc0:	60b9      	str	r1, [r7, #8]
 801ebc2:	4613      	mov	r3, r2
 801ebc4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801ebc6:	88fb      	ldrh	r3, [r7, #6]
 801ebc8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801ebca:	2300      	movs	r3, #0
 801ebcc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d109      	bne.n	801ebe8 <pbuf_take+0x30>
 801ebd4:	4b3a      	ldr	r3, [pc, #232]	; (801ecc0 <pbuf_take+0x108>)
 801ebd6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801ebda:	493a      	ldr	r1, [pc, #232]	; (801ecc4 <pbuf_take+0x10c>)
 801ebdc:	483a      	ldr	r0, [pc, #232]	; (801ecc8 <pbuf_take+0x110>)
 801ebde:	f003 fb29 	bl	8022234 <iprintf>
 801ebe2:	f06f 030f 	mvn.w	r3, #15
 801ebe6:	e067      	b.n	801ecb8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801ebe8:	68bb      	ldr	r3, [r7, #8]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d109      	bne.n	801ec02 <pbuf_take+0x4a>
 801ebee:	4b34      	ldr	r3, [pc, #208]	; (801ecc0 <pbuf_take+0x108>)
 801ebf0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801ebf4:	4935      	ldr	r1, [pc, #212]	; (801eccc <pbuf_take+0x114>)
 801ebf6:	4834      	ldr	r0, [pc, #208]	; (801ecc8 <pbuf_take+0x110>)
 801ebf8:	f003 fb1c 	bl	8022234 <iprintf>
 801ebfc:	f06f 030f 	mvn.w	r3, #15
 801ec00:	e05a      	b.n	801ecb8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	891b      	ldrh	r3, [r3, #8]
 801ec06:	88fa      	ldrh	r2, [r7, #6]
 801ec08:	429a      	cmp	r2, r3
 801ec0a:	d909      	bls.n	801ec20 <pbuf_take+0x68>
 801ec0c:	4b2c      	ldr	r3, [pc, #176]	; (801ecc0 <pbuf_take+0x108>)
 801ec0e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801ec12:	492f      	ldr	r1, [pc, #188]	; (801ecd0 <pbuf_take+0x118>)
 801ec14:	482c      	ldr	r0, [pc, #176]	; (801ecc8 <pbuf_take+0x110>)
 801ec16:	f003 fb0d 	bl	8022234 <iprintf>
 801ec1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ec1e:	e04b      	b.n	801ecb8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801ec20:	68fb      	ldr	r3, [r7, #12]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d007      	beq.n	801ec36 <pbuf_take+0x7e>
 801ec26:	68bb      	ldr	r3, [r7, #8]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d004      	beq.n	801ec36 <pbuf_take+0x7e>
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	891b      	ldrh	r3, [r3, #8]
 801ec30:	88fa      	ldrh	r2, [r7, #6]
 801ec32:	429a      	cmp	r2, r3
 801ec34:	d902      	bls.n	801ec3c <pbuf_take+0x84>
    return ERR_ARG;
 801ec36:	f06f 030f 	mvn.w	r3, #15
 801ec3a:	e03d      	b.n	801ecb8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	61fb      	str	r3, [r7, #28]
 801ec40:	e028      	b.n	801ec94 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801ec42:	69fb      	ldr	r3, [r7, #28]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d106      	bne.n	801ec56 <pbuf_take+0x9e>
 801ec48:	4b1d      	ldr	r3, [pc, #116]	; (801ecc0 <pbuf_take+0x108>)
 801ec4a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801ec4e:	4921      	ldr	r1, [pc, #132]	; (801ecd4 <pbuf_take+0x11c>)
 801ec50:	481d      	ldr	r0, [pc, #116]	; (801ecc8 <pbuf_take+0x110>)
 801ec52:	f003 faef 	bl	8022234 <iprintf>
    buf_copy_len = total_copy_len;
 801ec56:	697b      	ldr	r3, [r7, #20]
 801ec58:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801ec5a:	69fb      	ldr	r3, [r7, #28]
 801ec5c:	895b      	ldrh	r3, [r3, #10]
 801ec5e:	461a      	mov	r2, r3
 801ec60:	69bb      	ldr	r3, [r7, #24]
 801ec62:	4293      	cmp	r3, r2
 801ec64:	d902      	bls.n	801ec6c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801ec66:	69fb      	ldr	r3, [r7, #28]
 801ec68:	895b      	ldrh	r3, [r3, #10]
 801ec6a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801ec6c:	69fb      	ldr	r3, [r7, #28]
 801ec6e:	6858      	ldr	r0, [r3, #4]
 801ec70:	68ba      	ldr	r2, [r7, #8]
 801ec72:	693b      	ldr	r3, [r7, #16]
 801ec74:	4413      	add	r3, r2
 801ec76:	69ba      	ldr	r2, [r7, #24]
 801ec78:	4619      	mov	r1, r3
 801ec7a:	f003 f9cb 	bl	8022014 <memcpy>
    total_copy_len -= buf_copy_len;
 801ec7e:	697a      	ldr	r2, [r7, #20]
 801ec80:	69bb      	ldr	r3, [r7, #24]
 801ec82:	1ad3      	subs	r3, r2, r3
 801ec84:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801ec86:	693a      	ldr	r2, [r7, #16]
 801ec88:	69bb      	ldr	r3, [r7, #24]
 801ec8a:	4413      	add	r3, r2
 801ec8c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ec8e:	69fb      	ldr	r3, [r7, #28]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	61fb      	str	r3, [r7, #28]
 801ec94:	697b      	ldr	r3, [r7, #20]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d1d3      	bne.n	801ec42 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801ec9a:	697b      	ldr	r3, [r7, #20]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d103      	bne.n	801eca8 <pbuf_take+0xf0>
 801eca0:	88fb      	ldrh	r3, [r7, #6]
 801eca2:	693a      	ldr	r2, [r7, #16]
 801eca4:	429a      	cmp	r2, r3
 801eca6:	d006      	beq.n	801ecb6 <pbuf_take+0xfe>
 801eca8:	4b05      	ldr	r3, [pc, #20]	; (801ecc0 <pbuf_take+0x108>)
 801ecaa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801ecae:	490a      	ldr	r1, [pc, #40]	; (801ecd8 <pbuf_take+0x120>)
 801ecb0:	4805      	ldr	r0, [pc, #20]	; (801ecc8 <pbuf_take+0x110>)
 801ecb2:	f003 fabf 	bl	8022234 <iprintf>
  return ERR_OK;
 801ecb6:	2300      	movs	r3, #0
}
 801ecb8:	4618      	mov	r0, r3
 801ecba:	3720      	adds	r7, #32
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bd80      	pop	{r7, pc}
 801ecc0:	080276ec 	.word	0x080276ec
 801ecc4:	08027ac4 	.word	0x08027ac4
 801ecc8:	0802774c 	.word	0x0802774c
 801eccc:	08027adc 	.word	0x08027adc
 801ecd0:	08027af8 	.word	0x08027af8
 801ecd4:	08027b18 	.word	0x08027b18
 801ecd8:	08027b30 	.word	0x08027b30

0801ecdc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b084      	sub	sp, #16
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	4603      	mov	r3, r0
 801ece4:	603a      	str	r2, [r7, #0]
 801ece6:	71fb      	strb	r3, [r7, #7]
 801ece8:	460b      	mov	r3, r1
 801ecea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801ecec:	683b      	ldr	r3, [r7, #0]
 801ecee:	8919      	ldrh	r1, [r3, #8]
 801ecf0:	88ba      	ldrh	r2, [r7, #4]
 801ecf2:	79fb      	ldrb	r3, [r7, #7]
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	f7ff fa83 	bl	801e200 <pbuf_alloc>
 801ecfa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d101      	bne.n	801ed06 <pbuf_clone+0x2a>
    return NULL;
 801ed02:	2300      	movs	r3, #0
 801ed04:	e011      	b.n	801ed2a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801ed06:	6839      	ldr	r1, [r7, #0]
 801ed08:	68f8      	ldr	r0, [r7, #12]
 801ed0a:	f7ff fe83 	bl	801ea14 <pbuf_copy>
 801ed0e:	4603      	mov	r3, r0
 801ed10:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801ed12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	d006      	beq.n	801ed28 <pbuf_clone+0x4c>
 801ed1a:	4b06      	ldr	r3, [pc, #24]	; (801ed34 <pbuf_clone+0x58>)
 801ed1c:	f240 5224 	movw	r2, #1316	; 0x524
 801ed20:	4905      	ldr	r1, [pc, #20]	; (801ed38 <pbuf_clone+0x5c>)
 801ed22:	4806      	ldr	r0, [pc, #24]	; (801ed3c <pbuf_clone+0x60>)
 801ed24:	f003 fa86 	bl	8022234 <iprintf>
  return q;
 801ed28:	68fb      	ldr	r3, [r7, #12]
}
 801ed2a:	4618      	mov	r0, r3
 801ed2c:	3710      	adds	r7, #16
 801ed2e:	46bd      	mov	sp, r7
 801ed30:	bd80      	pop	{r7, pc}
 801ed32:	bf00      	nop
 801ed34:	080276ec 	.word	0x080276ec
 801ed38:	08027b60 	.word	0x08027b60
 801ed3c:	0802774c 	.word	0x0802774c

0801ed40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ed40:	b580      	push	{r7, lr}
 801ed42:	b086      	sub	sp, #24
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	60f8      	str	r0, [r7, #12]
 801ed48:	60b9      	str	r1, [r7, #8]
 801ed4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ed4c:	2003      	movs	r0, #3
 801ed4e:	f7fe fdb9 	bl	801d8c4 <memp_malloc>
 801ed52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ed54:	693b      	ldr	r3, [r7, #16]
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d109      	bne.n	801ed6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ed5a:	693b      	ldr	r3, [r7, #16]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d151      	bne.n	801ee04 <sys_timeout_abs+0xc4>
 801ed60:	4b2a      	ldr	r3, [pc, #168]	; (801ee0c <sys_timeout_abs+0xcc>)
 801ed62:	22be      	movs	r2, #190	; 0xbe
 801ed64:	492a      	ldr	r1, [pc, #168]	; (801ee10 <sys_timeout_abs+0xd0>)
 801ed66:	482b      	ldr	r0, [pc, #172]	; (801ee14 <sys_timeout_abs+0xd4>)
 801ed68:	f003 fa64 	bl	8022234 <iprintf>
    return;
 801ed6c:	e04a      	b.n	801ee04 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ed6e:	693b      	ldr	r3, [r7, #16]
 801ed70:	2200      	movs	r2, #0
 801ed72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ed74:	693b      	ldr	r3, [r7, #16]
 801ed76:	68ba      	ldr	r2, [r7, #8]
 801ed78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ed7a:	693b      	ldr	r3, [r7, #16]
 801ed7c:	687a      	ldr	r2, [r7, #4]
 801ed7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ed80:	693b      	ldr	r3, [r7, #16]
 801ed82:	68fa      	ldr	r2, [r7, #12]
 801ed84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ed86:	4b24      	ldr	r3, [pc, #144]	; (801ee18 <sys_timeout_abs+0xd8>)
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d103      	bne.n	801ed96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ed8e:	4a22      	ldr	r2, [pc, #136]	; (801ee18 <sys_timeout_abs+0xd8>)
 801ed90:	693b      	ldr	r3, [r7, #16]
 801ed92:	6013      	str	r3, [r2, #0]
    return;
 801ed94:	e037      	b.n	801ee06 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ed96:	693b      	ldr	r3, [r7, #16]
 801ed98:	685a      	ldr	r2, [r3, #4]
 801ed9a:	4b1f      	ldr	r3, [pc, #124]	; (801ee18 <sys_timeout_abs+0xd8>)
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	685b      	ldr	r3, [r3, #4]
 801eda0:	1ad3      	subs	r3, r2, r3
 801eda2:	0fdb      	lsrs	r3, r3, #31
 801eda4:	f003 0301 	and.w	r3, r3, #1
 801eda8:	b2db      	uxtb	r3, r3
 801edaa:	2b00      	cmp	r3, #0
 801edac:	d007      	beq.n	801edbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801edae:	4b1a      	ldr	r3, [pc, #104]	; (801ee18 <sys_timeout_abs+0xd8>)
 801edb0:	681a      	ldr	r2, [r3, #0]
 801edb2:	693b      	ldr	r3, [r7, #16]
 801edb4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801edb6:	4a18      	ldr	r2, [pc, #96]	; (801ee18 <sys_timeout_abs+0xd8>)
 801edb8:	693b      	ldr	r3, [r7, #16]
 801edba:	6013      	str	r3, [r2, #0]
 801edbc:	e023      	b.n	801ee06 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801edbe:	4b16      	ldr	r3, [pc, #88]	; (801ee18 <sys_timeout_abs+0xd8>)
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	617b      	str	r3, [r7, #20]
 801edc4:	e01a      	b.n	801edfc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801edc6:	697b      	ldr	r3, [r7, #20]
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d00b      	beq.n	801ede6 <sys_timeout_abs+0xa6>
 801edce:	693b      	ldr	r3, [r7, #16]
 801edd0:	685a      	ldr	r2, [r3, #4]
 801edd2:	697b      	ldr	r3, [r7, #20]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	685b      	ldr	r3, [r3, #4]
 801edd8:	1ad3      	subs	r3, r2, r3
 801edda:	0fdb      	lsrs	r3, r3, #31
 801eddc:	f003 0301 	and.w	r3, r3, #1
 801ede0:	b2db      	uxtb	r3, r3
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d007      	beq.n	801edf6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ede6:	697b      	ldr	r3, [r7, #20]
 801ede8:	681a      	ldr	r2, [r3, #0]
 801edea:	693b      	ldr	r3, [r7, #16]
 801edec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801edee:	697b      	ldr	r3, [r7, #20]
 801edf0:	693a      	ldr	r2, [r7, #16]
 801edf2:	601a      	str	r2, [r3, #0]
        break;
 801edf4:	e007      	b.n	801ee06 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801edf6:	697b      	ldr	r3, [r7, #20]
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	617b      	str	r3, [r7, #20]
 801edfc:	697b      	ldr	r3, [r7, #20]
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d1e1      	bne.n	801edc6 <sys_timeout_abs+0x86>
 801ee02:	e000      	b.n	801ee06 <sys_timeout_abs+0xc6>
    return;
 801ee04:	bf00      	nop
      }
    }
  }
}
 801ee06:	3718      	adds	r7, #24
 801ee08:	46bd      	mov	sp, r7
 801ee0a:	bd80      	pop	{r7, pc}
 801ee0c:	08027b74 	.word	0x08027b74
 801ee10:	08027ba8 	.word	0x08027ba8
 801ee14:	08027be8 	.word	0x08027be8
 801ee18:	20013e34 	.word	0x20013e34

0801ee1c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b086      	sub	sp, #24
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ee28:	697b      	ldr	r3, [r7, #20]
 801ee2a:	685b      	ldr	r3, [r3, #4]
 801ee2c:	4798      	blx	r3

  now = sys_now();
 801ee2e:	f7fd fed9 	bl	801cbe4 <sys_now>
 801ee32:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ee34:	697b      	ldr	r3, [r7, #20]
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	4b0f      	ldr	r3, [pc, #60]	; (801ee78 <lwip_cyclic_timer+0x5c>)
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	4413      	add	r3, r2
 801ee3e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ee40:	68fa      	ldr	r2, [r7, #12]
 801ee42:	693b      	ldr	r3, [r7, #16]
 801ee44:	1ad3      	subs	r3, r2, r3
 801ee46:	0fdb      	lsrs	r3, r3, #31
 801ee48:	f003 0301 	and.w	r3, r3, #1
 801ee4c:	b2db      	uxtb	r3, r3
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d009      	beq.n	801ee66 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ee52:	697b      	ldr	r3, [r7, #20]
 801ee54:	681a      	ldr	r2, [r3, #0]
 801ee56:	693b      	ldr	r3, [r7, #16]
 801ee58:	4413      	add	r3, r2
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	4907      	ldr	r1, [pc, #28]	; (801ee7c <lwip_cyclic_timer+0x60>)
 801ee5e:	4618      	mov	r0, r3
 801ee60:	f7ff ff6e 	bl	801ed40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ee64:	e004      	b.n	801ee70 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ee66:	687a      	ldr	r2, [r7, #4]
 801ee68:	4904      	ldr	r1, [pc, #16]	; (801ee7c <lwip_cyclic_timer+0x60>)
 801ee6a:	68f8      	ldr	r0, [r7, #12]
 801ee6c:	f7ff ff68 	bl	801ed40 <sys_timeout_abs>
}
 801ee70:	bf00      	nop
 801ee72:	3718      	adds	r7, #24
 801ee74:	46bd      	mov	sp, r7
 801ee76:	bd80      	pop	{r7, pc}
 801ee78:	20013e38 	.word	0x20013e38
 801ee7c:	0801ee1d 	.word	0x0801ee1d

0801ee80 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ee80:	b580      	push	{r7, lr}
 801ee82:	b082      	sub	sp, #8
 801ee84:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ee86:	2300      	movs	r3, #0
 801ee88:	607b      	str	r3, [r7, #4]
 801ee8a:	e00e      	b.n	801eeaa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ee8c:	4a0b      	ldr	r2, [pc, #44]	; (801eebc <sys_timeouts_init+0x3c>)
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	00db      	lsls	r3, r3, #3
 801ee98:	4a08      	ldr	r2, [pc, #32]	; (801eebc <sys_timeouts_init+0x3c>)
 801ee9a:	4413      	add	r3, r2
 801ee9c:	461a      	mov	r2, r3
 801ee9e:	4908      	ldr	r1, [pc, #32]	; (801eec0 <sys_timeouts_init+0x40>)
 801eea0:	f000 f810 	bl	801eec4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	3301      	adds	r3, #1
 801eea8:	607b      	str	r3, [r7, #4]
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	2b01      	cmp	r3, #1
 801eeae:	d9ed      	bls.n	801ee8c <sys_timeouts_init+0xc>
  }
}
 801eeb0:	bf00      	nop
 801eeb2:	bf00      	nop
 801eeb4:	3708      	adds	r7, #8
 801eeb6:	46bd      	mov	sp, r7
 801eeb8:	bd80      	pop	{r7, pc}
 801eeba:	bf00      	nop
 801eebc:	08028b2c 	.word	0x08028b2c
 801eec0:	0801ee1d 	.word	0x0801ee1d

0801eec4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801eec4:	b580      	push	{r7, lr}
 801eec6:	b086      	sub	sp, #24
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	60f8      	str	r0, [r7, #12]
 801eecc:	60b9      	str	r1, [r7, #8]
 801eece:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eed6:	d306      	bcc.n	801eee6 <sys_timeout+0x22>
 801eed8:	4b0a      	ldr	r3, [pc, #40]	; (801ef04 <sys_timeout+0x40>)
 801eeda:	f240 1229 	movw	r2, #297	; 0x129
 801eede:	490a      	ldr	r1, [pc, #40]	; (801ef08 <sys_timeout+0x44>)
 801eee0:	480a      	ldr	r0, [pc, #40]	; (801ef0c <sys_timeout+0x48>)
 801eee2:	f003 f9a7 	bl	8022234 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eee6:	f7fd fe7d 	bl	801cbe4 <sys_now>
 801eeea:	4602      	mov	r2, r0
 801eeec:	68fb      	ldr	r3, [r7, #12]
 801eeee:	4413      	add	r3, r2
 801eef0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eef2:	687a      	ldr	r2, [r7, #4]
 801eef4:	68b9      	ldr	r1, [r7, #8]
 801eef6:	6978      	ldr	r0, [r7, #20]
 801eef8:	f7ff ff22 	bl	801ed40 <sys_timeout_abs>
#endif
}
 801eefc:	bf00      	nop
 801eefe:	3718      	adds	r7, #24
 801ef00:	46bd      	mov	sp, r7
 801ef02:	bd80      	pop	{r7, pc}
 801ef04:	08027b74 	.word	0x08027b74
 801ef08:	08027c10 	.word	0x08027c10
 801ef0c:	08027be8 	.word	0x08027be8

0801ef10 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ef10:	b580      	push	{r7, lr}
 801ef12:	b084      	sub	sp, #16
 801ef14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ef16:	f7fd fe65 	bl	801cbe4 <sys_now>
 801ef1a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ef1c:	4b17      	ldr	r3, [pc, #92]	; (801ef7c <sys_check_timeouts+0x6c>)
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ef22:	68bb      	ldr	r3, [r7, #8]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d022      	beq.n	801ef6e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ef28:	68bb      	ldr	r3, [r7, #8]
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	68fa      	ldr	r2, [r7, #12]
 801ef2e:	1ad3      	subs	r3, r2, r3
 801ef30:	0fdb      	lsrs	r3, r3, #31
 801ef32:	f003 0301 	and.w	r3, r3, #1
 801ef36:	b2db      	uxtb	r3, r3
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d11a      	bne.n	801ef72 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ef3c:	68bb      	ldr	r3, [r7, #8]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	4a0e      	ldr	r2, [pc, #56]	; (801ef7c <sys_check_timeouts+0x6c>)
 801ef42:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	689b      	ldr	r3, [r3, #8]
 801ef48:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ef4a:	68bb      	ldr	r3, [r7, #8]
 801ef4c:	68db      	ldr	r3, [r3, #12]
 801ef4e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ef50:	68bb      	ldr	r3, [r7, #8]
 801ef52:	685b      	ldr	r3, [r3, #4]
 801ef54:	4a0a      	ldr	r2, [pc, #40]	; (801ef80 <sys_check_timeouts+0x70>)
 801ef56:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ef58:	68b9      	ldr	r1, [r7, #8]
 801ef5a:	2003      	movs	r0, #3
 801ef5c:	f7fe fd22 	bl	801d9a4 <memp_free>
    if (handler != NULL) {
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d0da      	beq.n	801ef1c <sys_check_timeouts+0xc>
      handler(arg);
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	6838      	ldr	r0, [r7, #0]
 801ef6a:	4798      	blx	r3
  do {
 801ef6c:	e7d6      	b.n	801ef1c <sys_check_timeouts+0xc>
      return;
 801ef6e:	bf00      	nop
 801ef70:	e000      	b.n	801ef74 <sys_check_timeouts+0x64>
      return;
 801ef72:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ef74:	3710      	adds	r7, #16
 801ef76:	46bd      	mov	sp, r7
 801ef78:	bd80      	pop	{r7, pc}
 801ef7a:	bf00      	nop
 801ef7c:	20013e34 	.word	0x20013e34
 801ef80:	20013e38 	.word	0x20013e38

0801ef84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ef84:	b580      	push	{r7, lr}
 801ef86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ef88:	f003 f9f8 	bl	802237c <rand>
 801ef8c:	4603      	mov	r3, r0
 801ef8e:	b29b      	uxth	r3, r3
 801ef90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ef94:	b29b      	uxth	r3, r3
 801ef96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ef9a:	b29a      	uxth	r2, r3
 801ef9c:	4b01      	ldr	r3, [pc, #4]	; (801efa4 <udp_init+0x20>)
 801ef9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801efa0:	bf00      	nop
 801efa2:	bd80      	pop	{r7, pc}
 801efa4:	2000013c 	.word	0x2000013c

0801efa8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801efa8:	b480      	push	{r7}
 801efaa:	b083      	sub	sp, #12
 801efac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801efae:	2300      	movs	r3, #0
 801efb0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801efb2:	4b17      	ldr	r3, [pc, #92]	; (801f010 <udp_new_port+0x68>)
 801efb4:	881b      	ldrh	r3, [r3, #0]
 801efb6:	1c5a      	adds	r2, r3, #1
 801efb8:	b291      	uxth	r1, r2
 801efba:	4a15      	ldr	r2, [pc, #84]	; (801f010 <udp_new_port+0x68>)
 801efbc:	8011      	strh	r1, [r2, #0]
 801efbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801efc2:	4293      	cmp	r3, r2
 801efc4:	d103      	bne.n	801efce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801efc6:	4b12      	ldr	r3, [pc, #72]	; (801f010 <udp_new_port+0x68>)
 801efc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801efcc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801efce:	4b11      	ldr	r3, [pc, #68]	; (801f014 <udp_new_port+0x6c>)
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	603b      	str	r3, [r7, #0]
 801efd4:	e011      	b.n	801effa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801efd6:	683b      	ldr	r3, [r7, #0]
 801efd8:	8a5a      	ldrh	r2, [r3, #18]
 801efda:	4b0d      	ldr	r3, [pc, #52]	; (801f010 <udp_new_port+0x68>)
 801efdc:	881b      	ldrh	r3, [r3, #0]
 801efde:	429a      	cmp	r2, r3
 801efe0:	d108      	bne.n	801eff4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801efe2:	88fb      	ldrh	r3, [r7, #6]
 801efe4:	3301      	adds	r3, #1
 801efe6:	80fb      	strh	r3, [r7, #6]
 801efe8:	88fb      	ldrh	r3, [r7, #6]
 801efea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801efee:	d3e0      	bcc.n	801efb2 <udp_new_port+0xa>
        return 0;
 801eff0:	2300      	movs	r3, #0
 801eff2:	e007      	b.n	801f004 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801eff4:	683b      	ldr	r3, [r7, #0]
 801eff6:	68db      	ldr	r3, [r3, #12]
 801eff8:	603b      	str	r3, [r7, #0]
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d1ea      	bne.n	801efd6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f000:	4b03      	ldr	r3, [pc, #12]	; (801f010 <udp_new_port+0x68>)
 801f002:	881b      	ldrh	r3, [r3, #0]
}
 801f004:	4618      	mov	r0, r3
 801f006:	370c      	adds	r7, #12
 801f008:	46bd      	mov	sp, r7
 801f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f00e:	4770      	bx	lr
 801f010:	2000013c 	.word	0x2000013c
 801f014:	20013e3c 	.word	0x20013e3c

0801f018 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b084      	sub	sp, #16
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	60f8      	str	r0, [r7, #12]
 801f020:	60b9      	str	r1, [r7, #8]
 801f022:	4613      	mov	r3, r2
 801f024:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d105      	bne.n	801f038 <udp_input_local_match+0x20>
 801f02c:	4b27      	ldr	r3, [pc, #156]	; (801f0cc <udp_input_local_match+0xb4>)
 801f02e:	2287      	movs	r2, #135	; 0x87
 801f030:	4927      	ldr	r1, [pc, #156]	; (801f0d0 <udp_input_local_match+0xb8>)
 801f032:	4828      	ldr	r0, [pc, #160]	; (801f0d4 <udp_input_local_match+0xbc>)
 801f034:	f003 f8fe 	bl	8022234 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f038:	68bb      	ldr	r3, [r7, #8]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d105      	bne.n	801f04a <udp_input_local_match+0x32>
 801f03e:	4b23      	ldr	r3, [pc, #140]	; (801f0cc <udp_input_local_match+0xb4>)
 801f040:	2288      	movs	r2, #136	; 0x88
 801f042:	4925      	ldr	r1, [pc, #148]	; (801f0d8 <udp_input_local_match+0xc0>)
 801f044:	4823      	ldr	r0, [pc, #140]	; (801f0d4 <udp_input_local_match+0xbc>)
 801f046:	f003 f8f5 	bl	8022234 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	7a1b      	ldrb	r3, [r3, #8]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d00b      	beq.n	801f06a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f052:	68fb      	ldr	r3, [r7, #12]
 801f054:	7a1a      	ldrb	r2, [r3, #8]
 801f056:	4b21      	ldr	r3, [pc, #132]	; (801f0dc <udp_input_local_match+0xc4>)
 801f058:	685b      	ldr	r3, [r3, #4]
 801f05a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f05e:	3301      	adds	r3, #1
 801f060:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f062:	429a      	cmp	r2, r3
 801f064:	d001      	beq.n	801f06a <udp_input_local_match+0x52>
    return 0;
 801f066:	2300      	movs	r3, #0
 801f068:	e02b      	b.n	801f0c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f06a:	79fb      	ldrb	r3, [r7, #7]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	d018      	beq.n	801f0a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	2b00      	cmp	r3, #0
 801f074:	d013      	beq.n	801f09e <udp_input_local_match+0x86>
 801f076:	68fb      	ldr	r3, [r7, #12]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d00f      	beq.n	801f09e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f07e:	4b17      	ldr	r3, [pc, #92]	; (801f0dc <udp_input_local_match+0xc4>)
 801f080:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f082:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f086:	d00a      	beq.n	801f09e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	681a      	ldr	r2, [r3, #0]
 801f08c:	4b13      	ldr	r3, [pc, #76]	; (801f0dc <udp_input_local_match+0xc4>)
 801f08e:	695b      	ldr	r3, [r3, #20]
 801f090:	405a      	eors	r2, r3
 801f092:	68bb      	ldr	r3, [r7, #8]
 801f094:	3308      	adds	r3, #8
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d110      	bne.n	801f0c0 <udp_input_local_match+0xa8>
          return 1;
 801f09e:	2301      	movs	r3, #1
 801f0a0:	e00f      	b.n	801f0c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d009      	beq.n	801f0bc <udp_input_local_match+0xa4>
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d005      	beq.n	801f0bc <udp_input_local_match+0xa4>
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	681a      	ldr	r2, [r3, #0]
 801f0b4:	4b09      	ldr	r3, [pc, #36]	; (801f0dc <udp_input_local_match+0xc4>)
 801f0b6:	695b      	ldr	r3, [r3, #20]
 801f0b8:	429a      	cmp	r2, r3
 801f0ba:	d101      	bne.n	801f0c0 <udp_input_local_match+0xa8>
        return 1;
 801f0bc:	2301      	movs	r3, #1
 801f0be:	e000      	b.n	801f0c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f0c0:	2300      	movs	r3, #0
}
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	3710      	adds	r7, #16
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	bd80      	pop	{r7, pc}
 801f0ca:	bf00      	nop
 801f0cc:	08027c5c 	.word	0x08027c5c
 801f0d0:	08027c8c 	.word	0x08027c8c
 801f0d4:	08027cb0 	.word	0x08027cb0
 801f0d8:	08027cd8 	.word	0x08027cd8
 801f0dc:	200107d8 	.word	0x200107d8

0801f0e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f0e0:	b590      	push	{r4, r7, lr}
 801f0e2:	b08d      	sub	sp, #52	; 0x34
 801f0e4:	af02      	add	r7, sp, #8
 801f0e6:	6078      	str	r0, [r7, #4]
 801f0e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d105      	bne.n	801f100 <udp_input+0x20>
 801f0f4:	4b7c      	ldr	r3, [pc, #496]	; (801f2e8 <udp_input+0x208>)
 801f0f6:	22cf      	movs	r2, #207	; 0xcf
 801f0f8:	497c      	ldr	r1, [pc, #496]	; (801f2ec <udp_input+0x20c>)
 801f0fa:	487d      	ldr	r0, [pc, #500]	; (801f2f0 <udp_input+0x210>)
 801f0fc:	f003 f89a 	bl	8022234 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f100:	683b      	ldr	r3, [r7, #0]
 801f102:	2b00      	cmp	r3, #0
 801f104:	d105      	bne.n	801f112 <udp_input+0x32>
 801f106:	4b78      	ldr	r3, [pc, #480]	; (801f2e8 <udp_input+0x208>)
 801f108:	22d0      	movs	r2, #208	; 0xd0
 801f10a:	497a      	ldr	r1, [pc, #488]	; (801f2f4 <udp_input+0x214>)
 801f10c:	4878      	ldr	r0, [pc, #480]	; (801f2f0 <udp_input+0x210>)
 801f10e:	f003 f891 	bl	8022234 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	895b      	ldrh	r3, [r3, #10]
 801f116:	2b07      	cmp	r3, #7
 801f118:	d803      	bhi.n	801f122 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f11a:	6878      	ldr	r0, [r7, #4]
 801f11c:	f7ff fb52 	bl	801e7c4 <pbuf_free>
    goto end;
 801f120:	e0de      	b.n	801f2e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f128:	4b73      	ldr	r3, [pc, #460]	; (801f2f8 <udp_input+0x218>)
 801f12a:	695b      	ldr	r3, [r3, #20]
 801f12c:	4a72      	ldr	r2, [pc, #456]	; (801f2f8 <udp_input+0x218>)
 801f12e:	6812      	ldr	r2, [r2, #0]
 801f130:	4611      	mov	r1, r2
 801f132:	4618      	mov	r0, r3
 801f134:	f001 ff44 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 801f138:	4603      	mov	r3, r0
 801f13a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f13c:	697b      	ldr	r3, [r7, #20]
 801f13e:	881b      	ldrh	r3, [r3, #0]
 801f140:	b29b      	uxth	r3, r3
 801f142:	4618      	mov	r0, r3
 801f144:	f7fd ff62 	bl	801d00c <lwip_htons>
 801f148:	4603      	mov	r3, r0
 801f14a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f14c:	697b      	ldr	r3, [r7, #20]
 801f14e:	885b      	ldrh	r3, [r3, #2]
 801f150:	b29b      	uxth	r3, r3
 801f152:	4618      	mov	r0, r3
 801f154:	f7fd ff5a 	bl	801d00c <lwip_htons>
 801f158:	4603      	mov	r3, r0
 801f15a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f15c:	2300      	movs	r3, #0
 801f15e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f160:	2300      	movs	r3, #0
 801f162:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f164:	2300      	movs	r3, #0
 801f166:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f168:	4b64      	ldr	r3, [pc, #400]	; (801f2fc <udp_input+0x21c>)
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	627b      	str	r3, [r7, #36]	; 0x24
 801f16e:	e054      	b.n	801f21a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f172:	8a5b      	ldrh	r3, [r3, #18]
 801f174:	89fa      	ldrh	r2, [r7, #14]
 801f176:	429a      	cmp	r2, r3
 801f178:	d14a      	bne.n	801f210 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f17a:	7cfb      	ldrb	r3, [r7, #19]
 801f17c:	461a      	mov	r2, r3
 801f17e:	6839      	ldr	r1, [r7, #0]
 801f180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f182:	f7ff ff49 	bl	801f018 <udp_input_local_match>
 801f186:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d041      	beq.n	801f210 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f18e:	7c1b      	ldrb	r3, [r3, #16]
 801f190:	f003 0304 	and.w	r3, r3, #4
 801f194:	2b00      	cmp	r3, #0
 801f196:	d11d      	bne.n	801f1d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f198:	69fb      	ldr	r3, [r7, #28]
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d102      	bne.n	801f1a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1a0:	61fb      	str	r3, [r7, #28]
 801f1a2:	e017      	b.n	801f1d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f1a4:	7cfb      	ldrb	r3, [r7, #19]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d014      	beq.n	801f1d4 <udp_input+0xf4>
 801f1aa:	4b53      	ldr	r3, [pc, #332]	; (801f2f8 <udp_input+0x218>)
 801f1ac:	695b      	ldr	r3, [r3, #20]
 801f1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1b2:	d10f      	bne.n	801f1d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f1b4:	69fb      	ldr	r3, [r7, #28]
 801f1b6:	681a      	ldr	r2, [r3, #0]
 801f1b8:	683b      	ldr	r3, [r7, #0]
 801f1ba:	3304      	adds	r3, #4
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	429a      	cmp	r2, r3
 801f1c0:	d008      	beq.n	801f1d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1c4:	681a      	ldr	r2, [r3, #0]
 801f1c6:	683b      	ldr	r3, [r7, #0]
 801f1c8:	3304      	adds	r3, #4
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	429a      	cmp	r2, r3
 801f1ce:	d101      	bne.n	801f1d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1d6:	8a9b      	ldrh	r3, [r3, #20]
 801f1d8:	8a3a      	ldrh	r2, [r7, #16]
 801f1da:	429a      	cmp	r2, r3
 801f1dc:	d118      	bne.n	801f210 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d005      	beq.n	801f1f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1e8:	685a      	ldr	r2, [r3, #4]
 801f1ea:	4b43      	ldr	r3, [pc, #268]	; (801f2f8 <udp_input+0x218>)
 801f1ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f1ee:	429a      	cmp	r2, r3
 801f1f0:	d10e      	bne.n	801f210 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f1f2:	6a3b      	ldr	r3, [r7, #32]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d014      	beq.n	801f222 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1fa:	68da      	ldr	r2, [r3, #12]
 801f1fc:	6a3b      	ldr	r3, [r7, #32]
 801f1fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f200:	4b3e      	ldr	r3, [pc, #248]	; (801f2fc <udp_input+0x21c>)
 801f202:	681a      	ldr	r2, [r3, #0]
 801f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f206:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f208:	4a3c      	ldr	r2, [pc, #240]	; (801f2fc <udp_input+0x21c>)
 801f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f20c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f20e:	e008      	b.n	801f222 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f212:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f216:	68db      	ldr	r3, [r3, #12]
 801f218:	627b      	str	r3, [r7, #36]	; 0x24
 801f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d1a7      	bne.n	801f170 <udp_input+0x90>
 801f220:	e000      	b.n	801f224 <udp_input+0x144>
        break;
 801f222:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f226:	2b00      	cmp	r3, #0
 801f228:	d101      	bne.n	801f22e <udp_input+0x14e>
    pcb = uncon_pcb;
 801f22a:	69fb      	ldr	r3, [r7, #28]
 801f22c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f230:	2b00      	cmp	r3, #0
 801f232:	d002      	beq.n	801f23a <udp_input+0x15a>
    for_us = 1;
 801f234:	2301      	movs	r3, #1
 801f236:	76fb      	strb	r3, [r7, #27]
 801f238:	e00a      	b.n	801f250 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f23a:	683b      	ldr	r3, [r7, #0]
 801f23c:	3304      	adds	r3, #4
 801f23e:	681a      	ldr	r2, [r3, #0]
 801f240:	4b2d      	ldr	r3, [pc, #180]	; (801f2f8 <udp_input+0x218>)
 801f242:	695b      	ldr	r3, [r3, #20]
 801f244:	429a      	cmp	r2, r3
 801f246:	bf0c      	ite	eq
 801f248:	2301      	moveq	r3, #1
 801f24a:	2300      	movne	r3, #0
 801f24c:	b2db      	uxtb	r3, r3
 801f24e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f250:	7efb      	ldrb	r3, [r7, #27]
 801f252:	2b00      	cmp	r3, #0
 801f254:	d041      	beq.n	801f2da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f256:	2108      	movs	r1, #8
 801f258:	6878      	ldr	r0, [r7, #4]
 801f25a:	f7ff fa2d 	bl	801e6b8 <pbuf_remove_header>
 801f25e:	4603      	mov	r3, r0
 801f260:	2b00      	cmp	r3, #0
 801f262:	d00a      	beq.n	801f27a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f264:	4b20      	ldr	r3, [pc, #128]	; (801f2e8 <udp_input+0x208>)
 801f266:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f26a:	4925      	ldr	r1, [pc, #148]	; (801f300 <udp_input+0x220>)
 801f26c:	4820      	ldr	r0, [pc, #128]	; (801f2f0 <udp_input+0x210>)
 801f26e:	f002 ffe1 	bl	8022234 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f272:	6878      	ldr	r0, [r7, #4]
 801f274:	f7ff faa6 	bl	801e7c4 <pbuf_free>
      goto end;
 801f278:	e032      	b.n	801f2e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d012      	beq.n	801f2a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f282:	699b      	ldr	r3, [r3, #24]
 801f284:	2b00      	cmp	r3, #0
 801f286:	d00a      	beq.n	801f29e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f28a:	699c      	ldr	r4, [r3, #24]
 801f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f28e:	69d8      	ldr	r0, [r3, #28]
 801f290:	8a3b      	ldrh	r3, [r7, #16]
 801f292:	9300      	str	r3, [sp, #0]
 801f294:	4b1b      	ldr	r3, [pc, #108]	; (801f304 <udp_input+0x224>)
 801f296:	687a      	ldr	r2, [r7, #4]
 801f298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f29a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f29c:	e021      	b.n	801f2e2 <udp_input+0x202>
        pbuf_free(p);
 801f29e:	6878      	ldr	r0, [r7, #4]
 801f2a0:	f7ff fa90 	bl	801e7c4 <pbuf_free>
        goto end;
 801f2a4:	e01c      	b.n	801f2e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f2a6:	7cfb      	ldrb	r3, [r7, #19]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d112      	bne.n	801f2d2 <udp_input+0x1f2>
 801f2ac:	4b12      	ldr	r3, [pc, #72]	; (801f2f8 <udp_input+0x218>)
 801f2ae:	695b      	ldr	r3, [r3, #20]
 801f2b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f2b4:	2be0      	cmp	r3, #224	; 0xe0
 801f2b6:	d00c      	beq.n	801f2d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f2b8:	4b0f      	ldr	r3, [pc, #60]	; (801f2f8 <udp_input+0x218>)
 801f2ba:	899b      	ldrh	r3, [r3, #12]
 801f2bc:	3308      	adds	r3, #8
 801f2be:	b29b      	uxth	r3, r3
 801f2c0:	b21b      	sxth	r3, r3
 801f2c2:	4619      	mov	r1, r3
 801f2c4:	6878      	ldr	r0, [r7, #4]
 801f2c6:	f7ff fa6a 	bl	801e79e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f2ca:	2103      	movs	r1, #3
 801f2cc:	6878      	ldr	r0, [r7, #4]
 801f2ce:	f001 fb53 	bl	8020978 <icmp_dest_unreach>
      pbuf_free(p);
 801f2d2:	6878      	ldr	r0, [r7, #4]
 801f2d4:	f7ff fa76 	bl	801e7c4 <pbuf_free>
  return;
 801f2d8:	e003      	b.n	801f2e2 <udp_input+0x202>
    pbuf_free(p);
 801f2da:	6878      	ldr	r0, [r7, #4]
 801f2dc:	f7ff fa72 	bl	801e7c4 <pbuf_free>
  return;
 801f2e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f2e2:	372c      	adds	r7, #44	; 0x2c
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	bd90      	pop	{r4, r7, pc}
 801f2e8:	08027c5c 	.word	0x08027c5c
 801f2ec:	08027d00 	.word	0x08027d00
 801f2f0:	08027cb0 	.word	0x08027cb0
 801f2f4:	08027d18 	.word	0x08027d18
 801f2f8:	200107d8 	.word	0x200107d8
 801f2fc:	20013e3c 	.word	0x20013e3c
 801f300:	08027d34 	.word	0x08027d34
 801f304:	200107e8 	.word	0x200107e8

0801f308 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b088      	sub	sp, #32
 801f30c:	af02      	add	r7, sp, #8
 801f30e:	60f8      	str	r0, [r7, #12]
 801f310:	60b9      	str	r1, [r7, #8]
 801f312:	607a      	str	r2, [r7, #4]
 801f314:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d109      	bne.n	801f330 <udp_sendto+0x28>
 801f31c:	4b23      	ldr	r3, [pc, #140]	; (801f3ac <udp_sendto+0xa4>)
 801f31e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f322:	4923      	ldr	r1, [pc, #140]	; (801f3b0 <udp_sendto+0xa8>)
 801f324:	4823      	ldr	r0, [pc, #140]	; (801f3b4 <udp_sendto+0xac>)
 801f326:	f002 ff85 	bl	8022234 <iprintf>
 801f32a:	f06f 030f 	mvn.w	r3, #15
 801f32e:	e038      	b.n	801f3a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f330:	68bb      	ldr	r3, [r7, #8]
 801f332:	2b00      	cmp	r3, #0
 801f334:	d109      	bne.n	801f34a <udp_sendto+0x42>
 801f336:	4b1d      	ldr	r3, [pc, #116]	; (801f3ac <udp_sendto+0xa4>)
 801f338:	f240 2219 	movw	r2, #537	; 0x219
 801f33c:	491e      	ldr	r1, [pc, #120]	; (801f3b8 <udp_sendto+0xb0>)
 801f33e:	481d      	ldr	r0, [pc, #116]	; (801f3b4 <udp_sendto+0xac>)
 801f340:	f002 ff78 	bl	8022234 <iprintf>
 801f344:	f06f 030f 	mvn.w	r3, #15
 801f348:	e02b      	b.n	801f3a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d109      	bne.n	801f364 <udp_sendto+0x5c>
 801f350:	4b16      	ldr	r3, [pc, #88]	; (801f3ac <udp_sendto+0xa4>)
 801f352:	f240 221a 	movw	r2, #538	; 0x21a
 801f356:	4919      	ldr	r1, [pc, #100]	; (801f3bc <udp_sendto+0xb4>)
 801f358:	4816      	ldr	r0, [pc, #88]	; (801f3b4 <udp_sendto+0xac>)
 801f35a:	f002 ff6b 	bl	8022234 <iprintf>
 801f35e:	f06f 030f 	mvn.w	r3, #15
 801f362:	e01e      	b.n	801f3a2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	7a1b      	ldrb	r3, [r3, #8]
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d006      	beq.n	801f37a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	7a1b      	ldrb	r3, [r3, #8]
 801f370:	4618      	mov	r0, r3
 801f372:	f7fe fef5 	bl	801e160 <netif_get_by_index>
 801f376:	6178      	str	r0, [r7, #20]
 801f378:	e003      	b.n	801f382 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f37a:	6878      	ldr	r0, [r7, #4]
 801f37c:	f001 fb86 	bl	8020a8c <ip4_route>
 801f380:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f382:	697b      	ldr	r3, [r7, #20]
 801f384:	2b00      	cmp	r3, #0
 801f386:	d102      	bne.n	801f38e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f388:	f06f 0303 	mvn.w	r3, #3
 801f38c:	e009      	b.n	801f3a2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f38e:	887a      	ldrh	r2, [r7, #2]
 801f390:	697b      	ldr	r3, [r7, #20]
 801f392:	9300      	str	r3, [sp, #0]
 801f394:	4613      	mov	r3, r2
 801f396:	687a      	ldr	r2, [r7, #4]
 801f398:	68b9      	ldr	r1, [r7, #8]
 801f39a:	68f8      	ldr	r0, [r7, #12]
 801f39c:	f000 f810 	bl	801f3c0 <udp_sendto_if>
 801f3a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f3a2:	4618      	mov	r0, r3
 801f3a4:	3718      	adds	r7, #24
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	bd80      	pop	{r7, pc}
 801f3aa:	bf00      	nop
 801f3ac:	08027c5c 	.word	0x08027c5c
 801f3b0:	08027d80 	.word	0x08027d80
 801f3b4:	08027cb0 	.word	0x08027cb0
 801f3b8:	08027d98 	.word	0x08027d98
 801f3bc:	08027db4 	.word	0x08027db4

0801f3c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f3c0:	b580      	push	{r7, lr}
 801f3c2:	b088      	sub	sp, #32
 801f3c4:	af02      	add	r7, sp, #8
 801f3c6:	60f8      	str	r0, [r7, #12]
 801f3c8:	60b9      	str	r1, [r7, #8]
 801f3ca:	607a      	str	r2, [r7, #4]
 801f3cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f3ce:	68fb      	ldr	r3, [r7, #12]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d109      	bne.n	801f3e8 <udp_sendto_if+0x28>
 801f3d4:	4b2e      	ldr	r3, [pc, #184]	; (801f490 <udp_sendto_if+0xd0>)
 801f3d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f3da:	492e      	ldr	r1, [pc, #184]	; (801f494 <udp_sendto_if+0xd4>)
 801f3dc:	482e      	ldr	r0, [pc, #184]	; (801f498 <udp_sendto_if+0xd8>)
 801f3de:	f002 ff29 	bl	8022234 <iprintf>
 801f3e2:	f06f 030f 	mvn.w	r3, #15
 801f3e6:	e04f      	b.n	801f488 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f3e8:	68bb      	ldr	r3, [r7, #8]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d109      	bne.n	801f402 <udp_sendto_if+0x42>
 801f3ee:	4b28      	ldr	r3, [pc, #160]	; (801f490 <udp_sendto_if+0xd0>)
 801f3f0:	f240 2281 	movw	r2, #641	; 0x281
 801f3f4:	4929      	ldr	r1, [pc, #164]	; (801f49c <udp_sendto_if+0xdc>)
 801f3f6:	4828      	ldr	r0, [pc, #160]	; (801f498 <udp_sendto_if+0xd8>)
 801f3f8:	f002 ff1c 	bl	8022234 <iprintf>
 801f3fc:	f06f 030f 	mvn.w	r3, #15
 801f400:	e042      	b.n	801f488 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	2b00      	cmp	r3, #0
 801f406:	d109      	bne.n	801f41c <udp_sendto_if+0x5c>
 801f408:	4b21      	ldr	r3, [pc, #132]	; (801f490 <udp_sendto_if+0xd0>)
 801f40a:	f240 2282 	movw	r2, #642	; 0x282
 801f40e:	4924      	ldr	r1, [pc, #144]	; (801f4a0 <udp_sendto_if+0xe0>)
 801f410:	4821      	ldr	r0, [pc, #132]	; (801f498 <udp_sendto_if+0xd8>)
 801f412:	f002 ff0f 	bl	8022234 <iprintf>
 801f416:	f06f 030f 	mvn.w	r3, #15
 801f41a:	e035      	b.n	801f488 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f41c:	6a3b      	ldr	r3, [r7, #32]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d109      	bne.n	801f436 <udp_sendto_if+0x76>
 801f422:	4b1b      	ldr	r3, [pc, #108]	; (801f490 <udp_sendto_if+0xd0>)
 801f424:	f240 2283 	movw	r2, #643	; 0x283
 801f428:	491e      	ldr	r1, [pc, #120]	; (801f4a4 <udp_sendto_if+0xe4>)
 801f42a:	481b      	ldr	r0, [pc, #108]	; (801f498 <udp_sendto_if+0xd8>)
 801f42c:	f002 ff02 	bl	8022234 <iprintf>
 801f430:	f06f 030f 	mvn.w	r3, #15
 801f434:	e028      	b.n	801f488 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d009      	beq.n	801f450 <udp_sendto_if+0x90>
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	2b00      	cmp	r3, #0
 801f442:	d005      	beq.n	801f450 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f444:	68fb      	ldr	r3, [r7, #12]
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f44c:	2be0      	cmp	r3, #224	; 0xe0
 801f44e:	d103      	bne.n	801f458 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f450:	6a3b      	ldr	r3, [r7, #32]
 801f452:	3304      	adds	r3, #4
 801f454:	617b      	str	r3, [r7, #20]
 801f456:	e00b      	b.n	801f470 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	681a      	ldr	r2, [r3, #0]
 801f45c:	6a3b      	ldr	r3, [r7, #32]
 801f45e:	3304      	adds	r3, #4
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	429a      	cmp	r2, r3
 801f464:	d002      	beq.n	801f46c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f466:	f06f 0303 	mvn.w	r3, #3
 801f46a:	e00d      	b.n	801f488 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f470:	887a      	ldrh	r2, [r7, #2]
 801f472:	697b      	ldr	r3, [r7, #20]
 801f474:	9301      	str	r3, [sp, #4]
 801f476:	6a3b      	ldr	r3, [r7, #32]
 801f478:	9300      	str	r3, [sp, #0]
 801f47a:	4613      	mov	r3, r2
 801f47c:	687a      	ldr	r2, [r7, #4]
 801f47e:	68b9      	ldr	r1, [r7, #8]
 801f480:	68f8      	ldr	r0, [r7, #12]
 801f482:	f000 f811 	bl	801f4a8 <udp_sendto_if_src>
 801f486:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f488:	4618      	mov	r0, r3
 801f48a:	3718      	adds	r7, #24
 801f48c:	46bd      	mov	sp, r7
 801f48e:	bd80      	pop	{r7, pc}
 801f490:	08027c5c 	.word	0x08027c5c
 801f494:	08027dd0 	.word	0x08027dd0
 801f498:	08027cb0 	.word	0x08027cb0
 801f49c:	08027dec 	.word	0x08027dec
 801f4a0:	08027e08 	.word	0x08027e08
 801f4a4:	08027e28 	.word	0x08027e28

0801f4a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f4a8:	b580      	push	{r7, lr}
 801f4aa:	b08c      	sub	sp, #48	; 0x30
 801f4ac:	af04      	add	r7, sp, #16
 801f4ae:	60f8      	str	r0, [r7, #12]
 801f4b0:	60b9      	str	r1, [r7, #8]
 801f4b2:	607a      	str	r2, [r7, #4]
 801f4b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d109      	bne.n	801f4d0 <udp_sendto_if_src+0x28>
 801f4bc:	4b65      	ldr	r3, [pc, #404]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f4be:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f4c2:	4965      	ldr	r1, [pc, #404]	; (801f658 <udp_sendto_if_src+0x1b0>)
 801f4c4:	4865      	ldr	r0, [pc, #404]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f4c6:	f002 feb5 	bl	8022234 <iprintf>
 801f4ca:	f06f 030f 	mvn.w	r3, #15
 801f4ce:	e0bc      	b.n	801f64a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f4d0:	68bb      	ldr	r3, [r7, #8]
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	d109      	bne.n	801f4ea <udp_sendto_if_src+0x42>
 801f4d6:	4b5f      	ldr	r3, [pc, #380]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f4d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f4dc:	4960      	ldr	r1, [pc, #384]	; (801f660 <udp_sendto_if_src+0x1b8>)
 801f4de:	485f      	ldr	r0, [pc, #380]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f4e0:	f002 fea8 	bl	8022234 <iprintf>
 801f4e4:	f06f 030f 	mvn.w	r3, #15
 801f4e8:	e0af      	b.n	801f64a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d109      	bne.n	801f504 <udp_sendto_if_src+0x5c>
 801f4f0:	4b58      	ldr	r3, [pc, #352]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f4f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f4f6:	495b      	ldr	r1, [pc, #364]	; (801f664 <udp_sendto_if_src+0x1bc>)
 801f4f8:	4858      	ldr	r0, [pc, #352]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f4fa:	f002 fe9b 	bl	8022234 <iprintf>
 801f4fe:	f06f 030f 	mvn.w	r3, #15
 801f502:	e0a2      	b.n	801f64a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f506:	2b00      	cmp	r3, #0
 801f508:	d109      	bne.n	801f51e <udp_sendto_if_src+0x76>
 801f50a:	4b52      	ldr	r3, [pc, #328]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f50c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f510:	4955      	ldr	r1, [pc, #340]	; (801f668 <udp_sendto_if_src+0x1c0>)
 801f512:	4852      	ldr	r0, [pc, #328]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f514:	f002 fe8e 	bl	8022234 <iprintf>
 801f518:	f06f 030f 	mvn.w	r3, #15
 801f51c:	e095      	b.n	801f64a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f520:	2b00      	cmp	r3, #0
 801f522:	d109      	bne.n	801f538 <udp_sendto_if_src+0x90>
 801f524:	4b4b      	ldr	r3, [pc, #300]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f526:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f52a:	4950      	ldr	r1, [pc, #320]	; (801f66c <udp_sendto_if_src+0x1c4>)
 801f52c:	484b      	ldr	r0, [pc, #300]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f52e:	f002 fe81 	bl	8022234 <iprintf>
 801f532:	f06f 030f 	mvn.w	r3, #15
 801f536:	e088      	b.n	801f64a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	8a5b      	ldrh	r3, [r3, #18]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d10f      	bne.n	801f560 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f540:	68f9      	ldr	r1, [r7, #12]
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	8a5b      	ldrh	r3, [r3, #18]
 801f546:	461a      	mov	r2, r3
 801f548:	68f8      	ldr	r0, [r7, #12]
 801f54a:	f000 f893 	bl	801f674 <udp_bind>
 801f54e:	4603      	mov	r3, r0
 801f550:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f552:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f556:	2b00      	cmp	r3, #0
 801f558:	d002      	beq.n	801f560 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f55a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f55e:	e074      	b.n	801f64a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f560:	68bb      	ldr	r3, [r7, #8]
 801f562:	891b      	ldrh	r3, [r3, #8]
 801f564:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f568:	4293      	cmp	r3, r2
 801f56a:	d902      	bls.n	801f572 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f56c:	f04f 33ff 	mov.w	r3, #4294967295
 801f570:	e06b      	b.n	801f64a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f572:	2108      	movs	r1, #8
 801f574:	68b8      	ldr	r0, [r7, #8]
 801f576:	f7ff f88f 	bl	801e698 <pbuf_add_header>
 801f57a:	4603      	mov	r3, r0
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d015      	beq.n	801f5ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f580:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f584:	2108      	movs	r1, #8
 801f586:	2022      	movs	r0, #34	; 0x22
 801f588:	f7fe fe3a 	bl	801e200 <pbuf_alloc>
 801f58c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f58e:	69fb      	ldr	r3, [r7, #28]
 801f590:	2b00      	cmp	r3, #0
 801f592:	d102      	bne.n	801f59a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f594:	f04f 33ff 	mov.w	r3, #4294967295
 801f598:	e057      	b.n	801f64a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f59a:	68bb      	ldr	r3, [r7, #8]
 801f59c:	891b      	ldrh	r3, [r3, #8]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d006      	beq.n	801f5b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f5a2:	68b9      	ldr	r1, [r7, #8]
 801f5a4:	69f8      	ldr	r0, [r7, #28]
 801f5a6:	f7ff fa25 	bl	801e9f4 <pbuf_chain>
 801f5aa:	e001      	b.n	801f5b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f5ac:	68bb      	ldr	r3, [r7, #8]
 801f5ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f5b0:	69fb      	ldr	r3, [r7, #28]
 801f5b2:	895b      	ldrh	r3, [r3, #10]
 801f5b4:	2b07      	cmp	r3, #7
 801f5b6:	d806      	bhi.n	801f5c6 <udp_sendto_if_src+0x11e>
 801f5b8:	4b26      	ldr	r3, [pc, #152]	; (801f654 <udp_sendto_if_src+0x1ac>)
 801f5ba:	f240 320d 	movw	r2, #781	; 0x30d
 801f5be:	492c      	ldr	r1, [pc, #176]	; (801f670 <udp_sendto_if_src+0x1c8>)
 801f5c0:	4826      	ldr	r0, [pc, #152]	; (801f65c <udp_sendto_if_src+0x1b4>)
 801f5c2:	f002 fe37 	bl	8022234 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f5c6:	69fb      	ldr	r3, [r7, #28]
 801f5c8:	685b      	ldr	r3, [r3, #4]
 801f5ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	8a5b      	ldrh	r3, [r3, #18]
 801f5d0:	4618      	mov	r0, r3
 801f5d2:	f7fd fd1b 	bl	801d00c <lwip_htons>
 801f5d6:	4603      	mov	r3, r0
 801f5d8:	461a      	mov	r2, r3
 801f5da:	697b      	ldr	r3, [r7, #20]
 801f5dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f5de:	887b      	ldrh	r3, [r7, #2]
 801f5e0:	4618      	mov	r0, r3
 801f5e2:	f7fd fd13 	bl	801d00c <lwip_htons>
 801f5e6:	4603      	mov	r3, r0
 801f5e8:	461a      	mov	r2, r3
 801f5ea:	697b      	ldr	r3, [r7, #20]
 801f5ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801f5ee:	697b      	ldr	r3, [r7, #20]
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	719a      	strb	r2, [r3, #6]
 801f5f4:	2200      	movs	r2, #0
 801f5f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801f5f8:	69fb      	ldr	r3, [r7, #28]
 801f5fa:	891b      	ldrh	r3, [r3, #8]
 801f5fc:	4618      	mov	r0, r3
 801f5fe:	f7fd fd05 	bl	801d00c <lwip_htons>
 801f602:	4603      	mov	r3, r0
 801f604:	461a      	mov	r2, r3
 801f606:	697b      	ldr	r3, [r7, #20]
 801f608:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801f60a:	2311      	movs	r3, #17
 801f60c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801f60e:	68fb      	ldr	r3, [r7, #12]
 801f610:	7adb      	ldrb	r3, [r3, #11]
 801f612:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	7a9b      	ldrb	r3, [r3, #10]
 801f618:	7cb9      	ldrb	r1, [r7, #18]
 801f61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f61c:	9202      	str	r2, [sp, #8]
 801f61e:	7cfa      	ldrb	r2, [r7, #19]
 801f620:	9201      	str	r2, [sp, #4]
 801f622:	9300      	str	r3, [sp, #0]
 801f624:	460b      	mov	r3, r1
 801f626:	687a      	ldr	r2, [r7, #4]
 801f628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f62a:	69f8      	ldr	r0, [r7, #28]
 801f62c:	f001 fc0c 	bl	8020e48 <ip4_output_if_src>
 801f630:	4603      	mov	r3, r0
 801f632:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801f634:	69fa      	ldr	r2, [r7, #28]
 801f636:	68bb      	ldr	r3, [r7, #8]
 801f638:	429a      	cmp	r2, r3
 801f63a:	d004      	beq.n	801f646 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801f63c:	69f8      	ldr	r0, [r7, #28]
 801f63e:	f7ff f8c1 	bl	801e7c4 <pbuf_free>
    q = NULL;
 801f642:	2300      	movs	r3, #0
 801f644:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801f646:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801f64a:	4618      	mov	r0, r3
 801f64c:	3720      	adds	r7, #32
 801f64e:	46bd      	mov	sp, r7
 801f650:	bd80      	pop	{r7, pc}
 801f652:	bf00      	nop
 801f654:	08027c5c 	.word	0x08027c5c
 801f658:	08027e48 	.word	0x08027e48
 801f65c:	08027cb0 	.word	0x08027cb0
 801f660:	08027e68 	.word	0x08027e68
 801f664:	08027e88 	.word	0x08027e88
 801f668:	08027eac 	.word	0x08027eac
 801f66c:	08027ed0 	.word	0x08027ed0
 801f670:	08027ef4 	.word	0x08027ef4

0801f674 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f674:	b580      	push	{r7, lr}
 801f676:	b086      	sub	sp, #24
 801f678:	af00      	add	r7, sp, #0
 801f67a:	60f8      	str	r0, [r7, #12]
 801f67c:	60b9      	str	r1, [r7, #8]
 801f67e:	4613      	mov	r3, r2
 801f680:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f682:	68bb      	ldr	r3, [r7, #8]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d101      	bne.n	801f68c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f688:	4b39      	ldr	r3, [pc, #228]	; (801f770 <udp_bind+0xfc>)
 801f68a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d109      	bne.n	801f6a6 <udp_bind+0x32>
 801f692:	4b38      	ldr	r3, [pc, #224]	; (801f774 <udp_bind+0x100>)
 801f694:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f698:	4937      	ldr	r1, [pc, #220]	; (801f778 <udp_bind+0x104>)
 801f69a:	4838      	ldr	r0, [pc, #224]	; (801f77c <udp_bind+0x108>)
 801f69c:	f002 fdca 	bl	8022234 <iprintf>
 801f6a0:	f06f 030f 	mvn.w	r3, #15
 801f6a4:	e060      	b.n	801f768 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6aa:	4b35      	ldr	r3, [pc, #212]	; (801f780 <udp_bind+0x10c>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	617b      	str	r3, [r7, #20]
 801f6b0:	e009      	b.n	801f6c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f6b2:	68fa      	ldr	r2, [r7, #12]
 801f6b4:	697b      	ldr	r3, [r7, #20]
 801f6b6:	429a      	cmp	r2, r3
 801f6b8:	d102      	bne.n	801f6c0 <udp_bind+0x4c>
      rebind = 1;
 801f6ba:	2301      	movs	r3, #1
 801f6bc:	74fb      	strb	r3, [r7, #19]
      break;
 801f6be:	e005      	b.n	801f6cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6c0:	697b      	ldr	r3, [r7, #20]
 801f6c2:	68db      	ldr	r3, [r3, #12]
 801f6c4:	617b      	str	r3, [r7, #20]
 801f6c6:	697b      	ldr	r3, [r7, #20]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d1f2      	bne.n	801f6b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f6cc:	88fb      	ldrh	r3, [r7, #6]
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d109      	bne.n	801f6e6 <udp_bind+0x72>
    port = udp_new_port();
 801f6d2:	f7ff fc69 	bl	801efa8 <udp_new_port>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801f6da:	88fb      	ldrh	r3, [r7, #6]
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d12c      	bne.n	801f73a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801f6e0:	f06f 0307 	mvn.w	r3, #7
 801f6e4:	e040      	b.n	801f768 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f6e6:	4b26      	ldr	r3, [pc, #152]	; (801f780 <udp_bind+0x10c>)
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	617b      	str	r3, [r7, #20]
 801f6ec:	e022      	b.n	801f734 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801f6ee:	68fa      	ldr	r2, [r7, #12]
 801f6f0:	697b      	ldr	r3, [r7, #20]
 801f6f2:	429a      	cmp	r2, r3
 801f6f4:	d01b      	beq.n	801f72e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801f6f6:	697b      	ldr	r3, [r7, #20]
 801f6f8:	8a5b      	ldrh	r3, [r3, #18]
 801f6fa:	88fa      	ldrh	r2, [r7, #6]
 801f6fc:	429a      	cmp	r2, r3
 801f6fe:	d116      	bne.n	801f72e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f700:	697b      	ldr	r3, [r7, #20]
 801f702:	681a      	ldr	r2, [r3, #0]
 801f704:	68bb      	ldr	r3, [r7, #8]
 801f706:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801f708:	429a      	cmp	r2, r3
 801f70a:	d00d      	beq.n	801f728 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f70c:	68bb      	ldr	r3, [r7, #8]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	d00a      	beq.n	801f728 <udp_bind+0xb4>
 801f712:	68bb      	ldr	r3, [r7, #8]
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	2b00      	cmp	r3, #0
 801f718:	d006      	beq.n	801f728 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f71a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d003      	beq.n	801f728 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f720:	697b      	ldr	r3, [r7, #20]
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	2b00      	cmp	r3, #0
 801f726:	d102      	bne.n	801f72e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801f728:	f06f 0307 	mvn.w	r3, #7
 801f72c:	e01c      	b.n	801f768 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f72e:	697b      	ldr	r3, [r7, #20]
 801f730:	68db      	ldr	r3, [r3, #12]
 801f732:	617b      	str	r3, [r7, #20]
 801f734:	697b      	ldr	r3, [r7, #20]
 801f736:	2b00      	cmp	r3, #0
 801f738:	d1d9      	bne.n	801f6ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f73a:	68bb      	ldr	r3, [r7, #8]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d002      	beq.n	801f746 <udp_bind+0xd2>
 801f740:	68bb      	ldr	r3, [r7, #8]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	e000      	b.n	801f748 <udp_bind+0xd4>
 801f746:	2300      	movs	r3, #0
 801f748:	68fa      	ldr	r2, [r7, #12]
 801f74a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	88fa      	ldrh	r2, [r7, #6]
 801f750:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801f752:	7cfb      	ldrb	r3, [r7, #19]
 801f754:	2b00      	cmp	r3, #0
 801f756:	d106      	bne.n	801f766 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801f758:	4b09      	ldr	r3, [pc, #36]	; (801f780 <udp_bind+0x10c>)
 801f75a:	681a      	ldr	r2, [r3, #0]
 801f75c:	68fb      	ldr	r3, [r7, #12]
 801f75e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801f760:	4a07      	ldr	r2, [pc, #28]	; (801f780 <udp_bind+0x10c>)
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801f766:	2300      	movs	r3, #0
}
 801f768:	4618      	mov	r0, r3
 801f76a:	3718      	adds	r7, #24
 801f76c:	46bd      	mov	sp, r7
 801f76e:	bd80      	pop	{r7, pc}
 801f770:	08028b3c 	.word	0x08028b3c
 801f774:	08027c5c 	.word	0x08027c5c
 801f778:	08027f24 	.word	0x08027f24
 801f77c:	08027cb0 	.word	0x08027cb0
 801f780:	20013e3c 	.word	0x20013e3c

0801f784 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801f784:	b580      	push	{r7, lr}
 801f786:	b084      	sub	sp, #16
 801f788:	af00      	add	r7, sp, #0
 801f78a:	60f8      	str	r0, [r7, #12]
 801f78c:	60b9      	str	r1, [r7, #8]
 801f78e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f790:	68fb      	ldr	r3, [r7, #12]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d107      	bne.n	801f7a6 <udp_recv+0x22>
 801f796:	4b08      	ldr	r3, [pc, #32]	; (801f7b8 <udp_recv+0x34>)
 801f798:	f240 428a 	movw	r2, #1162	; 0x48a
 801f79c:	4907      	ldr	r1, [pc, #28]	; (801f7bc <udp_recv+0x38>)
 801f79e:	4808      	ldr	r0, [pc, #32]	; (801f7c0 <udp_recv+0x3c>)
 801f7a0:	f002 fd48 	bl	8022234 <iprintf>
 801f7a4:	e005      	b.n	801f7b2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	68ba      	ldr	r2, [r7, #8]
 801f7aa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	687a      	ldr	r2, [r7, #4]
 801f7b0:	61da      	str	r2, [r3, #28]
}
 801f7b2:	3710      	adds	r7, #16
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}
 801f7b8:	08027c5c 	.word	0x08027c5c
 801f7bc:	08027f90 	.word	0x08027f90
 801f7c0:	08027cb0 	.word	0x08027cb0

0801f7c4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b084      	sub	sp, #16
 801f7c8:	af00      	add	r7, sp, #0
 801f7ca:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d107      	bne.n	801f7e2 <udp_remove+0x1e>
 801f7d2:	4b19      	ldr	r3, [pc, #100]	; (801f838 <udp_remove+0x74>)
 801f7d4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f7d8:	4918      	ldr	r1, [pc, #96]	; (801f83c <udp_remove+0x78>)
 801f7da:	4819      	ldr	r0, [pc, #100]	; (801f840 <udp_remove+0x7c>)
 801f7dc:	f002 fd2a 	bl	8022234 <iprintf>
 801f7e0:	e026      	b.n	801f830 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f7e2:	4b18      	ldr	r3, [pc, #96]	; (801f844 <udp_remove+0x80>)
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	687a      	ldr	r2, [r7, #4]
 801f7e8:	429a      	cmp	r2, r3
 801f7ea:	d105      	bne.n	801f7f8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801f7ec:	4b15      	ldr	r3, [pc, #84]	; (801f844 <udp_remove+0x80>)
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	68db      	ldr	r3, [r3, #12]
 801f7f2:	4a14      	ldr	r2, [pc, #80]	; (801f844 <udp_remove+0x80>)
 801f7f4:	6013      	str	r3, [r2, #0]
 801f7f6:	e017      	b.n	801f828 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f7f8:	4b12      	ldr	r3, [pc, #72]	; (801f844 <udp_remove+0x80>)
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	60fb      	str	r3, [r7, #12]
 801f7fe:	e010      	b.n	801f822 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	68db      	ldr	r3, [r3, #12]
 801f804:	2b00      	cmp	r3, #0
 801f806:	d009      	beq.n	801f81c <udp_remove+0x58>
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	68db      	ldr	r3, [r3, #12]
 801f80c:	687a      	ldr	r2, [r7, #4]
 801f80e:	429a      	cmp	r2, r3
 801f810:	d104      	bne.n	801f81c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	68da      	ldr	r2, [r3, #12]
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	60da      	str	r2, [r3, #12]
        break;
 801f81a:	e005      	b.n	801f828 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f81c:	68fb      	ldr	r3, [r7, #12]
 801f81e:	68db      	ldr	r3, [r3, #12]
 801f820:	60fb      	str	r3, [r7, #12]
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	2b00      	cmp	r3, #0
 801f826:	d1eb      	bne.n	801f800 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f828:	6879      	ldr	r1, [r7, #4]
 801f82a:	2000      	movs	r0, #0
 801f82c:	f7fe f8ba 	bl	801d9a4 <memp_free>
}
 801f830:	3710      	adds	r7, #16
 801f832:	46bd      	mov	sp, r7
 801f834:	bd80      	pop	{r7, pc}
 801f836:	bf00      	nop
 801f838:	08027c5c 	.word	0x08027c5c
 801f83c:	08027fa8 	.word	0x08027fa8
 801f840:	08027cb0 	.word	0x08027cb0
 801f844:	20013e3c 	.word	0x20013e3c

0801f848 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f848:	b580      	push	{r7, lr}
 801f84a:	b082      	sub	sp, #8
 801f84c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f84e:	2000      	movs	r0, #0
 801f850:	f7fe f838 	bl	801d8c4 <memp_malloc>
 801f854:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d007      	beq.n	801f86c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f85c:	2220      	movs	r2, #32
 801f85e:	2100      	movs	r1, #0
 801f860:	6878      	ldr	r0, [r7, #4]
 801f862:	f002 fbff 	bl	8022064 <memset>
    pcb->ttl = UDP_TTL;
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	22ff      	movs	r2, #255	; 0xff
 801f86a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801f86c:	687b      	ldr	r3, [r7, #4]
}
 801f86e:	4618      	mov	r0, r3
 801f870:	3708      	adds	r7, #8
 801f872:	46bd      	mov	sp, r7
 801f874:	bd80      	pop	{r7, pc}
	...

0801f878 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f878:	b480      	push	{r7}
 801f87a:	b085      	sub	sp, #20
 801f87c:	af00      	add	r7, sp, #0
 801f87e:	6078      	str	r0, [r7, #4]
 801f880:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d01e      	beq.n	801f8c6 <udp_netif_ip_addr_changed+0x4e>
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d01a      	beq.n	801f8c6 <udp_netif_ip_addr_changed+0x4e>
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	2b00      	cmp	r3, #0
 801f894:	d017      	beq.n	801f8c6 <udp_netif_ip_addr_changed+0x4e>
 801f896:	683b      	ldr	r3, [r7, #0]
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d013      	beq.n	801f8c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f89e:	4b0d      	ldr	r3, [pc, #52]	; (801f8d4 <udp_netif_ip_addr_changed+0x5c>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	60fb      	str	r3, [r7, #12]
 801f8a4:	e00c      	b.n	801f8c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	681a      	ldr	r2, [r3, #0]
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	429a      	cmp	r2, r3
 801f8b0:	d103      	bne.n	801f8ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f8b2:	683b      	ldr	r3, [r7, #0]
 801f8b4:	681a      	ldr	r2, [r3, #0]
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	68db      	ldr	r3, [r3, #12]
 801f8be:	60fb      	str	r3, [r7, #12]
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d1ef      	bne.n	801f8a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f8c6:	bf00      	nop
 801f8c8:	3714      	adds	r7, #20
 801f8ca:	46bd      	mov	sp, r7
 801f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8d0:	4770      	bx	lr
 801f8d2:	bf00      	nop
 801f8d4:	20013e3c 	.word	0x20013e3c

0801f8d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	b082      	sub	sp, #8
 801f8dc:	af00      	add	r7, sp, #0
 801f8de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801f8e0:	4915      	ldr	r1, [pc, #84]	; (801f938 <etharp_free_entry+0x60>)
 801f8e2:	687a      	ldr	r2, [r7, #4]
 801f8e4:	4613      	mov	r3, r2
 801f8e6:	005b      	lsls	r3, r3, #1
 801f8e8:	4413      	add	r3, r2
 801f8ea:	00db      	lsls	r3, r3, #3
 801f8ec:	440b      	add	r3, r1
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d013      	beq.n	801f91c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801f8f4:	4910      	ldr	r1, [pc, #64]	; (801f938 <etharp_free_entry+0x60>)
 801f8f6:	687a      	ldr	r2, [r7, #4]
 801f8f8:	4613      	mov	r3, r2
 801f8fa:	005b      	lsls	r3, r3, #1
 801f8fc:	4413      	add	r3, r2
 801f8fe:	00db      	lsls	r3, r3, #3
 801f900:	440b      	add	r3, r1
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	4618      	mov	r0, r3
 801f906:	f7fe ff5d 	bl	801e7c4 <pbuf_free>
    arp_table[i].q = NULL;
 801f90a:	490b      	ldr	r1, [pc, #44]	; (801f938 <etharp_free_entry+0x60>)
 801f90c:	687a      	ldr	r2, [r7, #4]
 801f90e:	4613      	mov	r3, r2
 801f910:	005b      	lsls	r3, r3, #1
 801f912:	4413      	add	r3, r2
 801f914:	00db      	lsls	r3, r3, #3
 801f916:	440b      	add	r3, r1
 801f918:	2200      	movs	r2, #0
 801f91a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f91c:	4906      	ldr	r1, [pc, #24]	; (801f938 <etharp_free_entry+0x60>)
 801f91e:	687a      	ldr	r2, [r7, #4]
 801f920:	4613      	mov	r3, r2
 801f922:	005b      	lsls	r3, r3, #1
 801f924:	4413      	add	r3, r2
 801f926:	00db      	lsls	r3, r3, #3
 801f928:	440b      	add	r3, r1
 801f92a:	3314      	adds	r3, #20
 801f92c:	2200      	movs	r2, #0
 801f92e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801f930:	bf00      	nop
 801f932:	3708      	adds	r7, #8
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}
 801f938:	20013e40 	.word	0x20013e40

0801f93c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	b082      	sub	sp, #8
 801f940:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f942:	2300      	movs	r3, #0
 801f944:	607b      	str	r3, [r7, #4]
 801f946:	e096      	b.n	801fa76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801f948:	494f      	ldr	r1, [pc, #316]	; (801fa88 <etharp_tmr+0x14c>)
 801f94a:	687a      	ldr	r2, [r7, #4]
 801f94c:	4613      	mov	r3, r2
 801f94e:	005b      	lsls	r3, r3, #1
 801f950:	4413      	add	r3, r2
 801f952:	00db      	lsls	r3, r3, #3
 801f954:	440b      	add	r3, r1
 801f956:	3314      	adds	r3, #20
 801f958:	781b      	ldrb	r3, [r3, #0]
 801f95a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801f95c:	78fb      	ldrb	r3, [r7, #3]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	f000 8086 	beq.w	801fa70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801f964:	4948      	ldr	r1, [pc, #288]	; (801fa88 <etharp_tmr+0x14c>)
 801f966:	687a      	ldr	r2, [r7, #4]
 801f968:	4613      	mov	r3, r2
 801f96a:	005b      	lsls	r3, r3, #1
 801f96c:	4413      	add	r3, r2
 801f96e:	00db      	lsls	r3, r3, #3
 801f970:	440b      	add	r3, r1
 801f972:	3312      	adds	r3, #18
 801f974:	881b      	ldrh	r3, [r3, #0]
 801f976:	3301      	adds	r3, #1
 801f978:	b298      	uxth	r0, r3
 801f97a:	4943      	ldr	r1, [pc, #268]	; (801fa88 <etharp_tmr+0x14c>)
 801f97c:	687a      	ldr	r2, [r7, #4]
 801f97e:	4613      	mov	r3, r2
 801f980:	005b      	lsls	r3, r3, #1
 801f982:	4413      	add	r3, r2
 801f984:	00db      	lsls	r3, r3, #3
 801f986:	440b      	add	r3, r1
 801f988:	3312      	adds	r3, #18
 801f98a:	4602      	mov	r2, r0
 801f98c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f98e:	493e      	ldr	r1, [pc, #248]	; (801fa88 <etharp_tmr+0x14c>)
 801f990:	687a      	ldr	r2, [r7, #4]
 801f992:	4613      	mov	r3, r2
 801f994:	005b      	lsls	r3, r3, #1
 801f996:	4413      	add	r3, r2
 801f998:	00db      	lsls	r3, r3, #3
 801f99a:	440b      	add	r3, r1
 801f99c:	3312      	adds	r3, #18
 801f99e:	881b      	ldrh	r3, [r3, #0]
 801f9a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f9a4:	d215      	bcs.n	801f9d2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f9a6:	4938      	ldr	r1, [pc, #224]	; (801fa88 <etharp_tmr+0x14c>)
 801f9a8:	687a      	ldr	r2, [r7, #4]
 801f9aa:	4613      	mov	r3, r2
 801f9ac:	005b      	lsls	r3, r3, #1
 801f9ae:	4413      	add	r3, r2
 801f9b0:	00db      	lsls	r3, r3, #3
 801f9b2:	440b      	add	r3, r1
 801f9b4:	3314      	adds	r3, #20
 801f9b6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f9b8:	2b01      	cmp	r3, #1
 801f9ba:	d10e      	bne.n	801f9da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801f9bc:	4932      	ldr	r1, [pc, #200]	; (801fa88 <etharp_tmr+0x14c>)
 801f9be:	687a      	ldr	r2, [r7, #4]
 801f9c0:	4613      	mov	r3, r2
 801f9c2:	005b      	lsls	r3, r3, #1
 801f9c4:	4413      	add	r3, r2
 801f9c6:	00db      	lsls	r3, r3, #3
 801f9c8:	440b      	add	r3, r1
 801f9ca:	3312      	adds	r3, #18
 801f9cc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f9ce:	2b04      	cmp	r3, #4
 801f9d0:	d903      	bls.n	801f9da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801f9d2:	6878      	ldr	r0, [r7, #4]
 801f9d4:	f7ff ff80 	bl	801f8d8 <etharp_free_entry>
 801f9d8:	e04a      	b.n	801fa70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801f9da:	492b      	ldr	r1, [pc, #172]	; (801fa88 <etharp_tmr+0x14c>)
 801f9dc:	687a      	ldr	r2, [r7, #4]
 801f9de:	4613      	mov	r3, r2
 801f9e0:	005b      	lsls	r3, r3, #1
 801f9e2:	4413      	add	r3, r2
 801f9e4:	00db      	lsls	r3, r3, #3
 801f9e6:	440b      	add	r3, r1
 801f9e8:	3314      	adds	r3, #20
 801f9ea:	781b      	ldrb	r3, [r3, #0]
 801f9ec:	2b03      	cmp	r3, #3
 801f9ee:	d10a      	bne.n	801fa06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801f9f0:	4925      	ldr	r1, [pc, #148]	; (801fa88 <etharp_tmr+0x14c>)
 801f9f2:	687a      	ldr	r2, [r7, #4]
 801f9f4:	4613      	mov	r3, r2
 801f9f6:	005b      	lsls	r3, r3, #1
 801f9f8:	4413      	add	r3, r2
 801f9fa:	00db      	lsls	r3, r3, #3
 801f9fc:	440b      	add	r3, r1
 801f9fe:	3314      	adds	r3, #20
 801fa00:	2204      	movs	r2, #4
 801fa02:	701a      	strb	r2, [r3, #0]
 801fa04:	e034      	b.n	801fa70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801fa06:	4920      	ldr	r1, [pc, #128]	; (801fa88 <etharp_tmr+0x14c>)
 801fa08:	687a      	ldr	r2, [r7, #4]
 801fa0a:	4613      	mov	r3, r2
 801fa0c:	005b      	lsls	r3, r3, #1
 801fa0e:	4413      	add	r3, r2
 801fa10:	00db      	lsls	r3, r3, #3
 801fa12:	440b      	add	r3, r1
 801fa14:	3314      	adds	r3, #20
 801fa16:	781b      	ldrb	r3, [r3, #0]
 801fa18:	2b04      	cmp	r3, #4
 801fa1a:	d10a      	bne.n	801fa32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801fa1c:	491a      	ldr	r1, [pc, #104]	; (801fa88 <etharp_tmr+0x14c>)
 801fa1e:	687a      	ldr	r2, [r7, #4]
 801fa20:	4613      	mov	r3, r2
 801fa22:	005b      	lsls	r3, r3, #1
 801fa24:	4413      	add	r3, r2
 801fa26:	00db      	lsls	r3, r3, #3
 801fa28:	440b      	add	r3, r1
 801fa2a:	3314      	adds	r3, #20
 801fa2c:	2202      	movs	r2, #2
 801fa2e:	701a      	strb	r2, [r3, #0]
 801fa30:	e01e      	b.n	801fa70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801fa32:	4915      	ldr	r1, [pc, #84]	; (801fa88 <etharp_tmr+0x14c>)
 801fa34:	687a      	ldr	r2, [r7, #4]
 801fa36:	4613      	mov	r3, r2
 801fa38:	005b      	lsls	r3, r3, #1
 801fa3a:	4413      	add	r3, r2
 801fa3c:	00db      	lsls	r3, r3, #3
 801fa3e:	440b      	add	r3, r1
 801fa40:	3314      	adds	r3, #20
 801fa42:	781b      	ldrb	r3, [r3, #0]
 801fa44:	2b01      	cmp	r3, #1
 801fa46:	d113      	bne.n	801fa70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801fa48:	490f      	ldr	r1, [pc, #60]	; (801fa88 <etharp_tmr+0x14c>)
 801fa4a:	687a      	ldr	r2, [r7, #4]
 801fa4c:	4613      	mov	r3, r2
 801fa4e:	005b      	lsls	r3, r3, #1
 801fa50:	4413      	add	r3, r2
 801fa52:	00db      	lsls	r3, r3, #3
 801fa54:	440b      	add	r3, r1
 801fa56:	3308      	adds	r3, #8
 801fa58:	6818      	ldr	r0, [r3, #0]
 801fa5a:	687a      	ldr	r2, [r7, #4]
 801fa5c:	4613      	mov	r3, r2
 801fa5e:	005b      	lsls	r3, r3, #1
 801fa60:	4413      	add	r3, r2
 801fa62:	00db      	lsls	r3, r3, #3
 801fa64:	4a08      	ldr	r2, [pc, #32]	; (801fa88 <etharp_tmr+0x14c>)
 801fa66:	4413      	add	r3, r2
 801fa68:	3304      	adds	r3, #4
 801fa6a:	4619      	mov	r1, r3
 801fa6c:	f000 fe6e 	bl	802074c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	3301      	adds	r3, #1
 801fa74:	607b      	str	r3, [r7, #4]
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	2b31      	cmp	r3, #49	; 0x31
 801fa7a:	f77f af65 	ble.w	801f948 <etharp_tmr+0xc>
      }
    }
  }
}
 801fa7e:	bf00      	nop
 801fa80:	bf00      	nop
 801fa82:	3708      	adds	r7, #8
 801fa84:	46bd      	mov	sp, r7
 801fa86:	bd80      	pop	{r7, pc}
 801fa88:	20013e40 	.word	0x20013e40

0801fa8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801fa8c:	b580      	push	{r7, lr}
 801fa8e:	b08a      	sub	sp, #40	; 0x28
 801fa90:	af00      	add	r7, sp, #0
 801fa92:	60f8      	str	r0, [r7, #12]
 801fa94:	460b      	mov	r3, r1
 801fa96:	607a      	str	r2, [r7, #4]
 801fa98:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801fa9a:	2332      	movs	r3, #50	; 0x32
 801fa9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801fa9e:	2332      	movs	r3, #50	; 0x32
 801faa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801faa2:	2332      	movs	r3, #50	; 0x32
 801faa4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801faa6:	2300      	movs	r3, #0
 801faa8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801faaa:	2332      	movs	r3, #50	; 0x32
 801faac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801faae:	2300      	movs	r3, #0
 801fab0:	83bb      	strh	r3, [r7, #28]
 801fab2:	2300      	movs	r3, #0
 801fab4:	837b      	strh	r3, [r7, #26]
 801fab6:	2300      	movs	r3, #0
 801fab8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801faba:	2300      	movs	r3, #0
 801fabc:	843b      	strh	r3, [r7, #32]
 801fabe:	e0ae      	b.n	801fc1e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801fac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fac4:	49a6      	ldr	r1, [pc, #664]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fac6:	4613      	mov	r3, r2
 801fac8:	005b      	lsls	r3, r3, #1
 801faca:	4413      	add	r3, r2
 801facc:	00db      	lsls	r3, r3, #3
 801face:	440b      	add	r3, r1
 801fad0:	3314      	adds	r3, #20
 801fad2:	781b      	ldrb	r3, [r3, #0]
 801fad4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fad6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fada:	2b32      	cmp	r3, #50	; 0x32
 801fadc:	d105      	bne.n	801faea <etharp_find_entry+0x5e>
 801fade:	7dfb      	ldrb	r3, [r7, #23]
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d102      	bne.n	801faea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801fae4:	8c3b      	ldrh	r3, [r7, #32]
 801fae6:	847b      	strh	r3, [r7, #34]	; 0x22
 801fae8:	e095      	b.n	801fc16 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801faea:	7dfb      	ldrb	r3, [r7, #23]
 801faec:	2b00      	cmp	r3, #0
 801faee:	f000 8092 	beq.w	801fc16 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801faf2:	7dfb      	ldrb	r3, [r7, #23]
 801faf4:	2b01      	cmp	r3, #1
 801faf6:	d009      	beq.n	801fb0c <etharp_find_entry+0x80>
 801faf8:	7dfb      	ldrb	r3, [r7, #23]
 801fafa:	2b01      	cmp	r3, #1
 801fafc:	d806      	bhi.n	801fb0c <etharp_find_entry+0x80>
 801fafe:	4b99      	ldr	r3, [pc, #612]	; (801fd64 <etharp_find_entry+0x2d8>)
 801fb00:	f240 1223 	movw	r2, #291	; 0x123
 801fb04:	4998      	ldr	r1, [pc, #608]	; (801fd68 <etharp_find_entry+0x2dc>)
 801fb06:	4899      	ldr	r0, [pc, #612]	; (801fd6c <etharp_find_entry+0x2e0>)
 801fb08:	f002 fb94 	bl	8022234 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801fb0c:	68fb      	ldr	r3, [r7, #12]
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	d020      	beq.n	801fb54 <etharp_find_entry+0xc8>
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	6819      	ldr	r1, [r3, #0]
 801fb16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb1a:	4891      	ldr	r0, [pc, #580]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fb1c:	4613      	mov	r3, r2
 801fb1e:	005b      	lsls	r3, r3, #1
 801fb20:	4413      	add	r3, r2
 801fb22:	00db      	lsls	r3, r3, #3
 801fb24:	4403      	add	r3, r0
 801fb26:	3304      	adds	r3, #4
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	4299      	cmp	r1, r3
 801fb2c:	d112      	bne.n	801fb54 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d00c      	beq.n	801fb4e <etharp_find_entry+0xc2>
 801fb34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb38:	4989      	ldr	r1, [pc, #548]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fb3a:	4613      	mov	r3, r2
 801fb3c:	005b      	lsls	r3, r3, #1
 801fb3e:	4413      	add	r3, r2
 801fb40:	00db      	lsls	r3, r3, #3
 801fb42:	440b      	add	r3, r1
 801fb44:	3308      	adds	r3, #8
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	687a      	ldr	r2, [r7, #4]
 801fb4a:	429a      	cmp	r2, r3
 801fb4c:	d102      	bne.n	801fb54 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801fb4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fb52:	e100      	b.n	801fd56 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801fb54:	7dfb      	ldrb	r3, [r7, #23]
 801fb56:	2b01      	cmp	r3, #1
 801fb58:	d140      	bne.n	801fbdc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801fb5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb5e:	4980      	ldr	r1, [pc, #512]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fb60:	4613      	mov	r3, r2
 801fb62:	005b      	lsls	r3, r3, #1
 801fb64:	4413      	add	r3, r2
 801fb66:	00db      	lsls	r3, r3, #3
 801fb68:	440b      	add	r3, r1
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d01a      	beq.n	801fba6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801fb70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb74:	497a      	ldr	r1, [pc, #488]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fb76:	4613      	mov	r3, r2
 801fb78:	005b      	lsls	r3, r3, #1
 801fb7a:	4413      	add	r3, r2
 801fb7c:	00db      	lsls	r3, r3, #3
 801fb7e:	440b      	add	r3, r1
 801fb80:	3312      	adds	r3, #18
 801fb82:	881b      	ldrh	r3, [r3, #0]
 801fb84:	8bba      	ldrh	r2, [r7, #28]
 801fb86:	429a      	cmp	r2, r3
 801fb88:	d845      	bhi.n	801fc16 <etharp_find_entry+0x18a>
            old_queue = i;
 801fb8a:	8c3b      	ldrh	r3, [r7, #32]
 801fb8c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801fb8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb92:	4973      	ldr	r1, [pc, #460]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fb94:	4613      	mov	r3, r2
 801fb96:	005b      	lsls	r3, r3, #1
 801fb98:	4413      	add	r3, r2
 801fb9a:	00db      	lsls	r3, r3, #3
 801fb9c:	440b      	add	r3, r1
 801fb9e:	3312      	adds	r3, #18
 801fba0:	881b      	ldrh	r3, [r3, #0]
 801fba2:	83bb      	strh	r3, [r7, #28]
 801fba4:	e037      	b.n	801fc16 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801fba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbaa:	496d      	ldr	r1, [pc, #436]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fbac:	4613      	mov	r3, r2
 801fbae:	005b      	lsls	r3, r3, #1
 801fbb0:	4413      	add	r3, r2
 801fbb2:	00db      	lsls	r3, r3, #3
 801fbb4:	440b      	add	r3, r1
 801fbb6:	3312      	adds	r3, #18
 801fbb8:	881b      	ldrh	r3, [r3, #0]
 801fbba:	8b7a      	ldrh	r2, [r7, #26]
 801fbbc:	429a      	cmp	r2, r3
 801fbbe:	d82a      	bhi.n	801fc16 <etharp_find_entry+0x18a>
            old_pending = i;
 801fbc0:	8c3b      	ldrh	r3, [r7, #32]
 801fbc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801fbc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbc8:	4965      	ldr	r1, [pc, #404]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fbca:	4613      	mov	r3, r2
 801fbcc:	005b      	lsls	r3, r3, #1
 801fbce:	4413      	add	r3, r2
 801fbd0:	00db      	lsls	r3, r3, #3
 801fbd2:	440b      	add	r3, r1
 801fbd4:	3312      	adds	r3, #18
 801fbd6:	881b      	ldrh	r3, [r3, #0]
 801fbd8:	837b      	strh	r3, [r7, #26]
 801fbda:	e01c      	b.n	801fc16 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801fbdc:	7dfb      	ldrb	r3, [r7, #23]
 801fbde:	2b01      	cmp	r3, #1
 801fbe0:	d919      	bls.n	801fc16 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801fbe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbe6:	495e      	ldr	r1, [pc, #376]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fbe8:	4613      	mov	r3, r2
 801fbea:	005b      	lsls	r3, r3, #1
 801fbec:	4413      	add	r3, r2
 801fbee:	00db      	lsls	r3, r3, #3
 801fbf0:	440b      	add	r3, r1
 801fbf2:	3312      	adds	r3, #18
 801fbf4:	881b      	ldrh	r3, [r3, #0]
 801fbf6:	8b3a      	ldrh	r2, [r7, #24]
 801fbf8:	429a      	cmp	r2, r3
 801fbfa:	d80c      	bhi.n	801fc16 <etharp_find_entry+0x18a>
            old_stable = i;
 801fbfc:	8c3b      	ldrh	r3, [r7, #32]
 801fbfe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801fc00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc04:	4956      	ldr	r1, [pc, #344]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fc06:	4613      	mov	r3, r2
 801fc08:	005b      	lsls	r3, r3, #1
 801fc0a:	4413      	add	r3, r2
 801fc0c:	00db      	lsls	r3, r3, #3
 801fc0e:	440b      	add	r3, r1
 801fc10:	3312      	adds	r3, #18
 801fc12:	881b      	ldrh	r3, [r3, #0]
 801fc14:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fc16:	8c3b      	ldrh	r3, [r7, #32]
 801fc18:	3301      	adds	r3, #1
 801fc1a:	b29b      	uxth	r3, r3
 801fc1c:	843b      	strh	r3, [r7, #32]
 801fc1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fc22:	2b31      	cmp	r3, #49	; 0x31
 801fc24:	f77f af4c 	ble.w	801fac0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801fc28:	7afb      	ldrb	r3, [r7, #11]
 801fc2a:	f003 0302 	and.w	r3, r3, #2
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d108      	bne.n	801fc44 <etharp_find_entry+0x1b8>
 801fc32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fc36:	2b32      	cmp	r3, #50	; 0x32
 801fc38:	d107      	bne.n	801fc4a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801fc3a:	7afb      	ldrb	r3, [r7, #11]
 801fc3c:	f003 0301 	and.w	r3, r3, #1
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d102      	bne.n	801fc4a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801fc44:	f04f 33ff 	mov.w	r3, #4294967295
 801fc48:	e085      	b.n	801fd56 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801fc4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fc4e:	2b31      	cmp	r3, #49	; 0x31
 801fc50:	dc02      	bgt.n	801fc58 <etharp_find_entry+0x1cc>
    i = empty;
 801fc52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fc54:	843b      	strh	r3, [r7, #32]
 801fc56:	e039      	b.n	801fccc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801fc58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801fc5c:	2b31      	cmp	r3, #49	; 0x31
 801fc5e:	dc14      	bgt.n	801fc8a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801fc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fc62:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801fc64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc68:	493d      	ldr	r1, [pc, #244]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fc6a:	4613      	mov	r3, r2
 801fc6c:	005b      	lsls	r3, r3, #1
 801fc6e:	4413      	add	r3, r2
 801fc70:	00db      	lsls	r3, r3, #3
 801fc72:	440b      	add	r3, r1
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d018      	beq.n	801fcac <etharp_find_entry+0x220>
 801fc7a:	4b3a      	ldr	r3, [pc, #232]	; (801fd64 <etharp_find_entry+0x2d8>)
 801fc7c:	f240 126d 	movw	r2, #365	; 0x16d
 801fc80:	493b      	ldr	r1, [pc, #236]	; (801fd70 <etharp_find_entry+0x2e4>)
 801fc82:	483a      	ldr	r0, [pc, #232]	; (801fd6c <etharp_find_entry+0x2e0>)
 801fc84:	f002 fad6 	bl	8022234 <iprintf>
 801fc88:	e010      	b.n	801fcac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801fc8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801fc8e:	2b31      	cmp	r3, #49	; 0x31
 801fc90:	dc02      	bgt.n	801fc98 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801fc92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801fc94:	843b      	strh	r3, [r7, #32]
 801fc96:	e009      	b.n	801fcac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801fc98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801fc9c:	2b31      	cmp	r3, #49	; 0x31
 801fc9e:	dc02      	bgt.n	801fca6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801fca0:	8bfb      	ldrh	r3, [r7, #30]
 801fca2:	843b      	strh	r3, [r7, #32]
 801fca4:	e002      	b.n	801fcac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801fca6:	f04f 33ff 	mov.w	r3, #4294967295
 801fcaa:	e054      	b.n	801fd56 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801fcac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fcb0:	2b31      	cmp	r3, #49	; 0x31
 801fcb2:	dd06      	ble.n	801fcc2 <etharp_find_entry+0x236>
 801fcb4:	4b2b      	ldr	r3, [pc, #172]	; (801fd64 <etharp_find_entry+0x2d8>)
 801fcb6:	f240 127f 	movw	r2, #383	; 0x17f
 801fcba:	492e      	ldr	r1, [pc, #184]	; (801fd74 <etharp_find_entry+0x2e8>)
 801fcbc:	482b      	ldr	r0, [pc, #172]	; (801fd6c <etharp_find_entry+0x2e0>)
 801fcbe:	f002 fab9 	bl	8022234 <iprintf>
    etharp_free_entry(i);
 801fcc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fcc6:	4618      	mov	r0, r3
 801fcc8:	f7ff fe06 	bl	801f8d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801fccc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fcd0:	2b31      	cmp	r3, #49	; 0x31
 801fcd2:	dd06      	ble.n	801fce2 <etharp_find_entry+0x256>
 801fcd4:	4b23      	ldr	r3, [pc, #140]	; (801fd64 <etharp_find_entry+0x2d8>)
 801fcd6:	f240 1283 	movw	r2, #387	; 0x183
 801fcda:	4926      	ldr	r1, [pc, #152]	; (801fd74 <etharp_find_entry+0x2e8>)
 801fcdc:	4823      	ldr	r0, [pc, #140]	; (801fd6c <etharp_find_entry+0x2e0>)
 801fcde:	f002 faa9 	bl	8022234 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801fce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fce6:	491e      	ldr	r1, [pc, #120]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fce8:	4613      	mov	r3, r2
 801fcea:	005b      	lsls	r3, r3, #1
 801fcec:	4413      	add	r3, r2
 801fcee:	00db      	lsls	r3, r3, #3
 801fcf0:	440b      	add	r3, r1
 801fcf2:	3314      	adds	r3, #20
 801fcf4:	781b      	ldrb	r3, [r3, #0]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d006      	beq.n	801fd08 <etharp_find_entry+0x27c>
 801fcfa:	4b1a      	ldr	r3, [pc, #104]	; (801fd64 <etharp_find_entry+0x2d8>)
 801fcfc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801fd00:	491d      	ldr	r1, [pc, #116]	; (801fd78 <etharp_find_entry+0x2ec>)
 801fd02:	481a      	ldr	r0, [pc, #104]	; (801fd6c <etharp_find_entry+0x2e0>)
 801fd04:	f002 fa96 	bl	8022234 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d00b      	beq.n	801fd26 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801fd0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fd12:	68fb      	ldr	r3, [r7, #12]
 801fd14:	6819      	ldr	r1, [r3, #0]
 801fd16:	4812      	ldr	r0, [pc, #72]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fd18:	4613      	mov	r3, r2
 801fd1a:	005b      	lsls	r3, r3, #1
 801fd1c:	4413      	add	r3, r2
 801fd1e:	00db      	lsls	r3, r3, #3
 801fd20:	4403      	add	r3, r0
 801fd22:	3304      	adds	r3, #4
 801fd24:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801fd26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fd2a:	490d      	ldr	r1, [pc, #52]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fd2c:	4613      	mov	r3, r2
 801fd2e:	005b      	lsls	r3, r3, #1
 801fd30:	4413      	add	r3, r2
 801fd32:	00db      	lsls	r3, r3, #3
 801fd34:	440b      	add	r3, r1
 801fd36:	3312      	adds	r3, #18
 801fd38:	2200      	movs	r2, #0
 801fd3a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801fd3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fd40:	4907      	ldr	r1, [pc, #28]	; (801fd60 <etharp_find_entry+0x2d4>)
 801fd42:	4613      	mov	r3, r2
 801fd44:	005b      	lsls	r3, r3, #1
 801fd46:	4413      	add	r3, r2
 801fd48:	00db      	lsls	r3, r3, #3
 801fd4a:	440b      	add	r3, r1
 801fd4c:	3308      	adds	r3, #8
 801fd4e:	687a      	ldr	r2, [r7, #4]
 801fd50:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801fd52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801fd56:	4618      	mov	r0, r3
 801fd58:	3728      	adds	r7, #40	; 0x28
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	bd80      	pop	{r7, pc}
 801fd5e:	bf00      	nop
 801fd60:	20013e40 	.word	0x20013e40
 801fd64:	08027fc0 	.word	0x08027fc0
 801fd68:	08027ff8 	.word	0x08027ff8
 801fd6c:	08028038 	.word	0x08028038
 801fd70:	08028060 	.word	0x08028060
 801fd74:	08028078 	.word	0x08028078
 801fd78:	0802808c 	.word	0x0802808c

0801fd7c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801fd7c:	b580      	push	{r7, lr}
 801fd7e:	b088      	sub	sp, #32
 801fd80:	af02      	add	r7, sp, #8
 801fd82:	60f8      	str	r0, [r7, #12]
 801fd84:	60b9      	str	r1, [r7, #8]
 801fd86:	607a      	str	r2, [r7, #4]
 801fd88:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fd90:	2b06      	cmp	r3, #6
 801fd92:	d006      	beq.n	801fda2 <etharp_update_arp_entry+0x26>
 801fd94:	4b48      	ldr	r3, [pc, #288]	; (801feb8 <etharp_update_arp_entry+0x13c>)
 801fd96:	f240 12a9 	movw	r2, #425	; 0x1a9
 801fd9a:	4948      	ldr	r1, [pc, #288]	; (801febc <etharp_update_arp_entry+0x140>)
 801fd9c:	4848      	ldr	r0, [pc, #288]	; (801fec0 <etharp_update_arp_entry+0x144>)
 801fd9e:	f002 fa49 	bl	8022234 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801fda2:	68bb      	ldr	r3, [r7, #8]
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d012      	beq.n	801fdce <etharp_update_arp_entry+0x52>
 801fda8:	68bb      	ldr	r3, [r7, #8]
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d00e      	beq.n	801fdce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fdb0:	68bb      	ldr	r3, [r7, #8]
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	68f9      	ldr	r1, [r7, #12]
 801fdb6:	4618      	mov	r0, r3
 801fdb8:	f001 f902 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 801fdbc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d105      	bne.n	801fdce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801fdc2:	68bb      	ldr	r3, [r7, #8]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fdca:	2be0      	cmp	r3, #224	; 0xe0
 801fdcc:	d102      	bne.n	801fdd4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801fdce:	f06f 030f 	mvn.w	r3, #15
 801fdd2:	e06c      	b.n	801feae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801fdd4:	78fb      	ldrb	r3, [r7, #3]
 801fdd6:	68fa      	ldr	r2, [r7, #12]
 801fdd8:	4619      	mov	r1, r3
 801fdda:	68b8      	ldr	r0, [r7, #8]
 801fddc:	f7ff fe56 	bl	801fa8c <etharp_find_entry>
 801fde0:	4603      	mov	r3, r0
 801fde2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801fde4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	da02      	bge.n	801fdf2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801fdec:	8afb      	ldrh	r3, [r7, #22]
 801fdee:	b25b      	sxtb	r3, r3
 801fdf0:	e05d      	b.n	801feae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801fdf2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fdf6:	4933      	ldr	r1, [pc, #204]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fdf8:	4613      	mov	r3, r2
 801fdfa:	005b      	lsls	r3, r3, #1
 801fdfc:	4413      	add	r3, r2
 801fdfe:	00db      	lsls	r3, r3, #3
 801fe00:	440b      	add	r3, r1
 801fe02:	3314      	adds	r3, #20
 801fe04:	2202      	movs	r2, #2
 801fe06:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801fe08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe0c:	492d      	ldr	r1, [pc, #180]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe0e:	4613      	mov	r3, r2
 801fe10:	005b      	lsls	r3, r3, #1
 801fe12:	4413      	add	r3, r2
 801fe14:	00db      	lsls	r3, r3, #3
 801fe16:	440b      	add	r3, r1
 801fe18:	3308      	adds	r3, #8
 801fe1a:	68fa      	ldr	r2, [r7, #12]
 801fe1c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801fe1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe22:	4613      	mov	r3, r2
 801fe24:	005b      	lsls	r3, r3, #1
 801fe26:	4413      	add	r3, r2
 801fe28:	00db      	lsls	r3, r3, #3
 801fe2a:	3308      	adds	r3, #8
 801fe2c:	4a25      	ldr	r2, [pc, #148]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe2e:	4413      	add	r3, r2
 801fe30:	3304      	adds	r3, #4
 801fe32:	2206      	movs	r2, #6
 801fe34:	6879      	ldr	r1, [r7, #4]
 801fe36:	4618      	mov	r0, r3
 801fe38:	f002 f8ec 	bl	8022014 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801fe3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe40:	4920      	ldr	r1, [pc, #128]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe42:	4613      	mov	r3, r2
 801fe44:	005b      	lsls	r3, r3, #1
 801fe46:	4413      	add	r3, r2
 801fe48:	00db      	lsls	r3, r3, #3
 801fe4a:	440b      	add	r3, r1
 801fe4c:	3312      	adds	r3, #18
 801fe4e:	2200      	movs	r2, #0
 801fe50:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801fe52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe56:	491b      	ldr	r1, [pc, #108]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe58:	4613      	mov	r3, r2
 801fe5a:	005b      	lsls	r3, r3, #1
 801fe5c:	4413      	add	r3, r2
 801fe5e:	00db      	lsls	r3, r3, #3
 801fe60:	440b      	add	r3, r1
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d021      	beq.n	801feac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801fe68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe6c:	4915      	ldr	r1, [pc, #84]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe6e:	4613      	mov	r3, r2
 801fe70:	005b      	lsls	r3, r3, #1
 801fe72:	4413      	add	r3, r2
 801fe74:	00db      	lsls	r3, r3, #3
 801fe76:	440b      	add	r3, r1
 801fe78:	681b      	ldr	r3, [r3, #0]
 801fe7a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801fe7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe80:	4910      	ldr	r1, [pc, #64]	; (801fec4 <etharp_update_arp_entry+0x148>)
 801fe82:	4613      	mov	r3, r2
 801fe84:	005b      	lsls	r3, r3, #1
 801fe86:	4413      	add	r3, r2
 801fe88:	00db      	lsls	r3, r3, #3
 801fe8a:	440b      	add	r3, r1
 801fe8c:	2200      	movs	r2, #0
 801fe8e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801fe90:	68fb      	ldr	r3, [r7, #12]
 801fe92:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801fe96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fe9a:	9300      	str	r3, [sp, #0]
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	6939      	ldr	r1, [r7, #16]
 801fea0:	68f8      	ldr	r0, [r7, #12]
 801fea2:	f002 f82b 	bl	8021efc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801fea6:	6938      	ldr	r0, [r7, #16]
 801fea8:	f7fe fc8c 	bl	801e7c4 <pbuf_free>
  }
  return ERR_OK;
 801feac:	2300      	movs	r3, #0
}
 801feae:	4618      	mov	r0, r3
 801feb0:	3718      	adds	r7, #24
 801feb2:	46bd      	mov	sp, r7
 801feb4:	bd80      	pop	{r7, pc}
 801feb6:	bf00      	nop
 801feb8:	08027fc0 	.word	0x08027fc0
 801febc:	080280b8 	.word	0x080280b8
 801fec0:	08028038 	.word	0x08028038
 801fec4:	20013e40 	.word	0x20013e40

0801fec8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801fec8:	b580      	push	{r7, lr}
 801feca:	b084      	sub	sp, #16
 801fecc:	af00      	add	r7, sp, #0
 801fece:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fed0:	2300      	movs	r3, #0
 801fed2:	60fb      	str	r3, [r7, #12]
 801fed4:	e01e      	b.n	801ff14 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801fed6:	4913      	ldr	r1, [pc, #76]	; (801ff24 <etharp_cleanup_netif+0x5c>)
 801fed8:	68fa      	ldr	r2, [r7, #12]
 801feda:	4613      	mov	r3, r2
 801fedc:	005b      	lsls	r3, r3, #1
 801fede:	4413      	add	r3, r2
 801fee0:	00db      	lsls	r3, r3, #3
 801fee2:	440b      	add	r3, r1
 801fee4:	3314      	adds	r3, #20
 801fee6:	781b      	ldrb	r3, [r3, #0]
 801fee8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801feea:	7afb      	ldrb	r3, [r7, #11]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d00e      	beq.n	801ff0e <etharp_cleanup_netif+0x46>
 801fef0:	490c      	ldr	r1, [pc, #48]	; (801ff24 <etharp_cleanup_netif+0x5c>)
 801fef2:	68fa      	ldr	r2, [r7, #12]
 801fef4:	4613      	mov	r3, r2
 801fef6:	005b      	lsls	r3, r3, #1
 801fef8:	4413      	add	r3, r2
 801fefa:	00db      	lsls	r3, r3, #3
 801fefc:	440b      	add	r3, r1
 801fefe:	3308      	adds	r3, #8
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	429a      	cmp	r2, r3
 801ff06:	d102      	bne.n	801ff0e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ff08:	68f8      	ldr	r0, [r7, #12]
 801ff0a:	f7ff fce5 	bl	801f8d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff0e:	68fb      	ldr	r3, [r7, #12]
 801ff10:	3301      	adds	r3, #1
 801ff12:	60fb      	str	r3, [r7, #12]
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	2b31      	cmp	r3, #49	; 0x31
 801ff18:	dddd      	ble.n	801fed6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801ff1a:	bf00      	nop
 801ff1c:	bf00      	nop
 801ff1e:	3710      	adds	r7, #16
 801ff20:	46bd      	mov	sp, r7
 801ff22:	bd80      	pop	{r7, pc}
 801ff24:	20013e40 	.word	0x20013e40

0801ff28 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ff28:	b5b0      	push	{r4, r5, r7, lr}
 801ff2a:	b08a      	sub	sp, #40	; 0x28
 801ff2c:	af04      	add	r7, sp, #16
 801ff2e:	6078      	str	r0, [r7, #4]
 801ff30:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d107      	bne.n	801ff48 <etharp_input+0x20>
 801ff38:	4b3d      	ldr	r3, [pc, #244]	; (8020030 <etharp_input+0x108>)
 801ff3a:	f240 228a 	movw	r2, #650	; 0x28a
 801ff3e:	493d      	ldr	r1, [pc, #244]	; (8020034 <etharp_input+0x10c>)
 801ff40:	483d      	ldr	r0, [pc, #244]	; (8020038 <etharp_input+0x110>)
 801ff42:	f002 f977 	bl	8022234 <iprintf>
 801ff46:	e06f      	b.n	8020028 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	685b      	ldr	r3, [r3, #4]
 801ff4c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ff4e:	693b      	ldr	r3, [r7, #16]
 801ff50:	881b      	ldrh	r3, [r3, #0]
 801ff52:	b29b      	uxth	r3, r3
 801ff54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ff58:	d10c      	bne.n	801ff74 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ff5a:	693b      	ldr	r3, [r7, #16]
 801ff5c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ff5e:	2b06      	cmp	r3, #6
 801ff60:	d108      	bne.n	801ff74 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ff62:	693b      	ldr	r3, [r7, #16]
 801ff64:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ff66:	2b04      	cmp	r3, #4
 801ff68:	d104      	bne.n	801ff74 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ff6a:	693b      	ldr	r3, [r7, #16]
 801ff6c:	885b      	ldrh	r3, [r3, #2]
 801ff6e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ff70:	2b08      	cmp	r3, #8
 801ff72:	d003      	beq.n	801ff7c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ff74:	6878      	ldr	r0, [r7, #4]
 801ff76:	f7fe fc25 	bl	801e7c4 <pbuf_free>
    return;
 801ff7a:	e055      	b.n	8020028 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ff7c:	693b      	ldr	r3, [r7, #16]
 801ff7e:	330e      	adds	r3, #14
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ff84:	693b      	ldr	r3, [r7, #16]
 801ff86:	3318      	adds	r3, #24
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ff8c:	683b      	ldr	r3, [r7, #0]
 801ff8e:	3304      	adds	r3, #4
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d102      	bne.n	801ff9c <etharp_input+0x74>
    for_us = 0;
 801ff96:	2300      	movs	r3, #0
 801ff98:	75fb      	strb	r3, [r7, #23]
 801ff9a:	e009      	b.n	801ffb0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ff9c:	68ba      	ldr	r2, [r7, #8]
 801ff9e:	683b      	ldr	r3, [r7, #0]
 801ffa0:	3304      	adds	r3, #4
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	429a      	cmp	r2, r3
 801ffa6:	bf0c      	ite	eq
 801ffa8:	2301      	moveq	r3, #1
 801ffaa:	2300      	movne	r3, #0
 801ffac:	b2db      	uxtb	r3, r3
 801ffae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ffb0:	693b      	ldr	r3, [r7, #16]
 801ffb2:	f103 0208 	add.w	r2, r3, #8
 801ffb6:	7dfb      	ldrb	r3, [r7, #23]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d001      	beq.n	801ffc0 <etharp_input+0x98>
 801ffbc:	2301      	movs	r3, #1
 801ffbe:	e000      	b.n	801ffc2 <etharp_input+0x9a>
 801ffc0:	2302      	movs	r3, #2
 801ffc2:	f107 010c 	add.w	r1, r7, #12
 801ffc6:	6838      	ldr	r0, [r7, #0]
 801ffc8:	f7ff fed8 	bl	801fd7c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ffcc:	693b      	ldr	r3, [r7, #16]
 801ffce:	88db      	ldrh	r3, [r3, #6]
 801ffd0:	b29b      	uxth	r3, r3
 801ffd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ffd6:	d003      	beq.n	801ffe0 <etharp_input+0xb8>
 801ffd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ffdc:	d01e      	beq.n	802001c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ffde:	e020      	b.n	8020022 <etharp_input+0xfa>
      if (for_us) {
 801ffe0:	7dfb      	ldrb	r3, [r7, #23]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d01c      	beq.n	8020020 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ffe6:	683b      	ldr	r3, [r7, #0]
 801ffe8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ffec:	693b      	ldr	r3, [r7, #16]
 801ffee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801fff2:	683b      	ldr	r3, [r7, #0]
 801fff4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801fffc:	693a      	ldr	r2, [r7, #16]
 801fffe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020000:	2102      	movs	r1, #2
 8020002:	9103      	str	r1, [sp, #12]
 8020004:	f107 010c 	add.w	r1, r7, #12
 8020008:	9102      	str	r1, [sp, #8]
 802000a:	9201      	str	r2, [sp, #4]
 802000c:	9300      	str	r3, [sp, #0]
 802000e:	462b      	mov	r3, r5
 8020010:	4622      	mov	r2, r4
 8020012:	4601      	mov	r1, r0
 8020014:	6838      	ldr	r0, [r7, #0]
 8020016:	f000 faeb 	bl	80205f0 <etharp_raw>
      break;
 802001a:	e001      	b.n	8020020 <etharp_input+0xf8>
      break;
 802001c:	bf00      	nop
 802001e:	e000      	b.n	8020022 <etharp_input+0xfa>
      break;
 8020020:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020022:	6878      	ldr	r0, [r7, #4]
 8020024:	f7fe fbce 	bl	801e7c4 <pbuf_free>
}
 8020028:	3718      	adds	r7, #24
 802002a:	46bd      	mov	sp, r7
 802002c:	bdb0      	pop	{r4, r5, r7, pc}
 802002e:	bf00      	nop
 8020030:	08027fc0 	.word	0x08027fc0
 8020034:	08028110 	.word	0x08028110
 8020038:	08028038 	.word	0x08028038

0802003c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 802003c:	b580      	push	{r7, lr}
 802003e:	b086      	sub	sp, #24
 8020040:	af02      	add	r7, sp, #8
 8020042:	60f8      	str	r0, [r7, #12]
 8020044:	60b9      	str	r1, [r7, #8]
 8020046:	4613      	mov	r3, r2
 8020048:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802004a:	79fa      	ldrb	r2, [r7, #7]
 802004c:	4944      	ldr	r1, [pc, #272]	; (8020160 <etharp_output_to_arp_index+0x124>)
 802004e:	4613      	mov	r3, r2
 8020050:	005b      	lsls	r3, r3, #1
 8020052:	4413      	add	r3, r2
 8020054:	00db      	lsls	r3, r3, #3
 8020056:	440b      	add	r3, r1
 8020058:	3314      	adds	r3, #20
 802005a:	781b      	ldrb	r3, [r3, #0]
 802005c:	2b01      	cmp	r3, #1
 802005e:	d806      	bhi.n	802006e <etharp_output_to_arp_index+0x32>
 8020060:	4b40      	ldr	r3, [pc, #256]	; (8020164 <etharp_output_to_arp_index+0x128>)
 8020062:	f240 22ee 	movw	r2, #750	; 0x2ee
 8020066:	4940      	ldr	r1, [pc, #256]	; (8020168 <etharp_output_to_arp_index+0x12c>)
 8020068:	4840      	ldr	r0, [pc, #256]	; (802016c <etharp_output_to_arp_index+0x130>)
 802006a:	f002 f8e3 	bl	8022234 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802006e:	79fa      	ldrb	r2, [r7, #7]
 8020070:	493b      	ldr	r1, [pc, #236]	; (8020160 <etharp_output_to_arp_index+0x124>)
 8020072:	4613      	mov	r3, r2
 8020074:	005b      	lsls	r3, r3, #1
 8020076:	4413      	add	r3, r2
 8020078:	00db      	lsls	r3, r3, #3
 802007a:	440b      	add	r3, r1
 802007c:	3314      	adds	r3, #20
 802007e:	781b      	ldrb	r3, [r3, #0]
 8020080:	2b02      	cmp	r3, #2
 8020082:	d153      	bne.n	802012c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8020084:	79fa      	ldrb	r2, [r7, #7]
 8020086:	4936      	ldr	r1, [pc, #216]	; (8020160 <etharp_output_to_arp_index+0x124>)
 8020088:	4613      	mov	r3, r2
 802008a:	005b      	lsls	r3, r3, #1
 802008c:	4413      	add	r3, r2
 802008e:	00db      	lsls	r3, r3, #3
 8020090:	440b      	add	r3, r1
 8020092:	3312      	adds	r3, #18
 8020094:	881b      	ldrh	r3, [r3, #0]
 8020096:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 802009a:	d919      	bls.n	80200d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802009c:	79fa      	ldrb	r2, [r7, #7]
 802009e:	4613      	mov	r3, r2
 80200a0:	005b      	lsls	r3, r3, #1
 80200a2:	4413      	add	r3, r2
 80200a4:	00db      	lsls	r3, r3, #3
 80200a6:	4a2e      	ldr	r2, [pc, #184]	; (8020160 <etharp_output_to_arp_index+0x124>)
 80200a8:	4413      	add	r3, r2
 80200aa:	3304      	adds	r3, #4
 80200ac:	4619      	mov	r1, r3
 80200ae:	68f8      	ldr	r0, [r7, #12]
 80200b0:	f000 fb4c 	bl	802074c <etharp_request>
 80200b4:	4603      	mov	r3, r0
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d138      	bne.n	802012c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80200ba:	79fa      	ldrb	r2, [r7, #7]
 80200bc:	4928      	ldr	r1, [pc, #160]	; (8020160 <etharp_output_to_arp_index+0x124>)
 80200be:	4613      	mov	r3, r2
 80200c0:	005b      	lsls	r3, r3, #1
 80200c2:	4413      	add	r3, r2
 80200c4:	00db      	lsls	r3, r3, #3
 80200c6:	440b      	add	r3, r1
 80200c8:	3314      	adds	r3, #20
 80200ca:	2203      	movs	r2, #3
 80200cc:	701a      	strb	r2, [r3, #0]
 80200ce:	e02d      	b.n	802012c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80200d0:	79fa      	ldrb	r2, [r7, #7]
 80200d2:	4923      	ldr	r1, [pc, #140]	; (8020160 <etharp_output_to_arp_index+0x124>)
 80200d4:	4613      	mov	r3, r2
 80200d6:	005b      	lsls	r3, r3, #1
 80200d8:	4413      	add	r3, r2
 80200da:	00db      	lsls	r3, r3, #3
 80200dc:	440b      	add	r3, r1
 80200de:	3312      	adds	r3, #18
 80200e0:	881b      	ldrh	r3, [r3, #0]
 80200e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80200e6:	d321      	bcc.n	802012c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80200e8:	79fa      	ldrb	r2, [r7, #7]
 80200ea:	4613      	mov	r3, r2
 80200ec:	005b      	lsls	r3, r3, #1
 80200ee:	4413      	add	r3, r2
 80200f0:	00db      	lsls	r3, r3, #3
 80200f2:	4a1b      	ldr	r2, [pc, #108]	; (8020160 <etharp_output_to_arp_index+0x124>)
 80200f4:	4413      	add	r3, r2
 80200f6:	1d19      	adds	r1, r3, #4
 80200f8:	79fa      	ldrb	r2, [r7, #7]
 80200fa:	4613      	mov	r3, r2
 80200fc:	005b      	lsls	r3, r3, #1
 80200fe:	4413      	add	r3, r2
 8020100:	00db      	lsls	r3, r3, #3
 8020102:	3308      	adds	r3, #8
 8020104:	4a16      	ldr	r2, [pc, #88]	; (8020160 <etharp_output_to_arp_index+0x124>)
 8020106:	4413      	add	r3, r2
 8020108:	3304      	adds	r3, #4
 802010a:	461a      	mov	r2, r3
 802010c:	68f8      	ldr	r0, [r7, #12]
 802010e:	f000 fafb 	bl	8020708 <etharp_request_dst>
 8020112:	4603      	mov	r3, r0
 8020114:	2b00      	cmp	r3, #0
 8020116:	d109      	bne.n	802012c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020118:	79fa      	ldrb	r2, [r7, #7]
 802011a:	4911      	ldr	r1, [pc, #68]	; (8020160 <etharp_output_to_arp_index+0x124>)
 802011c:	4613      	mov	r3, r2
 802011e:	005b      	lsls	r3, r3, #1
 8020120:	4413      	add	r3, r2
 8020122:	00db      	lsls	r3, r3, #3
 8020124:	440b      	add	r3, r1
 8020126:	3314      	adds	r3, #20
 8020128:	2203      	movs	r2, #3
 802012a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8020132:	79fa      	ldrb	r2, [r7, #7]
 8020134:	4613      	mov	r3, r2
 8020136:	005b      	lsls	r3, r3, #1
 8020138:	4413      	add	r3, r2
 802013a:	00db      	lsls	r3, r3, #3
 802013c:	3308      	adds	r3, #8
 802013e:	4a08      	ldr	r2, [pc, #32]	; (8020160 <etharp_output_to_arp_index+0x124>)
 8020140:	4413      	add	r3, r2
 8020142:	3304      	adds	r3, #4
 8020144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020148:	9200      	str	r2, [sp, #0]
 802014a:	460a      	mov	r2, r1
 802014c:	68b9      	ldr	r1, [r7, #8]
 802014e:	68f8      	ldr	r0, [r7, #12]
 8020150:	f001 fed4 	bl	8021efc <ethernet_output>
 8020154:	4603      	mov	r3, r0
}
 8020156:	4618      	mov	r0, r3
 8020158:	3710      	adds	r7, #16
 802015a:	46bd      	mov	sp, r7
 802015c:	bd80      	pop	{r7, pc}
 802015e:	bf00      	nop
 8020160:	20013e40 	.word	0x20013e40
 8020164:	08027fc0 	.word	0x08027fc0
 8020168:	08028130 	.word	0x08028130
 802016c:	08028038 	.word	0x08028038

08020170 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020170:	b580      	push	{r7, lr}
 8020172:	b08a      	sub	sp, #40	; 0x28
 8020174:	af02      	add	r7, sp, #8
 8020176:	60f8      	str	r0, [r7, #12]
 8020178:	60b9      	str	r1, [r7, #8]
 802017a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	2b00      	cmp	r3, #0
 8020184:	d106      	bne.n	8020194 <etharp_output+0x24>
 8020186:	4b73      	ldr	r3, [pc, #460]	; (8020354 <etharp_output+0x1e4>)
 8020188:	f240 321e 	movw	r2, #798	; 0x31e
 802018c:	4972      	ldr	r1, [pc, #456]	; (8020358 <etharp_output+0x1e8>)
 802018e:	4873      	ldr	r0, [pc, #460]	; (802035c <etharp_output+0x1ec>)
 8020190:	f002 f850 	bl	8022234 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020194:	68bb      	ldr	r3, [r7, #8]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d106      	bne.n	80201a8 <etharp_output+0x38>
 802019a:	4b6e      	ldr	r3, [pc, #440]	; (8020354 <etharp_output+0x1e4>)
 802019c:	f240 321f 	movw	r2, #799	; 0x31f
 80201a0:	496f      	ldr	r1, [pc, #444]	; (8020360 <etharp_output+0x1f0>)
 80201a2:	486e      	ldr	r0, [pc, #440]	; (802035c <etharp_output+0x1ec>)
 80201a4:	f002 f846 	bl	8022234 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	d106      	bne.n	80201bc <etharp_output+0x4c>
 80201ae:	4b69      	ldr	r3, [pc, #420]	; (8020354 <etharp_output+0x1e4>)
 80201b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80201b4:	496b      	ldr	r1, [pc, #428]	; (8020364 <etharp_output+0x1f4>)
 80201b6:	4869      	ldr	r0, [pc, #420]	; (802035c <etharp_output+0x1ec>)
 80201b8:	f002 f83c 	bl	8022234 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	68f9      	ldr	r1, [r7, #12]
 80201c2:	4618      	mov	r0, r3
 80201c4:	f000 fefc 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 80201c8:	4603      	mov	r3, r0
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d002      	beq.n	80201d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80201ce:	4b66      	ldr	r3, [pc, #408]	; (8020368 <etharp_output+0x1f8>)
 80201d0:	61fb      	str	r3, [r7, #28]
 80201d2:	e0af      	b.n	8020334 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80201dc:	2be0      	cmp	r3, #224	; 0xe0
 80201de:	d118      	bne.n	8020212 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80201e0:	2301      	movs	r3, #1
 80201e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80201e4:	2300      	movs	r3, #0
 80201e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80201e8:	235e      	movs	r3, #94	; 0x5e
 80201ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	3301      	adds	r3, #1
 80201f0:	781b      	ldrb	r3, [r3, #0]
 80201f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80201f6:	b2db      	uxtb	r3, r3
 80201f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	3302      	adds	r3, #2
 80201fe:	781b      	ldrb	r3, [r3, #0]
 8020200:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	3303      	adds	r3, #3
 8020206:	781b      	ldrb	r3, [r3, #0]
 8020208:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802020a:	f107 0310 	add.w	r3, r7, #16
 802020e:	61fb      	str	r3, [r7, #28]
 8020210:	e090      	b.n	8020334 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	681a      	ldr	r2, [r3, #0]
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	3304      	adds	r3, #4
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	405a      	eors	r2, r3
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	3308      	adds	r3, #8
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	4013      	ands	r3, r2
 8020226:	2b00      	cmp	r3, #0
 8020228:	d012      	beq.n	8020250 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020230:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020234:	4293      	cmp	r3, r2
 8020236:	d00b      	beq.n	8020250 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	330c      	adds	r3, #12
 802023c:	681b      	ldr	r3, [r3, #0]
 802023e:	2b00      	cmp	r3, #0
 8020240:	d003      	beq.n	802024a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020242:	68fb      	ldr	r3, [r7, #12]
 8020244:	330c      	adds	r3, #12
 8020246:	61bb      	str	r3, [r7, #24]
 8020248:	e002      	b.n	8020250 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802024a:	f06f 0303 	mvn.w	r3, #3
 802024e:	e07d      	b.n	802034c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020250:	4b46      	ldr	r3, [pc, #280]	; (802036c <etharp_output+0x1fc>)
 8020252:	781b      	ldrb	r3, [r3, #0]
 8020254:	4619      	mov	r1, r3
 8020256:	4a46      	ldr	r2, [pc, #280]	; (8020370 <etharp_output+0x200>)
 8020258:	460b      	mov	r3, r1
 802025a:	005b      	lsls	r3, r3, #1
 802025c:	440b      	add	r3, r1
 802025e:	00db      	lsls	r3, r3, #3
 8020260:	4413      	add	r3, r2
 8020262:	3314      	adds	r3, #20
 8020264:	781b      	ldrb	r3, [r3, #0]
 8020266:	2b01      	cmp	r3, #1
 8020268:	d925      	bls.n	80202b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 802026a:	4b40      	ldr	r3, [pc, #256]	; (802036c <etharp_output+0x1fc>)
 802026c:	781b      	ldrb	r3, [r3, #0]
 802026e:	4619      	mov	r1, r3
 8020270:	4a3f      	ldr	r2, [pc, #252]	; (8020370 <etharp_output+0x200>)
 8020272:	460b      	mov	r3, r1
 8020274:	005b      	lsls	r3, r3, #1
 8020276:	440b      	add	r3, r1
 8020278:	00db      	lsls	r3, r3, #3
 802027a:	4413      	add	r3, r2
 802027c:	3308      	adds	r3, #8
 802027e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020280:	68fa      	ldr	r2, [r7, #12]
 8020282:	429a      	cmp	r2, r3
 8020284:	d117      	bne.n	80202b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020286:	69bb      	ldr	r3, [r7, #24]
 8020288:	681a      	ldr	r2, [r3, #0]
 802028a:	4b38      	ldr	r3, [pc, #224]	; (802036c <etharp_output+0x1fc>)
 802028c:	781b      	ldrb	r3, [r3, #0]
 802028e:	4618      	mov	r0, r3
 8020290:	4937      	ldr	r1, [pc, #220]	; (8020370 <etharp_output+0x200>)
 8020292:	4603      	mov	r3, r0
 8020294:	005b      	lsls	r3, r3, #1
 8020296:	4403      	add	r3, r0
 8020298:	00db      	lsls	r3, r3, #3
 802029a:	440b      	add	r3, r1
 802029c:	3304      	adds	r3, #4
 802029e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80202a0:	429a      	cmp	r2, r3
 80202a2:	d108      	bne.n	80202b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80202a4:	4b31      	ldr	r3, [pc, #196]	; (802036c <etharp_output+0x1fc>)
 80202a6:	781b      	ldrb	r3, [r3, #0]
 80202a8:	461a      	mov	r2, r3
 80202aa:	68b9      	ldr	r1, [r7, #8]
 80202ac:	68f8      	ldr	r0, [r7, #12]
 80202ae:	f7ff fec5 	bl	802003c <etharp_output_to_arp_index>
 80202b2:	4603      	mov	r3, r0
 80202b4:	e04a      	b.n	802034c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80202b6:	2300      	movs	r3, #0
 80202b8:	75fb      	strb	r3, [r7, #23]
 80202ba:	e031      	b.n	8020320 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80202bc:	7dfa      	ldrb	r2, [r7, #23]
 80202be:	492c      	ldr	r1, [pc, #176]	; (8020370 <etharp_output+0x200>)
 80202c0:	4613      	mov	r3, r2
 80202c2:	005b      	lsls	r3, r3, #1
 80202c4:	4413      	add	r3, r2
 80202c6:	00db      	lsls	r3, r3, #3
 80202c8:	440b      	add	r3, r1
 80202ca:	3314      	adds	r3, #20
 80202cc:	781b      	ldrb	r3, [r3, #0]
 80202ce:	2b01      	cmp	r3, #1
 80202d0:	d923      	bls.n	802031a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80202d2:	7dfa      	ldrb	r2, [r7, #23]
 80202d4:	4926      	ldr	r1, [pc, #152]	; (8020370 <etharp_output+0x200>)
 80202d6:	4613      	mov	r3, r2
 80202d8:	005b      	lsls	r3, r3, #1
 80202da:	4413      	add	r3, r2
 80202dc:	00db      	lsls	r3, r3, #3
 80202de:	440b      	add	r3, r1
 80202e0:	3308      	adds	r3, #8
 80202e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80202e4:	68fa      	ldr	r2, [r7, #12]
 80202e6:	429a      	cmp	r2, r3
 80202e8:	d117      	bne.n	802031a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80202ea:	69bb      	ldr	r3, [r7, #24]
 80202ec:	6819      	ldr	r1, [r3, #0]
 80202ee:	7dfa      	ldrb	r2, [r7, #23]
 80202f0:	481f      	ldr	r0, [pc, #124]	; (8020370 <etharp_output+0x200>)
 80202f2:	4613      	mov	r3, r2
 80202f4:	005b      	lsls	r3, r3, #1
 80202f6:	4413      	add	r3, r2
 80202f8:	00db      	lsls	r3, r3, #3
 80202fa:	4403      	add	r3, r0
 80202fc:	3304      	adds	r3, #4
 80202fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020300:	4299      	cmp	r1, r3
 8020302:	d10a      	bne.n	802031a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020304:	4a19      	ldr	r2, [pc, #100]	; (802036c <etharp_output+0x1fc>)
 8020306:	7dfb      	ldrb	r3, [r7, #23]
 8020308:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802030a:	7dfb      	ldrb	r3, [r7, #23]
 802030c:	461a      	mov	r2, r3
 802030e:	68b9      	ldr	r1, [r7, #8]
 8020310:	68f8      	ldr	r0, [r7, #12]
 8020312:	f7ff fe93 	bl	802003c <etharp_output_to_arp_index>
 8020316:	4603      	mov	r3, r0
 8020318:	e018      	b.n	802034c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802031a:	7dfb      	ldrb	r3, [r7, #23]
 802031c:	3301      	adds	r3, #1
 802031e:	75fb      	strb	r3, [r7, #23]
 8020320:	7dfb      	ldrb	r3, [r7, #23]
 8020322:	2b31      	cmp	r3, #49	; 0x31
 8020324:	d9ca      	bls.n	80202bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020326:	68ba      	ldr	r2, [r7, #8]
 8020328:	69b9      	ldr	r1, [r7, #24]
 802032a:	68f8      	ldr	r0, [r7, #12]
 802032c:	f000 f822 	bl	8020374 <etharp_query>
 8020330:	4603      	mov	r3, r0
 8020332:	e00b      	b.n	802034c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020334:	68fb      	ldr	r3, [r7, #12]
 8020336:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802033a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802033e:	9300      	str	r3, [sp, #0]
 8020340:	69fb      	ldr	r3, [r7, #28]
 8020342:	68b9      	ldr	r1, [r7, #8]
 8020344:	68f8      	ldr	r0, [r7, #12]
 8020346:	f001 fdd9 	bl	8021efc <ethernet_output>
 802034a:	4603      	mov	r3, r0
}
 802034c:	4618      	mov	r0, r3
 802034e:	3720      	adds	r7, #32
 8020350:	46bd      	mov	sp, r7
 8020352:	bd80      	pop	{r7, pc}
 8020354:	08027fc0 	.word	0x08027fc0
 8020358:	08028110 	.word	0x08028110
 802035c:	08028038 	.word	0x08028038
 8020360:	08028160 	.word	0x08028160
 8020364:	08028100 	.word	0x08028100
 8020368:	08028b40 	.word	0x08028b40
 802036c:	200142f0 	.word	0x200142f0
 8020370:	20013e40 	.word	0x20013e40

08020374 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020374:	b580      	push	{r7, lr}
 8020376:	b08c      	sub	sp, #48	; 0x30
 8020378:	af02      	add	r7, sp, #8
 802037a:	60f8      	str	r0, [r7, #12]
 802037c:	60b9      	str	r1, [r7, #8]
 802037e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020380:	68fb      	ldr	r3, [r7, #12]
 8020382:	332a      	adds	r3, #42	; 0x2a
 8020384:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020386:	23ff      	movs	r3, #255	; 0xff
 8020388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 802038c:	2300      	movs	r3, #0
 802038e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020390:	68bb      	ldr	r3, [r7, #8]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	68f9      	ldr	r1, [r7, #12]
 8020396:	4618      	mov	r0, r3
 8020398:	f000 fe12 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 802039c:	4603      	mov	r3, r0
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d10c      	bne.n	80203bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80203a2:	68bb      	ldr	r3, [r7, #8]
 80203a4:	681b      	ldr	r3, [r3, #0]
 80203a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80203aa:	2be0      	cmp	r3, #224	; 0xe0
 80203ac:	d006      	beq.n	80203bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80203ae:	68bb      	ldr	r3, [r7, #8]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d003      	beq.n	80203bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80203b4:	68bb      	ldr	r3, [r7, #8]
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d102      	bne.n	80203c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80203bc:	f06f 030f 	mvn.w	r3, #15
 80203c0:	e101      	b.n	80205c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80203c2:	68fa      	ldr	r2, [r7, #12]
 80203c4:	2101      	movs	r1, #1
 80203c6:	68b8      	ldr	r0, [r7, #8]
 80203c8:	f7ff fb60 	bl	801fa8c <etharp_find_entry>
 80203cc:	4603      	mov	r3, r0
 80203ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80203d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	da02      	bge.n	80203de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80203d8:	8a7b      	ldrh	r3, [r7, #18]
 80203da:	b25b      	sxtb	r3, r3
 80203dc:	e0f3      	b.n	80205c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80203de:	8a7b      	ldrh	r3, [r7, #18]
 80203e0:	2b7e      	cmp	r3, #126	; 0x7e
 80203e2:	d906      	bls.n	80203f2 <etharp_query+0x7e>
 80203e4:	4b7a      	ldr	r3, [pc, #488]	; (80205d0 <etharp_query+0x25c>)
 80203e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80203ea:	497a      	ldr	r1, [pc, #488]	; (80205d4 <etharp_query+0x260>)
 80203ec:	487a      	ldr	r0, [pc, #488]	; (80205d8 <etharp_query+0x264>)
 80203ee:	f001 ff21 	bl	8022234 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80203f2:	8a7b      	ldrh	r3, [r7, #18]
 80203f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80203f6:	7c7a      	ldrb	r2, [r7, #17]
 80203f8:	4978      	ldr	r1, [pc, #480]	; (80205dc <etharp_query+0x268>)
 80203fa:	4613      	mov	r3, r2
 80203fc:	005b      	lsls	r3, r3, #1
 80203fe:	4413      	add	r3, r2
 8020400:	00db      	lsls	r3, r3, #3
 8020402:	440b      	add	r3, r1
 8020404:	3314      	adds	r3, #20
 8020406:	781b      	ldrb	r3, [r3, #0]
 8020408:	2b00      	cmp	r3, #0
 802040a:	d115      	bne.n	8020438 <etharp_query+0xc4>
    is_new_entry = 1;
 802040c:	2301      	movs	r3, #1
 802040e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020410:	7c7a      	ldrb	r2, [r7, #17]
 8020412:	4972      	ldr	r1, [pc, #456]	; (80205dc <etharp_query+0x268>)
 8020414:	4613      	mov	r3, r2
 8020416:	005b      	lsls	r3, r3, #1
 8020418:	4413      	add	r3, r2
 802041a:	00db      	lsls	r3, r3, #3
 802041c:	440b      	add	r3, r1
 802041e:	3314      	adds	r3, #20
 8020420:	2201      	movs	r2, #1
 8020422:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020424:	7c7a      	ldrb	r2, [r7, #17]
 8020426:	496d      	ldr	r1, [pc, #436]	; (80205dc <etharp_query+0x268>)
 8020428:	4613      	mov	r3, r2
 802042a:	005b      	lsls	r3, r3, #1
 802042c:	4413      	add	r3, r2
 802042e:	00db      	lsls	r3, r3, #3
 8020430:	440b      	add	r3, r1
 8020432:	3308      	adds	r3, #8
 8020434:	68fa      	ldr	r2, [r7, #12]
 8020436:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020438:	7c7a      	ldrb	r2, [r7, #17]
 802043a:	4968      	ldr	r1, [pc, #416]	; (80205dc <etharp_query+0x268>)
 802043c:	4613      	mov	r3, r2
 802043e:	005b      	lsls	r3, r3, #1
 8020440:	4413      	add	r3, r2
 8020442:	00db      	lsls	r3, r3, #3
 8020444:	440b      	add	r3, r1
 8020446:	3314      	adds	r3, #20
 8020448:	781b      	ldrb	r3, [r3, #0]
 802044a:	2b01      	cmp	r3, #1
 802044c:	d011      	beq.n	8020472 <etharp_query+0xfe>
 802044e:	7c7a      	ldrb	r2, [r7, #17]
 8020450:	4962      	ldr	r1, [pc, #392]	; (80205dc <etharp_query+0x268>)
 8020452:	4613      	mov	r3, r2
 8020454:	005b      	lsls	r3, r3, #1
 8020456:	4413      	add	r3, r2
 8020458:	00db      	lsls	r3, r3, #3
 802045a:	440b      	add	r3, r1
 802045c:	3314      	adds	r3, #20
 802045e:	781b      	ldrb	r3, [r3, #0]
 8020460:	2b01      	cmp	r3, #1
 8020462:	d806      	bhi.n	8020472 <etharp_query+0xfe>
 8020464:	4b5a      	ldr	r3, [pc, #360]	; (80205d0 <etharp_query+0x25c>)
 8020466:	f240 32cd 	movw	r2, #973	; 0x3cd
 802046a:	495d      	ldr	r1, [pc, #372]	; (80205e0 <etharp_query+0x26c>)
 802046c:	485a      	ldr	r0, [pc, #360]	; (80205d8 <etharp_query+0x264>)
 802046e:	f001 fee1 	bl	8022234 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020472:	6a3b      	ldr	r3, [r7, #32]
 8020474:	2b00      	cmp	r3, #0
 8020476:	d102      	bne.n	802047e <etharp_query+0x10a>
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	2b00      	cmp	r3, #0
 802047c:	d10c      	bne.n	8020498 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802047e:	68b9      	ldr	r1, [r7, #8]
 8020480:	68f8      	ldr	r0, [r7, #12]
 8020482:	f000 f963 	bl	802074c <etharp_request>
 8020486:	4603      	mov	r3, r0
 8020488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	2b00      	cmp	r3, #0
 8020490:	d102      	bne.n	8020498 <etharp_query+0x124>
      return result;
 8020492:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020496:	e096      	b.n	80205c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	2b00      	cmp	r3, #0
 802049c:	d106      	bne.n	80204ac <etharp_query+0x138>
 802049e:	4b4c      	ldr	r3, [pc, #304]	; (80205d0 <etharp_query+0x25c>)
 80204a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80204a4:	494f      	ldr	r1, [pc, #316]	; (80205e4 <etharp_query+0x270>)
 80204a6:	484c      	ldr	r0, [pc, #304]	; (80205d8 <etharp_query+0x264>)
 80204a8:	f001 fec4 	bl	8022234 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80204ac:	7c7a      	ldrb	r2, [r7, #17]
 80204ae:	494b      	ldr	r1, [pc, #300]	; (80205dc <etharp_query+0x268>)
 80204b0:	4613      	mov	r3, r2
 80204b2:	005b      	lsls	r3, r3, #1
 80204b4:	4413      	add	r3, r2
 80204b6:	00db      	lsls	r3, r3, #3
 80204b8:	440b      	add	r3, r1
 80204ba:	3314      	adds	r3, #20
 80204bc:	781b      	ldrb	r3, [r3, #0]
 80204be:	2b01      	cmp	r3, #1
 80204c0:	d917      	bls.n	80204f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80204c2:	4a49      	ldr	r2, [pc, #292]	; (80205e8 <etharp_query+0x274>)
 80204c4:	7c7b      	ldrb	r3, [r7, #17]
 80204c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80204c8:	7c7a      	ldrb	r2, [r7, #17]
 80204ca:	4613      	mov	r3, r2
 80204cc:	005b      	lsls	r3, r3, #1
 80204ce:	4413      	add	r3, r2
 80204d0:	00db      	lsls	r3, r3, #3
 80204d2:	3308      	adds	r3, #8
 80204d4:	4a41      	ldr	r2, [pc, #260]	; (80205dc <etharp_query+0x268>)
 80204d6:	4413      	add	r3, r2
 80204d8:	3304      	adds	r3, #4
 80204da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80204de:	9200      	str	r2, [sp, #0]
 80204e0:	697a      	ldr	r2, [r7, #20]
 80204e2:	6879      	ldr	r1, [r7, #4]
 80204e4:	68f8      	ldr	r0, [r7, #12]
 80204e6:	f001 fd09 	bl	8021efc <ethernet_output>
 80204ea:	4603      	mov	r3, r0
 80204ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80204f0:	e067      	b.n	80205c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80204f2:	7c7a      	ldrb	r2, [r7, #17]
 80204f4:	4939      	ldr	r1, [pc, #228]	; (80205dc <etharp_query+0x268>)
 80204f6:	4613      	mov	r3, r2
 80204f8:	005b      	lsls	r3, r3, #1
 80204fa:	4413      	add	r3, r2
 80204fc:	00db      	lsls	r3, r3, #3
 80204fe:	440b      	add	r3, r1
 8020500:	3314      	adds	r3, #20
 8020502:	781b      	ldrb	r3, [r3, #0]
 8020504:	2b01      	cmp	r3, #1
 8020506:	d15c      	bne.n	80205c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020508:	2300      	movs	r3, #0
 802050a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020510:	e01c      	b.n	802054c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020512:	69fb      	ldr	r3, [r7, #28]
 8020514:	895a      	ldrh	r2, [r3, #10]
 8020516:	69fb      	ldr	r3, [r7, #28]
 8020518:	891b      	ldrh	r3, [r3, #8]
 802051a:	429a      	cmp	r2, r3
 802051c:	d10a      	bne.n	8020534 <etharp_query+0x1c0>
 802051e:	69fb      	ldr	r3, [r7, #28]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	2b00      	cmp	r3, #0
 8020524:	d006      	beq.n	8020534 <etharp_query+0x1c0>
 8020526:	4b2a      	ldr	r3, [pc, #168]	; (80205d0 <etharp_query+0x25c>)
 8020528:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802052c:	492f      	ldr	r1, [pc, #188]	; (80205ec <etharp_query+0x278>)
 802052e:	482a      	ldr	r0, [pc, #168]	; (80205d8 <etharp_query+0x264>)
 8020530:	f001 fe80 	bl	8022234 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020534:	69fb      	ldr	r3, [r7, #28]
 8020536:	7b1b      	ldrb	r3, [r3, #12]
 8020538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802053c:	2b00      	cmp	r3, #0
 802053e:	d002      	beq.n	8020546 <etharp_query+0x1d2>
        copy_needed = 1;
 8020540:	2301      	movs	r3, #1
 8020542:	61bb      	str	r3, [r7, #24]
        break;
 8020544:	e005      	b.n	8020552 <etharp_query+0x1de>
      }
      p = p->next;
 8020546:	69fb      	ldr	r3, [r7, #28]
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802054c:	69fb      	ldr	r3, [r7, #28]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d1df      	bne.n	8020512 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020552:	69bb      	ldr	r3, [r7, #24]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d007      	beq.n	8020568 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020558:	687a      	ldr	r2, [r7, #4]
 802055a:	f44f 7120 	mov.w	r1, #640	; 0x280
 802055e:	200e      	movs	r0, #14
 8020560:	f7fe fbbc 	bl	801ecdc <pbuf_clone>
 8020564:	61f8      	str	r0, [r7, #28]
 8020566:	e004      	b.n	8020572 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 802056c:	69f8      	ldr	r0, [r7, #28]
 802056e:	f7fe f9c9 	bl	801e904 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020572:	69fb      	ldr	r3, [r7, #28]
 8020574:	2b00      	cmp	r3, #0
 8020576:	d021      	beq.n	80205bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020578:	7c7a      	ldrb	r2, [r7, #17]
 802057a:	4918      	ldr	r1, [pc, #96]	; (80205dc <etharp_query+0x268>)
 802057c:	4613      	mov	r3, r2
 802057e:	005b      	lsls	r3, r3, #1
 8020580:	4413      	add	r3, r2
 8020582:	00db      	lsls	r3, r3, #3
 8020584:	440b      	add	r3, r1
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	2b00      	cmp	r3, #0
 802058a:	d00a      	beq.n	80205a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 802058c:	7c7a      	ldrb	r2, [r7, #17]
 802058e:	4913      	ldr	r1, [pc, #76]	; (80205dc <etharp_query+0x268>)
 8020590:	4613      	mov	r3, r2
 8020592:	005b      	lsls	r3, r3, #1
 8020594:	4413      	add	r3, r2
 8020596:	00db      	lsls	r3, r3, #3
 8020598:	440b      	add	r3, r1
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	4618      	mov	r0, r3
 802059e:	f7fe f911 	bl	801e7c4 <pbuf_free>
      }
      arp_table[i].q = p;
 80205a2:	7c7a      	ldrb	r2, [r7, #17]
 80205a4:	490d      	ldr	r1, [pc, #52]	; (80205dc <etharp_query+0x268>)
 80205a6:	4613      	mov	r3, r2
 80205a8:	005b      	lsls	r3, r3, #1
 80205aa:	4413      	add	r3, r2
 80205ac:	00db      	lsls	r3, r3, #3
 80205ae:	440b      	add	r3, r1
 80205b0:	69fa      	ldr	r2, [r7, #28]
 80205b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80205b4:	2300      	movs	r3, #0
 80205b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80205ba:	e002      	b.n	80205c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80205bc:	23ff      	movs	r3, #255	; 0xff
 80205be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80205c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80205c6:	4618      	mov	r0, r3
 80205c8:	3728      	adds	r7, #40	; 0x28
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd80      	pop	{r7, pc}
 80205ce:	bf00      	nop
 80205d0:	08027fc0 	.word	0x08027fc0
 80205d4:	0802816c 	.word	0x0802816c
 80205d8:	08028038 	.word	0x08028038
 80205dc:	20013e40 	.word	0x20013e40
 80205e0:	0802817c 	.word	0x0802817c
 80205e4:	08028160 	.word	0x08028160
 80205e8:	200142f0 	.word	0x200142f0
 80205ec:	080281a4 	.word	0x080281a4

080205f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80205f0:	b580      	push	{r7, lr}
 80205f2:	b08a      	sub	sp, #40	; 0x28
 80205f4:	af02      	add	r7, sp, #8
 80205f6:	60f8      	str	r0, [r7, #12]
 80205f8:	60b9      	str	r1, [r7, #8]
 80205fa:	607a      	str	r2, [r7, #4]
 80205fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80205fe:	2300      	movs	r3, #0
 8020600:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020602:	68fb      	ldr	r3, [r7, #12]
 8020604:	2b00      	cmp	r3, #0
 8020606:	d106      	bne.n	8020616 <etharp_raw+0x26>
 8020608:	4b3a      	ldr	r3, [pc, #232]	; (80206f4 <etharp_raw+0x104>)
 802060a:	f240 4257 	movw	r2, #1111	; 0x457
 802060e:	493a      	ldr	r1, [pc, #232]	; (80206f8 <etharp_raw+0x108>)
 8020610:	483a      	ldr	r0, [pc, #232]	; (80206fc <etharp_raw+0x10c>)
 8020612:	f001 fe0f 	bl	8022234 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020616:	f44f 7220 	mov.w	r2, #640	; 0x280
 802061a:	211c      	movs	r1, #28
 802061c:	200e      	movs	r0, #14
 802061e:	f7fd fdef 	bl	801e200 <pbuf_alloc>
 8020622:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020624:	69bb      	ldr	r3, [r7, #24]
 8020626:	2b00      	cmp	r3, #0
 8020628:	d102      	bne.n	8020630 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802062a:	f04f 33ff 	mov.w	r3, #4294967295
 802062e:	e05d      	b.n	80206ec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020630:	69bb      	ldr	r3, [r7, #24]
 8020632:	895b      	ldrh	r3, [r3, #10]
 8020634:	2b1b      	cmp	r3, #27
 8020636:	d806      	bhi.n	8020646 <etharp_raw+0x56>
 8020638:	4b2e      	ldr	r3, [pc, #184]	; (80206f4 <etharp_raw+0x104>)
 802063a:	f240 4262 	movw	r2, #1122	; 0x462
 802063e:	4930      	ldr	r1, [pc, #192]	; (8020700 <etharp_raw+0x110>)
 8020640:	482e      	ldr	r0, [pc, #184]	; (80206fc <etharp_raw+0x10c>)
 8020642:	f001 fdf7 	bl	8022234 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020646:	69bb      	ldr	r3, [r7, #24]
 8020648:	685b      	ldr	r3, [r3, #4]
 802064a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802064c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802064e:	4618      	mov	r0, r3
 8020650:	f7fc fcdc 	bl	801d00c <lwip_htons>
 8020654:	4603      	mov	r3, r0
 8020656:	461a      	mov	r2, r3
 8020658:	697b      	ldr	r3, [r7, #20]
 802065a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 802065c:	68fb      	ldr	r3, [r7, #12]
 802065e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020662:	2b06      	cmp	r3, #6
 8020664:	d006      	beq.n	8020674 <etharp_raw+0x84>
 8020666:	4b23      	ldr	r3, [pc, #140]	; (80206f4 <etharp_raw+0x104>)
 8020668:	f240 4269 	movw	r2, #1129	; 0x469
 802066c:	4925      	ldr	r1, [pc, #148]	; (8020704 <etharp_raw+0x114>)
 802066e:	4823      	ldr	r0, [pc, #140]	; (80206fc <etharp_raw+0x10c>)
 8020670:	f001 fde0 	bl	8022234 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020674:	697b      	ldr	r3, [r7, #20]
 8020676:	3308      	adds	r3, #8
 8020678:	2206      	movs	r2, #6
 802067a:	6839      	ldr	r1, [r7, #0]
 802067c:	4618      	mov	r0, r3
 802067e:	f001 fcc9 	bl	8022014 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020682:	697b      	ldr	r3, [r7, #20]
 8020684:	3312      	adds	r3, #18
 8020686:	2206      	movs	r2, #6
 8020688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802068a:	4618      	mov	r0, r3
 802068c:	f001 fcc2 	bl	8022014 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020690:	697b      	ldr	r3, [r7, #20]
 8020692:	330e      	adds	r3, #14
 8020694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020696:	6812      	ldr	r2, [r2, #0]
 8020698:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802069a:	697b      	ldr	r3, [r7, #20]
 802069c:	3318      	adds	r3, #24
 802069e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80206a0:	6812      	ldr	r2, [r2, #0]
 80206a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80206a4:	697b      	ldr	r3, [r7, #20]
 80206a6:	2200      	movs	r2, #0
 80206a8:	701a      	strb	r2, [r3, #0]
 80206aa:	2200      	movs	r2, #0
 80206ac:	f042 0201 	orr.w	r2, r2, #1
 80206b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	2200      	movs	r2, #0
 80206b6:	f042 0208 	orr.w	r2, r2, #8
 80206ba:	709a      	strb	r2, [r3, #2]
 80206bc:	2200      	movs	r2, #0
 80206be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	2206      	movs	r2, #6
 80206c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80206c6:	697b      	ldr	r3, [r7, #20]
 80206c8:	2204      	movs	r2, #4
 80206ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80206cc:	f640 0306 	movw	r3, #2054	; 0x806
 80206d0:	9300      	str	r3, [sp, #0]
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	68ba      	ldr	r2, [r7, #8]
 80206d6:	69b9      	ldr	r1, [r7, #24]
 80206d8:	68f8      	ldr	r0, [r7, #12]
 80206da:	f001 fc0f 	bl	8021efc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80206de:	69b8      	ldr	r0, [r7, #24]
 80206e0:	f7fe f870 	bl	801e7c4 <pbuf_free>
  p = NULL;
 80206e4:	2300      	movs	r3, #0
 80206e6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80206e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80206ec:	4618      	mov	r0, r3
 80206ee:	3720      	adds	r7, #32
 80206f0:	46bd      	mov	sp, r7
 80206f2:	bd80      	pop	{r7, pc}
 80206f4:	08027fc0 	.word	0x08027fc0
 80206f8:	08028110 	.word	0x08028110
 80206fc:	08028038 	.word	0x08028038
 8020700:	080281c0 	.word	0x080281c0
 8020704:	080281f4 	.word	0x080281f4

08020708 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020708:	b580      	push	{r7, lr}
 802070a:	b088      	sub	sp, #32
 802070c:	af04      	add	r7, sp, #16
 802070e:	60f8      	str	r0, [r7, #12]
 8020710:	60b9      	str	r1, [r7, #8]
 8020712:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020714:	68fb      	ldr	r3, [r7, #12]
 8020716:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802071a:	68fb      	ldr	r3, [r7, #12]
 802071c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020724:	2201      	movs	r2, #1
 8020726:	9203      	str	r2, [sp, #12]
 8020728:	68ba      	ldr	r2, [r7, #8]
 802072a:	9202      	str	r2, [sp, #8]
 802072c:	4a06      	ldr	r2, [pc, #24]	; (8020748 <etharp_request_dst+0x40>)
 802072e:	9201      	str	r2, [sp, #4]
 8020730:	9300      	str	r3, [sp, #0]
 8020732:	4603      	mov	r3, r0
 8020734:	687a      	ldr	r2, [r7, #4]
 8020736:	68f8      	ldr	r0, [r7, #12]
 8020738:	f7ff ff5a 	bl	80205f0 <etharp_raw>
 802073c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802073e:	4618      	mov	r0, r3
 8020740:	3710      	adds	r7, #16
 8020742:	46bd      	mov	sp, r7
 8020744:	bd80      	pop	{r7, pc}
 8020746:	bf00      	nop
 8020748:	08028b48 	.word	0x08028b48

0802074c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 802074c:	b580      	push	{r7, lr}
 802074e:	b082      	sub	sp, #8
 8020750:	af00      	add	r7, sp, #0
 8020752:	6078      	str	r0, [r7, #4]
 8020754:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020756:	4a05      	ldr	r2, [pc, #20]	; (802076c <etharp_request+0x20>)
 8020758:	6839      	ldr	r1, [r7, #0]
 802075a:	6878      	ldr	r0, [r7, #4]
 802075c:	f7ff ffd4 	bl	8020708 <etharp_request_dst>
 8020760:	4603      	mov	r3, r0
}
 8020762:	4618      	mov	r0, r3
 8020764:	3708      	adds	r7, #8
 8020766:	46bd      	mov	sp, r7
 8020768:	bd80      	pop	{r7, pc}
 802076a:	bf00      	nop
 802076c:	08028b40 	.word	0x08028b40

08020770 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020770:	b580      	push	{r7, lr}
 8020772:	b08e      	sub	sp, #56	; 0x38
 8020774:	af04      	add	r7, sp, #16
 8020776:	6078      	str	r0, [r7, #4]
 8020778:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 802077a:	4b79      	ldr	r3, [pc, #484]	; (8020960 <icmp_input+0x1f0>)
 802077c:	689b      	ldr	r3, [r3, #8]
 802077e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020782:	781b      	ldrb	r3, [r3, #0]
 8020784:	f003 030f 	and.w	r3, r3, #15
 8020788:	b2db      	uxtb	r3, r3
 802078a:	009b      	lsls	r3, r3, #2
 802078c:	b2db      	uxtb	r3, r3
 802078e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020792:	2b13      	cmp	r3, #19
 8020794:	f240 80cd 	bls.w	8020932 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	895b      	ldrh	r3, [r3, #10]
 802079c:	2b03      	cmp	r3, #3
 802079e:	f240 80ca 	bls.w	8020936 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	685b      	ldr	r3, [r3, #4]
 80207a6:	781b      	ldrb	r3, [r3, #0]
 80207a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80207ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	f000 80b7 	beq.w	8020924 <icmp_input+0x1b4>
 80207b6:	2b08      	cmp	r3, #8
 80207b8:	f040 80b7 	bne.w	802092a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80207bc:	4b69      	ldr	r3, [pc, #420]	; (8020964 <icmp_input+0x1f4>)
 80207be:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80207c0:	4b67      	ldr	r3, [pc, #412]	; (8020960 <icmp_input+0x1f0>)
 80207c2:	695b      	ldr	r3, [r3, #20]
 80207c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80207c8:	2be0      	cmp	r3, #224	; 0xe0
 80207ca:	f000 80bb 	beq.w	8020944 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80207ce:	4b64      	ldr	r3, [pc, #400]	; (8020960 <icmp_input+0x1f0>)
 80207d0:	695b      	ldr	r3, [r3, #20]
 80207d2:	4a63      	ldr	r2, [pc, #396]	; (8020960 <icmp_input+0x1f0>)
 80207d4:	6812      	ldr	r2, [r2, #0]
 80207d6:	4611      	mov	r1, r2
 80207d8:	4618      	mov	r0, r3
 80207da:	f000 fbf1 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 80207de:	4603      	mov	r3, r0
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	f040 80b1 	bne.w	8020948 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	891b      	ldrh	r3, [r3, #8]
 80207ea:	2b07      	cmp	r3, #7
 80207ec:	f240 80a5 	bls.w	802093a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80207f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80207f2:	330e      	adds	r3, #14
 80207f4:	4619      	mov	r1, r3
 80207f6:	6878      	ldr	r0, [r7, #4]
 80207f8:	f7fd ff4e 	bl	801e698 <pbuf_add_header>
 80207fc:	4603      	mov	r3, r0
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d04b      	beq.n	802089a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	891a      	ldrh	r2, [r3, #8]
 8020806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020808:	4413      	add	r3, r2
 802080a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	891b      	ldrh	r3, [r3, #8]
 8020810:	8b7a      	ldrh	r2, [r7, #26]
 8020812:	429a      	cmp	r2, r3
 8020814:	f0c0 809a 	bcc.w	802094c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020818:	8b7b      	ldrh	r3, [r7, #26]
 802081a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802081e:	4619      	mov	r1, r3
 8020820:	200e      	movs	r0, #14
 8020822:	f7fd fced 	bl	801e200 <pbuf_alloc>
 8020826:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020828:	697b      	ldr	r3, [r7, #20]
 802082a:	2b00      	cmp	r3, #0
 802082c:	f000 8090 	beq.w	8020950 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020830:	697b      	ldr	r3, [r7, #20]
 8020832:	895b      	ldrh	r3, [r3, #10]
 8020834:	461a      	mov	r2, r3
 8020836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020838:	3308      	adds	r3, #8
 802083a:	429a      	cmp	r2, r3
 802083c:	d203      	bcs.n	8020846 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802083e:	6978      	ldr	r0, [r7, #20]
 8020840:	f7fd ffc0 	bl	801e7c4 <pbuf_free>
          goto icmperr;
 8020844:	e085      	b.n	8020952 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020846:	697b      	ldr	r3, [r7, #20]
 8020848:	685b      	ldr	r3, [r3, #4]
 802084a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802084c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802084e:	4618      	mov	r0, r3
 8020850:	f001 fbe0 	bl	8022014 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020856:	4619      	mov	r1, r3
 8020858:	6978      	ldr	r0, [r7, #20]
 802085a:	f7fd ff2d 	bl	801e6b8 <pbuf_remove_header>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d009      	beq.n	8020878 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020864:	4b40      	ldr	r3, [pc, #256]	; (8020968 <icmp_input+0x1f8>)
 8020866:	22b6      	movs	r2, #182	; 0xb6
 8020868:	4940      	ldr	r1, [pc, #256]	; (802096c <icmp_input+0x1fc>)
 802086a:	4841      	ldr	r0, [pc, #260]	; (8020970 <icmp_input+0x200>)
 802086c:	f001 fce2 	bl	8022234 <iprintf>
          pbuf_free(r);
 8020870:	6978      	ldr	r0, [r7, #20]
 8020872:	f7fd ffa7 	bl	801e7c4 <pbuf_free>
          goto icmperr;
 8020876:	e06c      	b.n	8020952 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020878:	6879      	ldr	r1, [r7, #4]
 802087a:	6978      	ldr	r0, [r7, #20]
 802087c:	f7fe f8ca 	bl	801ea14 <pbuf_copy>
 8020880:	4603      	mov	r3, r0
 8020882:	2b00      	cmp	r3, #0
 8020884:	d003      	beq.n	802088e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020886:	6978      	ldr	r0, [r7, #20]
 8020888:	f7fd ff9c 	bl	801e7c4 <pbuf_free>
          goto icmperr;
 802088c:	e061      	b.n	8020952 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802088e:	6878      	ldr	r0, [r7, #4]
 8020890:	f7fd ff98 	bl	801e7c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020894:	697b      	ldr	r3, [r7, #20]
 8020896:	607b      	str	r3, [r7, #4]
 8020898:	e00f      	b.n	80208ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802089a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802089c:	330e      	adds	r3, #14
 802089e:	4619      	mov	r1, r3
 80208a0:	6878      	ldr	r0, [r7, #4]
 80208a2:	f7fd ff09 	bl	801e6b8 <pbuf_remove_header>
 80208a6:	4603      	mov	r3, r0
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d006      	beq.n	80208ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80208ac:	4b2e      	ldr	r3, [pc, #184]	; (8020968 <icmp_input+0x1f8>)
 80208ae:	22c7      	movs	r2, #199	; 0xc7
 80208b0:	4930      	ldr	r1, [pc, #192]	; (8020974 <icmp_input+0x204>)
 80208b2:	482f      	ldr	r0, [pc, #188]	; (8020970 <icmp_input+0x200>)
 80208b4:	f001 fcbe 	bl	8022234 <iprintf>
          goto icmperr;
 80208b8:	e04b      	b.n	8020952 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	685b      	ldr	r3, [r3, #4]
 80208be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80208c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80208c2:	4619      	mov	r1, r3
 80208c4:	6878      	ldr	r0, [r7, #4]
 80208c6:	f7fd fee7 	bl	801e698 <pbuf_add_header>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	d12b      	bne.n	8020928 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	685b      	ldr	r3, [r3, #4]
 80208d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80208d6:	69fb      	ldr	r3, [r7, #28]
 80208d8:	681a      	ldr	r2, [r3, #0]
 80208da:	68fb      	ldr	r3, [r7, #12]
 80208dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80208de:	4b20      	ldr	r3, [pc, #128]	; (8020960 <icmp_input+0x1f0>)
 80208e0:	691a      	ldr	r2, [r3, #16]
 80208e2:	68fb      	ldr	r3, [r7, #12]
 80208e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80208e6:	693b      	ldr	r3, [r7, #16]
 80208e8:	2200      	movs	r2, #0
 80208ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80208ec:	693b      	ldr	r3, [r7, #16]
 80208ee:	2200      	movs	r2, #0
 80208f0:	709a      	strb	r2, [r3, #2]
 80208f2:	2200      	movs	r2, #0
 80208f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80208f6:	68fb      	ldr	r3, [r7, #12]
 80208f8:	22ff      	movs	r2, #255	; 0xff
 80208fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	2200      	movs	r2, #0
 8020900:	729a      	strb	r2, [r3, #10]
 8020902:	2200      	movs	r2, #0
 8020904:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	9302      	str	r3, [sp, #8]
 802090a:	2301      	movs	r3, #1
 802090c:	9301      	str	r3, [sp, #4]
 802090e:	2300      	movs	r3, #0
 8020910:	9300      	str	r3, [sp, #0]
 8020912:	23ff      	movs	r3, #255	; 0xff
 8020914:	2200      	movs	r2, #0
 8020916:	69f9      	ldr	r1, [r7, #28]
 8020918:	6878      	ldr	r0, [r7, #4]
 802091a:	f000 fa6b 	bl	8020df4 <ip4_output_if>
 802091e:	4603      	mov	r3, r0
 8020920:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020922:	e001      	b.n	8020928 <icmp_input+0x1b8>
      break;
 8020924:	bf00      	nop
 8020926:	e000      	b.n	802092a <icmp_input+0x1ba>
      break;
 8020928:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 802092a:	6878      	ldr	r0, [r7, #4]
 802092c:	f7fd ff4a 	bl	801e7c4 <pbuf_free>
  return;
 8020930:	e013      	b.n	802095a <icmp_input+0x1ea>
    goto lenerr;
 8020932:	bf00      	nop
 8020934:	e002      	b.n	802093c <icmp_input+0x1cc>
    goto lenerr;
 8020936:	bf00      	nop
 8020938:	e000      	b.n	802093c <icmp_input+0x1cc>
        goto lenerr;
 802093a:	bf00      	nop
lenerr:
  pbuf_free(p);
 802093c:	6878      	ldr	r0, [r7, #4]
 802093e:	f7fd ff41 	bl	801e7c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020942:	e00a      	b.n	802095a <icmp_input+0x1ea>
        goto icmperr;
 8020944:	bf00      	nop
 8020946:	e004      	b.n	8020952 <icmp_input+0x1e2>
        goto icmperr;
 8020948:	bf00      	nop
 802094a:	e002      	b.n	8020952 <icmp_input+0x1e2>
          goto icmperr;
 802094c:	bf00      	nop
 802094e:	e000      	b.n	8020952 <icmp_input+0x1e2>
          goto icmperr;
 8020950:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020952:	6878      	ldr	r0, [r7, #4]
 8020954:	f7fd ff36 	bl	801e7c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020958:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802095a:	3728      	adds	r7, #40	; 0x28
 802095c:	46bd      	mov	sp, r7
 802095e:	bd80      	pop	{r7, pc}
 8020960:	200107d8 	.word	0x200107d8
 8020964:	200107ec 	.word	0x200107ec
 8020968:	08028238 	.word	0x08028238
 802096c:	08028270 	.word	0x08028270
 8020970:	080282a8 	.word	0x080282a8
 8020974:	080282d0 	.word	0x080282d0

08020978 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020978:	b580      	push	{r7, lr}
 802097a:	b082      	sub	sp, #8
 802097c:	af00      	add	r7, sp, #0
 802097e:	6078      	str	r0, [r7, #4]
 8020980:	460b      	mov	r3, r1
 8020982:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020984:	78fb      	ldrb	r3, [r7, #3]
 8020986:	461a      	mov	r2, r3
 8020988:	2103      	movs	r1, #3
 802098a:	6878      	ldr	r0, [r7, #4]
 802098c:	f000 f814 	bl	80209b8 <icmp_send_response>
}
 8020990:	bf00      	nop
 8020992:	3708      	adds	r7, #8
 8020994:	46bd      	mov	sp, r7
 8020996:	bd80      	pop	{r7, pc}

08020998 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020998:	b580      	push	{r7, lr}
 802099a:	b082      	sub	sp, #8
 802099c:	af00      	add	r7, sp, #0
 802099e:	6078      	str	r0, [r7, #4]
 80209a0:	460b      	mov	r3, r1
 80209a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80209a4:	78fb      	ldrb	r3, [r7, #3]
 80209a6:	461a      	mov	r2, r3
 80209a8:	210b      	movs	r1, #11
 80209aa:	6878      	ldr	r0, [r7, #4]
 80209ac:	f000 f804 	bl	80209b8 <icmp_send_response>
}
 80209b0:	bf00      	nop
 80209b2:	3708      	adds	r7, #8
 80209b4:	46bd      	mov	sp, r7
 80209b6:	bd80      	pop	{r7, pc}

080209b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80209b8:	b580      	push	{r7, lr}
 80209ba:	b08c      	sub	sp, #48	; 0x30
 80209bc:	af04      	add	r7, sp, #16
 80209be:	6078      	str	r0, [r7, #4]
 80209c0:	460b      	mov	r3, r1
 80209c2:	70fb      	strb	r3, [r7, #3]
 80209c4:	4613      	mov	r3, r2
 80209c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80209c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80209cc:	2124      	movs	r1, #36	; 0x24
 80209ce:	2022      	movs	r0, #34	; 0x22
 80209d0:	f7fd fc16 	bl	801e200 <pbuf_alloc>
 80209d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80209d6:	69fb      	ldr	r3, [r7, #28]
 80209d8:	2b00      	cmp	r3, #0
 80209da:	d04c      	beq.n	8020a76 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80209dc:	69fb      	ldr	r3, [r7, #28]
 80209de:	895b      	ldrh	r3, [r3, #10]
 80209e0:	2b23      	cmp	r3, #35	; 0x23
 80209e2:	d806      	bhi.n	80209f2 <icmp_send_response+0x3a>
 80209e4:	4b26      	ldr	r3, [pc, #152]	; (8020a80 <icmp_send_response+0xc8>)
 80209e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80209ea:	4926      	ldr	r1, [pc, #152]	; (8020a84 <icmp_send_response+0xcc>)
 80209ec:	4826      	ldr	r0, [pc, #152]	; (8020a88 <icmp_send_response+0xd0>)
 80209ee:	f001 fc21 	bl	8022234 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	685b      	ldr	r3, [r3, #4]
 80209f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80209f8:	69fb      	ldr	r3, [r7, #28]
 80209fa:	685b      	ldr	r3, [r3, #4]
 80209fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80209fe:	697b      	ldr	r3, [r7, #20]
 8020a00:	78fa      	ldrb	r2, [r7, #3]
 8020a02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020a04:	697b      	ldr	r3, [r7, #20]
 8020a06:	78ba      	ldrb	r2, [r7, #2]
 8020a08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8020a0a:	697b      	ldr	r3, [r7, #20]
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	711a      	strb	r2, [r3, #4]
 8020a10:	2200      	movs	r2, #0
 8020a12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8020a14:	697b      	ldr	r3, [r7, #20]
 8020a16:	2200      	movs	r2, #0
 8020a18:	719a      	strb	r2, [r3, #6]
 8020a1a:	2200      	movs	r2, #0
 8020a1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020a1e:	69fb      	ldr	r3, [r7, #28]
 8020a20:	685b      	ldr	r3, [r3, #4]
 8020a22:	f103 0008 	add.w	r0, r3, #8
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	685b      	ldr	r3, [r3, #4]
 8020a2a:	221c      	movs	r2, #28
 8020a2c:	4619      	mov	r1, r3
 8020a2e:	f001 faf1 	bl	8022014 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8020a32:	69bb      	ldr	r3, [r7, #24]
 8020a34:	68db      	ldr	r3, [r3, #12]
 8020a36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020a38:	f107 030c 	add.w	r3, r7, #12
 8020a3c:	4618      	mov	r0, r3
 8020a3e:	f000 f825 	bl	8020a8c <ip4_route>
 8020a42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020a44:	693b      	ldr	r3, [r7, #16]
 8020a46:	2b00      	cmp	r3, #0
 8020a48:	d011      	beq.n	8020a6e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020a4a:	697b      	ldr	r3, [r7, #20]
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	709a      	strb	r2, [r3, #2]
 8020a50:	2200      	movs	r2, #0
 8020a52:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020a54:	f107 020c 	add.w	r2, r7, #12
 8020a58:	693b      	ldr	r3, [r7, #16]
 8020a5a:	9302      	str	r3, [sp, #8]
 8020a5c:	2301      	movs	r3, #1
 8020a5e:	9301      	str	r3, [sp, #4]
 8020a60:	2300      	movs	r3, #0
 8020a62:	9300      	str	r3, [sp, #0]
 8020a64:	23ff      	movs	r3, #255	; 0xff
 8020a66:	2100      	movs	r1, #0
 8020a68:	69f8      	ldr	r0, [r7, #28]
 8020a6a:	f000 f9c3 	bl	8020df4 <ip4_output_if>
  }
  pbuf_free(q);
 8020a6e:	69f8      	ldr	r0, [r7, #28]
 8020a70:	f7fd fea8 	bl	801e7c4 <pbuf_free>
 8020a74:	e000      	b.n	8020a78 <icmp_send_response+0xc0>
    return;
 8020a76:	bf00      	nop
}
 8020a78:	3720      	adds	r7, #32
 8020a7a:	46bd      	mov	sp, r7
 8020a7c:	bd80      	pop	{r7, pc}
 8020a7e:	bf00      	nop
 8020a80:	08028238 	.word	0x08028238
 8020a84:	08028304 	.word	0x08028304
 8020a88:	080282a8 	.word	0x080282a8

08020a8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8020a8c:	b480      	push	{r7}
 8020a8e:	b085      	sub	sp, #20
 8020a90:	af00      	add	r7, sp, #0
 8020a92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020a94:	4b33      	ldr	r3, [pc, #204]	; (8020b64 <ip4_route+0xd8>)
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	60fb      	str	r3, [r7, #12]
 8020a9a:	e036      	b.n	8020b0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020aa2:	f003 0301 	and.w	r3, r3, #1
 8020aa6:	b2db      	uxtb	r3, r3
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d02b      	beq.n	8020b04 <ip4_route+0x78>
 8020aac:	68fb      	ldr	r3, [r7, #12]
 8020aae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020ab2:	089b      	lsrs	r3, r3, #2
 8020ab4:	f003 0301 	and.w	r3, r3, #1
 8020ab8:	b2db      	uxtb	r3, r3
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d022      	beq.n	8020b04 <ip4_route+0x78>
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	3304      	adds	r3, #4
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d01d      	beq.n	8020b04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	681a      	ldr	r2, [r3, #0]
 8020acc:	68fb      	ldr	r3, [r7, #12]
 8020ace:	3304      	adds	r3, #4
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	405a      	eors	r2, r3
 8020ad4:	68fb      	ldr	r3, [r7, #12]
 8020ad6:	3308      	adds	r3, #8
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	4013      	ands	r3, r2
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d101      	bne.n	8020ae4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	e038      	b.n	8020b56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020ae4:	68fb      	ldr	r3, [r7, #12]
 8020ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020aea:	f003 0302 	and.w	r3, r3, #2
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d108      	bne.n	8020b04 <ip4_route+0x78>
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	681a      	ldr	r2, [r3, #0]
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	330c      	adds	r3, #12
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	429a      	cmp	r2, r3
 8020afe:	d101      	bne.n	8020b04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	e028      	b.n	8020b56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	60fb      	str	r3, [r7, #12]
 8020b0a:	68fb      	ldr	r3, [r7, #12]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d1c5      	bne.n	8020a9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020b10:	4b15      	ldr	r3, [pc, #84]	; (8020b68 <ip4_route+0xdc>)
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d01a      	beq.n	8020b4e <ip4_route+0xc2>
 8020b18:	4b13      	ldr	r3, [pc, #76]	; (8020b68 <ip4_route+0xdc>)
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b20:	f003 0301 	and.w	r3, r3, #1
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d012      	beq.n	8020b4e <ip4_route+0xc2>
 8020b28:	4b0f      	ldr	r3, [pc, #60]	; (8020b68 <ip4_route+0xdc>)
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b30:	f003 0304 	and.w	r3, r3, #4
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	d00a      	beq.n	8020b4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020b38:	4b0b      	ldr	r3, [pc, #44]	; (8020b68 <ip4_route+0xdc>)
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	3304      	adds	r3, #4
 8020b3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d004      	beq.n	8020b4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	b2db      	uxtb	r3, r3
 8020b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8020b4c:	d101      	bne.n	8020b52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8020b4e:	2300      	movs	r3, #0
 8020b50:	e001      	b.n	8020b56 <ip4_route+0xca>
  }

  return netif_default;
 8020b52:	4b05      	ldr	r3, [pc, #20]	; (8020b68 <ip4_route+0xdc>)
 8020b54:	681b      	ldr	r3, [r3, #0]
}
 8020b56:	4618      	mov	r0, r3
 8020b58:	3714      	adds	r7, #20
 8020b5a:	46bd      	mov	sp, r7
 8020b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b60:	4770      	bx	lr
 8020b62:	bf00      	nop
 8020b64:	20013de8 	.word	0x20013de8
 8020b68:	20013dec 	.word	0x20013dec

08020b6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8020b6c:	b580      	push	{r7, lr}
 8020b6e:	b082      	sub	sp, #8
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b7a:	f003 0301 	and.w	r3, r3, #1
 8020b7e:	b2db      	uxtb	r3, r3
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d016      	beq.n	8020bb2 <ip4_input_accept+0x46>
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	3304      	adds	r3, #4
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d011      	beq.n	8020bb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020b8e:	4b0b      	ldr	r3, [pc, #44]	; (8020bbc <ip4_input_accept+0x50>)
 8020b90:	695a      	ldr	r2, [r3, #20]
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	3304      	adds	r3, #4
 8020b96:	681b      	ldr	r3, [r3, #0]
 8020b98:	429a      	cmp	r2, r3
 8020b9a:	d008      	beq.n	8020bae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020b9c:	4b07      	ldr	r3, [pc, #28]	; (8020bbc <ip4_input_accept+0x50>)
 8020b9e:	695b      	ldr	r3, [r3, #20]
 8020ba0:	6879      	ldr	r1, [r7, #4]
 8020ba2:	4618      	mov	r0, r3
 8020ba4:	f000 fa0c 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 8020ba8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020baa:	2b00      	cmp	r3, #0
 8020bac:	d001      	beq.n	8020bb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8020bae:	2301      	movs	r3, #1
 8020bb0:	e000      	b.n	8020bb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020bb2:	2300      	movs	r3, #0
}
 8020bb4:	4618      	mov	r0, r3
 8020bb6:	3708      	adds	r7, #8
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	bd80      	pop	{r7, pc}
 8020bbc:	200107d8 	.word	0x200107d8

08020bc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b086      	sub	sp, #24
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	6078      	str	r0, [r7, #4]
 8020bc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	685b      	ldr	r3, [r3, #4]
 8020bce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	781b      	ldrb	r3, [r3, #0]
 8020bd4:	091b      	lsrs	r3, r3, #4
 8020bd6:	b2db      	uxtb	r3, r3
 8020bd8:	2b04      	cmp	r3, #4
 8020bda:	d004      	beq.n	8020be6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020bdc:	6878      	ldr	r0, [r7, #4]
 8020bde:	f7fd fdf1 	bl	801e7c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020be2:	2300      	movs	r3, #0
 8020be4:	e0fd      	b.n	8020de2 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020be6:	697b      	ldr	r3, [r7, #20]
 8020be8:	781b      	ldrb	r3, [r3, #0]
 8020bea:	f003 030f 	and.w	r3, r3, #15
 8020bee:	b2db      	uxtb	r3, r3
 8020bf0:	009b      	lsls	r3, r3, #2
 8020bf2:	b2db      	uxtb	r3, r3
 8020bf4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020bf6:	697b      	ldr	r3, [r7, #20]
 8020bf8:	885b      	ldrh	r3, [r3, #2]
 8020bfa:	b29b      	uxth	r3, r3
 8020bfc:	4618      	mov	r0, r3
 8020bfe:	f7fc fa05 	bl	801d00c <lwip_htons>
 8020c02:	4603      	mov	r3, r0
 8020c04:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	891b      	ldrh	r3, [r3, #8]
 8020c0a:	89ba      	ldrh	r2, [r7, #12]
 8020c0c:	429a      	cmp	r2, r3
 8020c0e:	d204      	bcs.n	8020c1a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8020c10:	89bb      	ldrh	r3, [r7, #12]
 8020c12:	4619      	mov	r1, r3
 8020c14:	6878      	ldr	r0, [r7, #4]
 8020c16:	f7fd fc4f 	bl	801e4b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	895b      	ldrh	r3, [r3, #10]
 8020c1e:	89fa      	ldrh	r2, [r7, #14]
 8020c20:	429a      	cmp	r2, r3
 8020c22:	d807      	bhi.n	8020c34 <ip4_input+0x74>
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	891b      	ldrh	r3, [r3, #8]
 8020c28:	89ba      	ldrh	r2, [r7, #12]
 8020c2a:	429a      	cmp	r2, r3
 8020c2c:	d802      	bhi.n	8020c34 <ip4_input+0x74>
 8020c2e:	89fb      	ldrh	r3, [r7, #14]
 8020c30:	2b13      	cmp	r3, #19
 8020c32:	d804      	bhi.n	8020c3e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020c34:	6878      	ldr	r0, [r7, #4]
 8020c36:	f7fd fdc5 	bl	801e7c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8020c3a:	2300      	movs	r3, #0
 8020c3c:	e0d1      	b.n	8020de2 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020c3e:	697b      	ldr	r3, [r7, #20]
 8020c40:	691b      	ldr	r3, [r3, #16]
 8020c42:	4a6a      	ldr	r2, [pc, #424]	; (8020dec <ip4_input+0x22c>)
 8020c44:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020c46:	697b      	ldr	r3, [r7, #20]
 8020c48:	68db      	ldr	r3, [r3, #12]
 8020c4a:	4a68      	ldr	r2, [pc, #416]	; (8020dec <ip4_input+0x22c>)
 8020c4c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020c4e:	4b67      	ldr	r3, [pc, #412]	; (8020dec <ip4_input+0x22c>)
 8020c50:	695b      	ldr	r3, [r3, #20]
 8020c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020c56:	2be0      	cmp	r3, #224	; 0xe0
 8020c58:	d112      	bne.n	8020c80 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020c5a:	683b      	ldr	r3, [r7, #0]
 8020c5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020c60:	f003 0301 	and.w	r3, r3, #1
 8020c64:	b2db      	uxtb	r3, r3
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d007      	beq.n	8020c7a <ip4_input+0xba>
 8020c6a:	683b      	ldr	r3, [r7, #0]
 8020c6c:	3304      	adds	r3, #4
 8020c6e:	681b      	ldr	r3, [r3, #0]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d002      	beq.n	8020c7a <ip4_input+0xba>
      netif = inp;
 8020c74:	683b      	ldr	r3, [r7, #0]
 8020c76:	613b      	str	r3, [r7, #16]
 8020c78:	e02a      	b.n	8020cd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	613b      	str	r3, [r7, #16]
 8020c7e:	e027      	b.n	8020cd0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020c80:	6838      	ldr	r0, [r7, #0]
 8020c82:	f7ff ff73 	bl	8020b6c <ip4_input_accept>
 8020c86:	4603      	mov	r3, r0
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d002      	beq.n	8020c92 <ip4_input+0xd2>
      netif = inp;
 8020c8c:	683b      	ldr	r3, [r7, #0]
 8020c8e:	613b      	str	r3, [r7, #16]
 8020c90:	e01e      	b.n	8020cd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020c92:	2300      	movs	r3, #0
 8020c94:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8020c96:	4b55      	ldr	r3, [pc, #340]	; (8020dec <ip4_input+0x22c>)
 8020c98:	695b      	ldr	r3, [r3, #20]
 8020c9a:	b2db      	uxtb	r3, r3
 8020c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8020c9e:	d017      	beq.n	8020cd0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8020ca0:	4b53      	ldr	r3, [pc, #332]	; (8020df0 <ip4_input+0x230>)
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	613b      	str	r3, [r7, #16]
 8020ca6:	e00e      	b.n	8020cc6 <ip4_input+0x106>
          if (netif == inp) {
 8020ca8:	693a      	ldr	r2, [r7, #16]
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	429a      	cmp	r2, r3
 8020cae:	d006      	beq.n	8020cbe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020cb0:	6938      	ldr	r0, [r7, #16]
 8020cb2:	f7ff ff5b 	bl	8020b6c <ip4_input_accept>
 8020cb6:	4603      	mov	r3, r0
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	d108      	bne.n	8020cce <ip4_input+0x10e>
 8020cbc:	e000      	b.n	8020cc0 <ip4_input+0x100>
            continue;
 8020cbe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020cc0:	693b      	ldr	r3, [r7, #16]
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	613b      	str	r3, [r7, #16]
 8020cc6:	693b      	ldr	r3, [r7, #16]
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	d1ed      	bne.n	8020ca8 <ip4_input+0xe8>
 8020ccc:	e000      	b.n	8020cd0 <ip4_input+0x110>
            break;
 8020cce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8020cd0:	4b46      	ldr	r3, [pc, #280]	; (8020dec <ip4_input+0x22c>)
 8020cd2:	691b      	ldr	r3, [r3, #16]
 8020cd4:	6839      	ldr	r1, [r7, #0]
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f000 f972 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 8020cdc:	4603      	mov	r3, r0
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d105      	bne.n	8020cee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8020ce2:	4b42      	ldr	r3, [pc, #264]	; (8020dec <ip4_input+0x22c>)
 8020ce4:	691b      	ldr	r3, [r3, #16]
 8020ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8020cea:	2be0      	cmp	r3, #224	; 0xe0
 8020cec:	d104      	bne.n	8020cf8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8020cee:	6878      	ldr	r0, [r7, #4]
 8020cf0:	f7fd fd68 	bl	801e7c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	e074      	b.n	8020de2 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8020cf8:	693b      	ldr	r3, [r7, #16]
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d104      	bne.n	8020d08 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8020cfe:	6878      	ldr	r0, [r7, #4]
 8020d00:	f7fd fd60 	bl	801e7c4 <pbuf_free>
    return ERR_OK;
 8020d04:	2300      	movs	r3, #0
 8020d06:	e06c      	b.n	8020de2 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020d08:	697b      	ldr	r3, [r7, #20]
 8020d0a:	88db      	ldrh	r3, [r3, #6]
 8020d0c:	b29b      	uxth	r3, r3
 8020d0e:	461a      	mov	r2, r3
 8020d10:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8020d14:	4013      	ands	r3, r2
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d00b      	beq.n	8020d32 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8020d1a:	6878      	ldr	r0, [r7, #4]
 8020d1c:	f000 fd26 	bl	802176c <ip4_reass>
 8020d20:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d101      	bne.n	8020d2c <ip4_input+0x16c>
      return ERR_OK;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	e05a      	b.n	8020de2 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	685b      	ldr	r3, [r3, #4]
 8020d30:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8020d32:	4a2e      	ldr	r2, [pc, #184]	; (8020dec <ip4_input+0x22c>)
 8020d34:	693b      	ldr	r3, [r7, #16]
 8020d36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020d38:	4a2c      	ldr	r2, [pc, #176]	; (8020dec <ip4_input+0x22c>)
 8020d3a:	683b      	ldr	r3, [r7, #0]
 8020d3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8020d3e:	4a2b      	ldr	r2, [pc, #172]	; (8020dec <ip4_input+0x22c>)
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	781b      	ldrb	r3, [r3, #0]
 8020d48:	f003 030f 	and.w	r3, r3, #15
 8020d4c:	b2db      	uxtb	r3, r3
 8020d4e:	009b      	lsls	r3, r3, #2
 8020d50:	b2db      	uxtb	r3, r3
 8020d52:	b29a      	uxth	r2, r3
 8020d54:	4b25      	ldr	r3, [pc, #148]	; (8020dec <ip4_input+0x22c>)
 8020d56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020d58:	89fb      	ldrh	r3, [r7, #14]
 8020d5a:	4619      	mov	r1, r3
 8020d5c:	6878      	ldr	r0, [r7, #4]
 8020d5e:	f7fd fcab 	bl	801e6b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8020d62:	697b      	ldr	r3, [r7, #20]
 8020d64:	7a5b      	ldrb	r3, [r3, #9]
 8020d66:	2b01      	cmp	r3, #1
 8020d68:	d006      	beq.n	8020d78 <ip4_input+0x1b8>
 8020d6a:	2b11      	cmp	r3, #17
 8020d6c:	d109      	bne.n	8020d82 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8020d6e:	6839      	ldr	r1, [r7, #0]
 8020d70:	6878      	ldr	r0, [r7, #4]
 8020d72:	f7fe f9b5 	bl	801f0e0 <udp_input>
        break;
 8020d76:	e021      	b.n	8020dbc <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8020d78:	6839      	ldr	r1, [r7, #0]
 8020d7a:	6878      	ldr	r0, [r7, #4]
 8020d7c:	f7ff fcf8 	bl	8020770 <icmp_input>
        break;
 8020d80:	e01c      	b.n	8020dbc <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020d82:	4b1a      	ldr	r3, [pc, #104]	; (8020dec <ip4_input+0x22c>)
 8020d84:	695b      	ldr	r3, [r3, #20]
 8020d86:	6939      	ldr	r1, [r7, #16]
 8020d88:	4618      	mov	r0, r3
 8020d8a:	f000 f919 	bl	8020fc0 <ip4_addr_isbroadcast_u32>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d10f      	bne.n	8020db4 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020d94:	4b15      	ldr	r3, [pc, #84]	; (8020dec <ip4_input+0x22c>)
 8020d96:	695b      	ldr	r3, [r3, #20]
 8020d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020d9c:	2be0      	cmp	r3, #224	; 0xe0
 8020d9e:	d009      	beq.n	8020db4 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020da4:	4619      	mov	r1, r3
 8020da6:	6878      	ldr	r0, [r7, #4]
 8020da8:	f7fd fcf9 	bl	801e79e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020dac:	2102      	movs	r1, #2
 8020dae:	6878      	ldr	r0, [r7, #4]
 8020db0:	f7ff fde2 	bl	8020978 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f7fd fd05 	bl	801e7c4 <pbuf_free>
        break;
 8020dba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8020dbc:	4b0b      	ldr	r3, [pc, #44]	; (8020dec <ip4_input+0x22c>)
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020dc2:	4b0a      	ldr	r3, [pc, #40]	; (8020dec <ip4_input+0x22c>)
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8020dc8:	4b08      	ldr	r3, [pc, #32]	; (8020dec <ip4_input+0x22c>)
 8020dca:	2200      	movs	r2, #0
 8020dcc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8020dce:	4b07      	ldr	r3, [pc, #28]	; (8020dec <ip4_input+0x22c>)
 8020dd0:	2200      	movs	r2, #0
 8020dd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8020dd4:	4b05      	ldr	r3, [pc, #20]	; (8020dec <ip4_input+0x22c>)
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8020dda:	4b04      	ldr	r3, [pc, #16]	; (8020dec <ip4_input+0x22c>)
 8020ddc:	2200      	movs	r2, #0
 8020dde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8020de0:	2300      	movs	r3, #0
}
 8020de2:	4618      	mov	r0, r3
 8020de4:	3718      	adds	r7, #24
 8020de6:	46bd      	mov	sp, r7
 8020de8:	bd80      	pop	{r7, pc}
 8020dea:	bf00      	nop
 8020dec:	200107d8 	.word	0x200107d8
 8020df0:	20013de8 	.word	0x20013de8

08020df4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b08a      	sub	sp, #40	; 0x28
 8020df8:	af04      	add	r7, sp, #16
 8020dfa:	60f8      	str	r0, [r7, #12]
 8020dfc:	60b9      	str	r1, [r7, #8]
 8020dfe:	607a      	str	r2, [r7, #4]
 8020e00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8020e02:	68bb      	ldr	r3, [r7, #8]
 8020e04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d009      	beq.n	8020e20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8020e0c:	68bb      	ldr	r3, [r7, #8]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d003      	beq.n	8020e1a <ip4_output_if+0x26>
 8020e12:	68bb      	ldr	r3, [r7, #8]
 8020e14:	681b      	ldr	r3, [r3, #0]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d102      	bne.n	8020e20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8020e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e1c:	3304      	adds	r3, #4
 8020e1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020e20:	78fa      	ldrb	r2, [r7, #3]
 8020e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e24:	9302      	str	r3, [sp, #8]
 8020e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020e2a:	9301      	str	r3, [sp, #4]
 8020e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020e30:	9300      	str	r3, [sp, #0]
 8020e32:	4613      	mov	r3, r2
 8020e34:	687a      	ldr	r2, [r7, #4]
 8020e36:	6979      	ldr	r1, [r7, #20]
 8020e38:	68f8      	ldr	r0, [r7, #12]
 8020e3a:	f000 f805 	bl	8020e48 <ip4_output_if_src>
 8020e3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020e40:	4618      	mov	r0, r3
 8020e42:	3718      	adds	r7, #24
 8020e44:	46bd      	mov	sp, r7
 8020e46:	bd80      	pop	{r7, pc}

08020e48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	b088      	sub	sp, #32
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	60f8      	str	r0, [r7, #12]
 8020e50:	60b9      	str	r1, [r7, #8]
 8020e52:	607a      	str	r2, [r7, #4]
 8020e54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	7b9b      	ldrb	r3, [r3, #14]
 8020e5a:	2b01      	cmp	r3, #1
 8020e5c:	d006      	beq.n	8020e6c <ip4_output_if_src+0x24>
 8020e5e:	4b52      	ldr	r3, [pc, #328]	; (8020fa8 <ip4_output_if_src+0x160>)
 8020e60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020e64:	4951      	ldr	r1, [pc, #324]	; (8020fac <ip4_output_if_src+0x164>)
 8020e66:	4852      	ldr	r0, [pc, #328]	; (8020fb0 <ip4_output_if_src+0x168>)
 8020e68:	f001 f9e4 	bl	8022234 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	d060      	beq.n	8020f34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8020e72:	2314      	movs	r3, #20
 8020e74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020e76:	2114      	movs	r1, #20
 8020e78:	68f8      	ldr	r0, [r7, #12]
 8020e7a:	f7fd fc0d 	bl	801e698 <pbuf_add_header>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d002      	beq.n	8020e8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020e84:	f06f 0301 	mvn.w	r3, #1
 8020e88:	e089      	b.n	8020f9e <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8020e8a:	68fb      	ldr	r3, [r7, #12]
 8020e8c:	685b      	ldr	r3, [r3, #4]
 8020e8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020e90:	68fb      	ldr	r3, [r7, #12]
 8020e92:	895b      	ldrh	r3, [r3, #10]
 8020e94:	2b13      	cmp	r3, #19
 8020e96:	d806      	bhi.n	8020ea6 <ip4_output_if_src+0x5e>
 8020e98:	4b43      	ldr	r3, [pc, #268]	; (8020fa8 <ip4_output_if_src+0x160>)
 8020e9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020e9e:	4945      	ldr	r1, [pc, #276]	; (8020fb4 <ip4_output_if_src+0x16c>)
 8020ea0:	4843      	ldr	r0, [pc, #268]	; (8020fb0 <ip4_output_if_src+0x168>)
 8020ea2:	f001 f9c7 	bl	8022234 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8020ea6:	69fb      	ldr	r3, [r7, #28]
 8020ea8:	78fa      	ldrb	r2, [r7, #3]
 8020eaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8020eac:	69fb      	ldr	r3, [r7, #28]
 8020eae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8020eb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	681a      	ldr	r2, [r3, #0]
 8020eb8:	69fb      	ldr	r3, [r7, #28]
 8020eba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020ebc:	8b7b      	ldrh	r3, [r7, #26]
 8020ebe:	089b      	lsrs	r3, r3, #2
 8020ec0:	b29b      	uxth	r3, r3
 8020ec2:	b2db      	uxtb	r3, r3
 8020ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ec8:	b2da      	uxtb	r2, r3
 8020eca:	69fb      	ldr	r3, [r7, #28]
 8020ecc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8020ece:	69fb      	ldr	r3, [r7, #28]
 8020ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020ed4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020ed6:	68fb      	ldr	r3, [r7, #12]
 8020ed8:	891b      	ldrh	r3, [r3, #8]
 8020eda:	4618      	mov	r0, r3
 8020edc:	f7fc f896 	bl	801d00c <lwip_htons>
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	461a      	mov	r2, r3
 8020ee4:	69fb      	ldr	r3, [r7, #28]
 8020ee6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8020ee8:	69fb      	ldr	r3, [r7, #28]
 8020eea:	2200      	movs	r2, #0
 8020eec:	719a      	strb	r2, [r3, #6]
 8020eee:	2200      	movs	r2, #0
 8020ef0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020ef2:	4b31      	ldr	r3, [pc, #196]	; (8020fb8 <ip4_output_if_src+0x170>)
 8020ef4:	881b      	ldrh	r3, [r3, #0]
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	f7fc f888 	bl	801d00c <lwip_htons>
 8020efc:	4603      	mov	r3, r0
 8020efe:	461a      	mov	r2, r3
 8020f00:	69fb      	ldr	r3, [r7, #28]
 8020f02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020f04:	4b2c      	ldr	r3, [pc, #176]	; (8020fb8 <ip4_output_if_src+0x170>)
 8020f06:	881b      	ldrh	r3, [r3, #0]
 8020f08:	3301      	adds	r3, #1
 8020f0a:	b29a      	uxth	r2, r3
 8020f0c:	4b2a      	ldr	r3, [pc, #168]	; (8020fb8 <ip4_output_if_src+0x170>)
 8020f0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020f10:	68bb      	ldr	r3, [r7, #8]
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d104      	bne.n	8020f20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020f16:	4b29      	ldr	r3, [pc, #164]	; (8020fbc <ip4_output_if_src+0x174>)
 8020f18:	681a      	ldr	r2, [r3, #0]
 8020f1a:	69fb      	ldr	r3, [r7, #28]
 8020f1c:	60da      	str	r2, [r3, #12]
 8020f1e:	e003      	b.n	8020f28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020f20:	68bb      	ldr	r3, [r7, #8]
 8020f22:	681a      	ldr	r2, [r3, #0]
 8020f24:	69fb      	ldr	r3, [r7, #28]
 8020f26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020f28:	69fb      	ldr	r3, [r7, #28]
 8020f2a:	2200      	movs	r2, #0
 8020f2c:	729a      	strb	r2, [r3, #10]
 8020f2e:	2200      	movs	r2, #0
 8020f30:	72da      	strb	r2, [r3, #11]
 8020f32:	e00f      	b.n	8020f54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020f34:	68fb      	ldr	r3, [r7, #12]
 8020f36:	895b      	ldrh	r3, [r3, #10]
 8020f38:	2b13      	cmp	r3, #19
 8020f3a:	d802      	bhi.n	8020f42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020f3c:	f06f 0301 	mvn.w	r3, #1
 8020f40:	e02d      	b.n	8020f9e <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020f42:	68fb      	ldr	r3, [r7, #12]
 8020f44:	685b      	ldr	r3, [r3, #4]
 8020f46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020f48:	69fb      	ldr	r3, [r7, #28]
 8020f4a:	691b      	ldr	r3, [r3, #16]
 8020f4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8020f4e:	f107 0314 	add.w	r3, r7, #20
 8020f52:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	681a      	ldr	r2, [r3, #0]
 8020f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f5a:	3304      	adds	r3, #4
 8020f5c:	681b      	ldr	r3, [r3, #0]
 8020f5e:	429a      	cmp	r2, r3
 8020f60:	d105      	bne.n	8020f6e <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8020f62:	68f9      	ldr	r1, [r7, #12]
 8020f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f66:	f7fd f86f 	bl	801e048 <netif_loop_output>
 8020f6a:	4603      	mov	r3, r0
 8020f6c:	e017      	b.n	8020f9e <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d00c      	beq.n	8020f90 <ip4_output_if_src+0x148>
 8020f76:	68fb      	ldr	r3, [r7, #12]
 8020f78:	891a      	ldrh	r2, [r3, #8]
 8020f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020f7e:	429a      	cmp	r2, r3
 8020f80:	d906      	bls.n	8020f90 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8020f82:	687a      	ldr	r2, [r7, #4]
 8020f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020f86:	68f8      	ldr	r0, [r7, #12]
 8020f88:	f000 fde4 	bl	8021b54 <ip4_frag>
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	e006      	b.n	8020f9e <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f92:	695b      	ldr	r3, [r3, #20]
 8020f94:	687a      	ldr	r2, [r7, #4]
 8020f96:	68f9      	ldr	r1, [r7, #12]
 8020f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f9a:	4798      	blx	r3
 8020f9c:	4603      	mov	r3, r0
}
 8020f9e:	4618      	mov	r0, r3
 8020fa0:	3720      	adds	r7, #32
 8020fa2:	46bd      	mov	sp, r7
 8020fa4:	bd80      	pop	{r7, pc}
 8020fa6:	bf00      	nop
 8020fa8:	08028330 	.word	0x08028330
 8020fac:	08028364 	.word	0x08028364
 8020fb0:	08028370 	.word	0x08028370
 8020fb4:	08028398 	.word	0x08028398
 8020fb8:	200142f2 	.word	0x200142f2
 8020fbc:	08028b3c 	.word	0x08028b3c

08020fc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8020fc0:	b480      	push	{r7}
 8020fc2:	b085      	sub	sp, #20
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	6078      	str	r0, [r7, #4]
 8020fc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fd4:	d002      	beq.n	8020fdc <ip4_addr_isbroadcast_u32+0x1c>
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d101      	bne.n	8020fe0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8020fdc:	2301      	movs	r3, #1
 8020fde:	e02a      	b.n	8021036 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020fe0:	683b      	ldr	r3, [r7, #0]
 8020fe2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020fe6:	f003 0302 	and.w	r3, r3, #2
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d101      	bne.n	8020ff2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8020fee:	2300      	movs	r3, #0
 8020ff0:	e021      	b.n	8021036 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8020ff2:	683b      	ldr	r3, [r7, #0]
 8020ff4:	3304      	adds	r3, #4
 8020ff6:	681b      	ldr	r3, [r3, #0]
 8020ff8:	687a      	ldr	r2, [r7, #4]
 8020ffa:	429a      	cmp	r2, r3
 8020ffc:	d101      	bne.n	8021002 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020ffe:	2300      	movs	r3, #0
 8021000:	e019      	b.n	8021036 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021002:	68fa      	ldr	r2, [r7, #12]
 8021004:	683b      	ldr	r3, [r7, #0]
 8021006:	3304      	adds	r3, #4
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	405a      	eors	r2, r3
 802100c:	683b      	ldr	r3, [r7, #0]
 802100e:	3308      	adds	r3, #8
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	4013      	ands	r3, r2
 8021014:	2b00      	cmp	r3, #0
 8021016:	d10d      	bne.n	8021034 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021018:	683b      	ldr	r3, [r7, #0]
 802101a:	3308      	adds	r3, #8
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	43da      	mvns	r2, r3
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021024:	683b      	ldr	r3, [r7, #0]
 8021026:	3308      	adds	r3, #8
 8021028:	681b      	ldr	r3, [r3, #0]
 802102a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802102c:	429a      	cmp	r2, r3
 802102e:	d101      	bne.n	8021034 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021030:	2301      	movs	r3, #1
 8021032:	e000      	b.n	8021036 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021034:	2300      	movs	r3, #0
  }
}
 8021036:	4618      	mov	r0, r3
 8021038:	3714      	adds	r7, #20
 802103a:	46bd      	mov	sp, r7
 802103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021040:	4770      	bx	lr
	...

08021044 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	b082      	sub	sp, #8
 8021048:	af00      	add	r7, sp, #0
 802104a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 802104c:	2210      	movs	r2, #16
 802104e:	4904      	ldr	r1, [pc, #16]	; (8021060 <ip4addr_ntoa+0x1c>)
 8021050:	6878      	ldr	r0, [r7, #4]
 8021052:	f000 f807 	bl	8021064 <ip4addr_ntoa_r>
 8021056:	4603      	mov	r3, r0
}
 8021058:	4618      	mov	r0, r3
 802105a:	3708      	adds	r7, #8
 802105c:	46bd      	mov	sp, r7
 802105e:	bd80      	pop	{r7, pc}
 8021060:	200142f4 	.word	0x200142f4

08021064 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8021064:	b480      	push	{r7}
 8021066:	b08d      	sub	sp, #52	; 0x34
 8021068:	af00      	add	r7, sp, #0
 802106a:	60f8      	str	r0, [r7, #12]
 802106c:	60b9      	str	r1, [r7, #8]
 802106e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8021070:	2300      	movs	r3, #0
 8021072:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802107a:	68bb      	ldr	r3, [r7, #8]
 802107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 802107e:	f107 0318 	add.w	r3, r7, #24
 8021082:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021084:	2300      	movs	r3, #0
 8021086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802108a:	e058      	b.n	802113e <ip4addr_ntoa_r+0xda>
    i = 0;
 802108c:	2300      	movs	r3, #0
 802108e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8021092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021094:	781a      	ldrb	r2, [r3, #0]
 8021096:	4b32      	ldr	r3, [pc, #200]	; (8021160 <ip4addr_ntoa_r+0xfc>)
 8021098:	fba3 1302 	umull	r1, r3, r3, r2
 802109c:	08d9      	lsrs	r1, r3, #3
 802109e:	460b      	mov	r3, r1
 80210a0:	009b      	lsls	r3, r3, #2
 80210a2:	440b      	add	r3, r1
 80210a4:	005b      	lsls	r3, r3, #1
 80210a6:	1ad3      	subs	r3, r2, r3
 80210a8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80210aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210ac:	781b      	ldrb	r3, [r3, #0]
 80210ae:	4a2c      	ldr	r2, [pc, #176]	; (8021160 <ip4addr_ntoa_r+0xfc>)
 80210b0:	fba2 2303 	umull	r2, r3, r2, r3
 80210b4:	08db      	lsrs	r3, r3, #3
 80210b6:	b2da      	uxtb	r2, r3
 80210b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210ba:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80210bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80210c0:	1c5a      	adds	r2, r3, #1
 80210c2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80210c6:	4619      	mov	r1, r3
 80210c8:	7ffb      	ldrb	r3, [r7, #31]
 80210ca:	3330      	adds	r3, #48	; 0x30
 80210cc:	b2da      	uxtb	r2, r3
 80210ce:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80210d2:	443b      	add	r3, r7
 80210d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80210d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210da:	781b      	ldrb	r3, [r3, #0]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d1d8      	bne.n	8021092 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80210e0:	e011      	b.n	8021106 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80210e2:	6a3b      	ldr	r3, [r7, #32]
 80210e4:	1c5a      	adds	r2, r3, #1
 80210e6:	623a      	str	r2, [r7, #32]
 80210e8:	687a      	ldr	r2, [r7, #4]
 80210ea:	429a      	cmp	r2, r3
 80210ec:	dc01      	bgt.n	80210f2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80210ee:	2300      	movs	r3, #0
 80210f0:	e030      	b.n	8021154 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80210f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80210f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210f8:	1c59      	adds	r1, r3, #1
 80210fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80210fc:	3230      	adds	r2, #48	; 0x30
 80210fe:	443a      	add	r2, r7
 8021100:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021104:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8021106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802110a:	1e5a      	subs	r2, r3, #1
 802110c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021110:	2b00      	cmp	r3, #0
 8021112:	d1e6      	bne.n	80210e2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021114:	6a3b      	ldr	r3, [r7, #32]
 8021116:	1c5a      	adds	r2, r3, #1
 8021118:	623a      	str	r2, [r7, #32]
 802111a:	687a      	ldr	r2, [r7, #4]
 802111c:	429a      	cmp	r2, r3
 802111e:	dc01      	bgt.n	8021124 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021120:	2300      	movs	r3, #0
 8021122:	e017      	b.n	8021154 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021126:	1c5a      	adds	r2, r3, #1
 8021128:	62fa      	str	r2, [r7, #44]	; 0x2c
 802112a:	222e      	movs	r2, #46	; 0x2e
 802112c:	701a      	strb	r2, [r3, #0]
    ap++;
 802112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021130:	3301      	adds	r3, #1
 8021132:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021138:	3301      	adds	r3, #1
 802113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802113e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021142:	2b03      	cmp	r3, #3
 8021144:	d9a2      	bls.n	802108c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8021146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021148:	3b01      	subs	r3, #1
 802114a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802114e:	2200      	movs	r2, #0
 8021150:	701a      	strb	r2, [r3, #0]
  return buf;
 8021152:	68bb      	ldr	r3, [r7, #8]
}
 8021154:	4618      	mov	r0, r3
 8021156:	3734      	adds	r7, #52	; 0x34
 8021158:	46bd      	mov	sp, r7
 802115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802115e:	4770      	bx	lr
 8021160:	cccccccd 	.word	0xcccccccd

08021164 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021164:	b580      	push	{r7, lr}
 8021166:	b084      	sub	sp, #16
 8021168:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802116a:	2300      	movs	r3, #0
 802116c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802116e:	4b12      	ldr	r3, [pc, #72]	; (80211b8 <ip_reass_tmr+0x54>)
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021174:	e018      	b.n	80211a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	7fdb      	ldrb	r3, [r3, #31]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d00b      	beq.n	8021196 <ip_reass_tmr+0x32>
      r->timer--;
 802117e:	68fb      	ldr	r3, [r7, #12]
 8021180:	7fdb      	ldrb	r3, [r3, #31]
 8021182:	3b01      	subs	r3, #1
 8021184:	b2da      	uxtb	r2, r3
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802118e:	68fb      	ldr	r3, [r7, #12]
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	60fb      	str	r3, [r7, #12]
 8021194:	e008      	b.n	80211a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021196:	68fb      	ldr	r3, [r7, #12]
 8021198:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80211a0:	68b9      	ldr	r1, [r7, #8]
 80211a2:	6878      	ldr	r0, [r7, #4]
 80211a4:	f000 f80a 	bl	80211bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d1e3      	bne.n	8021176 <ip_reass_tmr+0x12>
    }
  }
}
 80211ae:	bf00      	nop
 80211b0:	bf00      	nop
 80211b2:	3710      	adds	r7, #16
 80211b4:	46bd      	mov	sp, r7
 80211b6:	bd80      	pop	{r7, pc}
 80211b8:	20014304 	.word	0x20014304

080211bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80211bc:	b580      	push	{r7, lr}
 80211be:	b088      	sub	sp, #32
 80211c0:	af00      	add	r7, sp, #0
 80211c2:	6078      	str	r0, [r7, #4]
 80211c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80211c6:	2300      	movs	r3, #0
 80211c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80211ca:	683a      	ldr	r2, [r7, #0]
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	429a      	cmp	r2, r3
 80211d0:	d105      	bne.n	80211de <ip_reass_free_complete_datagram+0x22>
 80211d2:	4b45      	ldr	r3, [pc, #276]	; (80212e8 <ip_reass_free_complete_datagram+0x12c>)
 80211d4:	22ab      	movs	r2, #171	; 0xab
 80211d6:	4945      	ldr	r1, [pc, #276]	; (80212ec <ip_reass_free_complete_datagram+0x130>)
 80211d8:	4845      	ldr	r0, [pc, #276]	; (80212f0 <ip_reass_free_complete_datagram+0x134>)
 80211da:	f001 f82b 	bl	8022234 <iprintf>
  if (prev != NULL) {
 80211de:	683b      	ldr	r3, [r7, #0]
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d00a      	beq.n	80211fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80211e4:	683b      	ldr	r3, [r7, #0]
 80211e6:	681b      	ldr	r3, [r3, #0]
 80211e8:	687a      	ldr	r2, [r7, #4]
 80211ea:	429a      	cmp	r2, r3
 80211ec:	d005      	beq.n	80211fa <ip_reass_free_complete_datagram+0x3e>
 80211ee:	4b3e      	ldr	r3, [pc, #248]	; (80212e8 <ip_reass_free_complete_datagram+0x12c>)
 80211f0:	22ad      	movs	r2, #173	; 0xad
 80211f2:	4940      	ldr	r1, [pc, #256]	; (80212f4 <ip_reass_free_complete_datagram+0x138>)
 80211f4:	483e      	ldr	r0, [pc, #248]	; (80212f0 <ip_reass_free_complete_datagram+0x134>)
 80211f6:	f001 f81d 	bl	8022234 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	685b      	ldr	r3, [r3, #4]
 8021200:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	889b      	ldrh	r3, [r3, #4]
 8021206:	b29b      	uxth	r3, r3
 8021208:	2b00      	cmp	r3, #0
 802120a:	d12a      	bne.n	8021262 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	685b      	ldr	r3, [r3, #4]
 8021210:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	681a      	ldr	r2, [r3, #0]
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802121a:	69bb      	ldr	r3, [r7, #24]
 802121c:	6858      	ldr	r0, [r3, #4]
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	3308      	adds	r3, #8
 8021222:	2214      	movs	r2, #20
 8021224:	4619      	mov	r1, r3
 8021226:	f000 fef5 	bl	8022014 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802122a:	2101      	movs	r1, #1
 802122c:	69b8      	ldr	r0, [r7, #24]
 802122e:	f7ff fbb3 	bl	8020998 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021232:	69b8      	ldr	r0, [r7, #24]
 8021234:	f7fd fb4e 	bl	801e8d4 <pbuf_clen>
 8021238:	4603      	mov	r3, r0
 802123a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802123c:	8bfa      	ldrh	r2, [r7, #30]
 802123e:	8a7b      	ldrh	r3, [r7, #18]
 8021240:	4413      	add	r3, r2
 8021242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021246:	db05      	blt.n	8021254 <ip_reass_free_complete_datagram+0x98>
 8021248:	4b27      	ldr	r3, [pc, #156]	; (80212e8 <ip_reass_free_complete_datagram+0x12c>)
 802124a:	22bc      	movs	r2, #188	; 0xbc
 802124c:	492a      	ldr	r1, [pc, #168]	; (80212f8 <ip_reass_free_complete_datagram+0x13c>)
 802124e:	4828      	ldr	r0, [pc, #160]	; (80212f0 <ip_reass_free_complete_datagram+0x134>)
 8021250:	f000 fff0 	bl	8022234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021254:	8bfa      	ldrh	r2, [r7, #30]
 8021256:	8a7b      	ldrh	r3, [r7, #18]
 8021258:	4413      	add	r3, r2
 802125a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 802125c:	69b8      	ldr	r0, [r7, #24]
 802125e:	f7fd fab1 	bl	801e7c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	685b      	ldr	r3, [r3, #4]
 8021266:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021268:	e01f      	b.n	80212aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802126a:	69bb      	ldr	r3, [r7, #24]
 802126c:	685b      	ldr	r3, [r3, #4]
 802126e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021270:	69bb      	ldr	r3, [r7, #24]
 8021272:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021274:	697b      	ldr	r3, [r7, #20]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 802127a:	68f8      	ldr	r0, [r7, #12]
 802127c:	f7fd fb2a 	bl	801e8d4 <pbuf_clen>
 8021280:	4603      	mov	r3, r0
 8021282:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021284:	8bfa      	ldrh	r2, [r7, #30]
 8021286:	8a7b      	ldrh	r3, [r7, #18]
 8021288:	4413      	add	r3, r2
 802128a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802128e:	db05      	blt.n	802129c <ip_reass_free_complete_datagram+0xe0>
 8021290:	4b15      	ldr	r3, [pc, #84]	; (80212e8 <ip_reass_free_complete_datagram+0x12c>)
 8021292:	22cc      	movs	r2, #204	; 0xcc
 8021294:	4918      	ldr	r1, [pc, #96]	; (80212f8 <ip_reass_free_complete_datagram+0x13c>)
 8021296:	4816      	ldr	r0, [pc, #88]	; (80212f0 <ip_reass_free_complete_datagram+0x134>)
 8021298:	f000 ffcc 	bl	8022234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802129c:	8bfa      	ldrh	r2, [r7, #30]
 802129e:	8a7b      	ldrh	r3, [r7, #18]
 80212a0:	4413      	add	r3, r2
 80212a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80212a4:	68f8      	ldr	r0, [r7, #12]
 80212a6:	f7fd fa8d 	bl	801e7c4 <pbuf_free>
  while (p != NULL) {
 80212aa:	69bb      	ldr	r3, [r7, #24]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d1dc      	bne.n	802126a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80212b0:	6839      	ldr	r1, [r7, #0]
 80212b2:	6878      	ldr	r0, [r7, #4]
 80212b4:	f000 f8c2 	bl	802143c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80212b8:	4b10      	ldr	r3, [pc, #64]	; (80212fc <ip_reass_free_complete_datagram+0x140>)
 80212ba:	881b      	ldrh	r3, [r3, #0]
 80212bc:	8bfa      	ldrh	r2, [r7, #30]
 80212be:	429a      	cmp	r2, r3
 80212c0:	d905      	bls.n	80212ce <ip_reass_free_complete_datagram+0x112>
 80212c2:	4b09      	ldr	r3, [pc, #36]	; (80212e8 <ip_reass_free_complete_datagram+0x12c>)
 80212c4:	22d2      	movs	r2, #210	; 0xd2
 80212c6:	490e      	ldr	r1, [pc, #56]	; (8021300 <ip_reass_free_complete_datagram+0x144>)
 80212c8:	4809      	ldr	r0, [pc, #36]	; (80212f0 <ip_reass_free_complete_datagram+0x134>)
 80212ca:	f000 ffb3 	bl	8022234 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80212ce:	4b0b      	ldr	r3, [pc, #44]	; (80212fc <ip_reass_free_complete_datagram+0x140>)
 80212d0:	881a      	ldrh	r2, [r3, #0]
 80212d2:	8bfb      	ldrh	r3, [r7, #30]
 80212d4:	1ad3      	subs	r3, r2, r3
 80212d6:	b29a      	uxth	r2, r3
 80212d8:	4b08      	ldr	r3, [pc, #32]	; (80212fc <ip_reass_free_complete_datagram+0x140>)
 80212da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80212dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80212de:	4618      	mov	r0, r3
 80212e0:	3720      	adds	r7, #32
 80212e2:	46bd      	mov	sp, r7
 80212e4:	bd80      	pop	{r7, pc}
 80212e6:	bf00      	nop
 80212e8:	080283c8 	.word	0x080283c8
 80212ec:	08028404 	.word	0x08028404
 80212f0:	08028410 	.word	0x08028410
 80212f4:	08028438 	.word	0x08028438
 80212f8:	0802844c 	.word	0x0802844c
 80212fc:	20014308 	.word	0x20014308
 8021300:	0802846c 	.word	0x0802846c

08021304 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021304:	b580      	push	{r7, lr}
 8021306:	b08a      	sub	sp, #40	; 0x28
 8021308:	af00      	add	r7, sp, #0
 802130a:	6078      	str	r0, [r7, #4]
 802130c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802130e:	2300      	movs	r3, #0
 8021310:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021312:	2300      	movs	r3, #0
 8021314:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021316:	2300      	movs	r3, #0
 8021318:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802131a:	2300      	movs	r3, #0
 802131c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802131e:	2300      	movs	r3, #0
 8021320:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021322:	4b28      	ldr	r3, [pc, #160]	; (80213c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021328:	e030      	b.n	802138c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802132c:	695a      	ldr	r2, [r3, #20]
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	68db      	ldr	r3, [r3, #12]
 8021332:	429a      	cmp	r2, r3
 8021334:	d10c      	bne.n	8021350 <ip_reass_remove_oldest_datagram+0x4c>
 8021336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021338:	699a      	ldr	r2, [r3, #24]
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	691b      	ldr	r3, [r3, #16]
 802133e:	429a      	cmp	r2, r3
 8021340:	d106      	bne.n	8021350 <ip_reass_remove_oldest_datagram+0x4c>
 8021342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021344:	899a      	ldrh	r2, [r3, #12]
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	889b      	ldrh	r3, [r3, #4]
 802134a:	b29b      	uxth	r3, r3
 802134c:	429a      	cmp	r2, r3
 802134e:	d014      	beq.n	802137a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021350:	693b      	ldr	r3, [r7, #16]
 8021352:	3301      	adds	r3, #1
 8021354:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021356:	6a3b      	ldr	r3, [r7, #32]
 8021358:	2b00      	cmp	r3, #0
 802135a:	d104      	bne.n	8021366 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 802135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802135e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021360:	69fb      	ldr	r3, [r7, #28]
 8021362:	61bb      	str	r3, [r7, #24]
 8021364:	e009      	b.n	802137a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021368:	7fda      	ldrb	r2, [r3, #31]
 802136a:	6a3b      	ldr	r3, [r7, #32]
 802136c:	7fdb      	ldrb	r3, [r3, #31]
 802136e:	429a      	cmp	r2, r3
 8021370:	d803      	bhi.n	802137a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021374:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021376:	69fb      	ldr	r3, [r7, #28]
 8021378:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 802137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802137c:	681b      	ldr	r3, [r3, #0]
 802137e:	2b00      	cmp	r3, #0
 8021380:	d001      	beq.n	8021386 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021384:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802138e:	2b00      	cmp	r3, #0
 8021390:	d1cb      	bne.n	802132a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021392:	6a3b      	ldr	r3, [r7, #32]
 8021394:	2b00      	cmp	r3, #0
 8021396:	d008      	beq.n	80213aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021398:	69b9      	ldr	r1, [r7, #24]
 802139a:	6a38      	ldr	r0, [r7, #32]
 802139c:	f7ff ff0e 	bl	80211bc <ip_reass_free_complete_datagram>
 80213a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80213a2:	697a      	ldr	r2, [r7, #20]
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	4413      	add	r3, r2
 80213a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80213aa:	697a      	ldr	r2, [r7, #20]
 80213ac:	683b      	ldr	r3, [r7, #0]
 80213ae:	429a      	cmp	r2, r3
 80213b0:	da02      	bge.n	80213b8 <ip_reass_remove_oldest_datagram+0xb4>
 80213b2:	693b      	ldr	r3, [r7, #16]
 80213b4:	2b01      	cmp	r3, #1
 80213b6:	dcac      	bgt.n	8021312 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80213b8:	697b      	ldr	r3, [r7, #20]
}
 80213ba:	4618      	mov	r0, r3
 80213bc:	3728      	adds	r7, #40	; 0x28
 80213be:	46bd      	mov	sp, r7
 80213c0:	bd80      	pop	{r7, pc}
 80213c2:	bf00      	nop
 80213c4:	20014304 	.word	0x20014304

080213c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80213c8:	b580      	push	{r7, lr}
 80213ca:	b084      	sub	sp, #16
 80213cc:	af00      	add	r7, sp, #0
 80213ce:	6078      	str	r0, [r7, #4]
 80213d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80213d2:	2001      	movs	r0, #1
 80213d4:	f7fc fa76 	bl	801d8c4 <memp_malloc>
 80213d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80213da:	68fb      	ldr	r3, [r7, #12]
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d110      	bne.n	8021402 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80213e0:	6839      	ldr	r1, [r7, #0]
 80213e2:	6878      	ldr	r0, [r7, #4]
 80213e4:	f7ff ff8e 	bl	8021304 <ip_reass_remove_oldest_datagram>
 80213e8:	4602      	mov	r2, r0
 80213ea:	683b      	ldr	r3, [r7, #0]
 80213ec:	4293      	cmp	r3, r2
 80213ee:	dc03      	bgt.n	80213f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80213f0:	2001      	movs	r0, #1
 80213f2:	f7fc fa67 	bl	801d8c4 <memp_malloc>
 80213f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d101      	bne.n	8021402 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80213fe:	2300      	movs	r3, #0
 8021400:	e016      	b.n	8021430 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021402:	2220      	movs	r2, #32
 8021404:	2100      	movs	r1, #0
 8021406:	68f8      	ldr	r0, [r7, #12]
 8021408:	f000 fe2c 	bl	8022064 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	220f      	movs	r2, #15
 8021410:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021412:	4b09      	ldr	r3, [pc, #36]	; (8021438 <ip_reass_enqueue_new_datagram+0x70>)
 8021414:	681a      	ldr	r2, [r3, #0]
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802141a:	4a07      	ldr	r2, [pc, #28]	; (8021438 <ip_reass_enqueue_new_datagram+0x70>)
 802141c:	68fb      	ldr	r3, [r7, #12]
 802141e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	3308      	adds	r3, #8
 8021424:	2214      	movs	r2, #20
 8021426:	6879      	ldr	r1, [r7, #4]
 8021428:	4618      	mov	r0, r3
 802142a:	f000 fdf3 	bl	8022014 <memcpy>
  return ipr;
 802142e:	68fb      	ldr	r3, [r7, #12]
}
 8021430:	4618      	mov	r0, r3
 8021432:	3710      	adds	r7, #16
 8021434:	46bd      	mov	sp, r7
 8021436:	bd80      	pop	{r7, pc}
 8021438:	20014304 	.word	0x20014304

0802143c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b082      	sub	sp, #8
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
 8021444:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021446:	4b10      	ldr	r3, [pc, #64]	; (8021488 <ip_reass_dequeue_datagram+0x4c>)
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	687a      	ldr	r2, [r7, #4]
 802144c:	429a      	cmp	r2, r3
 802144e:	d104      	bne.n	802145a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	4a0c      	ldr	r2, [pc, #48]	; (8021488 <ip_reass_dequeue_datagram+0x4c>)
 8021456:	6013      	str	r3, [r2, #0]
 8021458:	e00d      	b.n	8021476 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802145a:	683b      	ldr	r3, [r7, #0]
 802145c:	2b00      	cmp	r3, #0
 802145e:	d106      	bne.n	802146e <ip_reass_dequeue_datagram+0x32>
 8021460:	4b0a      	ldr	r3, [pc, #40]	; (802148c <ip_reass_dequeue_datagram+0x50>)
 8021462:	f240 1245 	movw	r2, #325	; 0x145
 8021466:	490a      	ldr	r1, [pc, #40]	; (8021490 <ip_reass_dequeue_datagram+0x54>)
 8021468:	480a      	ldr	r0, [pc, #40]	; (8021494 <ip_reass_dequeue_datagram+0x58>)
 802146a:	f000 fee3 	bl	8022234 <iprintf>
    prev->next = ipr->next;
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	681a      	ldr	r2, [r3, #0]
 8021472:	683b      	ldr	r3, [r7, #0]
 8021474:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021476:	6879      	ldr	r1, [r7, #4]
 8021478:	2001      	movs	r0, #1
 802147a:	f7fc fa93 	bl	801d9a4 <memp_free>
}
 802147e:	bf00      	nop
 8021480:	3708      	adds	r7, #8
 8021482:	46bd      	mov	sp, r7
 8021484:	bd80      	pop	{r7, pc}
 8021486:	bf00      	nop
 8021488:	20014304 	.word	0x20014304
 802148c:	080283c8 	.word	0x080283c8
 8021490:	08028490 	.word	0x08028490
 8021494:	08028410 	.word	0x08028410

08021498 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021498:	b580      	push	{r7, lr}
 802149a:	b08c      	sub	sp, #48	; 0x30
 802149c:	af00      	add	r7, sp, #0
 802149e:	60f8      	str	r0, [r7, #12]
 80214a0:	60b9      	str	r1, [r7, #8]
 80214a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80214a4:	2300      	movs	r3, #0
 80214a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80214a8:	2301      	movs	r3, #1
 80214aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80214ac:	68bb      	ldr	r3, [r7, #8]
 80214ae:	685b      	ldr	r3, [r3, #4]
 80214b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80214b2:	69fb      	ldr	r3, [r7, #28]
 80214b4:	885b      	ldrh	r3, [r3, #2]
 80214b6:	b29b      	uxth	r3, r3
 80214b8:	4618      	mov	r0, r3
 80214ba:	f7fb fda7 	bl	801d00c <lwip_htons>
 80214be:	4603      	mov	r3, r0
 80214c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80214c2:	69fb      	ldr	r3, [r7, #28]
 80214c4:	781b      	ldrb	r3, [r3, #0]
 80214c6:	f003 030f 	and.w	r3, r3, #15
 80214ca:	b2db      	uxtb	r3, r3
 80214cc:	009b      	lsls	r3, r3, #2
 80214ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80214d0:	7e7b      	ldrb	r3, [r7, #25]
 80214d2:	b29b      	uxth	r3, r3
 80214d4:	8b7a      	ldrh	r2, [r7, #26]
 80214d6:	429a      	cmp	r2, r3
 80214d8:	d202      	bcs.n	80214e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80214da:	f04f 33ff 	mov.w	r3, #4294967295
 80214de:	e135      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80214e0:	7e7b      	ldrb	r3, [r7, #25]
 80214e2:	b29b      	uxth	r3, r3
 80214e4:	8b7a      	ldrh	r2, [r7, #26]
 80214e6:	1ad3      	subs	r3, r2, r3
 80214e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80214ea:	69fb      	ldr	r3, [r7, #28]
 80214ec:	88db      	ldrh	r3, [r3, #6]
 80214ee:	b29b      	uxth	r3, r3
 80214f0:	4618      	mov	r0, r3
 80214f2:	f7fb fd8b 	bl	801d00c <lwip_htons>
 80214f6:	4603      	mov	r3, r0
 80214f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80214fc:	b29b      	uxth	r3, r3
 80214fe:	00db      	lsls	r3, r3, #3
 8021500:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021502:	68bb      	ldr	r3, [r7, #8]
 8021504:	685b      	ldr	r3, [r3, #4]
 8021506:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802150a:	2200      	movs	r2, #0
 802150c:	701a      	strb	r2, [r3, #0]
 802150e:	2200      	movs	r2, #0
 8021510:	705a      	strb	r2, [r3, #1]
 8021512:	2200      	movs	r2, #0
 8021514:	709a      	strb	r2, [r3, #2]
 8021516:	2200      	movs	r2, #0
 8021518:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802151c:	8afa      	ldrh	r2, [r7, #22]
 802151e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021520:	8afa      	ldrh	r2, [r7, #22]
 8021522:	8b7b      	ldrh	r3, [r7, #26]
 8021524:	4413      	add	r3, r2
 8021526:	b29a      	uxth	r2, r3
 8021528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802152a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802152e:	88db      	ldrh	r3, [r3, #6]
 8021530:	b29b      	uxth	r3, r3
 8021532:	8afa      	ldrh	r2, [r7, #22]
 8021534:	429a      	cmp	r2, r3
 8021536:	d902      	bls.n	802153e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021538:	f04f 33ff 	mov.w	r3, #4294967295
 802153c:	e106      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802153e:	68fb      	ldr	r3, [r7, #12]
 8021540:	685b      	ldr	r3, [r3, #4]
 8021542:	627b      	str	r3, [r7, #36]	; 0x24
 8021544:	e068      	b.n	8021618 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021548:	685b      	ldr	r3, [r3, #4]
 802154a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 802154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802154e:	889b      	ldrh	r3, [r3, #4]
 8021550:	b29a      	uxth	r2, r3
 8021552:	693b      	ldr	r3, [r7, #16]
 8021554:	889b      	ldrh	r3, [r3, #4]
 8021556:	b29b      	uxth	r3, r3
 8021558:	429a      	cmp	r2, r3
 802155a:	d235      	bcs.n	80215c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 802155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021560:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021564:	2b00      	cmp	r3, #0
 8021566:	d020      	beq.n	80215aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802156a:	889b      	ldrh	r3, [r3, #4]
 802156c:	b29a      	uxth	r2, r3
 802156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021570:	88db      	ldrh	r3, [r3, #6]
 8021572:	b29b      	uxth	r3, r3
 8021574:	429a      	cmp	r2, r3
 8021576:	d307      	bcc.n	8021588 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802157a:	88db      	ldrh	r3, [r3, #6]
 802157c:	b29a      	uxth	r2, r3
 802157e:	693b      	ldr	r3, [r7, #16]
 8021580:	889b      	ldrh	r3, [r3, #4]
 8021582:	b29b      	uxth	r3, r3
 8021584:	429a      	cmp	r2, r3
 8021586:	d902      	bls.n	802158e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021588:	f04f 33ff 	mov.w	r3, #4294967295
 802158c:	e0de      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021590:	68ba      	ldr	r2, [r7, #8]
 8021592:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021596:	88db      	ldrh	r3, [r3, #6]
 8021598:	b29a      	uxth	r2, r3
 802159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802159c:	889b      	ldrh	r3, [r3, #4]
 802159e:	b29b      	uxth	r3, r3
 80215a0:	429a      	cmp	r2, r3
 80215a2:	d03d      	beq.n	8021620 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80215a4:	2300      	movs	r3, #0
 80215a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80215a8:	e03a      	b.n	8021620 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80215aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215ac:	88db      	ldrh	r3, [r3, #6]
 80215ae:	b29a      	uxth	r2, r3
 80215b0:	693b      	ldr	r3, [r7, #16]
 80215b2:	889b      	ldrh	r3, [r3, #4]
 80215b4:	b29b      	uxth	r3, r3
 80215b6:	429a      	cmp	r2, r3
 80215b8:	d902      	bls.n	80215c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80215ba:	f04f 33ff 	mov.w	r3, #4294967295
 80215be:	e0c5      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80215c0:	68fb      	ldr	r3, [r7, #12]
 80215c2:	68ba      	ldr	r2, [r7, #8]
 80215c4:	605a      	str	r2, [r3, #4]
      break;
 80215c6:	e02b      	b.n	8021620 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80215c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215ca:	889b      	ldrh	r3, [r3, #4]
 80215cc:	b29a      	uxth	r2, r3
 80215ce:	693b      	ldr	r3, [r7, #16]
 80215d0:	889b      	ldrh	r3, [r3, #4]
 80215d2:	b29b      	uxth	r3, r3
 80215d4:	429a      	cmp	r2, r3
 80215d6:	d102      	bne.n	80215de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80215d8:	f04f 33ff 	mov.w	r3, #4294967295
 80215dc:	e0b6      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80215de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215e0:	889b      	ldrh	r3, [r3, #4]
 80215e2:	b29a      	uxth	r2, r3
 80215e4:	693b      	ldr	r3, [r7, #16]
 80215e6:	88db      	ldrh	r3, [r3, #6]
 80215e8:	b29b      	uxth	r3, r3
 80215ea:	429a      	cmp	r2, r3
 80215ec:	d202      	bcs.n	80215f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80215ee:	f04f 33ff 	mov.w	r3, #4294967295
 80215f2:	e0ab      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80215f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d009      	beq.n	802160e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80215fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215fc:	88db      	ldrh	r3, [r3, #6]
 80215fe:	b29a      	uxth	r2, r3
 8021600:	693b      	ldr	r3, [r7, #16]
 8021602:	889b      	ldrh	r3, [r3, #4]
 8021604:	b29b      	uxth	r3, r3
 8021606:	429a      	cmp	r2, r3
 8021608:	d001      	beq.n	802160e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802160a:	2300      	movs	r3, #0
 802160c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802160e:	693b      	ldr	r3, [r7, #16]
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021614:	693b      	ldr	r3, [r7, #16]
 8021616:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802161a:	2b00      	cmp	r3, #0
 802161c:	d193      	bne.n	8021546 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802161e:	e000      	b.n	8021622 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021620:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021624:	2b00      	cmp	r3, #0
 8021626:	d12d      	bne.n	8021684 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802162a:	2b00      	cmp	r3, #0
 802162c:	d01c      	beq.n	8021668 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021630:	88db      	ldrh	r3, [r3, #6]
 8021632:	b29a      	uxth	r2, r3
 8021634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021636:	889b      	ldrh	r3, [r3, #4]
 8021638:	b29b      	uxth	r3, r3
 802163a:	429a      	cmp	r2, r3
 802163c:	d906      	bls.n	802164c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802163e:	4b45      	ldr	r3, [pc, #276]	; (8021754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021640:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021644:	4944      	ldr	r1, [pc, #272]	; (8021758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021646:	4845      	ldr	r0, [pc, #276]	; (802175c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021648:	f000 fdf4 	bl	8022234 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 802164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802164e:	68ba      	ldr	r2, [r7, #8]
 8021650:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021654:	88db      	ldrh	r3, [r3, #6]
 8021656:	b29a      	uxth	r2, r3
 8021658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802165a:	889b      	ldrh	r3, [r3, #4]
 802165c:	b29b      	uxth	r3, r3
 802165e:	429a      	cmp	r2, r3
 8021660:	d010      	beq.n	8021684 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021662:	2300      	movs	r3, #0
 8021664:	623b      	str	r3, [r7, #32]
 8021666:	e00d      	b.n	8021684 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021668:	68fb      	ldr	r3, [r7, #12]
 802166a:	685b      	ldr	r3, [r3, #4]
 802166c:	2b00      	cmp	r3, #0
 802166e:	d006      	beq.n	802167e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021670:	4b38      	ldr	r3, [pc, #224]	; (8021754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021672:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021676:	493a      	ldr	r1, [pc, #232]	; (8021760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021678:	4838      	ldr	r0, [pc, #224]	; (802175c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802167a:	f000 fddb 	bl	8022234 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	68ba      	ldr	r2, [r7, #8]
 8021682:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d105      	bne.n	8021696 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	7f9b      	ldrb	r3, [r3, #30]
 802168e:	f003 0301 	and.w	r3, r3, #1
 8021692:	2b00      	cmp	r3, #0
 8021694:	d059      	beq.n	802174a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021696:	6a3b      	ldr	r3, [r7, #32]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d04f      	beq.n	802173c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 802169c:	68fb      	ldr	r3, [r7, #12]
 802169e:	685b      	ldr	r3, [r3, #4]
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	d006      	beq.n	80216b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80216a4:	68fb      	ldr	r3, [r7, #12]
 80216a6:	685b      	ldr	r3, [r3, #4]
 80216a8:	685b      	ldr	r3, [r3, #4]
 80216aa:	889b      	ldrh	r3, [r3, #4]
 80216ac:	b29b      	uxth	r3, r3
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d002      	beq.n	80216b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80216b2:	2300      	movs	r3, #0
 80216b4:	623b      	str	r3, [r7, #32]
 80216b6:	e041      	b.n	802173c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80216b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80216bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80216c2:	e012      	b.n	80216ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80216c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216c6:	685b      	ldr	r3, [r3, #4]
 80216c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80216ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216cc:	88db      	ldrh	r3, [r3, #6]
 80216ce:	b29a      	uxth	r2, r3
 80216d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216d2:	889b      	ldrh	r3, [r3, #4]
 80216d4:	b29b      	uxth	r3, r3
 80216d6:	429a      	cmp	r2, r3
 80216d8:	d002      	beq.n	80216e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80216da:	2300      	movs	r3, #0
 80216dc:	623b      	str	r3, [r7, #32]
            break;
 80216de:	e007      	b.n	80216f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80216e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80216e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80216ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d1e9      	bne.n	80216c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80216f0:	6a3b      	ldr	r3, [r7, #32]
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d022      	beq.n	802173c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	685b      	ldr	r3, [r3, #4]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d106      	bne.n	802170c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80216fe:	4b15      	ldr	r3, [pc, #84]	; (8021754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021700:	f240 12df 	movw	r2, #479	; 0x1df
 8021704:	4917      	ldr	r1, [pc, #92]	; (8021764 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021706:	4815      	ldr	r0, [pc, #84]	; (802175c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021708:	f000 fd94 	bl	8022234 <iprintf>
          LWIP_ASSERT("sanity check",
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	685b      	ldr	r3, [r3, #4]
 8021710:	685b      	ldr	r3, [r3, #4]
 8021712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021714:	429a      	cmp	r2, r3
 8021716:	d106      	bne.n	8021726 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021718:	4b0e      	ldr	r3, [pc, #56]	; (8021754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802171a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802171e:	4911      	ldr	r1, [pc, #68]	; (8021764 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021720:	480e      	ldr	r0, [pc, #56]	; (802175c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021722:	f000 fd87 	bl	8022234 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d006      	beq.n	802173c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802172e:	4b09      	ldr	r3, [pc, #36]	; (8021754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021730:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021734:	490c      	ldr	r1, [pc, #48]	; (8021768 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021736:	4809      	ldr	r0, [pc, #36]	; (802175c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021738:	f000 fd7c 	bl	8022234 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 802173c:	6a3b      	ldr	r3, [r7, #32]
 802173e:	2b00      	cmp	r3, #0
 8021740:	bf14      	ite	ne
 8021742:	2301      	movne	r3, #1
 8021744:	2300      	moveq	r3, #0
 8021746:	b2db      	uxtb	r3, r3
 8021748:	e000      	b.n	802174c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802174a:	2300      	movs	r3, #0
}
 802174c:	4618      	mov	r0, r3
 802174e:	3730      	adds	r7, #48	; 0x30
 8021750:	46bd      	mov	sp, r7
 8021752:	bd80      	pop	{r7, pc}
 8021754:	080283c8 	.word	0x080283c8
 8021758:	080284ac 	.word	0x080284ac
 802175c:	08028410 	.word	0x08028410
 8021760:	080284cc 	.word	0x080284cc
 8021764:	08028504 	.word	0x08028504
 8021768:	08028514 	.word	0x08028514

0802176c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 802176c:	b580      	push	{r7, lr}
 802176e:	b08e      	sub	sp, #56	; 0x38
 8021770:	af00      	add	r7, sp, #0
 8021772:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	685b      	ldr	r3, [r3, #4]
 8021778:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802177c:	781b      	ldrb	r3, [r3, #0]
 802177e:	f003 030f 	and.w	r3, r3, #15
 8021782:	b2db      	uxtb	r3, r3
 8021784:	009b      	lsls	r3, r3, #2
 8021786:	b2db      	uxtb	r3, r3
 8021788:	2b14      	cmp	r3, #20
 802178a:	f040 8171 	bne.w	8021a70 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021790:	88db      	ldrh	r3, [r3, #6]
 8021792:	b29b      	uxth	r3, r3
 8021794:	4618      	mov	r0, r3
 8021796:	f7fb fc39 	bl	801d00c <lwip_htons>
 802179a:	4603      	mov	r3, r0
 802179c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80217a0:	b29b      	uxth	r3, r3
 80217a2:	00db      	lsls	r3, r3, #3
 80217a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80217a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217a8:	885b      	ldrh	r3, [r3, #2]
 80217aa:	b29b      	uxth	r3, r3
 80217ac:	4618      	mov	r0, r3
 80217ae:	f7fb fc2d 	bl	801d00c <lwip_htons>
 80217b2:	4603      	mov	r3, r0
 80217b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80217b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b8:	781b      	ldrb	r3, [r3, #0]
 80217ba:	f003 030f 	and.w	r3, r3, #15
 80217be:	b2db      	uxtb	r3, r3
 80217c0:	009b      	lsls	r3, r3, #2
 80217c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80217c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80217ca:	b29b      	uxth	r3, r3
 80217cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80217ce:	429a      	cmp	r2, r3
 80217d0:	f0c0 8150 	bcc.w	8021a74 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80217d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80217d8:	b29b      	uxth	r3, r3
 80217da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80217dc:	1ad3      	subs	r3, r2, r3
 80217de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80217e0:	6878      	ldr	r0, [r7, #4]
 80217e2:	f7fd f877 	bl	801e8d4 <pbuf_clen>
 80217e6:	4603      	mov	r3, r0
 80217e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80217ea:	4b8c      	ldr	r3, [pc, #560]	; (8021a1c <ip4_reass+0x2b0>)
 80217ec:	881b      	ldrh	r3, [r3, #0]
 80217ee:	461a      	mov	r2, r3
 80217f0:	8c3b      	ldrh	r3, [r7, #32]
 80217f2:	4413      	add	r3, r2
 80217f4:	2b0a      	cmp	r3, #10
 80217f6:	dd10      	ble.n	802181a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80217f8:	8c3b      	ldrh	r3, [r7, #32]
 80217fa:	4619      	mov	r1, r3
 80217fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80217fe:	f7ff fd81 	bl	8021304 <ip_reass_remove_oldest_datagram>
 8021802:	4603      	mov	r3, r0
 8021804:	2b00      	cmp	r3, #0
 8021806:	f000 8137 	beq.w	8021a78 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802180a:	4b84      	ldr	r3, [pc, #528]	; (8021a1c <ip4_reass+0x2b0>)
 802180c:	881b      	ldrh	r3, [r3, #0]
 802180e:	461a      	mov	r2, r3
 8021810:	8c3b      	ldrh	r3, [r7, #32]
 8021812:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021814:	2b0a      	cmp	r3, #10
 8021816:	f300 812f 	bgt.w	8021a78 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802181a:	4b81      	ldr	r3, [pc, #516]	; (8021a20 <ip4_reass+0x2b4>)
 802181c:	681b      	ldr	r3, [r3, #0]
 802181e:	633b      	str	r3, [r7, #48]	; 0x30
 8021820:	e015      	b.n	802184e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021824:	695a      	ldr	r2, [r3, #20]
 8021826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021828:	68db      	ldr	r3, [r3, #12]
 802182a:	429a      	cmp	r2, r3
 802182c:	d10c      	bne.n	8021848 <ip4_reass+0xdc>
 802182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021830:	699a      	ldr	r2, [r3, #24]
 8021832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021834:	691b      	ldr	r3, [r3, #16]
 8021836:	429a      	cmp	r2, r3
 8021838:	d106      	bne.n	8021848 <ip4_reass+0xdc>
 802183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802183c:	899a      	ldrh	r2, [r3, #12]
 802183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021840:	889b      	ldrh	r3, [r3, #4]
 8021842:	b29b      	uxth	r3, r3
 8021844:	429a      	cmp	r2, r3
 8021846:	d006      	beq.n	8021856 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	633b      	str	r3, [r7, #48]	; 0x30
 802184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021850:	2b00      	cmp	r3, #0
 8021852:	d1e6      	bne.n	8021822 <ip4_reass+0xb6>
 8021854:	e000      	b.n	8021858 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021856:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802185a:	2b00      	cmp	r3, #0
 802185c:	d109      	bne.n	8021872 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802185e:	8c3b      	ldrh	r3, [r7, #32]
 8021860:	4619      	mov	r1, r3
 8021862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021864:	f7ff fdb0 	bl	80213c8 <ip_reass_enqueue_new_datagram>
 8021868:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802186c:	2b00      	cmp	r3, #0
 802186e:	d11c      	bne.n	80218aa <ip4_reass+0x13e>
      goto nullreturn;
 8021870:	e105      	b.n	8021a7e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021874:	88db      	ldrh	r3, [r3, #6]
 8021876:	b29b      	uxth	r3, r3
 8021878:	4618      	mov	r0, r3
 802187a:	f7fb fbc7 	bl	801d00c <lwip_htons>
 802187e:	4603      	mov	r3, r0
 8021880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021884:	2b00      	cmp	r3, #0
 8021886:	d110      	bne.n	80218aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802188a:	89db      	ldrh	r3, [r3, #14]
 802188c:	4618      	mov	r0, r3
 802188e:	f7fb fbbd 	bl	801d00c <lwip_htons>
 8021892:	4603      	mov	r3, r0
 8021894:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021898:	2b00      	cmp	r3, #0
 802189a:	d006      	beq.n	80218aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802189e:	3308      	adds	r3, #8
 80218a0:	2214      	movs	r2, #20
 80218a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80218a4:	4618      	mov	r0, r3
 80218a6:	f000 fbb5 	bl	8022014 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80218aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218ac:	88db      	ldrh	r3, [r3, #6]
 80218ae:	b29b      	uxth	r3, r3
 80218b0:	f003 0320 	and.w	r3, r3, #32
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	bf0c      	ite	eq
 80218b8:	2301      	moveq	r3, #1
 80218ba:	2300      	movne	r3, #0
 80218bc:	b2db      	uxtb	r3, r3
 80218be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80218c0:	69fb      	ldr	r3, [r7, #28]
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d00e      	beq.n	80218e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80218c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80218c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80218ca:	4413      	add	r3, r2
 80218cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80218ce:	8b7a      	ldrh	r2, [r7, #26]
 80218d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80218d2:	429a      	cmp	r2, r3
 80218d4:	f0c0 80a0 	bcc.w	8021a18 <ip4_reass+0x2ac>
 80218d8:	8b7b      	ldrh	r3, [r7, #26]
 80218da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80218de:	4293      	cmp	r3, r2
 80218e0:	f200 809a 	bhi.w	8021a18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80218e4:	69fa      	ldr	r2, [r7, #28]
 80218e6:	6879      	ldr	r1, [r7, #4]
 80218e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80218ea:	f7ff fdd5 	bl	8021498 <ip_reass_chain_frag_into_datagram_and_validate>
 80218ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80218f0:	697b      	ldr	r3, [r7, #20]
 80218f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218f6:	f000 809b 	beq.w	8021a30 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80218fa:	4b48      	ldr	r3, [pc, #288]	; (8021a1c <ip4_reass+0x2b0>)
 80218fc:	881a      	ldrh	r2, [r3, #0]
 80218fe:	8c3b      	ldrh	r3, [r7, #32]
 8021900:	4413      	add	r3, r2
 8021902:	b29a      	uxth	r2, r3
 8021904:	4b45      	ldr	r3, [pc, #276]	; (8021a1c <ip4_reass+0x2b0>)
 8021906:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021908:	69fb      	ldr	r3, [r7, #28]
 802190a:	2b00      	cmp	r3, #0
 802190c:	d00d      	beq.n	802192a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802190e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021912:	4413      	add	r3, r2
 8021914:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021918:	8a7a      	ldrh	r2, [r7, #18]
 802191a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802191e:	7f9b      	ldrb	r3, [r3, #30]
 8021920:	f043 0301 	orr.w	r3, r3, #1
 8021924:	b2da      	uxtb	r2, r3
 8021926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021928:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802192a:	697b      	ldr	r3, [r7, #20]
 802192c:	2b01      	cmp	r3, #1
 802192e:	d171      	bne.n	8021a14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021932:	8b9b      	ldrh	r3, [r3, #28]
 8021934:	3314      	adds	r3, #20
 8021936:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802193a:	685b      	ldr	r3, [r3, #4]
 802193c:	685b      	ldr	r3, [r3, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021944:	685b      	ldr	r3, [r3, #4]
 8021946:	685b      	ldr	r3, [r3, #4]
 8021948:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802194c:	3308      	adds	r3, #8
 802194e:	2214      	movs	r2, #20
 8021950:	4619      	mov	r1, r3
 8021952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021954:	f000 fb5e 	bl	8022014 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021958:	8a3b      	ldrh	r3, [r7, #16]
 802195a:	4618      	mov	r0, r3
 802195c:	f7fb fb56 	bl	801d00c <lwip_htons>
 8021960:	4603      	mov	r3, r0
 8021962:	461a      	mov	r2, r3
 8021964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021966:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802196a:	2200      	movs	r2, #0
 802196c:	719a      	strb	r2, [r3, #6]
 802196e:	2200      	movs	r2, #0
 8021970:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021974:	2200      	movs	r2, #0
 8021976:	729a      	strb	r2, [r3, #10]
 8021978:	2200      	movs	r2, #0
 802197a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802197e:	685b      	ldr	r3, [r3, #4]
 8021980:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021982:	e00d      	b.n	80219a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021986:	685b      	ldr	r3, [r3, #4]
 8021988:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802198a:	2114      	movs	r1, #20
 802198c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802198e:	f7fc fe93 	bl	801e6b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021994:	6878      	ldr	r0, [r7, #4]
 8021996:	f7fc ffd7 	bl	801e948 <pbuf_cat>
      r = iprh->next_pbuf;
 802199a:	68fb      	ldr	r3, [r7, #12]
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80219a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	d1ee      	bne.n	8021984 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80219a6:	4b1e      	ldr	r3, [pc, #120]	; (8021a20 <ip4_reass+0x2b4>)
 80219a8:	681b      	ldr	r3, [r3, #0]
 80219aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219ac:	429a      	cmp	r2, r3
 80219ae:	d102      	bne.n	80219b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80219b0:	2300      	movs	r3, #0
 80219b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80219b4:	e010      	b.n	80219d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80219b6:	4b1a      	ldr	r3, [pc, #104]	; (8021a20 <ip4_reass+0x2b4>)
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80219bc:	e007      	b.n	80219ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80219be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219c0:	681b      	ldr	r3, [r3, #0]
 80219c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219c4:	429a      	cmp	r2, r3
 80219c6:	d006      	beq.n	80219d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80219c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80219ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d1f4      	bne.n	80219be <ip4_reass+0x252>
 80219d4:	e000      	b.n	80219d8 <ip4_reass+0x26c>
          break;
 80219d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80219d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80219da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80219dc:	f7ff fd2e 	bl	802143c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80219e0:	6878      	ldr	r0, [r7, #4]
 80219e2:	f7fc ff77 	bl	801e8d4 <pbuf_clen>
 80219e6:	4603      	mov	r3, r0
 80219e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80219ea:	4b0c      	ldr	r3, [pc, #48]	; (8021a1c <ip4_reass+0x2b0>)
 80219ec:	881b      	ldrh	r3, [r3, #0]
 80219ee:	8c3a      	ldrh	r2, [r7, #32]
 80219f0:	429a      	cmp	r2, r3
 80219f2:	d906      	bls.n	8021a02 <ip4_reass+0x296>
 80219f4:	4b0b      	ldr	r3, [pc, #44]	; (8021a24 <ip4_reass+0x2b8>)
 80219f6:	f240 229b 	movw	r2, #667	; 0x29b
 80219fa:	490b      	ldr	r1, [pc, #44]	; (8021a28 <ip4_reass+0x2bc>)
 80219fc:	480b      	ldr	r0, [pc, #44]	; (8021a2c <ip4_reass+0x2c0>)
 80219fe:	f000 fc19 	bl	8022234 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021a02:	4b06      	ldr	r3, [pc, #24]	; (8021a1c <ip4_reass+0x2b0>)
 8021a04:	881a      	ldrh	r2, [r3, #0]
 8021a06:	8c3b      	ldrh	r3, [r7, #32]
 8021a08:	1ad3      	subs	r3, r2, r3
 8021a0a:	b29a      	uxth	r2, r3
 8021a0c:	4b03      	ldr	r3, [pc, #12]	; (8021a1c <ip4_reass+0x2b0>)
 8021a0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	e038      	b.n	8021a86 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021a14:	2300      	movs	r3, #0
 8021a16:	e036      	b.n	8021a86 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021a18:	bf00      	nop
 8021a1a:	e00a      	b.n	8021a32 <ip4_reass+0x2c6>
 8021a1c:	20014308 	.word	0x20014308
 8021a20:	20014304 	.word	0x20014304
 8021a24:	080283c8 	.word	0x080283c8
 8021a28:	08028538 	.word	0x08028538
 8021a2c:	08028410 	.word	0x08028410
    goto nullreturn_ipr;
 8021a30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d106      	bne.n	8021a46 <ip4_reass+0x2da>
 8021a38:	4b15      	ldr	r3, [pc, #84]	; (8021a90 <ip4_reass+0x324>)
 8021a3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021a3e:	4915      	ldr	r1, [pc, #84]	; (8021a94 <ip4_reass+0x328>)
 8021a40:	4815      	ldr	r0, [pc, #84]	; (8021a98 <ip4_reass+0x32c>)
 8021a42:	f000 fbf7 	bl	8022234 <iprintf>
  if (ipr->p == NULL) {
 8021a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a48:	685b      	ldr	r3, [r3, #4]
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d116      	bne.n	8021a7c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021a4e:	4b13      	ldr	r3, [pc, #76]	; (8021a9c <ip4_reass+0x330>)
 8021a50:	681b      	ldr	r3, [r3, #0]
 8021a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a54:	429a      	cmp	r2, r3
 8021a56:	d006      	beq.n	8021a66 <ip4_reass+0x2fa>
 8021a58:	4b0d      	ldr	r3, [pc, #52]	; (8021a90 <ip4_reass+0x324>)
 8021a5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021a5e:	4910      	ldr	r1, [pc, #64]	; (8021aa0 <ip4_reass+0x334>)
 8021a60:	480d      	ldr	r0, [pc, #52]	; (8021a98 <ip4_reass+0x32c>)
 8021a62:	f000 fbe7 	bl	8022234 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021a66:	2100      	movs	r1, #0
 8021a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021a6a:	f7ff fce7 	bl	802143c <ip_reass_dequeue_datagram>
 8021a6e:	e006      	b.n	8021a7e <ip4_reass+0x312>
    goto nullreturn;
 8021a70:	bf00      	nop
 8021a72:	e004      	b.n	8021a7e <ip4_reass+0x312>
    goto nullreturn;
 8021a74:	bf00      	nop
 8021a76:	e002      	b.n	8021a7e <ip4_reass+0x312>
      goto nullreturn;
 8021a78:	bf00      	nop
 8021a7a:	e000      	b.n	8021a7e <ip4_reass+0x312>
  }

nullreturn:
 8021a7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021a7e:	6878      	ldr	r0, [r7, #4]
 8021a80:	f7fc fea0 	bl	801e7c4 <pbuf_free>
  return NULL;
 8021a84:	2300      	movs	r3, #0
}
 8021a86:	4618      	mov	r0, r3
 8021a88:	3738      	adds	r7, #56	; 0x38
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	bd80      	pop	{r7, pc}
 8021a8e:	bf00      	nop
 8021a90:	080283c8 	.word	0x080283c8
 8021a94:	08028554 	.word	0x08028554
 8021a98:	08028410 	.word	0x08028410
 8021a9c:	20014304 	.word	0x20014304
 8021aa0:	08028560 	.word	0x08028560

08021aa4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021aa8:	2002      	movs	r0, #2
 8021aaa:	f7fb ff0b 	bl	801d8c4 <memp_malloc>
 8021aae:	4603      	mov	r3, r0
}
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	bd80      	pop	{r7, pc}

08021ab4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021ab4:	b580      	push	{r7, lr}
 8021ab6:	b082      	sub	sp, #8
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d106      	bne.n	8021ad0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021ac2:	4b07      	ldr	r3, [pc, #28]	; (8021ae0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021ac4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8021ac8:	4906      	ldr	r1, [pc, #24]	; (8021ae4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8021aca:	4807      	ldr	r0, [pc, #28]	; (8021ae8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021acc:	f000 fbb2 	bl	8022234 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021ad0:	6879      	ldr	r1, [r7, #4]
 8021ad2:	2002      	movs	r0, #2
 8021ad4:	f7fb ff66 	bl	801d9a4 <memp_free>
}
 8021ad8:	bf00      	nop
 8021ada:	3708      	adds	r7, #8
 8021adc:	46bd      	mov	sp, r7
 8021ade:	bd80      	pop	{r7, pc}
 8021ae0:	080283c8 	.word	0x080283c8
 8021ae4:	08028580 	.word	0x08028580
 8021ae8:	08028410 	.word	0x08028410

08021aec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021aec:	b580      	push	{r7, lr}
 8021aee:	b084      	sub	sp, #16
 8021af0:	af00      	add	r7, sp, #0
 8021af2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021af8:	68fb      	ldr	r3, [r7, #12]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d106      	bne.n	8021b0c <ipfrag_free_pbuf_custom+0x20>
 8021afe:	4b11      	ldr	r3, [pc, #68]	; (8021b44 <ipfrag_free_pbuf_custom+0x58>)
 8021b00:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021b04:	4910      	ldr	r1, [pc, #64]	; (8021b48 <ipfrag_free_pbuf_custom+0x5c>)
 8021b06:	4811      	ldr	r0, [pc, #68]	; (8021b4c <ipfrag_free_pbuf_custom+0x60>)
 8021b08:	f000 fb94 	bl	8022234 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021b0c:	68fa      	ldr	r2, [r7, #12]
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d006      	beq.n	8021b22 <ipfrag_free_pbuf_custom+0x36>
 8021b14:	4b0b      	ldr	r3, [pc, #44]	; (8021b44 <ipfrag_free_pbuf_custom+0x58>)
 8021b16:	f240 22cf 	movw	r2, #719	; 0x2cf
 8021b1a:	490d      	ldr	r1, [pc, #52]	; (8021b50 <ipfrag_free_pbuf_custom+0x64>)
 8021b1c:	480b      	ldr	r0, [pc, #44]	; (8021b4c <ipfrag_free_pbuf_custom+0x60>)
 8021b1e:	f000 fb89 	bl	8022234 <iprintf>
  if (pcr->original != NULL) {
 8021b22:	68fb      	ldr	r3, [r7, #12]
 8021b24:	695b      	ldr	r3, [r3, #20]
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	d004      	beq.n	8021b34 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8021b2a:	68fb      	ldr	r3, [r7, #12]
 8021b2c:	695b      	ldr	r3, [r3, #20]
 8021b2e:	4618      	mov	r0, r3
 8021b30:	f7fc fe48 	bl	801e7c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021b34:	68f8      	ldr	r0, [r7, #12]
 8021b36:	f7ff ffbd 	bl	8021ab4 <ip_frag_free_pbuf_custom_ref>
}
 8021b3a:	bf00      	nop
 8021b3c:	3710      	adds	r7, #16
 8021b3e:	46bd      	mov	sp, r7
 8021b40:	bd80      	pop	{r7, pc}
 8021b42:	bf00      	nop
 8021b44:	080283c8 	.word	0x080283c8
 8021b48:	0802858c 	.word	0x0802858c
 8021b4c:	08028410 	.word	0x08028410
 8021b50:	08028598 	.word	0x08028598

08021b54 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b094      	sub	sp, #80	; 0x50
 8021b58:	af02      	add	r7, sp, #8
 8021b5a:	60f8      	str	r0, [r7, #12]
 8021b5c:	60b9      	str	r1, [r7, #8]
 8021b5e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021b60:	2300      	movs	r3, #0
 8021b62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021b66:	68bb      	ldr	r3, [r7, #8]
 8021b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021b6a:	3b14      	subs	r3, #20
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	da00      	bge.n	8021b72 <ip4_frag+0x1e>
 8021b70:	3307      	adds	r3, #7
 8021b72:	10db      	asrs	r3, r3, #3
 8021b74:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8021b76:	2314      	movs	r3, #20
 8021b78:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	685b      	ldr	r3, [r3, #4]
 8021b7e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021b82:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b86:	781b      	ldrb	r3, [r3, #0]
 8021b88:	f003 030f 	and.w	r3, r3, #15
 8021b8c:	b2db      	uxtb	r3, r3
 8021b8e:	009b      	lsls	r3, r3, #2
 8021b90:	b2db      	uxtb	r3, r3
 8021b92:	2b14      	cmp	r3, #20
 8021b94:	d002      	beq.n	8021b9c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8021b96:	f06f 0305 	mvn.w	r3, #5
 8021b9a:	e110      	b.n	8021dbe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021b9c:	68fb      	ldr	r3, [r7, #12]
 8021b9e:	895b      	ldrh	r3, [r3, #10]
 8021ba0:	2b13      	cmp	r3, #19
 8021ba2:	d809      	bhi.n	8021bb8 <ip4_frag+0x64>
 8021ba4:	4b88      	ldr	r3, [pc, #544]	; (8021dc8 <ip4_frag+0x274>)
 8021ba6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021baa:	4988      	ldr	r1, [pc, #544]	; (8021dcc <ip4_frag+0x278>)
 8021bac:	4888      	ldr	r0, [pc, #544]	; (8021dd0 <ip4_frag+0x27c>)
 8021bae:	f000 fb41 	bl	8022234 <iprintf>
 8021bb2:	f06f 0305 	mvn.w	r3, #5
 8021bb6:	e102      	b.n	8021dbe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8021bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bba:	88db      	ldrh	r3, [r3, #6]
 8021bbc:	b29b      	uxth	r3, r3
 8021bbe:	4618      	mov	r0, r3
 8021bc0:	f7fb fa24 	bl	801d00c <lwip_htons>
 8021bc4:	4603      	mov	r3, r0
 8021bc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8021bc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021bd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021bda:	68fb      	ldr	r3, [r7, #12]
 8021bdc:	891b      	ldrh	r3, [r3, #8]
 8021bde:	3b14      	subs	r3, #20
 8021be0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021be4:	e0e1      	b.n	8021daa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021be6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021be8:	00db      	lsls	r3, r3, #3
 8021bea:	b29b      	uxth	r3, r3
 8021bec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021bf0:	4293      	cmp	r3, r2
 8021bf2:	bf28      	it	cs
 8021bf4:	4613      	movcs	r3, r2
 8021bf6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021bf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021bfc:	2114      	movs	r1, #20
 8021bfe:	200e      	movs	r0, #14
 8021c00:	f7fc fafe 	bl	801e200 <pbuf_alloc>
 8021c04:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8021c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	f000 80d5 	beq.w	8021db8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c10:	895b      	ldrh	r3, [r3, #10]
 8021c12:	2b13      	cmp	r3, #19
 8021c14:	d806      	bhi.n	8021c24 <ip4_frag+0xd0>
 8021c16:	4b6c      	ldr	r3, [pc, #432]	; (8021dc8 <ip4_frag+0x274>)
 8021c18:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021c1c:	496d      	ldr	r1, [pc, #436]	; (8021dd4 <ip4_frag+0x280>)
 8021c1e:	486c      	ldr	r0, [pc, #432]	; (8021dd0 <ip4_frag+0x27c>)
 8021c20:	f000 fb08 	bl	8022234 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c26:	685b      	ldr	r3, [r3, #4]
 8021c28:	2214      	movs	r2, #20
 8021c2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	f000 f9f1 	bl	8022014 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8021c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c34:	685b      	ldr	r3, [r3, #4]
 8021c36:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8021c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021c3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021c3e:	e064      	b.n	8021d0a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021c40:	68fb      	ldr	r3, [r7, #12]
 8021c42:	895a      	ldrh	r2, [r3, #10]
 8021c44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021c46:	1ad3      	subs	r3, r2, r3
 8021c48:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8021c4a:	68fb      	ldr	r3, [r7, #12]
 8021c4c:	895b      	ldrh	r3, [r3, #10]
 8021c4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021c50:	429a      	cmp	r2, r3
 8021c52:	d906      	bls.n	8021c62 <ip4_frag+0x10e>
 8021c54:	4b5c      	ldr	r3, [pc, #368]	; (8021dc8 <ip4_frag+0x274>)
 8021c56:	f240 322d 	movw	r2, #813	; 0x32d
 8021c5a:	495f      	ldr	r1, [pc, #380]	; (8021dd8 <ip4_frag+0x284>)
 8021c5c:	485c      	ldr	r0, [pc, #368]	; (8021dd0 <ip4_frag+0x27c>)
 8021c5e:	f000 fae9 	bl	8022234 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8021c62:	8bfa      	ldrh	r2, [r7, #30]
 8021c64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021c68:	4293      	cmp	r3, r2
 8021c6a:	bf28      	it	cs
 8021c6c:	4613      	movcs	r3, r2
 8021c6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021c72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021c76:	2b00      	cmp	r3, #0
 8021c78:	d105      	bne.n	8021c86 <ip4_frag+0x132>
        poff = 0;
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021c7e:	68fb      	ldr	r3, [r7, #12]
 8021c80:	681b      	ldr	r3, [r3, #0]
 8021c82:	60fb      	str	r3, [r7, #12]
        continue;
 8021c84:	e041      	b.n	8021d0a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8021c86:	f7ff ff0d 	bl	8021aa4 <ip_frag_alloc_pbuf_custom_ref>
 8021c8a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021c8c:	69bb      	ldr	r3, [r7, #24]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d103      	bne.n	8021c9a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8021c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021c94:	f7fc fd96 	bl	801e7c4 <pbuf_free>
        goto memerr;
 8021c98:	e08f      	b.n	8021dba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021c9a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8021c9c:	68fb      	ldr	r3, [r7, #12]
 8021c9e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021ca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021ca2:	4413      	add	r3, r2
 8021ca4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8021ca8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021cac:	9201      	str	r2, [sp, #4]
 8021cae:	9300      	str	r3, [sp, #0]
 8021cb0:	4603      	mov	r3, r0
 8021cb2:	2241      	movs	r2, #65	; 0x41
 8021cb4:	2000      	movs	r0, #0
 8021cb6:	f7fc fbcb 	bl	801e450 <pbuf_alloced_custom>
 8021cba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021cbc:	697b      	ldr	r3, [r7, #20]
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d106      	bne.n	8021cd0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021cc2:	69b8      	ldr	r0, [r7, #24]
 8021cc4:	f7ff fef6 	bl	8021ab4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021cca:	f7fc fd7b 	bl	801e7c4 <pbuf_free>
        goto memerr;
 8021cce:	e074      	b.n	8021dba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021cd0:	68f8      	ldr	r0, [r7, #12]
 8021cd2:	f7fc fe17 	bl	801e904 <pbuf_ref>
      pcr->original = p;
 8021cd6:	69bb      	ldr	r3, [r7, #24]
 8021cd8:	68fa      	ldr	r2, [r7, #12]
 8021cda:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021cdc:	69bb      	ldr	r3, [r7, #24]
 8021cde:	4a3f      	ldr	r2, [pc, #252]	; (8021ddc <ip4_frag+0x288>)
 8021ce0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8021ce2:	6979      	ldr	r1, [r7, #20]
 8021ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021ce6:	f7fc fe2f 	bl	801e948 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8021cea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021cee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021cf2:	1ad3      	subs	r3, r2, r3
 8021cf4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8021cf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d004      	beq.n	8021d0a <ip4_frag+0x1b6>
        poff = 0;
 8021d00:	2300      	movs	r3, #0
 8021d02:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021d04:	68fb      	ldr	r3, [r7, #12]
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8021d0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d196      	bne.n	8021c40 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8021d12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021d14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021d18:	4413      	add	r3, r2
 8021d1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8021d1c:	68bb      	ldr	r3, [r7, #8]
 8021d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021d20:	f1a3 0213 	sub.w	r2, r3, #19
 8021d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021d28:	429a      	cmp	r2, r3
 8021d2a:	bfcc      	ite	gt
 8021d2c:	2301      	movgt	r3, #1
 8021d2e:	2300      	movle	r3, #0
 8021d30:	b2db      	uxtb	r3, r3
 8021d32:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021d34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021d3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8021d3e:	6a3b      	ldr	r3, [r7, #32]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d002      	beq.n	8021d4a <ip4_frag+0x1f6>
 8021d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d003      	beq.n	8021d52 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8021d4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021d50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021d52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021d54:	4618      	mov	r0, r3
 8021d56:	f7fb f959 	bl	801d00c <lwip_htons>
 8021d5a:	4603      	mov	r3, r0
 8021d5c:	461a      	mov	r2, r3
 8021d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d60:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021d62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021d64:	3314      	adds	r3, #20
 8021d66:	b29b      	uxth	r3, r3
 8021d68:	4618      	mov	r0, r3
 8021d6a:	f7fb f94f 	bl	801d00c <lwip_htons>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	461a      	mov	r2, r3
 8021d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d74:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8021d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d78:	2200      	movs	r2, #0
 8021d7a:	729a      	strb	r2, [r3, #10]
 8021d7c:	2200      	movs	r2, #0
 8021d7e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8021d80:	68bb      	ldr	r3, [r7, #8]
 8021d82:	695b      	ldr	r3, [r3, #20]
 8021d84:	687a      	ldr	r2, [r7, #4]
 8021d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021d88:	68b8      	ldr	r0, [r7, #8]
 8021d8a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8021d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d8e:	f7fc fd19 	bl	801e7c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8021d92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021d96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021d98:	1ad3      	subs	r3, r2, r3
 8021d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8021d9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021da2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021da4:	4413      	add	r3, r2
 8021da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8021daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	f47f af19 	bne.w	8021be6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8021db4:	2300      	movs	r3, #0
 8021db6:	e002      	b.n	8021dbe <ip4_frag+0x26a>
      goto memerr;
 8021db8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8021dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021dbe:	4618      	mov	r0, r3
 8021dc0:	3748      	adds	r7, #72	; 0x48
 8021dc2:	46bd      	mov	sp, r7
 8021dc4:	bd80      	pop	{r7, pc}
 8021dc6:	bf00      	nop
 8021dc8:	080283c8 	.word	0x080283c8
 8021dcc:	080285a4 	.word	0x080285a4
 8021dd0:	08028410 	.word	0x08028410
 8021dd4:	080285c0 	.word	0x080285c0
 8021dd8:	080285e0 	.word	0x080285e0
 8021ddc:	08021aed 	.word	0x08021aed

08021de0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b086      	sub	sp, #24
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
 8021de8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8021dea:	230e      	movs	r3, #14
 8021dec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	895b      	ldrh	r3, [r3, #10]
 8021df2:	2b0e      	cmp	r3, #14
 8021df4:	d96e      	bls.n	8021ed4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	7bdb      	ldrb	r3, [r3, #15]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d106      	bne.n	8021e0c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021dfe:	683b      	ldr	r3, [r7, #0]
 8021e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e04:	3301      	adds	r3, #1
 8021e06:	b2da      	uxtb	r2, r3
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	685b      	ldr	r3, [r3, #4]
 8021e10:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021e12:	693b      	ldr	r3, [r7, #16]
 8021e14:	7b1a      	ldrb	r2, [r3, #12]
 8021e16:	7b5b      	ldrb	r3, [r3, #13]
 8021e18:	021b      	lsls	r3, r3, #8
 8021e1a:	4313      	orrs	r3, r2
 8021e1c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021e1e:	693b      	ldr	r3, [r7, #16]
 8021e20:	781b      	ldrb	r3, [r3, #0]
 8021e22:	f003 0301 	and.w	r3, r3, #1
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	d023      	beq.n	8021e72 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8021e2a:	693b      	ldr	r3, [r7, #16]
 8021e2c:	781b      	ldrb	r3, [r3, #0]
 8021e2e:	2b01      	cmp	r3, #1
 8021e30:	d10f      	bne.n	8021e52 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021e32:	693b      	ldr	r3, [r7, #16]
 8021e34:	785b      	ldrb	r3, [r3, #1]
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d11b      	bne.n	8021e72 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8021e3a:	693b      	ldr	r3, [r7, #16]
 8021e3c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021e3e:	2b5e      	cmp	r3, #94	; 0x5e
 8021e40:	d117      	bne.n	8021e72 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	7b5b      	ldrb	r3, [r3, #13]
 8021e46:	f043 0310 	orr.w	r3, r3, #16
 8021e4a:	b2da      	uxtb	r2, r3
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	735a      	strb	r2, [r3, #13]
 8021e50:	e00f      	b.n	8021e72 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8021e52:	693b      	ldr	r3, [r7, #16]
 8021e54:	2206      	movs	r2, #6
 8021e56:	4928      	ldr	r1, [pc, #160]	; (8021ef8 <ethernet_input+0x118>)
 8021e58:	4618      	mov	r0, r3
 8021e5a:	f000 f8cb 	bl	8021ff4 <memcmp>
 8021e5e:	4603      	mov	r3, r0
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d106      	bne.n	8021e72 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	7b5b      	ldrb	r3, [r3, #13]
 8021e68:	f043 0308 	orr.w	r3, r3, #8
 8021e6c:	b2da      	uxtb	r2, r3
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8021e72:	89fb      	ldrh	r3, [r7, #14]
 8021e74:	2b08      	cmp	r3, #8
 8021e76:	d003      	beq.n	8021e80 <ethernet_input+0xa0>
 8021e78:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8021e7c:	d014      	beq.n	8021ea8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8021e7e:	e032      	b.n	8021ee6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021e80:	683b      	ldr	r3, [r7, #0]
 8021e82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021e86:	f003 0308 	and.w	r3, r3, #8
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	d024      	beq.n	8021ed8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021e8e:	8afb      	ldrh	r3, [r7, #22]
 8021e90:	4619      	mov	r1, r3
 8021e92:	6878      	ldr	r0, [r7, #4]
 8021e94:	f7fc fc10 	bl	801e6b8 <pbuf_remove_header>
 8021e98:	4603      	mov	r3, r0
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d11e      	bne.n	8021edc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8021e9e:	6839      	ldr	r1, [r7, #0]
 8021ea0:	6878      	ldr	r0, [r7, #4]
 8021ea2:	f7fe fe8d 	bl	8020bc0 <ip4_input>
      break;
 8021ea6:	e013      	b.n	8021ed0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021ea8:	683b      	ldr	r3, [r7, #0]
 8021eaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021eae:	f003 0308 	and.w	r3, r3, #8
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d014      	beq.n	8021ee0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021eb6:	8afb      	ldrh	r3, [r7, #22]
 8021eb8:	4619      	mov	r1, r3
 8021eba:	6878      	ldr	r0, [r7, #4]
 8021ebc:	f7fc fbfc 	bl	801e6b8 <pbuf_remove_header>
 8021ec0:	4603      	mov	r3, r0
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d10e      	bne.n	8021ee4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8021ec6:	6839      	ldr	r1, [r7, #0]
 8021ec8:	6878      	ldr	r0, [r7, #4]
 8021eca:	f7fe f82d 	bl	801ff28 <etharp_input>
      break;
 8021ece:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	e00c      	b.n	8021eee <ethernet_input+0x10e>
    goto free_and_return;
 8021ed4:	bf00      	nop
 8021ed6:	e006      	b.n	8021ee6 <ethernet_input+0x106>
        goto free_and_return;
 8021ed8:	bf00      	nop
 8021eda:	e004      	b.n	8021ee6 <ethernet_input+0x106>
        goto free_and_return;
 8021edc:	bf00      	nop
 8021ede:	e002      	b.n	8021ee6 <ethernet_input+0x106>
        goto free_and_return;
 8021ee0:	bf00      	nop
 8021ee2:	e000      	b.n	8021ee6 <ethernet_input+0x106>
        goto free_and_return;
 8021ee4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8021ee6:	6878      	ldr	r0, [r7, #4]
 8021ee8:	f7fc fc6c 	bl	801e7c4 <pbuf_free>
  return ERR_OK;
 8021eec:	2300      	movs	r3, #0
}
 8021eee:	4618      	mov	r0, r3
 8021ef0:	3718      	adds	r7, #24
 8021ef2:	46bd      	mov	sp, r7
 8021ef4:	bd80      	pop	{r7, pc}
 8021ef6:	bf00      	nop
 8021ef8:	08028b40 	.word	0x08028b40

08021efc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b086      	sub	sp, #24
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	60f8      	str	r0, [r7, #12]
 8021f04:	60b9      	str	r1, [r7, #8]
 8021f06:	607a      	str	r2, [r7, #4]
 8021f08:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021f0a:	8c3b      	ldrh	r3, [r7, #32]
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	f7fb f87d 	bl	801d00c <lwip_htons>
 8021f12:	4603      	mov	r3, r0
 8021f14:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021f16:	210e      	movs	r1, #14
 8021f18:	68b8      	ldr	r0, [r7, #8]
 8021f1a:	f7fc fbbd 	bl	801e698 <pbuf_add_header>
 8021f1e:	4603      	mov	r3, r0
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d125      	bne.n	8021f70 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8021f24:	68bb      	ldr	r3, [r7, #8]
 8021f26:	685b      	ldr	r3, [r3, #4]
 8021f28:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8021f2a:	693b      	ldr	r3, [r7, #16]
 8021f2c:	8afa      	ldrh	r2, [r7, #22]
 8021f2e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021f30:	693b      	ldr	r3, [r7, #16]
 8021f32:	2206      	movs	r2, #6
 8021f34:	6839      	ldr	r1, [r7, #0]
 8021f36:	4618      	mov	r0, r3
 8021f38:	f000 f86c 	bl	8022014 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8021f3c:	693b      	ldr	r3, [r7, #16]
 8021f3e:	3306      	adds	r3, #6
 8021f40:	2206      	movs	r2, #6
 8021f42:	6879      	ldr	r1, [r7, #4]
 8021f44:	4618      	mov	r0, r3
 8021f46:	f000 f865 	bl	8022014 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021f50:	2b06      	cmp	r3, #6
 8021f52:	d006      	beq.n	8021f62 <ethernet_output+0x66>
 8021f54:	4b0a      	ldr	r3, [pc, #40]	; (8021f80 <ethernet_output+0x84>)
 8021f56:	f44f 7299 	mov.w	r2, #306	; 0x132
 8021f5a:	490a      	ldr	r1, [pc, #40]	; (8021f84 <ethernet_output+0x88>)
 8021f5c:	480a      	ldr	r0, [pc, #40]	; (8021f88 <ethernet_output+0x8c>)
 8021f5e:	f000 f969 	bl	8022234 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021f62:	68fb      	ldr	r3, [r7, #12]
 8021f64:	699b      	ldr	r3, [r3, #24]
 8021f66:	68b9      	ldr	r1, [r7, #8]
 8021f68:	68f8      	ldr	r0, [r7, #12]
 8021f6a:	4798      	blx	r3
 8021f6c:	4603      	mov	r3, r0
 8021f6e:	e002      	b.n	8021f76 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8021f70:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8021f72:	f06f 0301 	mvn.w	r3, #1
}
 8021f76:	4618      	mov	r0, r3
 8021f78:	3718      	adds	r7, #24
 8021f7a:	46bd      	mov	sp, r7
 8021f7c:	bd80      	pop	{r7, pc}
 8021f7e:	bf00      	nop
 8021f80:	080285f0 	.word	0x080285f0
 8021f84:	08028628 	.word	0x08028628
 8021f88:	0802865c 	.word	0x0802865c

08021f8c <__libc_init_array>:
 8021f8c:	b570      	push	{r4, r5, r6, lr}
 8021f8e:	4d0d      	ldr	r5, [pc, #52]	; (8021fc4 <__libc_init_array+0x38>)
 8021f90:	4c0d      	ldr	r4, [pc, #52]	; (8021fc8 <__libc_init_array+0x3c>)
 8021f92:	1b64      	subs	r4, r4, r5
 8021f94:	10a4      	asrs	r4, r4, #2
 8021f96:	2600      	movs	r6, #0
 8021f98:	42a6      	cmp	r6, r4
 8021f9a:	d109      	bne.n	8021fb0 <__libc_init_array+0x24>
 8021f9c:	4d0b      	ldr	r5, [pc, #44]	; (8021fcc <__libc_init_array+0x40>)
 8021f9e:	4c0c      	ldr	r4, [pc, #48]	; (8021fd0 <__libc_init_array+0x44>)
 8021fa0:	f001 fc14 	bl	80237cc <_init>
 8021fa4:	1b64      	subs	r4, r4, r5
 8021fa6:	10a4      	asrs	r4, r4, #2
 8021fa8:	2600      	movs	r6, #0
 8021faa:	42a6      	cmp	r6, r4
 8021fac:	d105      	bne.n	8021fba <__libc_init_array+0x2e>
 8021fae:	bd70      	pop	{r4, r5, r6, pc}
 8021fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fb4:	4798      	blx	r3
 8021fb6:	3601      	adds	r6, #1
 8021fb8:	e7ee      	b.n	8021f98 <__libc_init_array+0xc>
 8021fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fbe:	4798      	blx	r3
 8021fc0:	3601      	adds	r6, #1
 8021fc2:	e7f2      	b.n	8021faa <__libc_init_array+0x1e>
 8021fc4:	08028ca0 	.word	0x08028ca0
 8021fc8:	08028ca0 	.word	0x08028ca0
 8021fcc:	08028ca0 	.word	0x08028ca0
 8021fd0:	08028ca4 	.word	0x08028ca4

08021fd4 <malloc>:
 8021fd4:	4b02      	ldr	r3, [pc, #8]	; (8021fe0 <malloc+0xc>)
 8021fd6:	4601      	mov	r1, r0
 8021fd8:	6818      	ldr	r0, [r3, #0]
 8021fda:	f000 b8b7 	b.w	802214c <_malloc_r>
 8021fde:	bf00      	nop
 8021fe0:	20000140 	.word	0x20000140

08021fe4 <free>:
 8021fe4:	4b02      	ldr	r3, [pc, #8]	; (8021ff0 <free+0xc>)
 8021fe6:	4601      	mov	r1, r0
 8021fe8:	6818      	ldr	r0, [r3, #0]
 8021fea:	f000 b843 	b.w	8022074 <_free_r>
 8021fee:	bf00      	nop
 8021ff0:	20000140 	.word	0x20000140

08021ff4 <memcmp>:
 8021ff4:	b510      	push	{r4, lr}
 8021ff6:	3901      	subs	r1, #1
 8021ff8:	4402      	add	r2, r0
 8021ffa:	4290      	cmp	r0, r2
 8021ffc:	d101      	bne.n	8022002 <memcmp+0xe>
 8021ffe:	2000      	movs	r0, #0
 8022000:	e005      	b.n	802200e <memcmp+0x1a>
 8022002:	7803      	ldrb	r3, [r0, #0]
 8022004:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022008:	42a3      	cmp	r3, r4
 802200a:	d001      	beq.n	8022010 <memcmp+0x1c>
 802200c:	1b18      	subs	r0, r3, r4
 802200e:	bd10      	pop	{r4, pc}
 8022010:	3001      	adds	r0, #1
 8022012:	e7f2      	b.n	8021ffa <memcmp+0x6>

08022014 <memcpy>:
 8022014:	440a      	add	r2, r1
 8022016:	4291      	cmp	r1, r2
 8022018:	f100 33ff 	add.w	r3, r0, #4294967295
 802201c:	d100      	bne.n	8022020 <memcpy+0xc>
 802201e:	4770      	bx	lr
 8022020:	b510      	push	{r4, lr}
 8022022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022026:	f803 4f01 	strb.w	r4, [r3, #1]!
 802202a:	4291      	cmp	r1, r2
 802202c:	d1f9      	bne.n	8022022 <memcpy+0xe>
 802202e:	bd10      	pop	{r4, pc}

08022030 <memmove>:
 8022030:	4288      	cmp	r0, r1
 8022032:	b510      	push	{r4, lr}
 8022034:	eb01 0402 	add.w	r4, r1, r2
 8022038:	d902      	bls.n	8022040 <memmove+0x10>
 802203a:	4284      	cmp	r4, r0
 802203c:	4623      	mov	r3, r4
 802203e:	d807      	bhi.n	8022050 <memmove+0x20>
 8022040:	1e43      	subs	r3, r0, #1
 8022042:	42a1      	cmp	r1, r4
 8022044:	d008      	beq.n	8022058 <memmove+0x28>
 8022046:	f811 2b01 	ldrb.w	r2, [r1], #1
 802204a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802204e:	e7f8      	b.n	8022042 <memmove+0x12>
 8022050:	4402      	add	r2, r0
 8022052:	4601      	mov	r1, r0
 8022054:	428a      	cmp	r2, r1
 8022056:	d100      	bne.n	802205a <memmove+0x2a>
 8022058:	bd10      	pop	{r4, pc}
 802205a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802205e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022062:	e7f7      	b.n	8022054 <memmove+0x24>

08022064 <memset>:
 8022064:	4402      	add	r2, r0
 8022066:	4603      	mov	r3, r0
 8022068:	4293      	cmp	r3, r2
 802206a:	d100      	bne.n	802206e <memset+0xa>
 802206c:	4770      	bx	lr
 802206e:	f803 1b01 	strb.w	r1, [r3], #1
 8022072:	e7f9      	b.n	8022068 <memset+0x4>

08022074 <_free_r>:
 8022074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022076:	2900      	cmp	r1, #0
 8022078:	d044      	beq.n	8022104 <_free_r+0x90>
 802207a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802207e:	9001      	str	r0, [sp, #4]
 8022080:	2b00      	cmp	r3, #0
 8022082:	f1a1 0404 	sub.w	r4, r1, #4
 8022086:	bfb8      	it	lt
 8022088:	18e4      	addlt	r4, r4, r3
 802208a:	f000 fdd1 	bl	8022c30 <__malloc_lock>
 802208e:	4a1e      	ldr	r2, [pc, #120]	; (8022108 <_free_r+0x94>)
 8022090:	9801      	ldr	r0, [sp, #4]
 8022092:	6813      	ldr	r3, [r2, #0]
 8022094:	b933      	cbnz	r3, 80220a4 <_free_r+0x30>
 8022096:	6063      	str	r3, [r4, #4]
 8022098:	6014      	str	r4, [r2, #0]
 802209a:	b003      	add	sp, #12
 802209c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80220a0:	f000 bdcc 	b.w	8022c3c <__malloc_unlock>
 80220a4:	42a3      	cmp	r3, r4
 80220a6:	d908      	bls.n	80220ba <_free_r+0x46>
 80220a8:	6825      	ldr	r5, [r4, #0]
 80220aa:	1961      	adds	r1, r4, r5
 80220ac:	428b      	cmp	r3, r1
 80220ae:	bf01      	itttt	eq
 80220b0:	6819      	ldreq	r1, [r3, #0]
 80220b2:	685b      	ldreq	r3, [r3, #4]
 80220b4:	1949      	addeq	r1, r1, r5
 80220b6:	6021      	streq	r1, [r4, #0]
 80220b8:	e7ed      	b.n	8022096 <_free_r+0x22>
 80220ba:	461a      	mov	r2, r3
 80220bc:	685b      	ldr	r3, [r3, #4]
 80220be:	b10b      	cbz	r3, 80220c4 <_free_r+0x50>
 80220c0:	42a3      	cmp	r3, r4
 80220c2:	d9fa      	bls.n	80220ba <_free_r+0x46>
 80220c4:	6811      	ldr	r1, [r2, #0]
 80220c6:	1855      	adds	r5, r2, r1
 80220c8:	42a5      	cmp	r5, r4
 80220ca:	d10b      	bne.n	80220e4 <_free_r+0x70>
 80220cc:	6824      	ldr	r4, [r4, #0]
 80220ce:	4421      	add	r1, r4
 80220d0:	1854      	adds	r4, r2, r1
 80220d2:	42a3      	cmp	r3, r4
 80220d4:	6011      	str	r1, [r2, #0]
 80220d6:	d1e0      	bne.n	802209a <_free_r+0x26>
 80220d8:	681c      	ldr	r4, [r3, #0]
 80220da:	685b      	ldr	r3, [r3, #4]
 80220dc:	6053      	str	r3, [r2, #4]
 80220de:	4421      	add	r1, r4
 80220e0:	6011      	str	r1, [r2, #0]
 80220e2:	e7da      	b.n	802209a <_free_r+0x26>
 80220e4:	d902      	bls.n	80220ec <_free_r+0x78>
 80220e6:	230c      	movs	r3, #12
 80220e8:	6003      	str	r3, [r0, #0]
 80220ea:	e7d6      	b.n	802209a <_free_r+0x26>
 80220ec:	6825      	ldr	r5, [r4, #0]
 80220ee:	1961      	adds	r1, r4, r5
 80220f0:	428b      	cmp	r3, r1
 80220f2:	bf04      	itt	eq
 80220f4:	6819      	ldreq	r1, [r3, #0]
 80220f6:	685b      	ldreq	r3, [r3, #4]
 80220f8:	6063      	str	r3, [r4, #4]
 80220fa:	bf04      	itt	eq
 80220fc:	1949      	addeq	r1, r1, r5
 80220fe:	6021      	streq	r1, [r4, #0]
 8022100:	6054      	str	r4, [r2, #4]
 8022102:	e7ca      	b.n	802209a <_free_r+0x26>
 8022104:	b003      	add	sp, #12
 8022106:	bd30      	pop	{r4, r5, pc}
 8022108:	2001430c 	.word	0x2001430c

0802210c <sbrk_aligned>:
 802210c:	b570      	push	{r4, r5, r6, lr}
 802210e:	4e0e      	ldr	r6, [pc, #56]	; (8022148 <sbrk_aligned+0x3c>)
 8022110:	460c      	mov	r4, r1
 8022112:	6831      	ldr	r1, [r6, #0]
 8022114:	4605      	mov	r5, r0
 8022116:	b911      	cbnz	r1, 802211e <sbrk_aligned+0x12>
 8022118:	f000 f96e 	bl	80223f8 <_sbrk_r>
 802211c:	6030      	str	r0, [r6, #0]
 802211e:	4621      	mov	r1, r4
 8022120:	4628      	mov	r0, r5
 8022122:	f000 f969 	bl	80223f8 <_sbrk_r>
 8022126:	1c43      	adds	r3, r0, #1
 8022128:	d00a      	beq.n	8022140 <sbrk_aligned+0x34>
 802212a:	1cc4      	adds	r4, r0, #3
 802212c:	f024 0403 	bic.w	r4, r4, #3
 8022130:	42a0      	cmp	r0, r4
 8022132:	d007      	beq.n	8022144 <sbrk_aligned+0x38>
 8022134:	1a21      	subs	r1, r4, r0
 8022136:	4628      	mov	r0, r5
 8022138:	f000 f95e 	bl	80223f8 <_sbrk_r>
 802213c:	3001      	adds	r0, #1
 802213e:	d101      	bne.n	8022144 <sbrk_aligned+0x38>
 8022140:	f04f 34ff 	mov.w	r4, #4294967295
 8022144:	4620      	mov	r0, r4
 8022146:	bd70      	pop	{r4, r5, r6, pc}
 8022148:	20014310 	.word	0x20014310

0802214c <_malloc_r>:
 802214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022150:	1ccd      	adds	r5, r1, #3
 8022152:	f025 0503 	bic.w	r5, r5, #3
 8022156:	3508      	adds	r5, #8
 8022158:	2d0c      	cmp	r5, #12
 802215a:	bf38      	it	cc
 802215c:	250c      	movcc	r5, #12
 802215e:	2d00      	cmp	r5, #0
 8022160:	4607      	mov	r7, r0
 8022162:	db01      	blt.n	8022168 <_malloc_r+0x1c>
 8022164:	42a9      	cmp	r1, r5
 8022166:	d905      	bls.n	8022174 <_malloc_r+0x28>
 8022168:	230c      	movs	r3, #12
 802216a:	603b      	str	r3, [r7, #0]
 802216c:	2600      	movs	r6, #0
 802216e:	4630      	mov	r0, r6
 8022170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022174:	4e2e      	ldr	r6, [pc, #184]	; (8022230 <_malloc_r+0xe4>)
 8022176:	f000 fd5b 	bl	8022c30 <__malloc_lock>
 802217a:	6833      	ldr	r3, [r6, #0]
 802217c:	461c      	mov	r4, r3
 802217e:	bb34      	cbnz	r4, 80221ce <_malloc_r+0x82>
 8022180:	4629      	mov	r1, r5
 8022182:	4638      	mov	r0, r7
 8022184:	f7ff ffc2 	bl	802210c <sbrk_aligned>
 8022188:	1c43      	adds	r3, r0, #1
 802218a:	4604      	mov	r4, r0
 802218c:	d14d      	bne.n	802222a <_malloc_r+0xde>
 802218e:	6834      	ldr	r4, [r6, #0]
 8022190:	4626      	mov	r6, r4
 8022192:	2e00      	cmp	r6, #0
 8022194:	d140      	bne.n	8022218 <_malloc_r+0xcc>
 8022196:	6823      	ldr	r3, [r4, #0]
 8022198:	4631      	mov	r1, r6
 802219a:	4638      	mov	r0, r7
 802219c:	eb04 0803 	add.w	r8, r4, r3
 80221a0:	f000 f92a 	bl	80223f8 <_sbrk_r>
 80221a4:	4580      	cmp	r8, r0
 80221a6:	d13a      	bne.n	802221e <_malloc_r+0xd2>
 80221a8:	6821      	ldr	r1, [r4, #0]
 80221aa:	3503      	adds	r5, #3
 80221ac:	1a6d      	subs	r5, r5, r1
 80221ae:	f025 0503 	bic.w	r5, r5, #3
 80221b2:	3508      	adds	r5, #8
 80221b4:	2d0c      	cmp	r5, #12
 80221b6:	bf38      	it	cc
 80221b8:	250c      	movcc	r5, #12
 80221ba:	4629      	mov	r1, r5
 80221bc:	4638      	mov	r0, r7
 80221be:	f7ff ffa5 	bl	802210c <sbrk_aligned>
 80221c2:	3001      	adds	r0, #1
 80221c4:	d02b      	beq.n	802221e <_malloc_r+0xd2>
 80221c6:	6823      	ldr	r3, [r4, #0]
 80221c8:	442b      	add	r3, r5
 80221ca:	6023      	str	r3, [r4, #0]
 80221cc:	e00e      	b.n	80221ec <_malloc_r+0xa0>
 80221ce:	6822      	ldr	r2, [r4, #0]
 80221d0:	1b52      	subs	r2, r2, r5
 80221d2:	d41e      	bmi.n	8022212 <_malloc_r+0xc6>
 80221d4:	2a0b      	cmp	r2, #11
 80221d6:	d916      	bls.n	8022206 <_malloc_r+0xba>
 80221d8:	1961      	adds	r1, r4, r5
 80221da:	42a3      	cmp	r3, r4
 80221dc:	6025      	str	r5, [r4, #0]
 80221de:	bf18      	it	ne
 80221e0:	6059      	strne	r1, [r3, #4]
 80221e2:	6863      	ldr	r3, [r4, #4]
 80221e4:	bf08      	it	eq
 80221e6:	6031      	streq	r1, [r6, #0]
 80221e8:	5162      	str	r2, [r4, r5]
 80221ea:	604b      	str	r3, [r1, #4]
 80221ec:	4638      	mov	r0, r7
 80221ee:	f104 060b 	add.w	r6, r4, #11
 80221f2:	f000 fd23 	bl	8022c3c <__malloc_unlock>
 80221f6:	f026 0607 	bic.w	r6, r6, #7
 80221fa:	1d23      	adds	r3, r4, #4
 80221fc:	1af2      	subs	r2, r6, r3
 80221fe:	d0b6      	beq.n	802216e <_malloc_r+0x22>
 8022200:	1b9b      	subs	r3, r3, r6
 8022202:	50a3      	str	r3, [r4, r2]
 8022204:	e7b3      	b.n	802216e <_malloc_r+0x22>
 8022206:	6862      	ldr	r2, [r4, #4]
 8022208:	42a3      	cmp	r3, r4
 802220a:	bf0c      	ite	eq
 802220c:	6032      	streq	r2, [r6, #0]
 802220e:	605a      	strne	r2, [r3, #4]
 8022210:	e7ec      	b.n	80221ec <_malloc_r+0xa0>
 8022212:	4623      	mov	r3, r4
 8022214:	6864      	ldr	r4, [r4, #4]
 8022216:	e7b2      	b.n	802217e <_malloc_r+0x32>
 8022218:	4634      	mov	r4, r6
 802221a:	6876      	ldr	r6, [r6, #4]
 802221c:	e7b9      	b.n	8022192 <_malloc_r+0x46>
 802221e:	230c      	movs	r3, #12
 8022220:	603b      	str	r3, [r7, #0]
 8022222:	4638      	mov	r0, r7
 8022224:	f000 fd0a 	bl	8022c3c <__malloc_unlock>
 8022228:	e7a1      	b.n	802216e <_malloc_r+0x22>
 802222a:	6025      	str	r5, [r4, #0]
 802222c:	e7de      	b.n	80221ec <_malloc_r+0xa0>
 802222e:	bf00      	nop
 8022230:	2001430c 	.word	0x2001430c

08022234 <iprintf>:
 8022234:	b40f      	push	{r0, r1, r2, r3}
 8022236:	4b0a      	ldr	r3, [pc, #40]	; (8022260 <iprintf+0x2c>)
 8022238:	b513      	push	{r0, r1, r4, lr}
 802223a:	681c      	ldr	r4, [r3, #0]
 802223c:	b124      	cbz	r4, 8022248 <iprintf+0x14>
 802223e:	69a3      	ldr	r3, [r4, #24]
 8022240:	b913      	cbnz	r3, 8022248 <iprintf+0x14>
 8022242:	4620      	mov	r0, r4
 8022244:	f000 fbdc 	bl	8022a00 <__sinit>
 8022248:	ab05      	add	r3, sp, #20
 802224a:	9a04      	ldr	r2, [sp, #16]
 802224c:	68a1      	ldr	r1, [r4, #8]
 802224e:	9301      	str	r3, [sp, #4]
 8022250:	4620      	mov	r0, r4
 8022252:	f000 fe7f 	bl	8022f54 <_vfiprintf_r>
 8022256:	b002      	add	sp, #8
 8022258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802225c:	b004      	add	sp, #16
 802225e:	4770      	bx	lr
 8022260:	20000140 	.word	0x20000140

08022264 <putchar>:
 8022264:	4b09      	ldr	r3, [pc, #36]	; (802228c <putchar+0x28>)
 8022266:	b513      	push	{r0, r1, r4, lr}
 8022268:	681c      	ldr	r4, [r3, #0]
 802226a:	4601      	mov	r1, r0
 802226c:	b134      	cbz	r4, 802227c <putchar+0x18>
 802226e:	69a3      	ldr	r3, [r4, #24]
 8022270:	b923      	cbnz	r3, 802227c <putchar+0x18>
 8022272:	9001      	str	r0, [sp, #4]
 8022274:	4620      	mov	r0, r4
 8022276:	f000 fbc3 	bl	8022a00 <__sinit>
 802227a:	9901      	ldr	r1, [sp, #4]
 802227c:	68a2      	ldr	r2, [r4, #8]
 802227e:	4620      	mov	r0, r4
 8022280:	b002      	add	sp, #8
 8022282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022286:	f001 b929 	b.w	80234dc <_putc_r>
 802228a:	bf00      	nop
 802228c:	20000140 	.word	0x20000140

08022290 <_puts_r>:
 8022290:	b570      	push	{r4, r5, r6, lr}
 8022292:	460e      	mov	r6, r1
 8022294:	4605      	mov	r5, r0
 8022296:	b118      	cbz	r0, 80222a0 <_puts_r+0x10>
 8022298:	6983      	ldr	r3, [r0, #24]
 802229a:	b90b      	cbnz	r3, 80222a0 <_puts_r+0x10>
 802229c:	f000 fbb0 	bl	8022a00 <__sinit>
 80222a0:	69ab      	ldr	r3, [r5, #24]
 80222a2:	68ac      	ldr	r4, [r5, #8]
 80222a4:	b913      	cbnz	r3, 80222ac <_puts_r+0x1c>
 80222a6:	4628      	mov	r0, r5
 80222a8:	f000 fbaa 	bl	8022a00 <__sinit>
 80222ac:	4b2c      	ldr	r3, [pc, #176]	; (8022360 <_puts_r+0xd0>)
 80222ae:	429c      	cmp	r4, r3
 80222b0:	d120      	bne.n	80222f4 <_puts_r+0x64>
 80222b2:	686c      	ldr	r4, [r5, #4]
 80222b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80222b6:	07db      	lsls	r3, r3, #31
 80222b8:	d405      	bmi.n	80222c6 <_puts_r+0x36>
 80222ba:	89a3      	ldrh	r3, [r4, #12]
 80222bc:	0598      	lsls	r0, r3, #22
 80222be:	d402      	bmi.n	80222c6 <_puts_r+0x36>
 80222c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80222c2:	f000 fc4d 	bl	8022b60 <__retarget_lock_acquire_recursive>
 80222c6:	89a3      	ldrh	r3, [r4, #12]
 80222c8:	0719      	lsls	r1, r3, #28
 80222ca:	d51d      	bpl.n	8022308 <_puts_r+0x78>
 80222cc:	6923      	ldr	r3, [r4, #16]
 80222ce:	b1db      	cbz	r3, 8022308 <_puts_r+0x78>
 80222d0:	3e01      	subs	r6, #1
 80222d2:	68a3      	ldr	r3, [r4, #8]
 80222d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80222d8:	3b01      	subs	r3, #1
 80222da:	60a3      	str	r3, [r4, #8]
 80222dc:	bb39      	cbnz	r1, 802232e <_puts_r+0x9e>
 80222de:	2b00      	cmp	r3, #0
 80222e0:	da38      	bge.n	8022354 <_puts_r+0xc4>
 80222e2:	4622      	mov	r2, r4
 80222e4:	210a      	movs	r1, #10
 80222e6:	4628      	mov	r0, r5
 80222e8:	f000 f992 	bl	8022610 <__swbuf_r>
 80222ec:	3001      	adds	r0, #1
 80222ee:	d011      	beq.n	8022314 <_puts_r+0x84>
 80222f0:	250a      	movs	r5, #10
 80222f2:	e011      	b.n	8022318 <_puts_r+0x88>
 80222f4:	4b1b      	ldr	r3, [pc, #108]	; (8022364 <_puts_r+0xd4>)
 80222f6:	429c      	cmp	r4, r3
 80222f8:	d101      	bne.n	80222fe <_puts_r+0x6e>
 80222fa:	68ac      	ldr	r4, [r5, #8]
 80222fc:	e7da      	b.n	80222b4 <_puts_r+0x24>
 80222fe:	4b1a      	ldr	r3, [pc, #104]	; (8022368 <_puts_r+0xd8>)
 8022300:	429c      	cmp	r4, r3
 8022302:	bf08      	it	eq
 8022304:	68ec      	ldreq	r4, [r5, #12]
 8022306:	e7d5      	b.n	80222b4 <_puts_r+0x24>
 8022308:	4621      	mov	r1, r4
 802230a:	4628      	mov	r0, r5
 802230c:	f000 f9d2 	bl	80226b4 <__swsetup_r>
 8022310:	2800      	cmp	r0, #0
 8022312:	d0dd      	beq.n	80222d0 <_puts_r+0x40>
 8022314:	f04f 35ff 	mov.w	r5, #4294967295
 8022318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802231a:	07da      	lsls	r2, r3, #31
 802231c:	d405      	bmi.n	802232a <_puts_r+0x9a>
 802231e:	89a3      	ldrh	r3, [r4, #12]
 8022320:	059b      	lsls	r3, r3, #22
 8022322:	d402      	bmi.n	802232a <_puts_r+0x9a>
 8022324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022326:	f000 fc1c 	bl	8022b62 <__retarget_lock_release_recursive>
 802232a:	4628      	mov	r0, r5
 802232c:	bd70      	pop	{r4, r5, r6, pc}
 802232e:	2b00      	cmp	r3, #0
 8022330:	da04      	bge.n	802233c <_puts_r+0xac>
 8022332:	69a2      	ldr	r2, [r4, #24]
 8022334:	429a      	cmp	r2, r3
 8022336:	dc06      	bgt.n	8022346 <_puts_r+0xb6>
 8022338:	290a      	cmp	r1, #10
 802233a:	d004      	beq.n	8022346 <_puts_r+0xb6>
 802233c:	6823      	ldr	r3, [r4, #0]
 802233e:	1c5a      	adds	r2, r3, #1
 8022340:	6022      	str	r2, [r4, #0]
 8022342:	7019      	strb	r1, [r3, #0]
 8022344:	e7c5      	b.n	80222d2 <_puts_r+0x42>
 8022346:	4622      	mov	r2, r4
 8022348:	4628      	mov	r0, r5
 802234a:	f000 f961 	bl	8022610 <__swbuf_r>
 802234e:	3001      	adds	r0, #1
 8022350:	d1bf      	bne.n	80222d2 <_puts_r+0x42>
 8022352:	e7df      	b.n	8022314 <_puts_r+0x84>
 8022354:	6823      	ldr	r3, [r4, #0]
 8022356:	250a      	movs	r5, #10
 8022358:	1c5a      	adds	r2, r3, #1
 802235a:	6022      	str	r2, [r4, #0]
 802235c:	701d      	strb	r5, [r3, #0]
 802235e:	e7db      	b.n	8022318 <_puts_r+0x88>
 8022360:	08028c24 	.word	0x08028c24
 8022364:	08028c44 	.word	0x08028c44
 8022368:	08028c04 	.word	0x08028c04

0802236c <puts>:
 802236c:	4b02      	ldr	r3, [pc, #8]	; (8022378 <puts+0xc>)
 802236e:	4601      	mov	r1, r0
 8022370:	6818      	ldr	r0, [r3, #0]
 8022372:	f7ff bf8d 	b.w	8022290 <_puts_r>
 8022376:	bf00      	nop
 8022378:	20000140 	.word	0x20000140

0802237c <rand>:
 802237c:	4b16      	ldr	r3, [pc, #88]	; (80223d8 <rand+0x5c>)
 802237e:	b510      	push	{r4, lr}
 8022380:	681c      	ldr	r4, [r3, #0]
 8022382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022384:	b9b3      	cbnz	r3, 80223b4 <rand+0x38>
 8022386:	2018      	movs	r0, #24
 8022388:	f7ff fe24 	bl	8021fd4 <malloc>
 802238c:	63a0      	str	r0, [r4, #56]	; 0x38
 802238e:	b928      	cbnz	r0, 802239c <rand+0x20>
 8022390:	4602      	mov	r2, r0
 8022392:	4b12      	ldr	r3, [pc, #72]	; (80223dc <rand+0x60>)
 8022394:	4812      	ldr	r0, [pc, #72]	; (80223e0 <rand+0x64>)
 8022396:	214e      	movs	r1, #78	; 0x4e
 8022398:	f000 f9fa 	bl	8022790 <__assert_func>
 802239c:	4a11      	ldr	r2, [pc, #68]	; (80223e4 <rand+0x68>)
 802239e:	4b12      	ldr	r3, [pc, #72]	; (80223e8 <rand+0x6c>)
 80223a0:	e9c0 2300 	strd	r2, r3, [r0]
 80223a4:	4b11      	ldr	r3, [pc, #68]	; (80223ec <rand+0x70>)
 80223a6:	6083      	str	r3, [r0, #8]
 80223a8:	230b      	movs	r3, #11
 80223aa:	8183      	strh	r3, [r0, #12]
 80223ac:	2201      	movs	r2, #1
 80223ae:	2300      	movs	r3, #0
 80223b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80223b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80223b6:	4a0e      	ldr	r2, [pc, #56]	; (80223f0 <rand+0x74>)
 80223b8:	6920      	ldr	r0, [r4, #16]
 80223ba:	6963      	ldr	r3, [r4, #20]
 80223bc:	490d      	ldr	r1, [pc, #52]	; (80223f4 <rand+0x78>)
 80223be:	4342      	muls	r2, r0
 80223c0:	fb01 2203 	mla	r2, r1, r3, r2
 80223c4:	fba0 0101 	umull	r0, r1, r0, r1
 80223c8:	1c43      	adds	r3, r0, #1
 80223ca:	eb42 0001 	adc.w	r0, r2, r1
 80223ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80223d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80223d6:	bd10      	pop	{r4, pc}
 80223d8:	20000140 	.word	0x20000140
 80223dc:	08028b54 	.word	0x08028b54
 80223e0:	08028b6b 	.word	0x08028b6b
 80223e4:	abcd330e 	.word	0xabcd330e
 80223e8:	e66d1234 	.word	0xe66d1234
 80223ec:	0005deec 	.word	0x0005deec
 80223f0:	5851f42d 	.word	0x5851f42d
 80223f4:	4c957f2d 	.word	0x4c957f2d

080223f8 <_sbrk_r>:
 80223f8:	b538      	push	{r3, r4, r5, lr}
 80223fa:	4d06      	ldr	r5, [pc, #24]	; (8022414 <_sbrk_r+0x1c>)
 80223fc:	2300      	movs	r3, #0
 80223fe:	4604      	mov	r4, r0
 8022400:	4608      	mov	r0, r1
 8022402:	602b      	str	r3, [r5, #0]
 8022404:	f7f2 f990 	bl	8014728 <_sbrk>
 8022408:	1c43      	adds	r3, r0, #1
 802240a:	d102      	bne.n	8022412 <_sbrk_r+0x1a>
 802240c:	682b      	ldr	r3, [r5, #0]
 802240e:	b103      	cbz	r3, 8022412 <_sbrk_r+0x1a>
 8022410:	6023      	str	r3, [r4, #0]
 8022412:	bd38      	pop	{r3, r4, r5, pc}
 8022414:	20014314 	.word	0x20014314

08022418 <setvbuf>:
 8022418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802241c:	461d      	mov	r5, r3
 802241e:	4b5d      	ldr	r3, [pc, #372]	; (8022594 <setvbuf+0x17c>)
 8022420:	681f      	ldr	r7, [r3, #0]
 8022422:	4604      	mov	r4, r0
 8022424:	460e      	mov	r6, r1
 8022426:	4690      	mov	r8, r2
 8022428:	b127      	cbz	r7, 8022434 <setvbuf+0x1c>
 802242a:	69bb      	ldr	r3, [r7, #24]
 802242c:	b913      	cbnz	r3, 8022434 <setvbuf+0x1c>
 802242e:	4638      	mov	r0, r7
 8022430:	f000 fae6 	bl	8022a00 <__sinit>
 8022434:	4b58      	ldr	r3, [pc, #352]	; (8022598 <setvbuf+0x180>)
 8022436:	429c      	cmp	r4, r3
 8022438:	d167      	bne.n	802250a <setvbuf+0xf2>
 802243a:	687c      	ldr	r4, [r7, #4]
 802243c:	f1b8 0f02 	cmp.w	r8, #2
 8022440:	d006      	beq.n	8022450 <setvbuf+0x38>
 8022442:	f1b8 0f01 	cmp.w	r8, #1
 8022446:	f200 809f 	bhi.w	8022588 <setvbuf+0x170>
 802244a:	2d00      	cmp	r5, #0
 802244c:	f2c0 809c 	blt.w	8022588 <setvbuf+0x170>
 8022450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022452:	07db      	lsls	r3, r3, #31
 8022454:	d405      	bmi.n	8022462 <setvbuf+0x4a>
 8022456:	89a3      	ldrh	r3, [r4, #12]
 8022458:	0598      	lsls	r0, r3, #22
 802245a:	d402      	bmi.n	8022462 <setvbuf+0x4a>
 802245c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802245e:	f000 fb7f 	bl	8022b60 <__retarget_lock_acquire_recursive>
 8022462:	4621      	mov	r1, r4
 8022464:	4638      	mov	r0, r7
 8022466:	f000 fa37 	bl	80228d8 <_fflush_r>
 802246a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802246c:	b141      	cbz	r1, 8022480 <setvbuf+0x68>
 802246e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022472:	4299      	cmp	r1, r3
 8022474:	d002      	beq.n	802247c <setvbuf+0x64>
 8022476:	4638      	mov	r0, r7
 8022478:	f7ff fdfc 	bl	8022074 <_free_r>
 802247c:	2300      	movs	r3, #0
 802247e:	6363      	str	r3, [r4, #52]	; 0x34
 8022480:	2300      	movs	r3, #0
 8022482:	61a3      	str	r3, [r4, #24]
 8022484:	6063      	str	r3, [r4, #4]
 8022486:	89a3      	ldrh	r3, [r4, #12]
 8022488:	0619      	lsls	r1, r3, #24
 802248a:	d503      	bpl.n	8022494 <setvbuf+0x7c>
 802248c:	6921      	ldr	r1, [r4, #16]
 802248e:	4638      	mov	r0, r7
 8022490:	f7ff fdf0 	bl	8022074 <_free_r>
 8022494:	89a3      	ldrh	r3, [r4, #12]
 8022496:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802249a:	f023 0303 	bic.w	r3, r3, #3
 802249e:	f1b8 0f02 	cmp.w	r8, #2
 80224a2:	81a3      	strh	r3, [r4, #12]
 80224a4:	d06c      	beq.n	8022580 <setvbuf+0x168>
 80224a6:	ab01      	add	r3, sp, #4
 80224a8:	466a      	mov	r2, sp
 80224aa:	4621      	mov	r1, r4
 80224ac:	4638      	mov	r0, r7
 80224ae:	f000 fb59 	bl	8022b64 <__swhatbuf_r>
 80224b2:	89a3      	ldrh	r3, [r4, #12]
 80224b4:	4318      	orrs	r0, r3
 80224b6:	81a0      	strh	r0, [r4, #12]
 80224b8:	2d00      	cmp	r5, #0
 80224ba:	d130      	bne.n	802251e <setvbuf+0x106>
 80224bc:	9d00      	ldr	r5, [sp, #0]
 80224be:	4628      	mov	r0, r5
 80224c0:	f7ff fd88 	bl	8021fd4 <malloc>
 80224c4:	4606      	mov	r6, r0
 80224c6:	2800      	cmp	r0, #0
 80224c8:	d155      	bne.n	8022576 <setvbuf+0x15e>
 80224ca:	f8dd 9000 	ldr.w	r9, [sp]
 80224ce:	45a9      	cmp	r9, r5
 80224d0:	d14a      	bne.n	8022568 <setvbuf+0x150>
 80224d2:	f04f 35ff 	mov.w	r5, #4294967295
 80224d6:	2200      	movs	r2, #0
 80224d8:	60a2      	str	r2, [r4, #8]
 80224da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80224de:	6022      	str	r2, [r4, #0]
 80224e0:	6122      	str	r2, [r4, #16]
 80224e2:	2201      	movs	r2, #1
 80224e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224e8:	6162      	str	r2, [r4, #20]
 80224ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80224ec:	f043 0302 	orr.w	r3, r3, #2
 80224f0:	07d2      	lsls	r2, r2, #31
 80224f2:	81a3      	strh	r3, [r4, #12]
 80224f4:	d405      	bmi.n	8022502 <setvbuf+0xea>
 80224f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80224fa:	d102      	bne.n	8022502 <setvbuf+0xea>
 80224fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80224fe:	f000 fb30 	bl	8022b62 <__retarget_lock_release_recursive>
 8022502:	4628      	mov	r0, r5
 8022504:	b003      	add	sp, #12
 8022506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802250a:	4b24      	ldr	r3, [pc, #144]	; (802259c <setvbuf+0x184>)
 802250c:	429c      	cmp	r4, r3
 802250e:	d101      	bne.n	8022514 <setvbuf+0xfc>
 8022510:	68bc      	ldr	r4, [r7, #8]
 8022512:	e793      	b.n	802243c <setvbuf+0x24>
 8022514:	4b22      	ldr	r3, [pc, #136]	; (80225a0 <setvbuf+0x188>)
 8022516:	429c      	cmp	r4, r3
 8022518:	bf08      	it	eq
 802251a:	68fc      	ldreq	r4, [r7, #12]
 802251c:	e78e      	b.n	802243c <setvbuf+0x24>
 802251e:	2e00      	cmp	r6, #0
 8022520:	d0cd      	beq.n	80224be <setvbuf+0xa6>
 8022522:	69bb      	ldr	r3, [r7, #24]
 8022524:	b913      	cbnz	r3, 802252c <setvbuf+0x114>
 8022526:	4638      	mov	r0, r7
 8022528:	f000 fa6a 	bl	8022a00 <__sinit>
 802252c:	f1b8 0f01 	cmp.w	r8, #1
 8022530:	bf08      	it	eq
 8022532:	89a3      	ldrheq	r3, [r4, #12]
 8022534:	6026      	str	r6, [r4, #0]
 8022536:	bf04      	itt	eq
 8022538:	f043 0301 	orreq.w	r3, r3, #1
 802253c:	81a3      	strheq	r3, [r4, #12]
 802253e:	89a2      	ldrh	r2, [r4, #12]
 8022540:	f012 0308 	ands.w	r3, r2, #8
 8022544:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8022548:	d01c      	beq.n	8022584 <setvbuf+0x16c>
 802254a:	07d3      	lsls	r3, r2, #31
 802254c:	bf41      	itttt	mi
 802254e:	2300      	movmi	r3, #0
 8022550:	426d      	negmi	r5, r5
 8022552:	60a3      	strmi	r3, [r4, #8]
 8022554:	61a5      	strmi	r5, [r4, #24]
 8022556:	bf58      	it	pl
 8022558:	60a5      	strpl	r5, [r4, #8]
 802255a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802255c:	f015 0501 	ands.w	r5, r5, #1
 8022560:	d115      	bne.n	802258e <setvbuf+0x176>
 8022562:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022566:	e7c8      	b.n	80224fa <setvbuf+0xe2>
 8022568:	4648      	mov	r0, r9
 802256a:	f7ff fd33 	bl	8021fd4 <malloc>
 802256e:	4606      	mov	r6, r0
 8022570:	2800      	cmp	r0, #0
 8022572:	d0ae      	beq.n	80224d2 <setvbuf+0xba>
 8022574:	464d      	mov	r5, r9
 8022576:	89a3      	ldrh	r3, [r4, #12]
 8022578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802257c:	81a3      	strh	r3, [r4, #12]
 802257e:	e7d0      	b.n	8022522 <setvbuf+0x10a>
 8022580:	2500      	movs	r5, #0
 8022582:	e7a8      	b.n	80224d6 <setvbuf+0xbe>
 8022584:	60a3      	str	r3, [r4, #8]
 8022586:	e7e8      	b.n	802255a <setvbuf+0x142>
 8022588:	f04f 35ff 	mov.w	r5, #4294967295
 802258c:	e7b9      	b.n	8022502 <setvbuf+0xea>
 802258e:	2500      	movs	r5, #0
 8022590:	e7b7      	b.n	8022502 <setvbuf+0xea>
 8022592:	bf00      	nop
 8022594:	20000140 	.word	0x20000140
 8022598:	08028c24 	.word	0x08028c24
 802259c:	08028c44 	.word	0x08028c44
 80225a0:	08028c04 	.word	0x08028c04

080225a4 <siprintf>:
 80225a4:	b40e      	push	{r1, r2, r3}
 80225a6:	b500      	push	{lr}
 80225a8:	b09c      	sub	sp, #112	; 0x70
 80225aa:	ab1d      	add	r3, sp, #116	; 0x74
 80225ac:	9002      	str	r0, [sp, #8]
 80225ae:	9006      	str	r0, [sp, #24]
 80225b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80225b4:	4809      	ldr	r0, [pc, #36]	; (80225dc <siprintf+0x38>)
 80225b6:	9107      	str	r1, [sp, #28]
 80225b8:	9104      	str	r1, [sp, #16]
 80225ba:	4909      	ldr	r1, [pc, #36]	; (80225e0 <siprintf+0x3c>)
 80225bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80225c0:	9105      	str	r1, [sp, #20]
 80225c2:	6800      	ldr	r0, [r0, #0]
 80225c4:	9301      	str	r3, [sp, #4]
 80225c6:	a902      	add	r1, sp, #8
 80225c8:	f000 fb9a 	bl	8022d00 <_svfiprintf_r>
 80225cc:	9b02      	ldr	r3, [sp, #8]
 80225ce:	2200      	movs	r2, #0
 80225d0:	701a      	strb	r2, [r3, #0]
 80225d2:	b01c      	add	sp, #112	; 0x70
 80225d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80225d8:	b003      	add	sp, #12
 80225da:	4770      	bx	lr
 80225dc:	20000140 	.word	0x20000140
 80225e0:	ffff0208 	.word	0xffff0208

080225e4 <strstr>:
 80225e4:	780a      	ldrb	r2, [r1, #0]
 80225e6:	b570      	push	{r4, r5, r6, lr}
 80225e8:	b96a      	cbnz	r2, 8022606 <strstr+0x22>
 80225ea:	bd70      	pop	{r4, r5, r6, pc}
 80225ec:	429a      	cmp	r2, r3
 80225ee:	d109      	bne.n	8022604 <strstr+0x20>
 80225f0:	460c      	mov	r4, r1
 80225f2:	4605      	mov	r5, r0
 80225f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d0f6      	beq.n	80225ea <strstr+0x6>
 80225fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022600:	429e      	cmp	r6, r3
 8022602:	d0f7      	beq.n	80225f4 <strstr+0x10>
 8022604:	3001      	adds	r0, #1
 8022606:	7803      	ldrb	r3, [r0, #0]
 8022608:	2b00      	cmp	r3, #0
 802260a:	d1ef      	bne.n	80225ec <strstr+0x8>
 802260c:	4618      	mov	r0, r3
 802260e:	e7ec      	b.n	80225ea <strstr+0x6>

08022610 <__swbuf_r>:
 8022610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022612:	460e      	mov	r6, r1
 8022614:	4614      	mov	r4, r2
 8022616:	4605      	mov	r5, r0
 8022618:	b118      	cbz	r0, 8022622 <__swbuf_r+0x12>
 802261a:	6983      	ldr	r3, [r0, #24]
 802261c:	b90b      	cbnz	r3, 8022622 <__swbuf_r+0x12>
 802261e:	f000 f9ef 	bl	8022a00 <__sinit>
 8022622:	4b21      	ldr	r3, [pc, #132]	; (80226a8 <__swbuf_r+0x98>)
 8022624:	429c      	cmp	r4, r3
 8022626:	d12b      	bne.n	8022680 <__swbuf_r+0x70>
 8022628:	686c      	ldr	r4, [r5, #4]
 802262a:	69a3      	ldr	r3, [r4, #24]
 802262c:	60a3      	str	r3, [r4, #8]
 802262e:	89a3      	ldrh	r3, [r4, #12]
 8022630:	071a      	lsls	r2, r3, #28
 8022632:	d52f      	bpl.n	8022694 <__swbuf_r+0x84>
 8022634:	6923      	ldr	r3, [r4, #16]
 8022636:	b36b      	cbz	r3, 8022694 <__swbuf_r+0x84>
 8022638:	6923      	ldr	r3, [r4, #16]
 802263a:	6820      	ldr	r0, [r4, #0]
 802263c:	1ac0      	subs	r0, r0, r3
 802263e:	6963      	ldr	r3, [r4, #20]
 8022640:	b2f6      	uxtb	r6, r6
 8022642:	4283      	cmp	r3, r0
 8022644:	4637      	mov	r7, r6
 8022646:	dc04      	bgt.n	8022652 <__swbuf_r+0x42>
 8022648:	4621      	mov	r1, r4
 802264a:	4628      	mov	r0, r5
 802264c:	f000 f944 	bl	80228d8 <_fflush_r>
 8022650:	bb30      	cbnz	r0, 80226a0 <__swbuf_r+0x90>
 8022652:	68a3      	ldr	r3, [r4, #8]
 8022654:	3b01      	subs	r3, #1
 8022656:	60a3      	str	r3, [r4, #8]
 8022658:	6823      	ldr	r3, [r4, #0]
 802265a:	1c5a      	adds	r2, r3, #1
 802265c:	6022      	str	r2, [r4, #0]
 802265e:	701e      	strb	r6, [r3, #0]
 8022660:	6963      	ldr	r3, [r4, #20]
 8022662:	3001      	adds	r0, #1
 8022664:	4283      	cmp	r3, r0
 8022666:	d004      	beq.n	8022672 <__swbuf_r+0x62>
 8022668:	89a3      	ldrh	r3, [r4, #12]
 802266a:	07db      	lsls	r3, r3, #31
 802266c:	d506      	bpl.n	802267c <__swbuf_r+0x6c>
 802266e:	2e0a      	cmp	r6, #10
 8022670:	d104      	bne.n	802267c <__swbuf_r+0x6c>
 8022672:	4621      	mov	r1, r4
 8022674:	4628      	mov	r0, r5
 8022676:	f000 f92f 	bl	80228d8 <_fflush_r>
 802267a:	b988      	cbnz	r0, 80226a0 <__swbuf_r+0x90>
 802267c:	4638      	mov	r0, r7
 802267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022680:	4b0a      	ldr	r3, [pc, #40]	; (80226ac <__swbuf_r+0x9c>)
 8022682:	429c      	cmp	r4, r3
 8022684:	d101      	bne.n	802268a <__swbuf_r+0x7a>
 8022686:	68ac      	ldr	r4, [r5, #8]
 8022688:	e7cf      	b.n	802262a <__swbuf_r+0x1a>
 802268a:	4b09      	ldr	r3, [pc, #36]	; (80226b0 <__swbuf_r+0xa0>)
 802268c:	429c      	cmp	r4, r3
 802268e:	bf08      	it	eq
 8022690:	68ec      	ldreq	r4, [r5, #12]
 8022692:	e7ca      	b.n	802262a <__swbuf_r+0x1a>
 8022694:	4621      	mov	r1, r4
 8022696:	4628      	mov	r0, r5
 8022698:	f000 f80c 	bl	80226b4 <__swsetup_r>
 802269c:	2800      	cmp	r0, #0
 802269e:	d0cb      	beq.n	8022638 <__swbuf_r+0x28>
 80226a0:	f04f 37ff 	mov.w	r7, #4294967295
 80226a4:	e7ea      	b.n	802267c <__swbuf_r+0x6c>
 80226a6:	bf00      	nop
 80226a8:	08028c24 	.word	0x08028c24
 80226ac:	08028c44 	.word	0x08028c44
 80226b0:	08028c04 	.word	0x08028c04

080226b4 <__swsetup_r>:
 80226b4:	4b32      	ldr	r3, [pc, #200]	; (8022780 <__swsetup_r+0xcc>)
 80226b6:	b570      	push	{r4, r5, r6, lr}
 80226b8:	681d      	ldr	r5, [r3, #0]
 80226ba:	4606      	mov	r6, r0
 80226bc:	460c      	mov	r4, r1
 80226be:	b125      	cbz	r5, 80226ca <__swsetup_r+0x16>
 80226c0:	69ab      	ldr	r3, [r5, #24]
 80226c2:	b913      	cbnz	r3, 80226ca <__swsetup_r+0x16>
 80226c4:	4628      	mov	r0, r5
 80226c6:	f000 f99b 	bl	8022a00 <__sinit>
 80226ca:	4b2e      	ldr	r3, [pc, #184]	; (8022784 <__swsetup_r+0xd0>)
 80226cc:	429c      	cmp	r4, r3
 80226ce:	d10f      	bne.n	80226f0 <__swsetup_r+0x3c>
 80226d0:	686c      	ldr	r4, [r5, #4]
 80226d2:	89a3      	ldrh	r3, [r4, #12]
 80226d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80226d8:	0719      	lsls	r1, r3, #28
 80226da:	d42c      	bmi.n	8022736 <__swsetup_r+0x82>
 80226dc:	06dd      	lsls	r5, r3, #27
 80226de:	d411      	bmi.n	8022704 <__swsetup_r+0x50>
 80226e0:	2309      	movs	r3, #9
 80226e2:	6033      	str	r3, [r6, #0]
 80226e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80226e8:	81a3      	strh	r3, [r4, #12]
 80226ea:	f04f 30ff 	mov.w	r0, #4294967295
 80226ee:	e03e      	b.n	802276e <__swsetup_r+0xba>
 80226f0:	4b25      	ldr	r3, [pc, #148]	; (8022788 <__swsetup_r+0xd4>)
 80226f2:	429c      	cmp	r4, r3
 80226f4:	d101      	bne.n	80226fa <__swsetup_r+0x46>
 80226f6:	68ac      	ldr	r4, [r5, #8]
 80226f8:	e7eb      	b.n	80226d2 <__swsetup_r+0x1e>
 80226fa:	4b24      	ldr	r3, [pc, #144]	; (802278c <__swsetup_r+0xd8>)
 80226fc:	429c      	cmp	r4, r3
 80226fe:	bf08      	it	eq
 8022700:	68ec      	ldreq	r4, [r5, #12]
 8022702:	e7e6      	b.n	80226d2 <__swsetup_r+0x1e>
 8022704:	0758      	lsls	r0, r3, #29
 8022706:	d512      	bpl.n	802272e <__swsetup_r+0x7a>
 8022708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802270a:	b141      	cbz	r1, 802271e <__swsetup_r+0x6a>
 802270c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022710:	4299      	cmp	r1, r3
 8022712:	d002      	beq.n	802271a <__swsetup_r+0x66>
 8022714:	4630      	mov	r0, r6
 8022716:	f7ff fcad 	bl	8022074 <_free_r>
 802271a:	2300      	movs	r3, #0
 802271c:	6363      	str	r3, [r4, #52]	; 0x34
 802271e:	89a3      	ldrh	r3, [r4, #12]
 8022720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022724:	81a3      	strh	r3, [r4, #12]
 8022726:	2300      	movs	r3, #0
 8022728:	6063      	str	r3, [r4, #4]
 802272a:	6923      	ldr	r3, [r4, #16]
 802272c:	6023      	str	r3, [r4, #0]
 802272e:	89a3      	ldrh	r3, [r4, #12]
 8022730:	f043 0308 	orr.w	r3, r3, #8
 8022734:	81a3      	strh	r3, [r4, #12]
 8022736:	6923      	ldr	r3, [r4, #16]
 8022738:	b94b      	cbnz	r3, 802274e <__swsetup_r+0x9a>
 802273a:	89a3      	ldrh	r3, [r4, #12]
 802273c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022744:	d003      	beq.n	802274e <__swsetup_r+0x9a>
 8022746:	4621      	mov	r1, r4
 8022748:	4630      	mov	r0, r6
 802274a:	f000 fa31 	bl	8022bb0 <__smakebuf_r>
 802274e:	89a0      	ldrh	r0, [r4, #12]
 8022750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022754:	f010 0301 	ands.w	r3, r0, #1
 8022758:	d00a      	beq.n	8022770 <__swsetup_r+0xbc>
 802275a:	2300      	movs	r3, #0
 802275c:	60a3      	str	r3, [r4, #8]
 802275e:	6963      	ldr	r3, [r4, #20]
 8022760:	425b      	negs	r3, r3
 8022762:	61a3      	str	r3, [r4, #24]
 8022764:	6923      	ldr	r3, [r4, #16]
 8022766:	b943      	cbnz	r3, 802277a <__swsetup_r+0xc6>
 8022768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802276c:	d1ba      	bne.n	80226e4 <__swsetup_r+0x30>
 802276e:	bd70      	pop	{r4, r5, r6, pc}
 8022770:	0781      	lsls	r1, r0, #30
 8022772:	bf58      	it	pl
 8022774:	6963      	ldrpl	r3, [r4, #20]
 8022776:	60a3      	str	r3, [r4, #8]
 8022778:	e7f4      	b.n	8022764 <__swsetup_r+0xb0>
 802277a:	2000      	movs	r0, #0
 802277c:	e7f7      	b.n	802276e <__swsetup_r+0xba>
 802277e:	bf00      	nop
 8022780:	20000140 	.word	0x20000140
 8022784:	08028c24 	.word	0x08028c24
 8022788:	08028c44 	.word	0x08028c44
 802278c:	08028c04 	.word	0x08028c04

08022790 <__assert_func>:
 8022790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022792:	4614      	mov	r4, r2
 8022794:	461a      	mov	r2, r3
 8022796:	4b09      	ldr	r3, [pc, #36]	; (80227bc <__assert_func+0x2c>)
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	4605      	mov	r5, r0
 802279c:	68d8      	ldr	r0, [r3, #12]
 802279e:	b14c      	cbz	r4, 80227b4 <__assert_func+0x24>
 80227a0:	4b07      	ldr	r3, [pc, #28]	; (80227c0 <__assert_func+0x30>)
 80227a2:	9100      	str	r1, [sp, #0]
 80227a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80227a8:	4906      	ldr	r1, [pc, #24]	; (80227c4 <__assert_func+0x34>)
 80227aa:	462b      	mov	r3, r5
 80227ac:	f000 f9a6 	bl	8022afc <fiprintf>
 80227b0:	f000 ff32 	bl	8023618 <abort>
 80227b4:	4b04      	ldr	r3, [pc, #16]	; (80227c8 <__assert_func+0x38>)
 80227b6:	461c      	mov	r4, r3
 80227b8:	e7f3      	b.n	80227a2 <__assert_func+0x12>
 80227ba:	bf00      	nop
 80227bc:	20000140 	.word	0x20000140
 80227c0:	08028bc6 	.word	0x08028bc6
 80227c4:	08028bd3 	.word	0x08028bd3
 80227c8:	08028c01 	.word	0x08028c01

080227cc <__sflush_r>:
 80227cc:	898a      	ldrh	r2, [r1, #12]
 80227ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227d2:	4605      	mov	r5, r0
 80227d4:	0710      	lsls	r0, r2, #28
 80227d6:	460c      	mov	r4, r1
 80227d8:	d458      	bmi.n	802288c <__sflush_r+0xc0>
 80227da:	684b      	ldr	r3, [r1, #4]
 80227dc:	2b00      	cmp	r3, #0
 80227de:	dc05      	bgt.n	80227ec <__sflush_r+0x20>
 80227e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	dc02      	bgt.n	80227ec <__sflush_r+0x20>
 80227e6:	2000      	movs	r0, #0
 80227e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80227ee:	2e00      	cmp	r6, #0
 80227f0:	d0f9      	beq.n	80227e6 <__sflush_r+0x1a>
 80227f2:	2300      	movs	r3, #0
 80227f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80227f8:	682f      	ldr	r7, [r5, #0]
 80227fa:	602b      	str	r3, [r5, #0]
 80227fc:	d032      	beq.n	8022864 <__sflush_r+0x98>
 80227fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022800:	89a3      	ldrh	r3, [r4, #12]
 8022802:	075a      	lsls	r2, r3, #29
 8022804:	d505      	bpl.n	8022812 <__sflush_r+0x46>
 8022806:	6863      	ldr	r3, [r4, #4]
 8022808:	1ac0      	subs	r0, r0, r3
 802280a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802280c:	b10b      	cbz	r3, 8022812 <__sflush_r+0x46>
 802280e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022810:	1ac0      	subs	r0, r0, r3
 8022812:	2300      	movs	r3, #0
 8022814:	4602      	mov	r2, r0
 8022816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022818:	6a21      	ldr	r1, [r4, #32]
 802281a:	4628      	mov	r0, r5
 802281c:	47b0      	blx	r6
 802281e:	1c43      	adds	r3, r0, #1
 8022820:	89a3      	ldrh	r3, [r4, #12]
 8022822:	d106      	bne.n	8022832 <__sflush_r+0x66>
 8022824:	6829      	ldr	r1, [r5, #0]
 8022826:	291d      	cmp	r1, #29
 8022828:	d82c      	bhi.n	8022884 <__sflush_r+0xb8>
 802282a:	4a2a      	ldr	r2, [pc, #168]	; (80228d4 <__sflush_r+0x108>)
 802282c:	40ca      	lsrs	r2, r1
 802282e:	07d6      	lsls	r6, r2, #31
 8022830:	d528      	bpl.n	8022884 <__sflush_r+0xb8>
 8022832:	2200      	movs	r2, #0
 8022834:	6062      	str	r2, [r4, #4]
 8022836:	04d9      	lsls	r1, r3, #19
 8022838:	6922      	ldr	r2, [r4, #16]
 802283a:	6022      	str	r2, [r4, #0]
 802283c:	d504      	bpl.n	8022848 <__sflush_r+0x7c>
 802283e:	1c42      	adds	r2, r0, #1
 8022840:	d101      	bne.n	8022846 <__sflush_r+0x7a>
 8022842:	682b      	ldr	r3, [r5, #0]
 8022844:	b903      	cbnz	r3, 8022848 <__sflush_r+0x7c>
 8022846:	6560      	str	r0, [r4, #84]	; 0x54
 8022848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802284a:	602f      	str	r7, [r5, #0]
 802284c:	2900      	cmp	r1, #0
 802284e:	d0ca      	beq.n	80227e6 <__sflush_r+0x1a>
 8022850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022854:	4299      	cmp	r1, r3
 8022856:	d002      	beq.n	802285e <__sflush_r+0x92>
 8022858:	4628      	mov	r0, r5
 802285a:	f7ff fc0b 	bl	8022074 <_free_r>
 802285e:	2000      	movs	r0, #0
 8022860:	6360      	str	r0, [r4, #52]	; 0x34
 8022862:	e7c1      	b.n	80227e8 <__sflush_r+0x1c>
 8022864:	6a21      	ldr	r1, [r4, #32]
 8022866:	2301      	movs	r3, #1
 8022868:	4628      	mov	r0, r5
 802286a:	47b0      	blx	r6
 802286c:	1c41      	adds	r1, r0, #1
 802286e:	d1c7      	bne.n	8022800 <__sflush_r+0x34>
 8022870:	682b      	ldr	r3, [r5, #0]
 8022872:	2b00      	cmp	r3, #0
 8022874:	d0c4      	beq.n	8022800 <__sflush_r+0x34>
 8022876:	2b1d      	cmp	r3, #29
 8022878:	d001      	beq.n	802287e <__sflush_r+0xb2>
 802287a:	2b16      	cmp	r3, #22
 802287c:	d101      	bne.n	8022882 <__sflush_r+0xb6>
 802287e:	602f      	str	r7, [r5, #0]
 8022880:	e7b1      	b.n	80227e6 <__sflush_r+0x1a>
 8022882:	89a3      	ldrh	r3, [r4, #12]
 8022884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022888:	81a3      	strh	r3, [r4, #12]
 802288a:	e7ad      	b.n	80227e8 <__sflush_r+0x1c>
 802288c:	690f      	ldr	r7, [r1, #16]
 802288e:	2f00      	cmp	r7, #0
 8022890:	d0a9      	beq.n	80227e6 <__sflush_r+0x1a>
 8022892:	0793      	lsls	r3, r2, #30
 8022894:	680e      	ldr	r6, [r1, #0]
 8022896:	bf08      	it	eq
 8022898:	694b      	ldreq	r3, [r1, #20]
 802289a:	600f      	str	r7, [r1, #0]
 802289c:	bf18      	it	ne
 802289e:	2300      	movne	r3, #0
 80228a0:	eba6 0807 	sub.w	r8, r6, r7
 80228a4:	608b      	str	r3, [r1, #8]
 80228a6:	f1b8 0f00 	cmp.w	r8, #0
 80228aa:	dd9c      	ble.n	80227e6 <__sflush_r+0x1a>
 80228ac:	6a21      	ldr	r1, [r4, #32]
 80228ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80228b0:	4643      	mov	r3, r8
 80228b2:	463a      	mov	r2, r7
 80228b4:	4628      	mov	r0, r5
 80228b6:	47b0      	blx	r6
 80228b8:	2800      	cmp	r0, #0
 80228ba:	dc06      	bgt.n	80228ca <__sflush_r+0xfe>
 80228bc:	89a3      	ldrh	r3, [r4, #12]
 80228be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80228c2:	81a3      	strh	r3, [r4, #12]
 80228c4:	f04f 30ff 	mov.w	r0, #4294967295
 80228c8:	e78e      	b.n	80227e8 <__sflush_r+0x1c>
 80228ca:	4407      	add	r7, r0
 80228cc:	eba8 0800 	sub.w	r8, r8, r0
 80228d0:	e7e9      	b.n	80228a6 <__sflush_r+0xda>
 80228d2:	bf00      	nop
 80228d4:	20400001 	.word	0x20400001

080228d8 <_fflush_r>:
 80228d8:	b538      	push	{r3, r4, r5, lr}
 80228da:	690b      	ldr	r3, [r1, #16]
 80228dc:	4605      	mov	r5, r0
 80228de:	460c      	mov	r4, r1
 80228e0:	b913      	cbnz	r3, 80228e8 <_fflush_r+0x10>
 80228e2:	2500      	movs	r5, #0
 80228e4:	4628      	mov	r0, r5
 80228e6:	bd38      	pop	{r3, r4, r5, pc}
 80228e8:	b118      	cbz	r0, 80228f2 <_fflush_r+0x1a>
 80228ea:	6983      	ldr	r3, [r0, #24]
 80228ec:	b90b      	cbnz	r3, 80228f2 <_fflush_r+0x1a>
 80228ee:	f000 f887 	bl	8022a00 <__sinit>
 80228f2:	4b14      	ldr	r3, [pc, #80]	; (8022944 <_fflush_r+0x6c>)
 80228f4:	429c      	cmp	r4, r3
 80228f6:	d11b      	bne.n	8022930 <_fflush_r+0x58>
 80228f8:	686c      	ldr	r4, [r5, #4]
 80228fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d0ef      	beq.n	80228e2 <_fflush_r+0xa>
 8022902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022904:	07d0      	lsls	r0, r2, #31
 8022906:	d404      	bmi.n	8022912 <_fflush_r+0x3a>
 8022908:	0599      	lsls	r1, r3, #22
 802290a:	d402      	bmi.n	8022912 <_fflush_r+0x3a>
 802290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802290e:	f000 f927 	bl	8022b60 <__retarget_lock_acquire_recursive>
 8022912:	4628      	mov	r0, r5
 8022914:	4621      	mov	r1, r4
 8022916:	f7ff ff59 	bl	80227cc <__sflush_r>
 802291a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802291c:	07da      	lsls	r2, r3, #31
 802291e:	4605      	mov	r5, r0
 8022920:	d4e0      	bmi.n	80228e4 <_fflush_r+0xc>
 8022922:	89a3      	ldrh	r3, [r4, #12]
 8022924:	059b      	lsls	r3, r3, #22
 8022926:	d4dd      	bmi.n	80228e4 <_fflush_r+0xc>
 8022928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802292a:	f000 f91a 	bl	8022b62 <__retarget_lock_release_recursive>
 802292e:	e7d9      	b.n	80228e4 <_fflush_r+0xc>
 8022930:	4b05      	ldr	r3, [pc, #20]	; (8022948 <_fflush_r+0x70>)
 8022932:	429c      	cmp	r4, r3
 8022934:	d101      	bne.n	802293a <_fflush_r+0x62>
 8022936:	68ac      	ldr	r4, [r5, #8]
 8022938:	e7df      	b.n	80228fa <_fflush_r+0x22>
 802293a:	4b04      	ldr	r3, [pc, #16]	; (802294c <_fflush_r+0x74>)
 802293c:	429c      	cmp	r4, r3
 802293e:	bf08      	it	eq
 8022940:	68ec      	ldreq	r4, [r5, #12]
 8022942:	e7da      	b.n	80228fa <_fflush_r+0x22>
 8022944:	08028c24 	.word	0x08028c24
 8022948:	08028c44 	.word	0x08028c44
 802294c:	08028c04 	.word	0x08028c04

08022950 <std>:
 8022950:	2300      	movs	r3, #0
 8022952:	b510      	push	{r4, lr}
 8022954:	4604      	mov	r4, r0
 8022956:	e9c0 3300 	strd	r3, r3, [r0]
 802295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802295e:	6083      	str	r3, [r0, #8]
 8022960:	8181      	strh	r1, [r0, #12]
 8022962:	6643      	str	r3, [r0, #100]	; 0x64
 8022964:	81c2      	strh	r2, [r0, #14]
 8022966:	6183      	str	r3, [r0, #24]
 8022968:	4619      	mov	r1, r3
 802296a:	2208      	movs	r2, #8
 802296c:	305c      	adds	r0, #92	; 0x5c
 802296e:	f7ff fb79 	bl	8022064 <memset>
 8022972:	4b05      	ldr	r3, [pc, #20]	; (8022988 <std+0x38>)
 8022974:	6263      	str	r3, [r4, #36]	; 0x24
 8022976:	4b05      	ldr	r3, [pc, #20]	; (802298c <std+0x3c>)
 8022978:	62a3      	str	r3, [r4, #40]	; 0x28
 802297a:	4b05      	ldr	r3, [pc, #20]	; (8022990 <std+0x40>)
 802297c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802297e:	4b05      	ldr	r3, [pc, #20]	; (8022994 <std+0x44>)
 8022980:	6224      	str	r4, [r4, #32]
 8022982:	6323      	str	r3, [r4, #48]	; 0x30
 8022984:	bd10      	pop	{r4, pc}
 8022986:	bf00      	nop
 8022988:	0802356d 	.word	0x0802356d
 802298c:	0802358f 	.word	0x0802358f
 8022990:	080235c7 	.word	0x080235c7
 8022994:	080235eb 	.word	0x080235eb

08022998 <_cleanup_r>:
 8022998:	4901      	ldr	r1, [pc, #4]	; (80229a0 <_cleanup_r+0x8>)
 802299a:	f000 b8c1 	b.w	8022b20 <_fwalk_reent>
 802299e:	bf00      	nop
 80229a0:	080228d9 	.word	0x080228d9

080229a4 <__sfmoreglue>:
 80229a4:	b570      	push	{r4, r5, r6, lr}
 80229a6:	2268      	movs	r2, #104	; 0x68
 80229a8:	1e4d      	subs	r5, r1, #1
 80229aa:	4355      	muls	r5, r2
 80229ac:	460e      	mov	r6, r1
 80229ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80229b2:	f7ff fbcb 	bl	802214c <_malloc_r>
 80229b6:	4604      	mov	r4, r0
 80229b8:	b140      	cbz	r0, 80229cc <__sfmoreglue+0x28>
 80229ba:	2100      	movs	r1, #0
 80229bc:	e9c0 1600 	strd	r1, r6, [r0]
 80229c0:	300c      	adds	r0, #12
 80229c2:	60a0      	str	r0, [r4, #8]
 80229c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80229c8:	f7ff fb4c 	bl	8022064 <memset>
 80229cc:	4620      	mov	r0, r4
 80229ce:	bd70      	pop	{r4, r5, r6, pc}

080229d0 <__sfp_lock_acquire>:
 80229d0:	4801      	ldr	r0, [pc, #4]	; (80229d8 <__sfp_lock_acquire+0x8>)
 80229d2:	f000 b8c5 	b.w	8022b60 <__retarget_lock_acquire_recursive>
 80229d6:	bf00      	nop
 80229d8:	20014319 	.word	0x20014319

080229dc <__sfp_lock_release>:
 80229dc:	4801      	ldr	r0, [pc, #4]	; (80229e4 <__sfp_lock_release+0x8>)
 80229de:	f000 b8c0 	b.w	8022b62 <__retarget_lock_release_recursive>
 80229e2:	bf00      	nop
 80229e4:	20014319 	.word	0x20014319

080229e8 <__sinit_lock_acquire>:
 80229e8:	4801      	ldr	r0, [pc, #4]	; (80229f0 <__sinit_lock_acquire+0x8>)
 80229ea:	f000 b8b9 	b.w	8022b60 <__retarget_lock_acquire_recursive>
 80229ee:	bf00      	nop
 80229f0:	2001431a 	.word	0x2001431a

080229f4 <__sinit_lock_release>:
 80229f4:	4801      	ldr	r0, [pc, #4]	; (80229fc <__sinit_lock_release+0x8>)
 80229f6:	f000 b8b4 	b.w	8022b62 <__retarget_lock_release_recursive>
 80229fa:	bf00      	nop
 80229fc:	2001431a 	.word	0x2001431a

08022a00 <__sinit>:
 8022a00:	b510      	push	{r4, lr}
 8022a02:	4604      	mov	r4, r0
 8022a04:	f7ff fff0 	bl	80229e8 <__sinit_lock_acquire>
 8022a08:	69a3      	ldr	r3, [r4, #24]
 8022a0a:	b11b      	cbz	r3, 8022a14 <__sinit+0x14>
 8022a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a10:	f7ff bff0 	b.w	80229f4 <__sinit_lock_release>
 8022a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022a18:	6523      	str	r3, [r4, #80]	; 0x50
 8022a1a:	4b13      	ldr	r3, [pc, #76]	; (8022a68 <__sinit+0x68>)
 8022a1c:	4a13      	ldr	r2, [pc, #76]	; (8022a6c <__sinit+0x6c>)
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8022a22:	42a3      	cmp	r3, r4
 8022a24:	bf04      	itt	eq
 8022a26:	2301      	moveq	r3, #1
 8022a28:	61a3      	streq	r3, [r4, #24]
 8022a2a:	4620      	mov	r0, r4
 8022a2c:	f000 f820 	bl	8022a70 <__sfp>
 8022a30:	6060      	str	r0, [r4, #4]
 8022a32:	4620      	mov	r0, r4
 8022a34:	f000 f81c 	bl	8022a70 <__sfp>
 8022a38:	60a0      	str	r0, [r4, #8]
 8022a3a:	4620      	mov	r0, r4
 8022a3c:	f000 f818 	bl	8022a70 <__sfp>
 8022a40:	2200      	movs	r2, #0
 8022a42:	60e0      	str	r0, [r4, #12]
 8022a44:	2104      	movs	r1, #4
 8022a46:	6860      	ldr	r0, [r4, #4]
 8022a48:	f7ff ff82 	bl	8022950 <std>
 8022a4c:	68a0      	ldr	r0, [r4, #8]
 8022a4e:	2201      	movs	r2, #1
 8022a50:	2109      	movs	r1, #9
 8022a52:	f7ff ff7d 	bl	8022950 <std>
 8022a56:	68e0      	ldr	r0, [r4, #12]
 8022a58:	2202      	movs	r2, #2
 8022a5a:	2112      	movs	r1, #18
 8022a5c:	f7ff ff78 	bl	8022950 <std>
 8022a60:	2301      	movs	r3, #1
 8022a62:	61a3      	str	r3, [r4, #24]
 8022a64:	e7d2      	b.n	8022a0c <__sinit+0xc>
 8022a66:	bf00      	nop
 8022a68:	08028b50 	.word	0x08028b50
 8022a6c:	08022999 	.word	0x08022999

08022a70 <__sfp>:
 8022a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a72:	4607      	mov	r7, r0
 8022a74:	f7ff ffac 	bl	80229d0 <__sfp_lock_acquire>
 8022a78:	4b1e      	ldr	r3, [pc, #120]	; (8022af4 <__sfp+0x84>)
 8022a7a:	681e      	ldr	r6, [r3, #0]
 8022a7c:	69b3      	ldr	r3, [r6, #24]
 8022a7e:	b913      	cbnz	r3, 8022a86 <__sfp+0x16>
 8022a80:	4630      	mov	r0, r6
 8022a82:	f7ff ffbd 	bl	8022a00 <__sinit>
 8022a86:	3648      	adds	r6, #72	; 0x48
 8022a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022a8c:	3b01      	subs	r3, #1
 8022a8e:	d503      	bpl.n	8022a98 <__sfp+0x28>
 8022a90:	6833      	ldr	r3, [r6, #0]
 8022a92:	b30b      	cbz	r3, 8022ad8 <__sfp+0x68>
 8022a94:	6836      	ldr	r6, [r6, #0]
 8022a96:	e7f7      	b.n	8022a88 <__sfp+0x18>
 8022a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022a9c:	b9d5      	cbnz	r5, 8022ad4 <__sfp+0x64>
 8022a9e:	4b16      	ldr	r3, [pc, #88]	; (8022af8 <__sfp+0x88>)
 8022aa0:	60e3      	str	r3, [r4, #12]
 8022aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8022aa8:	f000 f859 	bl	8022b5e <__retarget_lock_init_recursive>
 8022aac:	f7ff ff96 	bl	80229dc <__sfp_lock_release>
 8022ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022ab8:	6025      	str	r5, [r4, #0]
 8022aba:	61a5      	str	r5, [r4, #24]
 8022abc:	2208      	movs	r2, #8
 8022abe:	4629      	mov	r1, r5
 8022ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022ac4:	f7ff face 	bl	8022064 <memset>
 8022ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022ad0:	4620      	mov	r0, r4
 8022ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ad4:	3468      	adds	r4, #104	; 0x68
 8022ad6:	e7d9      	b.n	8022a8c <__sfp+0x1c>
 8022ad8:	2104      	movs	r1, #4
 8022ada:	4638      	mov	r0, r7
 8022adc:	f7ff ff62 	bl	80229a4 <__sfmoreglue>
 8022ae0:	4604      	mov	r4, r0
 8022ae2:	6030      	str	r0, [r6, #0]
 8022ae4:	2800      	cmp	r0, #0
 8022ae6:	d1d5      	bne.n	8022a94 <__sfp+0x24>
 8022ae8:	f7ff ff78 	bl	80229dc <__sfp_lock_release>
 8022aec:	230c      	movs	r3, #12
 8022aee:	603b      	str	r3, [r7, #0]
 8022af0:	e7ee      	b.n	8022ad0 <__sfp+0x60>
 8022af2:	bf00      	nop
 8022af4:	08028b50 	.word	0x08028b50
 8022af8:	ffff0001 	.word	0xffff0001

08022afc <fiprintf>:
 8022afc:	b40e      	push	{r1, r2, r3}
 8022afe:	b503      	push	{r0, r1, lr}
 8022b00:	4601      	mov	r1, r0
 8022b02:	ab03      	add	r3, sp, #12
 8022b04:	4805      	ldr	r0, [pc, #20]	; (8022b1c <fiprintf+0x20>)
 8022b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b0a:	6800      	ldr	r0, [r0, #0]
 8022b0c:	9301      	str	r3, [sp, #4]
 8022b0e:	f000 fa21 	bl	8022f54 <_vfiprintf_r>
 8022b12:	b002      	add	sp, #8
 8022b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b18:	b003      	add	sp, #12
 8022b1a:	4770      	bx	lr
 8022b1c:	20000140 	.word	0x20000140

08022b20 <_fwalk_reent>:
 8022b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b24:	4606      	mov	r6, r0
 8022b26:	4688      	mov	r8, r1
 8022b28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022b2c:	2700      	movs	r7, #0
 8022b2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022b32:	f1b9 0901 	subs.w	r9, r9, #1
 8022b36:	d505      	bpl.n	8022b44 <_fwalk_reent+0x24>
 8022b38:	6824      	ldr	r4, [r4, #0]
 8022b3a:	2c00      	cmp	r4, #0
 8022b3c:	d1f7      	bne.n	8022b2e <_fwalk_reent+0xe>
 8022b3e:	4638      	mov	r0, r7
 8022b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b44:	89ab      	ldrh	r3, [r5, #12]
 8022b46:	2b01      	cmp	r3, #1
 8022b48:	d907      	bls.n	8022b5a <_fwalk_reent+0x3a>
 8022b4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022b4e:	3301      	adds	r3, #1
 8022b50:	d003      	beq.n	8022b5a <_fwalk_reent+0x3a>
 8022b52:	4629      	mov	r1, r5
 8022b54:	4630      	mov	r0, r6
 8022b56:	47c0      	blx	r8
 8022b58:	4307      	orrs	r7, r0
 8022b5a:	3568      	adds	r5, #104	; 0x68
 8022b5c:	e7e9      	b.n	8022b32 <_fwalk_reent+0x12>

08022b5e <__retarget_lock_init_recursive>:
 8022b5e:	4770      	bx	lr

08022b60 <__retarget_lock_acquire_recursive>:
 8022b60:	4770      	bx	lr

08022b62 <__retarget_lock_release_recursive>:
 8022b62:	4770      	bx	lr

08022b64 <__swhatbuf_r>:
 8022b64:	b570      	push	{r4, r5, r6, lr}
 8022b66:	460e      	mov	r6, r1
 8022b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b6c:	2900      	cmp	r1, #0
 8022b6e:	b096      	sub	sp, #88	; 0x58
 8022b70:	4614      	mov	r4, r2
 8022b72:	461d      	mov	r5, r3
 8022b74:	da08      	bge.n	8022b88 <__swhatbuf_r+0x24>
 8022b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022b7a:	2200      	movs	r2, #0
 8022b7c:	602a      	str	r2, [r5, #0]
 8022b7e:	061a      	lsls	r2, r3, #24
 8022b80:	d410      	bmi.n	8022ba4 <__swhatbuf_r+0x40>
 8022b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022b86:	e00e      	b.n	8022ba6 <__swhatbuf_r+0x42>
 8022b88:	466a      	mov	r2, sp
 8022b8a:	f000 fd5d 	bl	8023648 <_fstat_r>
 8022b8e:	2800      	cmp	r0, #0
 8022b90:	dbf1      	blt.n	8022b76 <__swhatbuf_r+0x12>
 8022b92:	9a01      	ldr	r2, [sp, #4]
 8022b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022b9c:	425a      	negs	r2, r3
 8022b9e:	415a      	adcs	r2, r3
 8022ba0:	602a      	str	r2, [r5, #0]
 8022ba2:	e7ee      	b.n	8022b82 <__swhatbuf_r+0x1e>
 8022ba4:	2340      	movs	r3, #64	; 0x40
 8022ba6:	2000      	movs	r0, #0
 8022ba8:	6023      	str	r3, [r4, #0]
 8022baa:	b016      	add	sp, #88	; 0x58
 8022bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08022bb0 <__smakebuf_r>:
 8022bb0:	898b      	ldrh	r3, [r1, #12]
 8022bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022bb4:	079d      	lsls	r5, r3, #30
 8022bb6:	4606      	mov	r6, r0
 8022bb8:	460c      	mov	r4, r1
 8022bba:	d507      	bpl.n	8022bcc <__smakebuf_r+0x1c>
 8022bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022bc0:	6023      	str	r3, [r4, #0]
 8022bc2:	6123      	str	r3, [r4, #16]
 8022bc4:	2301      	movs	r3, #1
 8022bc6:	6163      	str	r3, [r4, #20]
 8022bc8:	b002      	add	sp, #8
 8022bca:	bd70      	pop	{r4, r5, r6, pc}
 8022bcc:	ab01      	add	r3, sp, #4
 8022bce:	466a      	mov	r2, sp
 8022bd0:	f7ff ffc8 	bl	8022b64 <__swhatbuf_r>
 8022bd4:	9900      	ldr	r1, [sp, #0]
 8022bd6:	4605      	mov	r5, r0
 8022bd8:	4630      	mov	r0, r6
 8022bda:	f7ff fab7 	bl	802214c <_malloc_r>
 8022bde:	b948      	cbnz	r0, 8022bf4 <__smakebuf_r+0x44>
 8022be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022be4:	059a      	lsls	r2, r3, #22
 8022be6:	d4ef      	bmi.n	8022bc8 <__smakebuf_r+0x18>
 8022be8:	f023 0303 	bic.w	r3, r3, #3
 8022bec:	f043 0302 	orr.w	r3, r3, #2
 8022bf0:	81a3      	strh	r3, [r4, #12]
 8022bf2:	e7e3      	b.n	8022bbc <__smakebuf_r+0xc>
 8022bf4:	4b0d      	ldr	r3, [pc, #52]	; (8022c2c <__smakebuf_r+0x7c>)
 8022bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8022bf8:	89a3      	ldrh	r3, [r4, #12]
 8022bfa:	6020      	str	r0, [r4, #0]
 8022bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022c00:	81a3      	strh	r3, [r4, #12]
 8022c02:	9b00      	ldr	r3, [sp, #0]
 8022c04:	6163      	str	r3, [r4, #20]
 8022c06:	9b01      	ldr	r3, [sp, #4]
 8022c08:	6120      	str	r0, [r4, #16]
 8022c0a:	b15b      	cbz	r3, 8022c24 <__smakebuf_r+0x74>
 8022c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022c10:	4630      	mov	r0, r6
 8022c12:	f000 fd2b 	bl	802366c <_isatty_r>
 8022c16:	b128      	cbz	r0, 8022c24 <__smakebuf_r+0x74>
 8022c18:	89a3      	ldrh	r3, [r4, #12]
 8022c1a:	f023 0303 	bic.w	r3, r3, #3
 8022c1e:	f043 0301 	orr.w	r3, r3, #1
 8022c22:	81a3      	strh	r3, [r4, #12]
 8022c24:	89a0      	ldrh	r0, [r4, #12]
 8022c26:	4305      	orrs	r5, r0
 8022c28:	81a5      	strh	r5, [r4, #12]
 8022c2a:	e7cd      	b.n	8022bc8 <__smakebuf_r+0x18>
 8022c2c:	08022999 	.word	0x08022999

08022c30 <__malloc_lock>:
 8022c30:	4801      	ldr	r0, [pc, #4]	; (8022c38 <__malloc_lock+0x8>)
 8022c32:	f7ff bf95 	b.w	8022b60 <__retarget_lock_acquire_recursive>
 8022c36:	bf00      	nop
 8022c38:	20014318 	.word	0x20014318

08022c3c <__malloc_unlock>:
 8022c3c:	4801      	ldr	r0, [pc, #4]	; (8022c44 <__malloc_unlock+0x8>)
 8022c3e:	f7ff bf90 	b.w	8022b62 <__retarget_lock_release_recursive>
 8022c42:	bf00      	nop
 8022c44:	20014318 	.word	0x20014318

08022c48 <__ssputs_r>:
 8022c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c4c:	688e      	ldr	r6, [r1, #8]
 8022c4e:	429e      	cmp	r6, r3
 8022c50:	4682      	mov	sl, r0
 8022c52:	460c      	mov	r4, r1
 8022c54:	4690      	mov	r8, r2
 8022c56:	461f      	mov	r7, r3
 8022c58:	d838      	bhi.n	8022ccc <__ssputs_r+0x84>
 8022c5a:	898a      	ldrh	r2, [r1, #12]
 8022c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022c60:	d032      	beq.n	8022cc8 <__ssputs_r+0x80>
 8022c62:	6825      	ldr	r5, [r4, #0]
 8022c64:	6909      	ldr	r1, [r1, #16]
 8022c66:	eba5 0901 	sub.w	r9, r5, r1
 8022c6a:	6965      	ldr	r5, [r4, #20]
 8022c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022c74:	3301      	adds	r3, #1
 8022c76:	444b      	add	r3, r9
 8022c78:	106d      	asrs	r5, r5, #1
 8022c7a:	429d      	cmp	r5, r3
 8022c7c:	bf38      	it	cc
 8022c7e:	461d      	movcc	r5, r3
 8022c80:	0553      	lsls	r3, r2, #21
 8022c82:	d531      	bpl.n	8022ce8 <__ssputs_r+0xa0>
 8022c84:	4629      	mov	r1, r5
 8022c86:	f7ff fa61 	bl	802214c <_malloc_r>
 8022c8a:	4606      	mov	r6, r0
 8022c8c:	b950      	cbnz	r0, 8022ca4 <__ssputs_r+0x5c>
 8022c8e:	230c      	movs	r3, #12
 8022c90:	f8ca 3000 	str.w	r3, [sl]
 8022c94:	89a3      	ldrh	r3, [r4, #12]
 8022c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c9a:	81a3      	strh	r3, [r4, #12]
 8022c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8022ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ca4:	6921      	ldr	r1, [r4, #16]
 8022ca6:	464a      	mov	r2, r9
 8022ca8:	f7ff f9b4 	bl	8022014 <memcpy>
 8022cac:	89a3      	ldrh	r3, [r4, #12]
 8022cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022cb6:	81a3      	strh	r3, [r4, #12]
 8022cb8:	6126      	str	r6, [r4, #16]
 8022cba:	6165      	str	r5, [r4, #20]
 8022cbc:	444e      	add	r6, r9
 8022cbe:	eba5 0509 	sub.w	r5, r5, r9
 8022cc2:	6026      	str	r6, [r4, #0]
 8022cc4:	60a5      	str	r5, [r4, #8]
 8022cc6:	463e      	mov	r6, r7
 8022cc8:	42be      	cmp	r6, r7
 8022cca:	d900      	bls.n	8022cce <__ssputs_r+0x86>
 8022ccc:	463e      	mov	r6, r7
 8022cce:	6820      	ldr	r0, [r4, #0]
 8022cd0:	4632      	mov	r2, r6
 8022cd2:	4641      	mov	r1, r8
 8022cd4:	f7ff f9ac 	bl	8022030 <memmove>
 8022cd8:	68a3      	ldr	r3, [r4, #8]
 8022cda:	1b9b      	subs	r3, r3, r6
 8022cdc:	60a3      	str	r3, [r4, #8]
 8022cde:	6823      	ldr	r3, [r4, #0]
 8022ce0:	4433      	add	r3, r6
 8022ce2:	6023      	str	r3, [r4, #0]
 8022ce4:	2000      	movs	r0, #0
 8022ce6:	e7db      	b.n	8022ca0 <__ssputs_r+0x58>
 8022ce8:	462a      	mov	r2, r5
 8022cea:	f000 fce1 	bl	80236b0 <_realloc_r>
 8022cee:	4606      	mov	r6, r0
 8022cf0:	2800      	cmp	r0, #0
 8022cf2:	d1e1      	bne.n	8022cb8 <__ssputs_r+0x70>
 8022cf4:	6921      	ldr	r1, [r4, #16]
 8022cf6:	4650      	mov	r0, sl
 8022cf8:	f7ff f9bc 	bl	8022074 <_free_r>
 8022cfc:	e7c7      	b.n	8022c8e <__ssputs_r+0x46>
	...

08022d00 <_svfiprintf_r>:
 8022d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d04:	4698      	mov	r8, r3
 8022d06:	898b      	ldrh	r3, [r1, #12]
 8022d08:	061b      	lsls	r3, r3, #24
 8022d0a:	b09d      	sub	sp, #116	; 0x74
 8022d0c:	4607      	mov	r7, r0
 8022d0e:	460d      	mov	r5, r1
 8022d10:	4614      	mov	r4, r2
 8022d12:	d50e      	bpl.n	8022d32 <_svfiprintf_r+0x32>
 8022d14:	690b      	ldr	r3, [r1, #16]
 8022d16:	b963      	cbnz	r3, 8022d32 <_svfiprintf_r+0x32>
 8022d18:	2140      	movs	r1, #64	; 0x40
 8022d1a:	f7ff fa17 	bl	802214c <_malloc_r>
 8022d1e:	6028      	str	r0, [r5, #0]
 8022d20:	6128      	str	r0, [r5, #16]
 8022d22:	b920      	cbnz	r0, 8022d2e <_svfiprintf_r+0x2e>
 8022d24:	230c      	movs	r3, #12
 8022d26:	603b      	str	r3, [r7, #0]
 8022d28:	f04f 30ff 	mov.w	r0, #4294967295
 8022d2c:	e0d1      	b.n	8022ed2 <_svfiprintf_r+0x1d2>
 8022d2e:	2340      	movs	r3, #64	; 0x40
 8022d30:	616b      	str	r3, [r5, #20]
 8022d32:	2300      	movs	r3, #0
 8022d34:	9309      	str	r3, [sp, #36]	; 0x24
 8022d36:	2320      	movs	r3, #32
 8022d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d40:	2330      	movs	r3, #48	; 0x30
 8022d42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022eec <_svfiprintf_r+0x1ec>
 8022d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022d4a:	f04f 0901 	mov.w	r9, #1
 8022d4e:	4623      	mov	r3, r4
 8022d50:	469a      	mov	sl, r3
 8022d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d56:	b10a      	cbz	r2, 8022d5c <_svfiprintf_r+0x5c>
 8022d58:	2a25      	cmp	r2, #37	; 0x25
 8022d5a:	d1f9      	bne.n	8022d50 <_svfiprintf_r+0x50>
 8022d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8022d60:	d00b      	beq.n	8022d7a <_svfiprintf_r+0x7a>
 8022d62:	465b      	mov	r3, fp
 8022d64:	4622      	mov	r2, r4
 8022d66:	4629      	mov	r1, r5
 8022d68:	4638      	mov	r0, r7
 8022d6a:	f7ff ff6d 	bl	8022c48 <__ssputs_r>
 8022d6e:	3001      	adds	r0, #1
 8022d70:	f000 80aa 	beq.w	8022ec8 <_svfiprintf_r+0x1c8>
 8022d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d76:	445a      	add	r2, fp
 8022d78:	9209      	str	r2, [sp, #36]	; 0x24
 8022d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	f000 80a2 	beq.w	8022ec8 <_svfiprintf_r+0x1c8>
 8022d84:	2300      	movs	r3, #0
 8022d86:	f04f 32ff 	mov.w	r2, #4294967295
 8022d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d8e:	f10a 0a01 	add.w	sl, sl, #1
 8022d92:	9304      	str	r3, [sp, #16]
 8022d94:	9307      	str	r3, [sp, #28]
 8022d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8022d9c:	4654      	mov	r4, sl
 8022d9e:	2205      	movs	r2, #5
 8022da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022da4:	4851      	ldr	r0, [pc, #324]	; (8022eec <_svfiprintf_r+0x1ec>)
 8022da6:	f7dd fa63 	bl	8000270 <memchr>
 8022daa:	9a04      	ldr	r2, [sp, #16]
 8022dac:	b9d8      	cbnz	r0, 8022de6 <_svfiprintf_r+0xe6>
 8022dae:	06d0      	lsls	r0, r2, #27
 8022db0:	bf44      	itt	mi
 8022db2:	2320      	movmi	r3, #32
 8022db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022db8:	0711      	lsls	r1, r2, #28
 8022dba:	bf44      	itt	mi
 8022dbc:	232b      	movmi	r3, #43	; 0x2b
 8022dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8022dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8022dc8:	d015      	beq.n	8022df6 <_svfiprintf_r+0xf6>
 8022dca:	9a07      	ldr	r2, [sp, #28]
 8022dcc:	4654      	mov	r4, sl
 8022dce:	2000      	movs	r0, #0
 8022dd0:	f04f 0c0a 	mov.w	ip, #10
 8022dd4:	4621      	mov	r1, r4
 8022dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022dda:	3b30      	subs	r3, #48	; 0x30
 8022ddc:	2b09      	cmp	r3, #9
 8022dde:	d94e      	bls.n	8022e7e <_svfiprintf_r+0x17e>
 8022de0:	b1b0      	cbz	r0, 8022e10 <_svfiprintf_r+0x110>
 8022de2:	9207      	str	r2, [sp, #28]
 8022de4:	e014      	b.n	8022e10 <_svfiprintf_r+0x110>
 8022de6:	eba0 0308 	sub.w	r3, r0, r8
 8022dea:	fa09 f303 	lsl.w	r3, r9, r3
 8022dee:	4313      	orrs	r3, r2
 8022df0:	9304      	str	r3, [sp, #16]
 8022df2:	46a2      	mov	sl, r4
 8022df4:	e7d2      	b.n	8022d9c <_svfiprintf_r+0x9c>
 8022df6:	9b03      	ldr	r3, [sp, #12]
 8022df8:	1d19      	adds	r1, r3, #4
 8022dfa:	681b      	ldr	r3, [r3, #0]
 8022dfc:	9103      	str	r1, [sp, #12]
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	bfbb      	ittet	lt
 8022e02:	425b      	neglt	r3, r3
 8022e04:	f042 0202 	orrlt.w	r2, r2, #2
 8022e08:	9307      	strge	r3, [sp, #28]
 8022e0a:	9307      	strlt	r3, [sp, #28]
 8022e0c:	bfb8      	it	lt
 8022e0e:	9204      	strlt	r2, [sp, #16]
 8022e10:	7823      	ldrb	r3, [r4, #0]
 8022e12:	2b2e      	cmp	r3, #46	; 0x2e
 8022e14:	d10c      	bne.n	8022e30 <_svfiprintf_r+0x130>
 8022e16:	7863      	ldrb	r3, [r4, #1]
 8022e18:	2b2a      	cmp	r3, #42	; 0x2a
 8022e1a:	d135      	bne.n	8022e88 <_svfiprintf_r+0x188>
 8022e1c:	9b03      	ldr	r3, [sp, #12]
 8022e1e:	1d1a      	adds	r2, r3, #4
 8022e20:	681b      	ldr	r3, [r3, #0]
 8022e22:	9203      	str	r2, [sp, #12]
 8022e24:	2b00      	cmp	r3, #0
 8022e26:	bfb8      	it	lt
 8022e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e2c:	3402      	adds	r4, #2
 8022e2e:	9305      	str	r3, [sp, #20]
 8022e30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022efc <_svfiprintf_r+0x1fc>
 8022e34:	7821      	ldrb	r1, [r4, #0]
 8022e36:	2203      	movs	r2, #3
 8022e38:	4650      	mov	r0, sl
 8022e3a:	f7dd fa19 	bl	8000270 <memchr>
 8022e3e:	b140      	cbz	r0, 8022e52 <_svfiprintf_r+0x152>
 8022e40:	2340      	movs	r3, #64	; 0x40
 8022e42:	eba0 000a 	sub.w	r0, r0, sl
 8022e46:	fa03 f000 	lsl.w	r0, r3, r0
 8022e4a:	9b04      	ldr	r3, [sp, #16]
 8022e4c:	4303      	orrs	r3, r0
 8022e4e:	3401      	adds	r4, #1
 8022e50:	9304      	str	r3, [sp, #16]
 8022e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e56:	4826      	ldr	r0, [pc, #152]	; (8022ef0 <_svfiprintf_r+0x1f0>)
 8022e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022e5c:	2206      	movs	r2, #6
 8022e5e:	f7dd fa07 	bl	8000270 <memchr>
 8022e62:	2800      	cmp	r0, #0
 8022e64:	d038      	beq.n	8022ed8 <_svfiprintf_r+0x1d8>
 8022e66:	4b23      	ldr	r3, [pc, #140]	; (8022ef4 <_svfiprintf_r+0x1f4>)
 8022e68:	bb1b      	cbnz	r3, 8022eb2 <_svfiprintf_r+0x1b2>
 8022e6a:	9b03      	ldr	r3, [sp, #12]
 8022e6c:	3307      	adds	r3, #7
 8022e6e:	f023 0307 	bic.w	r3, r3, #7
 8022e72:	3308      	adds	r3, #8
 8022e74:	9303      	str	r3, [sp, #12]
 8022e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e78:	4433      	add	r3, r6
 8022e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8022e7c:	e767      	b.n	8022d4e <_svfiprintf_r+0x4e>
 8022e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e82:	460c      	mov	r4, r1
 8022e84:	2001      	movs	r0, #1
 8022e86:	e7a5      	b.n	8022dd4 <_svfiprintf_r+0xd4>
 8022e88:	2300      	movs	r3, #0
 8022e8a:	3401      	adds	r4, #1
 8022e8c:	9305      	str	r3, [sp, #20]
 8022e8e:	4619      	mov	r1, r3
 8022e90:	f04f 0c0a 	mov.w	ip, #10
 8022e94:	4620      	mov	r0, r4
 8022e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e9a:	3a30      	subs	r2, #48	; 0x30
 8022e9c:	2a09      	cmp	r2, #9
 8022e9e:	d903      	bls.n	8022ea8 <_svfiprintf_r+0x1a8>
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d0c5      	beq.n	8022e30 <_svfiprintf_r+0x130>
 8022ea4:	9105      	str	r1, [sp, #20]
 8022ea6:	e7c3      	b.n	8022e30 <_svfiprintf_r+0x130>
 8022ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022eac:	4604      	mov	r4, r0
 8022eae:	2301      	movs	r3, #1
 8022eb0:	e7f0      	b.n	8022e94 <_svfiprintf_r+0x194>
 8022eb2:	ab03      	add	r3, sp, #12
 8022eb4:	9300      	str	r3, [sp, #0]
 8022eb6:	462a      	mov	r2, r5
 8022eb8:	4b0f      	ldr	r3, [pc, #60]	; (8022ef8 <_svfiprintf_r+0x1f8>)
 8022eba:	a904      	add	r1, sp, #16
 8022ebc:	4638      	mov	r0, r7
 8022ebe:	f3af 8000 	nop.w
 8022ec2:	1c42      	adds	r2, r0, #1
 8022ec4:	4606      	mov	r6, r0
 8022ec6:	d1d6      	bne.n	8022e76 <_svfiprintf_r+0x176>
 8022ec8:	89ab      	ldrh	r3, [r5, #12]
 8022eca:	065b      	lsls	r3, r3, #25
 8022ecc:	f53f af2c 	bmi.w	8022d28 <_svfiprintf_r+0x28>
 8022ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022ed2:	b01d      	add	sp, #116	; 0x74
 8022ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ed8:	ab03      	add	r3, sp, #12
 8022eda:	9300      	str	r3, [sp, #0]
 8022edc:	462a      	mov	r2, r5
 8022ede:	4b06      	ldr	r3, [pc, #24]	; (8022ef8 <_svfiprintf_r+0x1f8>)
 8022ee0:	a904      	add	r1, sp, #16
 8022ee2:	4638      	mov	r0, r7
 8022ee4:	f000 f9d4 	bl	8023290 <_printf_i>
 8022ee8:	e7eb      	b.n	8022ec2 <_svfiprintf_r+0x1c2>
 8022eea:	bf00      	nop
 8022eec:	08028c64 	.word	0x08028c64
 8022ef0:	08028c6e 	.word	0x08028c6e
 8022ef4:	00000000 	.word	0x00000000
 8022ef8:	08022c49 	.word	0x08022c49
 8022efc:	08028c6a 	.word	0x08028c6a

08022f00 <__sfputc_r>:
 8022f00:	6893      	ldr	r3, [r2, #8]
 8022f02:	3b01      	subs	r3, #1
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	b410      	push	{r4}
 8022f08:	6093      	str	r3, [r2, #8]
 8022f0a:	da08      	bge.n	8022f1e <__sfputc_r+0x1e>
 8022f0c:	6994      	ldr	r4, [r2, #24]
 8022f0e:	42a3      	cmp	r3, r4
 8022f10:	db01      	blt.n	8022f16 <__sfputc_r+0x16>
 8022f12:	290a      	cmp	r1, #10
 8022f14:	d103      	bne.n	8022f1e <__sfputc_r+0x1e>
 8022f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f1a:	f7ff bb79 	b.w	8022610 <__swbuf_r>
 8022f1e:	6813      	ldr	r3, [r2, #0]
 8022f20:	1c58      	adds	r0, r3, #1
 8022f22:	6010      	str	r0, [r2, #0]
 8022f24:	7019      	strb	r1, [r3, #0]
 8022f26:	4608      	mov	r0, r1
 8022f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f2c:	4770      	bx	lr

08022f2e <__sfputs_r>:
 8022f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f30:	4606      	mov	r6, r0
 8022f32:	460f      	mov	r7, r1
 8022f34:	4614      	mov	r4, r2
 8022f36:	18d5      	adds	r5, r2, r3
 8022f38:	42ac      	cmp	r4, r5
 8022f3a:	d101      	bne.n	8022f40 <__sfputs_r+0x12>
 8022f3c:	2000      	movs	r0, #0
 8022f3e:	e007      	b.n	8022f50 <__sfputs_r+0x22>
 8022f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f44:	463a      	mov	r2, r7
 8022f46:	4630      	mov	r0, r6
 8022f48:	f7ff ffda 	bl	8022f00 <__sfputc_r>
 8022f4c:	1c43      	adds	r3, r0, #1
 8022f4e:	d1f3      	bne.n	8022f38 <__sfputs_r+0xa>
 8022f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022f54 <_vfiprintf_r>:
 8022f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f58:	460d      	mov	r5, r1
 8022f5a:	b09d      	sub	sp, #116	; 0x74
 8022f5c:	4614      	mov	r4, r2
 8022f5e:	4698      	mov	r8, r3
 8022f60:	4606      	mov	r6, r0
 8022f62:	b118      	cbz	r0, 8022f6c <_vfiprintf_r+0x18>
 8022f64:	6983      	ldr	r3, [r0, #24]
 8022f66:	b90b      	cbnz	r3, 8022f6c <_vfiprintf_r+0x18>
 8022f68:	f7ff fd4a 	bl	8022a00 <__sinit>
 8022f6c:	4b89      	ldr	r3, [pc, #548]	; (8023194 <_vfiprintf_r+0x240>)
 8022f6e:	429d      	cmp	r5, r3
 8022f70:	d11b      	bne.n	8022faa <_vfiprintf_r+0x56>
 8022f72:	6875      	ldr	r5, [r6, #4]
 8022f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022f76:	07d9      	lsls	r1, r3, #31
 8022f78:	d405      	bmi.n	8022f86 <_vfiprintf_r+0x32>
 8022f7a:	89ab      	ldrh	r3, [r5, #12]
 8022f7c:	059a      	lsls	r2, r3, #22
 8022f7e:	d402      	bmi.n	8022f86 <_vfiprintf_r+0x32>
 8022f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022f82:	f7ff fded 	bl	8022b60 <__retarget_lock_acquire_recursive>
 8022f86:	89ab      	ldrh	r3, [r5, #12]
 8022f88:	071b      	lsls	r3, r3, #28
 8022f8a:	d501      	bpl.n	8022f90 <_vfiprintf_r+0x3c>
 8022f8c:	692b      	ldr	r3, [r5, #16]
 8022f8e:	b9eb      	cbnz	r3, 8022fcc <_vfiprintf_r+0x78>
 8022f90:	4629      	mov	r1, r5
 8022f92:	4630      	mov	r0, r6
 8022f94:	f7ff fb8e 	bl	80226b4 <__swsetup_r>
 8022f98:	b1c0      	cbz	r0, 8022fcc <_vfiprintf_r+0x78>
 8022f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022f9c:	07dc      	lsls	r4, r3, #31
 8022f9e:	d50e      	bpl.n	8022fbe <_vfiprintf_r+0x6a>
 8022fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8022fa4:	b01d      	add	sp, #116	; 0x74
 8022fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022faa:	4b7b      	ldr	r3, [pc, #492]	; (8023198 <_vfiprintf_r+0x244>)
 8022fac:	429d      	cmp	r5, r3
 8022fae:	d101      	bne.n	8022fb4 <_vfiprintf_r+0x60>
 8022fb0:	68b5      	ldr	r5, [r6, #8]
 8022fb2:	e7df      	b.n	8022f74 <_vfiprintf_r+0x20>
 8022fb4:	4b79      	ldr	r3, [pc, #484]	; (802319c <_vfiprintf_r+0x248>)
 8022fb6:	429d      	cmp	r5, r3
 8022fb8:	bf08      	it	eq
 8022fba:	68f5      	ldreq	r5, [r6, #12]
 8022fbc:	e7da      	b.n	8022f74 <_vfiprintf_r+0x20>
 8022fbe:	89ab      	ldrh	r3, [r5, #12]
 8022fc0:	0598      	lsls	r0, r3, #22
 8022fc2:	d4ed      	bmi.n	8022fa0 <_vfiprintf_r+0x4c>
 8022fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022fc6:	f7ff fdcc 	bl	8022b62 <__retarget_lock_release_recursive>
 8022fca:	e7e9      	b.n	8022fa0 <_vfiprintf_r+0x4c>
 8022fcc:	2300      	movs	r3, #0
 8022fce:	9309      	str	r3, [sp, #36]	; 0x24
 8022fd0:	2320      	movs	r3, #32
 8022fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8022fda:	2330      	movs	r3, #48	; 0x30
 8022fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80231a0 <_vfiprintf_r+0x24c>
 8022fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022fe4:	f04f 0901 	mov.w	r9, #1
 8022fe8:	4623      	mov	r3, r4
 8022fea:	469a      	mov	sl, r3
 8022fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022ff0:	b10a      	cbz	r2, 8022ff6 <_vfiprintf_r+0xa2>
 8022ff2:	2a25      	cmp	r2, #37	; 0x25
 8022ff4:	d1f9      	bne.n	8022fea <_vfiprintf_r+0x96>
 8022ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8022ffa:	d00b      	beq.n	8023014 <_vfiprintf_r+0xc0>
 8022ffc:	465b      	mov	r3, fp
 8022ffe:	4622      	mov	r2, r4
 8023000:	4629      	mov	r1, r5
 8023002:	4630      	mov	r0, r6
 8023004:	f7ff ff93 	bl	8022f2e <__sfputs_r>
 8023008:	3001      	adds	r0, #1
 802300a:	f000 80aa 	beq.w	8023162 <_vfiprintf_r+0x20e>
 802300e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023010:	445a      	add	r2, fp
 8023012:	9209      	str	r2, [sp, #36]	; 0x24
 8023014:	f89a 3000 	ldrb.w	r3, [sl]
 8023018:	2b00      	cmp	r3, #0
 802301a:	f000 80a2 	beq.w	8023162 <_vfiprintf_r+0x20e>
 802301e:	2300      	movs	r3, #0
 8023020:	f04f 32ff 	mov.w	r2, #4294967295
 8023024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023028:	f10a 0a01 	add.w	sl, sl, #1
 802302c:	9304      	str	r3, [sp, #16]
 802302e:	9307      	str	r3, [sp, #28]
 8023030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023034:	931a      	str	r3, [sp, #104]	; 0x68
 8023036:	4654      	mov	r4, sl
 8023038:	2205      	movs	r2, #5
 802303a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802303e:	4858      	ldr	r0, [pc, #352]	; (80231a0 <_vfiprintf_r+0x24c>)
 8023040:	f7dd f916 	bl	8000270 <memchr>
 8023044:	9a04      	ldr	r2, [sp, #16]
 8023046:	b9d8      	cbnz	r0, 8023080 <_vfiprintf_r+0x12c>
 8023048:	06d1      	lsls	r1, r2, #27
 802304a:	bf44      	itt	mi
 802304c:	2320      	movmi	r3, #32
 802304e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023052:	0713      	lsls	r3, r2, #28
 8023054:	bf44      	itt	mi
 8023056:	232b      	movmi	r3, #43	; 0x2b
 8023058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802305c:	f89a 3000 	ldrb.w	r3, [sl]
 8023060:	2b2a      	cmp	r3, #42	; 0x2a
 8023062:	d015      	beq.n	8023090 <_vfiprintf_r+0x13c>
 8023064:	9a07      	ldr	r2, [sp, #28]
 8023066:	4654      	mov	r4, sl
 8023068:	2000      	movs	r0, #0
 802306a:	f04f 0c0a 	mov.w	ip, #10
 802306e:	4621      	mov	r1, r4
 8023070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023074:	3b30      	subs	r3, #48	; 0x30
 8023076:	2b09      	cmp	r3, #9
 8023078:	d94e      	bls.n	8023118 <_vfiprintf_r+0x1c4>
 802307a:	b1b0      	cbz	r0, 80230aa <_vfiprintf_r+0x156>
 802307c:	9207      	str	r2, [sp, #28]
 802307e:	e014      	b.n	80230aa <_vfiprintf_r+0x156>
 8023080:	eba0 0308 	sub.w	r3, r0, r8
 8023084:	fa09 f303 	lsl.w	r3, r9, r3
 8023088:	4313      	orrs	r3, r2
 802308a:	9304      	str	r3, [sp, #16]
 802308c:	46a2      	mov	sl, r4
 802308e:	e7d2      	b.n	8023036 <_vfiprintf_r+0xe2>
 8023090:	9b03      	ldr	r3, [sp, #12]
 8023092:	1d19      	adds	r1, r3, #4
 8023094:	681b      	ldr	r3, [r3, #0]
 8023096:	9103      	str	r1, [sp, #12]
 8023098:	2b00      	cmp	r3, #0
 802309a:	bfbb      	ittet	lt
 802309c:	425b      	neglt	r3, r3
 802309e:	f042 0202 	orrlt.w	r2, r2, #2
 80230a2:	9307      	strge	r3, [sp, #28]
 80230a4:	9307      	strlt	r3, [sp, #28]
 80230a6:	bfb8      	it	lt
 80230a8:	9204      	strlt	r2, [sp, #16]
 80230aa:	7823      	ldrb	r3, [r4, #0]
 80230ac:	2b2e      	cmp	r3, #46	; 0x2e
 80230ae:	d10c      	bne.n	80230ca <_vfiprintf_r+0x176>
 80230b0:	7863      	ldrb	r3, [r4, #1]
 80230b2:	2b2a      	cmp	r3, #42	; 0x2a
 80230b4:	d135      	bne.n	8023122 <_vfiprintf_r+0x1ce>
 80230b6:	9b03      	ldr	r3, [sp, #12]
 80230b8:	1d1a      	adds	r2, r3, #4
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	9203      	str	r2, [sp, #12]
 80230be:	2b00      	cmp	r3, #0
 80230c0:	bfb8      	it	lt
 80230c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80230c6:	3402      	adds	r4, #2
 80230c8:	9305      	str	r3, [sp, #20]
 80230ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80231b0 <_vfiprintf_r+0x25c>
 80230ce:	7821      	ldrb	r1, [r4, #0]
 80230d0:	2203      	movs	r2, #3
 80230d2:	4650      	mov	r0, sl
 80230d4:	f7dd f8cc 	bl	8000270 <memchr>
 80230d8:	b140      	cbz	r0, 80230ec <_vfiprintf_r+0x198>
 80230da:	2340      	movs	r3, #64	; 0x40
 80230dc:	eba0 000a 	sub.w	r0, r0, sl
 80230e0:	fa03 f000 	lsl.w	r0, r3, r0
 80230e4:	9b04      	ldr	r3, [sp, #16]
 80230e6:	4303      	orrs	r3, r0
 80230e8:	3401      	adds	r4, #1
 80230ea:	9304      	str	r3, [sp, #16]
 80230ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230f0:	482c      	ldr	r0, [pc, #176]	; (80231a4 <_vfiprintf_r+0x250>)
 80230f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80230f6:	2206      	movs	r2, #6
 80230f8:	f7dd f8ba 	bl	8000270 <memchr>
 80230fc:	2800      	cmp	r0, #0
 80230fe:	d03f      	beq.n	8023180 <_vfiprintf_r+0x22c>
 8023100:	4b29      	ldr	r3, [pc, #164]	; (80231a8 <_vfiprintf_r+0x254>)
 8023102:	bb1b      	cbnz	r3, 802314c <_vfiprintf_r+0x1f8>
 8023104:	9b03      	ldr	r3, [sp, #12]
 8023106:	3307      	adds	r3, #7
 8023108:	f023 0307 	bic.w	r3, r3, #7
 802310c:	3308      	adds	r3, #8
 802310e:	9303      	str	r3, [sp, #12]
 8023110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023112:	443b      	add	r3, r7
 8023114:	9309      	str	r3, [sp, #36]	; 0x24
 8023116:	e767      	b.n	8022fe8 <_vfiprintf_r+0x94>
 8023118:	fb0c 3202 	mla	r2, ip, r2, r3
 802311c:	460c      	mov	r4, r1
 802311e:	2001      	movs	r0, #1
 8023120:	e7a5      	b.n	802306e <_vfiprintf_r+0x11a>
 8023122:	2300      	movs	r3, #0
 8023124:	3401      	adds	r4, #1
 8023126:	9305      	str	r3, [sp, #20]
 8023128:	4619      	mov	r1, r3
 802312a:	f04f 0c0a 	mov.w	ip, #10
 802312e:	4620      	mov	r0, r4
 8023130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023134:	3a30      	subs	r2, #48	; 0x30
 8023136:	2a09      	cmp	r2, #9
 8023138:	d903      	bls.n	8023142 <_vfiprintf_r+0x1ee>
 802313a:	2b00      	cmp	r3, #0
 802313c:	d0c5      	beq.n	80230ca <_vfiprintf_r+0x176>
 802313e:	9105      	str	r1, [sp, #20]
 8023140:	e7c3      	b.n	80230ca <_vfiprintf_r+0x176>
 8023142:	fb0c 2101 	mla	r1, ip, r1, r2
 8023146:	4604      	mov	r4, r0
 8023148:	2301      	movs	r3, #1
 802314a:	e7f0      	b.n	802312e <_vfiprintf_r+0x1da>
 802314c:	ab03      	add	r3, sp, #12
 802314e:	9300      	str	r3, [sp, #0]
 8023150:	462a      	mov	r2, r5
 8023152:	4b16      	ldr	r3, [pc, #88]	; (80231ac <_vfiprintf_r+0x258>)
 8023154:	a904      	add	r1, sp, #16
 8023156:	4630      	mov	r0, r6
 8023158:	f3af 8000 	nop.w
 802315c:	4607      	mov	r7, r0
 802315e:	1c78      	adds	r0, r7, #1
 8023160:	d1d6      	bne.n	8023110 <_vfiprintf_r+0x1bc>
 8023162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023164:	07d9      	lsls	r1, r3, #31
 8023166:	d405      	bmi.n	8023174 <_vfiprintf_r+0x220>
 8023168:	89ab      	ldrh	r3, [r5, #12]
 802316a:	059a      	lsls	r2, r3, #22
 802316c:	d402      	bmi.n	8023174 <_vfiprintf_r+0x220>
 802316e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023170:	f7ff fcf7 	bl	8022b62 <__retarget_lock_release_recursive>
 8023174:	89ab      	ldrh	r3, [r5, #12]
 8023176:	065b      	lsls	r3, r3, #25
 8023178:	f53f af12 	bmi.w	8022fa0 <_vfiprintf_r+0x4c>
 802317c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802317e:	e711      	b.n	8022fa4 <_vfiprintf_r+0x50>
 8023180:	ab03      	add	r3, sp, #12
 8023182:	9300      	str	r3, [sp, #0]
 8023184:	462a      	mov	r2, r5
 8023186:	4b09      	ldr	r3, [pc, #36]	; (80231ac <_vfiprintf_r+0x258>)
 8023188:	a904      	add	r1, sp, #16
 802318a:	4630      	mov	r0, r6
 802318c:	f000 f880 	bl	8023290 <_printf_i>
 8023190:	e7e4      	b.n	802315c <_vfiprintf_r+0x208>
 8023192:	bf00      	nop
 8023194:	08028c24 	.word	0x08028c24
 8023198:	08028c44 	.word	0x08028c44
 802319c:	08028c04 	.word	0x08028c04
 80231a0:	08028c64 	.word	0x08028c64
 80231a4:	08028c6e 	.word	0x08028c6e
 80231a8:	00000000 	.word	0x00000000
 80231ac:	08022f2f 	.word	0x08022f2f
 80231b0:	08028c6a 	.word	0x08028c6a

080231b4 <_printf_common>:
 80231b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231b8:	4616      	mov	r6, r2
 80231ba:	4699      	mov	r9, r3
 80231bc:	688a      	ldr	r2, [r1, #8]
 80231be:	690b      	ldr	r3, [r1, #16]
 80231c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80231c4:	4293      	cmp	r3, r2
 80231c6:	bfb8      	it	lt
 80231c8:	4613      	movlt	r3, r2
 80231ca:	6033      	str	r3, [r6, #0]
 80231cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80231d0:	4607      	mov	r7, r0
 80231d2:	460c      	mov	r4, r1
 80231d4:	b10a      	cbz	r2, 80231da <_printf_common+0x26>
 80231d6:	3301      	adds	r3, #1
 80231d8:	6033      	str	r3, [r6, #0]
 80231da:	6823      	ldr	r3, [r4, #0]
 80231dc:	0699      	lsls	r1, r3, #26
 80231de:	bf42      	ittt	mi
 80231e0:	6833      	ldrmi	r3, [r6, #0]
 80231e2:	3302      	addmi	r3, #2
 80231e4:	6033      	strmi	r3, [r6, #0]
 80231e6:	6825      	ldr	r5, [r4, #0]
 80231e8:	f015 0506 	ands.w	r5, r5, #6
 80231ec:	d106      	bne.n	80231fc <_printf_common+0x48>
 80231ee:	f104 0a19 	add.w	sl, r4, #25
 80231f2:	68e3      	ldr	r3, [r4, #12]
 80231f4:	6832      	ldr	r2, [r6, #0]
 80231f6:	1a9b      	subs	r3, r3, r2
 80231f8:	42ab      	cmp	r3, r5
 80231fa:	dc26      	bgt.n	802324a <_printf_common+0x96>
 80231fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023200:	1e13      	subs	r3, r2, #0
 8023202:	6822      	ldr	r2, [r4, #0]
 8023204:	bf18      	it	ne
 8023206:	2301      	movne	r3, #1
 8023208:	0692      	lsls	r2, r2, #26
 802320a:	d42b      	bmi.n	8023264 <_printf_common+0xb0>
 802320c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023210:	4649      	mov	r1, r9
 8023212:	4638      	mov	r0, r7
 8023214:	47c0      	blx	r8
 8023216:	3001      	adds	r0, #1
 8023218:	d01e      	beq.n	8023258 <_printf_common+0xa4>
 802321a:	6823      	ldr	r3, [r4, #0]
 802321c:	68e5      	ldr	r5, [r4, #12]
 802321e:	6832      	ldr	r2, [r6, #0]
 8023220:	f003 0306 	and.w	r3, r3, #6
 8023224:	2b04      	cmp	r3, #4
 8023226:	bf08      	it	eq
 8023228:	1aad      	subeq	r5, r5, r2
 802322a:	68a3      	ldr	r3, [r4, #8]
 802322c:	6922      	ldr	r2, [r4, #16]
 802322e:	bf0c      	ite	eq
 8023230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023234:	2500      	movne	r5, #0
 8023236:	4293      	cmp	r3, r2
 8023238:	bfc4      	itt	gt
 802323a:	1a9b      	subgt	r3, r3, r2
 802323c:	18ed      	addgt	r5, r5, r3
 802323e:	2600      	movs	r6, #0
 8023240:	341a      	adds	r4, #26
 8023242:	42b5      	cmp	r5, r6
 8023244:	d11a      	bne.n	802327c <_printf_common+0xc8>
 8023246:	2000      	movs	r0, #0
 8023248:	e008      	b.n	802325c <_printf_common+0xa8>
 802324a:	2301      	movs	r3, #1
 802324c:	4652      	mov	r2, sl
 802324e:	4649      	mov	r1, r9
 8023250:	4638      	mov	r0, r7
 8023252:	47c0      	blx	r8
 8023254:	3001      	adds	r0, #1
 8023256:	d103      	bne.n	8023260 <_printf_common+0xac>
 8023258:	f04f 30ff 	mov.w	r0, #4294967295
 802325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023260:	3501      	adds	r5, #1
 8023262:	e7c6      	b.n	80231f2 <_printf_common+0x3e>
 8023264:	18e1      	adds	r1, r4, r3
 8023266:	1c5a      	adds	r2, r3, #1
 8023268:	2030      	movs	r0, #48	; 0x30
 802326a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802326e:	4422      	add	r2, r4
 8023270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023278:	3302      	adds	r3, #2
 802327a:	e7c7      	b.n	802320c <_printf_common+0x58>
 802327c:	2301      	movs	r3, #1
 802327e:	4622      	mov	r2, r4
 8023280:	4649      	mov	r1, r9
 8023282:	4638      	mov	r0, r7
 8023284:	47c0      	blx	r8
 8023286:	3001      	adds	r0, #1
 8023288:	d0e6      	beq.n	8023258 <_printf_common+0xa4>
 802328a:	3601      	adds	r6, #1
 802328c:	e7d9      	b.n	8023242 <_printf_common+0x8e>
	...

08023290 <_printf_i>:
 8023290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023294:	7e0f      	ldrb	r7, [r1, #24]
 8023296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023298:	2f78      	cmp	r7, #120	; 0x78
 802329a:	4691      	mov	r9, r2
 802329c:	4680      	mov	r8, r0
 802329e:	460c      	mov	r4, r1
 80232a0:	469a      	mov	sl, r3
 80232a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80232a6:	d807      	bhi.n	80232b8 <_printf_i+0x28>
 80232a8:	2f62      	cmp	r7, #98	; 0x62
 80232aa:	d80a      	bhi.n	80232c2 <_printf_i+0x32>
 80232ac:	2f00      	cmp	r7, #0
 80232ae:	f000 80d8 	beq.w	8023462 <_printf_i+0x1d2>
 80232b2:	2f58      	cmp	r7, #88	; 0x58
 80232b4:	f000 80a3 	beq.w	80233fe <_printf_i+0x16e>
 80232b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80232bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80232c0:	e03a      	b.n	8023338 <_printf_i+0xa8>
 80232c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80232c6:	2b15      	cmp	r3, #21
 80232c8:	d8f6      	bhi.n	80232b8 <_printf_i+0x28>
 80232ca:	a101      	add	r1, pc, #4	; (adr r1, 80232d0 <_printf_i+0x40>)
 80232cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80232d0:	08023329 	.word	0x08023329
 80232d4:	0802333d 	.word	0x0802333d
 80232d8:	080232b9 	.word	0x080232b9
 80232dc:	080232b9 	.word	0x080232b9
 80232e0:	080232b9 	.word	0x080232b9
 80232e4:	080232b9 	.word	0x080232b9
 80232e8:	0802333d 	.word	0x0802333d
 80232ec:	080232b9 	.word	0x080232b9
 80232f0:	080232b9 	.word	0x080232b9
 80232f4:	080232b9 	.word	0x080232b9
 80232f8:	080232b9 	.word	0x080232b9
 80232fc:	08023449 	.word	0x08023449
 8023300:	0802336d 	.word	0x0802336d
 8023304:	0802342b 	.word	0x0802342b
 8023308:	080232b9 	.word	0x080232b9
 802330c:	080232b9 	.word	0x080232b9
 8023310:	0802346b 	.word	0x0802346b
 8023314:	080232b9 	.word	0x080232b9
 8023318:	0802336d 	.word	0x0802336d
 802331c:	080232b9 	.word	0x080232b9
 8023320:	080232b9 	.word	0x080232b9
 8023324:	08023433 	.word	0x08023433
 8023328:	682b      	ldr	r3, [r5, #0]
 802332a:	1d1a      	adds	r2, r3, #4
 802332c:	681b      	ldr	r3, [r3, #0]
 802332e:	602a      	str	r2, [r5, #0]
 8023330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023338:	2301      	movs	r3, #1
 802333a:	e0a3      	b.n	8023484 <_printf_i+0x1f4>
 802333c:	6820      	ldr	r0, [r4, #0]
 802333e:	6829      	ldr	r1, [r5, #0]
 8023340:	0606      	lsls	r6, r0, #24
 8023342:	f101 0304 	add.w	r3, r1, #4
 8023346:	d50a      	bpl.n	802335e <_printf_i+0xce>
 8023348:	680e      	ldr	r6, [r1, #0]
 802334a:	602b      	str	r3, [r5, #0]
 802334c:	2e00      	cmp	r6, #0
 802334e:	da03      	bge.n	8023358 <_printf_i+0xc8>
 8023350:	232d      	movs	r3, #45	; 0x2d
 8023352:	4276      	negs	r6, r6
 8023354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023358:	485e      	ldr	r0, [pc, #376]	; (80234d4 <_printf_i+0x244>)
 802335a:	230a      	movs	r3, #10
 802335c:	e019      	b.n	8023392 <_printf_i+0x102>
 802335e:	680e      	ldr	r6, [r1, #0]
 8023360:	602b      	str	r3, [r5, #0]
 8023362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023366:	bf18      	it	ne
 8023368:	b236      	sxthne	r6, r6
 802336a:	e7ef      	b.n	802334c <_printf_i+0xbc>
 802336c:	682b      	ldr	r3, [r5, #0]
 802336e:	6820      	ldr	r0, [r4, #0]
 8023370:	1d19      	adds	r1, r3, #4
 8023372:	6029      	str	r1, [r5, #0]
 8023374:	0601      	lsls	r1, r0, #24
 8023376:	d501      	bpl.n	802337c <_printf_i+0xec>
 8023378:	681e      	ldr	r6, [r3, #0]
 802337a:	e002      	b.n	8023382 <_printf_i+0xf2>
 802337c:	0646      	lsls	r6, r0, #25
 802337e:	d5fb      	bpl.n	8023378 <_printf_i+0xe8>
 8023380:	881e      	ldrh	r6, [r3, #0]
 8023382:	4854      	ldr	r0, [pc, #336]	; (80234d4 <_printf_i+0x244>)
 8023384:	2f6f      	cmp	r7, #111	; 0x6f
 8023386:	bf0c      	ite	eq
 8023388:	2308      	moveq	r3, #8
 802338a:	230a      	movne	r3, #10
 802338c:	2100      	movs	r1, #0
 802338e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023392:	6865      	ldr	r5, [r4, #4]
 8023394:	60a5      	str	r5, [r4, #8]
 8023396:	2d00      	cmp	r5, #0
 8023398:	bfa2      	ittt	ge
 802339a:	6821      	ldrge	r1, [r4, #0]
 802339c:	f021 0104 	bicge.w	r1, r1, #4
 80233a0:	6021      	strge	r1, [r4, #0]
 80233a2:	b90e      	cbnz	r6, 80233a8 <_printf_i+0x118>
 80233a4:	2d00      	cmp	r5, #0
 80233a6:	d04d      	beq.n	8023444 <_printf_i+0x1b4>
 80233a8:	4615      	mov	r5, r2
 80233aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80233ae:	fb03 6711 	mls	r7, r3, r1, r6
 80233b2:	5dc7      	ldrb	r7, [r0, r7]
 80233b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80233b8:	4637      	mov	r7, r6
 80233ba:	42bb      	cmp	r3, r7
 80233bc:	460e      	mov	r6, r1
 80233be:	d9f4      	bls.n	80233aa <_printf_i+0x11a>
 80233c0:	2b08      	cmp	r3, #8
 80233c2:	d10b      	bne.n	80233dc <_printf_i+0x14c>
 80233c4:	6823      	ldr	r3, [r4, #0]
 80233c6:	07de      	lsls	r6, r3, #31
 80233c8:	d508      	bpl.n	80233dc <_printf_i+0x14c>
 80233ca:	6923      	ldr	r3, [r4, #16]
 80233cc:	6861      	ldr	r1, [r4, #4]
 80233ce:	4299      	cmp	r1, r3
 80233d0:	bfde      	ittt	le
 80233d2:	2330      	movle	r3, #48	; 0x30
 80233d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80233d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80233dc:	1b52      	subs	r2, r2, r5
 80233de:	6122      	str	r2, [r4, #16]
 80233e0:	f8cd a000 	str.w	sl, [sp]
 80233e4:	464b      	mov	r3, r9
 80233e6:	aa03      	add	r2, sp, #12
 80233e8:	4621      	mov	r1, r4
 80233ea:	4640      	mov	r0, r8
 80233ec:	f7ff fee2 	bl	80231b4 <_printf_common>
 80233f0:	3001      	adds	r0, #1
 80233f2:	d14c      	bne.n	802348e <_printf_i+0x1fe>
 80233f4:	f04f 30ff 	mov.w	r0, #4294967295
 80233f8:	b004      	add	sp, #16
 80233fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233fe:	4835      	ldr	r0, [pc, #212]	; (80234d4 <_printf_i+0x244>)
 8023400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023404:	6829      	ldr	r1, [r5, #0]
 8023406:	6823      	ldr	r3, [r4, #0]
 8023408:	f851 6b04 	ldr.w	r6, [r1], #4
 802340c:	6029      	str	r1, [r5, #0]
 802340e:	061d      	lsls	r5, r3, #24
 8023410:	d514      	bpl.n	802343c <_printf_i+0x1ac>
 8023412:	07df      	lsls	r7, r3, #31
 8023414:	bf44      	itt	mi
 8023416:	f043 0320 	orrmi.w	r3, r3, #32
 802341a:	6023      	strmi	r3, [r4, #0]
 802341c:	b91e      	cbnz	r6, 8023426 <_printf_i+0x196>
 802341e:	6823      	ldr	r3, [r4, #0]
 8023420:	f023 0320 	bic.w	r3, r3, #32
 8023424:	6023      	str	r3, [r4, #0]
 8023426:	2310      	movs	r3, #16
 8023428:	e7b0      	b.n	802338c <_printf_i+0xfc>
 802342a:	6823      	ldr	r3, [r4, #0]
 802342c:	f043 0320 	orr.w	r3, r3, #32
 8023430:	6023      	str	r3, [r4, #0]
 8023432:	2378      	movs	r3, #120	; 0x78
 8023434:	4828      	ldr	r0, [pc, #160]	; (80234d8 <_printf_i+0x248>)
 8023436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802343a:	e7e3      	b.n	8023404 <_printf_i+0x174>
 802343c:	0659      	lsls	r1, r3, #25
 802343e:	bf48      	it	mi
 8023440:	b2b6      	uxthmi	r6, r6
 8023442:	e7e6      	b.n	8023412 <_printf_i+0x182>
 8023444:	4615      	mov	r5, r2
 8023446:	e7bb      	b.n	80233c0 <_printf_i+0x130>
 8023448:	682b      	ldr	r3, [r5, #0]
 802344a:	6826      	ldr	r6, [r4, #0]
 802344c:	6961      	ldr	r1, [r4, #20]
 802344e:	1d18      	adds	r0, r3, #4
 8023450:	6028      	str	r0, [r5, #0]
 8023452:	0635      	lsls	r5, r6, #24
 8023454:	681b      	ldr	r3, [r3, #0]
 8023456:	d501      	bpl.n	802345c <_printf_i+0x1cc>
 8023458:	6019      	str	r1, [r3, #0]
 802345a:	e002      	b.n	8023462 <_printf_i+0x1d2>
 802345c:	0670      	lsls	r0, r6, #25
 802345e:	d5fb      	bpl.n	8023458 <_printf_i+0x1c8>
 8023460:	8019      	strh	r1, [r3, #0]
 8023462:	2300      	movs	r3, #0
 8023464:	6123      	str	r3, [r4, #16]
 8023466:	4615      	mov	r5, r2
 8023468:	e7ba      	b.n	80233e0 <_printf_i+0x150>
 802346a:	682b      	ldr	r3, [r5, #0]
 802346c:	1d1a      	adds	r2, r3, #4
 802346e:	602a      	str	r2, [r5, #0]
 8023470:	681d      	ldr	r5, [r3, #0]
 8023472:	6862      	ldr	r2, [r4, #4]
 8023474:	2100      	movs	r1, #0
 8023476:	4628      	mov	r0, r5
 8023478:	f7dc fefa 	bl	8000270 <memchr>
 802347c:	b108      	cbz	r0, 8023482 <_printf_i+0x1f2>
 802347e:	1b40      	subs	r0, r0, r5
 8023480:	6060      	str	r0, [r4, #4]
 8023482:	6863      	ldr	r3, [r4, #4]
 8023484:	6123      	str	r3, [r4, #16]
 8023486:	2300      	movs	r3, #0
 8023488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802348c:	e7a8      	b.n	80233e0 <_printf_i+0x150>
 802348e:	6923      	ldr	r3, [r4, #16]
 8023490:	462a      	mov	r2, r5
 8023492:	4649      	mov	r1, r9
 8023494:	4640      	mov	r0, r8
 8023496:	47d0      	blx	sl
 8023498:	3001      	adds	r0, #1
 802349a:	d0ab      	beq.n	80233f4 <_printf_i+0x164>
 802349c:	6823      	ldr	r3, [r4, #0]
 802349e:	079b      	lsls	r3, r3, #30
 80234a0:	d413      	bmi.n	80234ca <_printf_i+0x23a>
 80234a2:	68e0      	ldr	r0, [r4, #12]
 80234a4:	9b03      	ldr	r3, [sp, #12]
 80234a6:	4298      	cmp	r0, r3
 80234a8:	bfb8      	it	lt
 80234aa:	4618      	movlt	r0, r3
 80234ac:	e7a4      	b.n	80233f8 <_printf_i+0x168>
 80234ae:	2301      	movs	r3, #1
 80234b0:	4632      	mov	r2, r6
 80234b2:	4649      	mov	r1, r9
 80234b4:	4640      	mov	r0, r8
 80234b6:	47d0      	blx	sl
 80234b8:	3001      	adds	r0, #1
 80234ba:	d09b      	beq.n	80233f4 <_printf_i+0x164>
 80234bc:	3501      	adds	r5, #1
 80234be:	68e3      	ldr	r3, [r4, #12]
 80234c0:	9903      	ldr	r1, [sp, #12]
 80234c2:	1a5b      	subs	r3, r3, r1
 80234c4:	42ab      	cmp	r3, r5
 80234c6:	dcf2      	bgt.n	80234ae <_printf_i+0x21e>
 80234c8:	e7eb      	b.n	80234a2 <_printf_i+0x212>
 80234ca:	2500      	movs	r5, #0
 80234cc:	f104 0619 	add.w	r6, r4, #25
 80234d0:	e7f5      	b.n	80234be <_printf_i+0x22e>
 80234d2:	bf00      	nop
 80234d4:	08028c75 	.word	0x08028c75
 80234d8:	08028c86 	.word	0x08028c86

080234dc <_putc_r>:
 80234dc:	b570      	push	{r4, r5, r6, lr}
 80234de:	460d      	mov	r5, r1
 80234e0:	4614      	mov	r4, r2
 80234e2:	4606      	mov	r6, r0
 80234e4:	b118      	cbz	r0, 80234ee <_putc_r+0x12>
 80234e6:	6983      	ldr	r3, [r0, #24]
 80234e8:	b90b      	cbnz	r3, 80234ee <_putc_r+0x12>
 80234ea:	f7ff fa89 	bl	8022a00 <__sinit>
 80234ee:	4b1c      	ldr	r3, [pc, #112]	; (8023560 <_putc_r+0x84>)
 80234f0:	429c      	cmp	r4, r3
 80234f2:	d124      	bne.n	802353e <_putc_r+0x62>
 80234f4:	6874      	ldr	r4, [r6, #4]
 80234f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80234f8:	07d8      	lsls	r0, r3, #31
 80234fa:	d405      	bmi.n	8023508 <_putc_r+0x2c>
 80234fc:	89a3      	ldrh	r3, [r4, #12]
 80234fe:	0599      	lsls	r1, r3, #22
 8023500:	d402      	bmi.n	8023508 <_putc_r+0x2c>
 8023502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023504:	f7ff fb2c 	bl	8022b60 <__retarget_lock_acquire_recursive>
 8023508:	68a3      	ldr	r3, [r4, #8]
 802350a:	3b01      	subs	r3, #1
 802350c:	2b00      	cmp	r3, #0
 802350e:	60a3      	str	r3, [r4, #8]
 8023510:	da05      	bge.n	802351e <_putc_r+0x42>
 8023512:	69a2      	ldr	r2, [r4, #24]
 8023514:	4293      	cmp	r3, r2
 8023516:	db1c      	blt.n	8023552 <_putc_r+0x76>
 8023518:	b2eb      	uxtb	r3, r5
 802351a:	2b0a      	cmp	r3, #10
 802351c:	d019      	beq.n	8023552 <_putc_r+0x76>
 802351e:	6823      	ldr	r3, [r4, #0]
 8023520:	1c5a      	adds	r2, r3, #1
 8023522:	6022      	str	r2, [r4, #0]
 8023524:	701d      	strb	r5, [r3, #0]
 8023526:	b2ed      	uxtb	r5, r5
 8023528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802352a:	07da      	lsls	r2, r3, #31
 802352c:	d405      	bmi.n	802353a <_putc_r+0x5e>
 802352e:	89a3      	ldrh	r3, [r4, #12]
 8023530:	059b      	lsls	r3, r3, #22
 8023532:	d402      	bmi.n	802353a <_putc_r+0x5e>
 8023534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023536:	f7ff fb14 	bl	8022b62 <__retarget_lock_release_recursive>
 802353a:	4628      	mov	r0, r5
 802353c:	bd70      	pop	{r4, r5, r6, pc}
 802353e:	4b09      	ldr	r3, [pc, #36]	; (8023564 <_putc_r+0x88>)
 8023540:	429c      	cmp	r4, r3
 8023542:	d101      	bne.n	8023548 <_putc_r+0x6c>
 8023544:	68b4      	ldr	r4, [r6, #8]
 8023546:	e7d6      	b.n	80234f6 <_putc_r+0x1a>
 8023548:	4b07      	ldr	r3, [pc, #28]	; (8023568 <_putc_r+0x8c>)
 802354a:	429c      	cmp	r4, r3
 802354c:	bf08      	it	eq
 802354e:	68f4      	ldreq	r4, [r6, #12]
 8023550:	e7d1      	b.n	80234f6 <_putc_r+0x1a>
 8023552:	4629      	mov	r1, r5
 8023554:	4622      	mov	r2, r4
 8023556:	4630      	mov	r0, r6
 8023558:	f7ff f85a 	bl	8022610 <__swbuf_r>
 802355c:	4605      	mov	r5, r0
 802355e:	e7e3      	b.n	8023528 <_putc_r+0x4c>
 8023560:	08028c24 	.word	0x08028c24
 8023564:	08028c44 	.word	0x08028c44
 8023568:	08028c04 	.word	0x08028c04

0802356c <__sread>:
 802356c:	b510      	push	{r4, lr}
 802356e:	460c      	mov	r4, r1
 8023570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023574:	f000 f8cc 	bl	8023710 <_read_r>
 8023578:	2800      	cmp	r0, #0
 802357a:	bfab      	itete	ge
 802357c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802357e:	89a3      	ldrhlt	r3, [r4, #12]
 8023580:	181b      	addge	r3, r3, r0
 8023582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023586:	bfac      	ite	ge
 8023588:	6563      	strge	r3, [r4, #84]	; 0x54
 802358a:	81a3      	strhlt	r3, [r4, #12]
 802358c:	bd10      	pop	{r4, pc}

0802358e <__swrite>:
 802358e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023592:	461f      	mov	r7, r3
 8023594:	898b      	ldrh	r3, [r1, #12]
 8023596:	05db      	lsls	r3, r3, #23
 8023598:	4605      	mov	r5, r0
 802359a:	460c      	mov	r4, r1
 802359c:	4616      	mov	r6, r2
 802359e:	d505      	bpl.n	80235ac <__swrite+0x1e>
 80235a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235a4:	2302      	movs	r3, #2
 80235a6:	2200      	movs	r2, #0
 80235a8:	f000 f870 	bl	802368c <_lseek_r>
 80235ac:	89a3      	ldrh	r3, [r4, #12]
 80235ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80235b6:	81a3      	strh	r3, [r4, #12]
 80235b8:	4632      	mov	r2, r6
 80235ba:	463b      	mov	r3, r7
 80235bc:	4628      	mov	r0, r5
 80235be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80235c2:	f000 b817 	b.w	80235f4 <_write_r>

080235c6 <__sseek>:
 80235c6:	b510      	push	{r4, lr}
 80235c8:	460c      	mov	r4, r1
 80235ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235ce:	f000 f85d 	bl	802368c <_lseek_r>
 80235d2:	1c43      	adds	r3, r0, #1
 80235d4:	89a3      	ldrh	r3, [r4, #12]
 80235d6:	bf15      	itete	ne
 80235d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80235da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80235de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80235e2:	81a3      	strheq	r3, [r4, #12]
 80235e4:	bf18      	it	ne
 80235e6:	81a3      	strhne	r3, [r4, #12]
 80235e8:	bd10      	pop	{r4, pc}

080235ea <__sclose>:
 80235ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235ee:	f000 b81b 	b.w	8023628 <_close_r>
	...

080235f4 <_write_r>:
 80235f4:	b538      	push	{r3, r4, r5, lr}
 80235f6:	4d07      	ldr	r5, [pc, #28]	; (8023614 <_write_r+0x20>)
 80235f8:	4604      	mov	r4, r0
 80235fa:	4608      	mov	r0, r1
 80235fc:	4611      	mov	r1, r2
 80235fe:	2200      	movs	r2, #0
 8023600:	602a      	str	r2, [r5, #0]
 8023602:	461a      	mov	r2, r3
 8023604:	f7f1 f83f 	bl	8014686 <_write>
 8023608:	1c43      	adds	r3, r0, #1
 802360a:	d102      	bne.n	8023612 <_write_r+0x1e>
 802360c:	682b      	ldr	r3, [r5, #0]
 802360e:	b103      	cbz	r3, 8023612 <_write_r+0x1e>
 8023610:	6023      	str	r3, [r4, #0]
 8023612:	bd38      	pop	{r3, r4, r5, pc}
 8023614:	20014314 	.word	0x20014314

08023618 <abort>:
 8023618:	b508      	push	{r3, lr}
 802361a:	2006      	movs	r0, #6
 802361c:	f000 f8b2 	bl	8023784 <raise>
 8023620:	2001      	movs	r0, #1
 8023622:	f7f1 f809 	bl	8014638 <_exit>
	...

08023628 <_close_r>:
 8023628:	b538      	push	{r3, r4, r5, lr}
 802362a:	4d06      	ldr	r5, [pc, #24]	; (8023644 <_close_r+0x1c>)
 802362c:	2300      	movs	r3, #0
 802362e:	4604      	mov	r4, r0
 8023630:	4608      	mov	r0, r1
 8023632:	602b      	str	r3, [r5, #0]
 8023634:	f7f1 f843 	bl	80146be <_close>
 8023638:	1c43      	adds	r3, r0, #1
 802363a:	d102      	bne.n	8023642 <_close_r+0x1a>
 802363c:	682b      	ldr	r3, [r5, #0]
 802363e:	b103      	cbz	r3, 8023642 <_close_r+0x1a>
 8023640:	6023      	str	r3, [r4, #0]
 8023642:	bd38      	pop	{r3, r4, r5, pc}
 8023644:	20014314 	.word	0x20014314

08023648 <_fstat_r>:
 8023648:	b538      	push	{r3, r4, r5, lr}
 802364a:	4d07      	ldr	r5, [pc, #28]	; (8023668 <_fstat_r+0x20>)
 802364c:	2300      	movs	r3, #0
 802364e:	4604      	mov	r4, r0
 8023650:	4608      	mov	r0, r1
 8023652:	4611      	mov	r1, r2
 8023654:	602b      	str	r3, [r5, #0]
 8023656:	f7f1 f83e 	bl	80146d6 <_fstat>
 802365a:	1c43      	adds	r3, r0, #1
 802365c:	d102      	bne.n	8023664 <_fstat_r+0x1c>
 802365e:	682b      	ldr	r3, [r5, #0]
 8023660:	b103      	cbz	r3, 8023664 <_fstat_r+0x1c>
 8023662:	6023      	str	r3, [r4, #0]
 8023664:	bd38      	pop	{r3, r4, r5, pc}
 8023666:	bf00      	nop
 8023668:	20014314 	.word	0x20014314

0802366c <_isatty_r>:
 802366c:	b538      	push	{r3, r4, r5, lr}
 802366e:	4d06      	ldr	r5, [pc, #24]	; (8023688 <_isatty_r+0x1c>)
 8023670:	2300      	movs	r3, #0
 8023672:	4604      	mov	r4, r0
 8023674:	4608      	mov	r0, r1
 8023676:	602b      	str	r3, [r5, #0]
 8023678:	f7f1 f83d 	bl	80146f6 <_isatty>
 802367c:	1c43      	adds	r3, r0, #1
 802367e:	d102      	bne.n	8023686 <_isatty_r+0x1a>
 8023680:	682b      	ldr	r3, [r5, #0]
 8023682:	b103      	cbz	r3, 8023686 <_isatty_r+0x1a>
 8023684:	6023      	str	r3, [r4, #0]
 8023686:	bd38      	pop	{r3, r4, r5, pc}
 8023688:	20014314 	.word	0x20014314

0802368c <_lseek_r>:
 802368c:	b538      	push	{r3, r4, r5, lr}
 802368e:	4d07      	ldr	r5, [pc, #28]	; (80236ac <_lseek_r+0x20>)
 8023690:	4604      	mov	r4, r0
 8023692:	4608      	mov	r0, r1
 8023694:	4611      	mov	r1, r2
 8023696:	2200      	movs	r2, #0
 8023698:	602a      	str	r2, [r5, #0]
 802369a:	461a      	mov	r2, r3
 802369c:	f7f1 f836 	bl	801470c <_lseek>
 80236a0:	1c43      	adds	r3, r0, #1
 80236a2:	d102      	bne.n	80236aa <_lseek_r+0x1e>
 80236a4:	682b      	ldr	r3, [r5, #0]
 80236a6:	b103      	cbz	r3, 80236aa <_lseek_r+0x1e>
 80236a8:	6023      	str	r3, [r4, #0]
 80236aa:	bd38      	pop	{r3, r4, r5, pc}
 80236ac:	20014314 	.word	0x20014314

080236b0 <_realloc_r>:
 80236b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236b4:	4680      	mov	r8, r0
 80236b6:	4614      	mov	r4, r2
 80236b8:	460e      	mov	r6, r1
 80236ba:	b921      	cbnz	r1, 80236c6 <_realloc_r+0x16>
 80236bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236c0:	4611      	mov	r1, r2
 80236c2:	f7fe bd43 	b.w	802214c <_malloc_r>
 80236c6:	b92a      	cbnz	r2, 80236d4 <_realloc_r+0x24>
 80236c8:	f7fe fcd4 	bl	8022074 <_free_r>
 80236cc:	4625      	mov	r5, r4
 80236ce:	4628      	mov	r0, r5
 80236d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236d4:	f000 f872 	bl	80237bc <_malloc_usable_size_r>
 80236d8:	4284      	cmp	r4, r0
 80236da:	4607      	mov	r7, r0
 80236dc:	d802      	bhi.n	80236e4 <_realloc_r+0x34>
 80236de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80236e2:	d812      	bhi.n	802370a <_realloc_r+0x5a>
 80236e4:	4621      	mov	r1, r4
 80236e6:	4640      	mov	r0, r8
 80236e8:	f7fe fd30 	bl	802214c <_malloc_r>
 80236ec:	4605      	mov	r5, r0
 80236ee:	2800      	cmp	r0, #0
 80236f0:	d0ed      	beq.n	80236ce <_realloc_r+0x1e>
 80236f2:	42bc      	cmp	r4, r7
 80236f4:	4622      	mov	r2, r4
 80236f6:	4631      	mov	r1, r6
 80236f8:	bf28      	it	cs
 80236fa:	463a      	movcs	r2, r7
 80236fc:	f7fe fc8a 	bl	8022014 <memcpy>
 8023700:	4631      	mov	r1, r6
 8023702:	4640      	mov	r0, r8
 8023704:	f7fe fcb6 	bl	8022074 <_free_r>
 8023708:	e7e1      	b.n	80236ce <_realloc_r+0x1e>
 802370a:	4635      	mov	r5, r6
 802370c:	e7df      	b.n	80236ce <_realloc_r+0x1e>
	...

08023710 <_read_r>:
 8023710:	b538      	push	{r3, r4, r5, lr}
 8023712:	4d07      	ldr	r5, [pc, #28]	; (8023730 <_read_r+0x20>)
 8023714:	4604      	mov	r4, r0
 8023716:	4608      	mov	r0, r1
 8023718:	4611      	mov	r1, r2
 802371a:	2200      	movs	r2, #0
 802371c:	602a      	str	r2, [r5, #0]
 802371e:	461a      	mov	r2, r3
 8023720:	f7f0 ff94 	bl	801464c <_read>
 8023724:	1c43      	adds	r3, r0, #1
 8023726:	d102      	bne.n	802372e <_read_r+0x1e>
 8023728:	682b      	ldr	r3, [r5, #0]
 802372a:	b103      	cbz	r3, 802372e <_read_r+0x1e>
 802372c:	6023      	str	r3, [r4, #0]
 802372e:	bd38      	pop	{r3, r4, r5, pc}
 8023730:	20014314 	.word	0x20014314

08023734 <_raise_r>:
 8023734:	291f      	cmp	r1, #31
 8023736:	b538      	push	{r3, r4, r5, lr}
 8023738:	4604      	mov	r4, r0
 802373a:	460d      	mov	r5, r1
 802373c:	d904      	bls.n	8023748 <_raise_r+0x14>
 802373e:	2316      	movs	r3, #22
 8023740:	6003      	str	r3, [r0, #0]
 8023742:	f04f 30ff 	mov.w	r0, #4294967295
 8023746:	bd38      	pop	{r3, r4, r5, pc}
 8023748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802374a:	b112      	cbz	r2, 8023752 <_raise_r+0x1e>
 802374c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023750:	b94b      	cbnz	r3, 8023766 <_raise_r+0x32>
 8023752:	4620      	mov	r0, r4
 8023754:	f000 f830 	bl	80237b8 <_getpid_r>
 8023758:	462a      	mov	r2, r5
 802375a:	4601      	mov	r1, r0
 802375c:	4620      	mov	r0, r4
 802375e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023762:	f000 b817 	b.w	8023794 <_kill_r>
 8023766:	2b01      	cmp	r3, #1
 8023768:	d00a      	beq.n	8023780 <_raise_r+0x4c>
 802376a:	1c59      	adds	r1, r3, #1
 802376c:	d103      	bne.n	8023776 <_raise_r+0x42>
 802376e:	2316      	movs	r3, #22
 8023770:	6003      	str	r3, [r0, #0]
 8023772:	2001      	movs	r0, #1
 8023774:	e7e7      	b.n	8023746 <_raise_r+0x12>
 8023776:	2400      	movs	r4, #0
 8023778:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802377c:	4628      	mov	r0, r5
 802377e:	4798      	blx	r3
 8023780:	2000      	movs	r0, #0
 8023782:	e7e0      	b.n	8023746 <_raise_r+0x12>

08023784 <raise>:
 8023784:	4b02      	ldr	r3, [pc, #8]	; (8023790 <raise+0xc>)
 8023786:	4601      	mov	r1, r0
 8023788:	6818      	ldr	r0, [r3, #0]
 802378a:	f7ff bfd3 	b.w	8023734 <_raise_r>
 802378e:	bf00      	nop
 8023790:	20000140 	.word	0x20000140

08023794 <_kill_r>:
 8023794:	b538      	push	{r3, r4, r5, lr}
 8023796:	4d07      	ldr	r5, [pc, #28]	; (80237b4 <_kill_r+0x20>)
 8023798:	2300      	movs	r3, #0
 802379a:	4604      	mov	r4, r0
 802379c:	4608      	mov	r0, r1
 802379e:	4611      	mov	r1, r2
 80237a0:	602b      	str	r3, [r5, #0]
 80237a2:	f7f0 ff37 	bl	8014614 <_kill>
 80237a6:	1c43      	adds	r3, r0, #1
 80237a8:	d102      	bne.n	80237b0 <_kill_r+0x1c>
 80237aa:	682b      	ldr	r3, [r5, #0]
 80237ac:	b103      	cbz	r3, 80237b0 <_kill_r+0x1c>
 80237ae:	6023      	str	r3, [r4, #0]
 80237b0:	bd38      	pop	{r3, r4, r5, pc}
 80237b2:	bf00      	nop
 80237b4:	20014314 	.word	0x20014314

080237b8 <_getpid_r>:
 80237b8:	f7f0 bf24 	b.w	8014604 <_getpid>

080237bc <_malloc_usable_size_r>:
 80237bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80237c0:	1f18      	subs	r0, r3, #4
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	bfbc      	itt	lt
 80237c6:	580b      	ldrlt	r3, [r1, r0]
 80237c8:	18c0      	addlt	r0, r0, r3
 80237ca:	4770      	bx	lr

080237cc <_init>:
 80237cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237ce:	bf00      	nop
 80237d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237d2:	bc08      	pop	{r3}
 80237d4:	469e      	mov	lr, r3
 80237d6:	4770      	bx	lr

080237d8 <_fini>:
 80237d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237da:	bf00      	nop
 80237dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237de:	bc08      	pop	{r3}
 80237e0:	469e      	mov	lr, r3
 80237e2:	4770      	bx	lr
